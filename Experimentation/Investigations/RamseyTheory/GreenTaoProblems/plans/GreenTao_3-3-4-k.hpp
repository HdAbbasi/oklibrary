// Oliver Kullmann, 23.5.2009 (Swansea)
/* Copyright 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file Experimentation/Investigations/RamseyTheory/GreenTaoProblems/plans/GreenTao_3-3-4-k.hpp
  \brief On investigations into Green-Tao numbers greentao_3(3,4,k)

  Problems are generated by output_greentao_stdname([3,4,k],n) at Maxima-level,
  and by "GTSat 3 4 k n" at C++ level.
  

  \todo greentao_3(3,4,4) > 1544
  <ul>
   <li> Creating problems via output_greentao_stdname([3,4,4],n). </li>
   <li> n=500 trivially satisfiable (adaptnovelty+). </li>
   <li> n=600 trivially satisfiable. </li>
   <li> n=700 trivially satisfiable. </li>
   <li> n=900 trivially satisfiable. </li>
   <li> n=1000 trivially satisfiable. </li>
   <li> n=1100 still easy to solve (cutoff=100*10^3). </li>
   <li> n=1200 still easy to solve (cutoff=10^6). </li>
   <li> n=1300 rather easy to solve (cutoff=10^6). </li>
   <li> n=1400: one solution in 10 runs with cutoff=10^6. </li>
   <li> n=1500: only min=3 for 10 runs with cutoff=10*10^6; cutoff=100*10^6
   found a solution in the third run (osteps=39412430, seed=1928236138). </li>
   <li> n=1512: one run in 10 with cutoff=100*10^6 found a solution
   (osteps=37551993, seed=4046775428). While another 100 runs with this
   cutoff actually found no solution. </li>
   <li> n=1518
    <ol>
     <li> 9 runs with cutoff=100*10^6 yield only a minimum of 2. </li>
     <li> cutoff=500*10^6: run 18 found a solution (osteps=309459026,
     seed=3122222825). </li>
    </ol>
   </li>
   <li> n=1525
    <ol>
     <li> 10 runs with cutoff=100*10^6 yield only min=2. </li>
     <li> cutoff=500*10^6: run 16 yields a solution (msteps=375313903,
     seed=2274305602). </li>
    </ol>
   </li>
   <li> n=1531: cutoff=5*10^8 yields a solution (seed=1692755539) in
   run 12. </li>
   <li> n=1532
    <ol>
     <li> cutoff=5*10^8 yields in 10 runs only once min=1. </li>
     <li> cutoff=10^9 yields in run 15 a solution (seed=1453937791). </li>
    </ol>
   </li>
   <li> n=1534
    <ol>
     <li> cutoff=5*10^8 yields in 23 runs only 4 times min=1. </li>
     <li> cutoff=10^9 yields in run 6 a solution (seed=1913394293). </li>
    </ol>
   </li>
   <li> n=1535
    <ol>
     <li> cutoff=10^9 yields in 9 runs only min=2. </li>
     <li> cutoff=2*10^9 yields in run 18 a solution (seed=238771004,
     osteps=47373687). </li>
    </ol>
   </li>
   <li> n=1537
    <ol>
     <li> 16 runs with cutoff=5*10^8 only yield min=1 twice. </li>
     <li> cutoff=10^9 yields in 12 runs min=1 twice, so a cutoff of
     2*10^9 would be needed. </li>
     <li> cutoff=10^8, 1000 runs: In run 213 a solution was found
     (seed=2884500780, osteps=42486702). </li>
    </ol>
   </li>
   <li> n=1538
    <ol>
     <li> cutoff=10^9: 2 solutions found with 214 runs (seed=1006777768,
     osteps=507922529). </li>
    </ol>
   </li>
   <li> n=1539
    <ol>
     <li> cutoff=10^9: one solution found in 34 runs (seed=2866671762,
     osteps=167931793). </li>
    </ol>
   </li>
   <li> n=1540: cutoff=10^9 found two solutions in 164 runs (seed=163883519,
   osteps=337015990). </li>
   <li> n=1541
    <ol>
     <li> cutoff=10^9 (adaptnovelty+):
     \verbatim
> E = read_ubcsat("GreenTao_3-3-4-4_1541.cnf_OUT")
 1  2  3  5
 2 13  1  1
17
> summary(E$osteps)
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max.
204200000 287600000 469700000 496300000 700700000 900400000
     \endverbatim
     </li>
     <li> Further 51 runs found one solution (seed=1306721667,
     osteps=428867613). </li>
    </ol>
   </li>
   <li> n=1542: cutoff=10^9 (adaptnovelty+): one solution found in 148
   runs (seed=1219495006, osteps=466488791). </li>
   <li> n=1543: cutoff=10^9: in 474 runs one solution was found
   (seed=2142163637, osteps=918202991). It seems we need to double the
   cutoff. </li>
   <li> n=1544: cutoff=2*10^9
   \verbatim
  1   2   3
 41 137   6
184
  0   1   2   3   4
  1  63 261  22   1
348
   \endverbatim
   (seed=2955200386, osteps=664563809). </li>
   <li> n=1545: cutoff=2*10^9 </li>
   <li> n=1550
    <ol>
     <li> Looks (at first sight) unsatisfiable: 10 runs with
     cutoff=10^8 yield min=3 (twice; so cutoff=10^9 would be needed). </li>
     <li> cutoff=5*10^8: 13 runs only yield min=2, so a cutoff of 2.5*10^9
     would be needed. </li>
     <li> cutoff=10^8, 1000 runs yields
     \verbatim
> E = read_ubcsat("GreenTao_3-3-4-4_1550.cnf_OUT")
  1   2   3   4   5   6   7   8   9
  1  17  75 123 166 241 232 133  12
1000
     \endverbatim
     so perhaps 100 * 1000 runs would be needed to find a solution. </li>
     <li> cutoff = 10^9 yields
     \verbatim
 1  2  3  4  5  6
 5 46 35  6  6  2
100
     \endverbatim
     </li>
    </ol>
   </li>
  </ul>


  \todo greentao_3(3,4,5) > 7600
  <ul>
   <li> n=1000 trivial for adaptnovelty+. </li>
   <li> n=2000 trivial for adaptnovelty+ (70% success with cutoff=10^4). </li>
   <li> n=2200 trivial for adaptnovelty+ (70% success with cutoff=10^4). </li>
   <li> n=3000 trivial for adaptnovelty+ (90% success with cutoff=10^5). </li>
   <li> n=4000 simple for adaptnovelty+ (100% success with cutoff=10^6). </li>
   <li> n=5000 simple for adaptnovelty+ (40% success with cutoff=10^6). </li>
   <li> n=6000 simple for adaptnovelty+ (100% success with cutoff=10^7). </li>
   <li> n=7000
    <ol>
     <li> cutoff=10^7 yields min=4 in 10 runs. </li>
     <li> cutoff=10^8: 100% success. </li>
    </ol>
   </li>
   <li> n=7250: cutoff=10^8 found a solution in run 2 (seed=2722596453,
   osteps=65636246). </li>
   <li> n=7375: cutoff=10^8 found one solution in 20 runs (seed=161549167,
   osteps=73817861). </li>
   <li> n=7438: cutoff=10^8 found two solutions in 77 runs (seed=3688103311,
   osteps=67497802). </li>
   <li> n=7479: cutoff=10^8 finds a solution (seed=1752281516,
   osteps=79570476). </li>
   <li> n=7490:  cutoff=10^8 finds one solution in 40 runs (seed=1381313198,
   osteps=32116058). </li>
   <li> n=7500:
    <ol>
     <li> cutoff=10^8:
     \verbatim
> ubcsat-okl -alg adaptnovelty+ -runs 100 -cutoff 100000000 -i GreenTao_3-3-4-5_7500.cnf | tee GreenTao_3-3-4-5_7500.cnf_OUT
> E=read_ubcsat("GreenTao_3-3-4-5_7500.cnf_OUT")
 2  4  5  7  8  9 10 12 13 14 16 18 19
 1  5  3  2  3  1  1  1  1  1  2  1  2
24
> summary(E$osteps)
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.
20480000 65180000 73430000 70900000 84870000 98250000
     \endverbatim
     </li>
     <li> In further 110 runs one solution was found (seed=173131959,
     cutoff=85955523). </li>
     <li> Let's increase the cutoff to 2*10^8. </li>
    </ol>
   </li>
   <li> n=7600, cutoff=2*10^8 (adaptnovelty+): in 249 runs one solution was
   found (seed=3054809508, osteps=165824921). It seems one should double
   the cutoff. </li>
   <li> n=7650, cutoff=4*10^8 </li>
   <li> n=7700, cutoff=4*10^8 (adaptnovelty+):
   \verbatim
 3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 21
 1  1  2  3  6  5  4  9 12 12 13 10  3  5  5  7  1  1
100
 5  6  7  8  9 10 11 12 13 14 15 16 17 19
 1  3  4  8  9 12 10 10 10 14  4  9  5  1
100
   \endverbatim
   </li>
   <li> n=8000
    <ol>
     <li> cutoff=10^8:
     \verbatim
> ubcsat-okl -alg adaptnovelty+ -runs 100 -cutoff 100000000 -i GreenTao_3-3-4-5_8000.cnf | tee GreenTao_3-3-4-5_8000.cnf_OUT
> E=read_ubcsat("GreenTao_3-3-4-5_8000.cnf_OUT")
24 26 27 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 51 53
 1  3  1  1  3  5  3  1  5  2  4  4  1  4  1  5  3  5  2  2  3  5  1  4  2  1
58
 1
73
> summary(E$osteps)
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.
15540000 37710000 68590000 64060000 84820000 99420000
     \endverbatim
     looks unsatisfiable (although one might try cutoff=2*10^8). </li>
     </li>
    </ol>
   </li>
  </ul>
  
*/

