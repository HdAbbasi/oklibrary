// Oliver Kullmann, 15.8.2009 (Swansea)
/* Copyright 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file Experimentation/Investigations/RamseyTheory/GreenTaoProblems/plans/GreenTao_3-3.hpp
  \brief Investigations on greentao_3(3) = 137

  Generated by output_greentaod_stdname(3,3,n) or
  output_greentaod_sb_stdname(3,3,n).


  \todo greentao_3(3,3,3) = 137
  <ul>
   <li> DONE (available now)
   Symmetry breaking:
    <ol>
     <li> The only available symmetry since the symmetry between the
     partitions, i.e., one vertex can be put into the first partition. </li>
     <li> For vdW-problems it seems that the middle vertices are best used
     here (they have also the highest degrees); but here we should consider
     the vertex degrees. </li>
     <li> The variable of maximal degree is prime number 3. </li>
     <li> So perhaps we should always use this for symmetry breaking. </li>
    </ol>
   </li>
   <li> n=100 easily satisfiable by OKsolver_2002. </li>
   <li> n=125 easily found satisfiable by adaptnovelty+. </li>
   <li> n=132 easily found satisfiable by adaptnovelty+. </li>
   <li> n=135 easily found satisfiable by adaptnovelty+. </li>
   <li> n=136 easily found satisfiable by adaptnovelty+. </li>
   <li> n=137
    <ol>
     <ol> adaptnovelty+ with runs=1000 and cutoff=10^6 yields
     \verbatim
Clauses = 3614
Variables = 411
TotalLiterals = 10431
FlipsPerSecond = 1189726
BestStep_Mean = 162376.034000
Steps_Mean = 1000000.000000
Steps_Max = 1000000.000000
PercentSuccess = 0.00
BestSolution_Mean = 1.000000
BestSolution_Median = 1.000000
BestSolution_Min = 1.000000
BestSolution_Max = 1.000000
     \endverbatim
     </li>
     <li> OKsolver_2002
      <ol>
       <li> Seems doable, in, say 1-2 days; one should also
       try it with the minisat2-preprocessor: seems quite a bit improved
       (also finding single nodes and autarkies). Still perhaps a few hours;
       perhaps by using symmetry breaking one gets it really down. </li>
       <li> Without symmetry breaking and without preprocessing:

       </li>
       <li> Without symmetry breaking and with preprocessing:
       \verbatim
> OKsolver_2002-m2pp -D10 -M -F GreenTao_3-3-3-3_137.cnf
s UNSATISFIABLE
c sat_status=0 initial_maximal_clause_length=6 initial_number_of_variables=272 initial_number_of_clauses=3202 initial_number_of_literal_occurrences=12536 running_time(s)=6105.7 number_of_nodes=9573917 number_of_single_nodes=64902 number_of_quasi_single_nodes=0 number_of_2-reductions=63127589 number_of_pure_literals=22228 number_of_autarkies=12674 number_of_missed_single_nodes=88075 max_tree_depth=52 number_of_table_enlargements=0 reduced_maximal_clause_length=0 reduced_number_of_variables=0 reduced_number_of_clauses=0reduced_number_of_literal_occurrences=0 number_of_1-autarkies=227225 number_of_initial_unit-eliminations=0 number_of_new_2-clauses=0 maximal_number_of_added_2-clauses=0 initial_number_of_2-clauses=136 file_name=GreenTao_3-3-3-3_137.cnf_m2pp_4279
       \endverbatim
       </li>
       <li> With symmetry breaking and without preprocessing:

       </li>
       <li> With symmetry breaking and with preprocessing:

       </li>
       <li> The above "symmetry breaking" is "simple symmetry breaking",
       which should be the right form since we have k=3 here throughout. </li>
      </ol>
     </li>
     <li> march_pl: (letting it run for up to 2 weeks, if necessary) </li>
     <li> satz215 </li>
     <li> minisat2:
      <ol>
       <li> Determines unsatisfiability with 2257091 conflicts (24 restarts)
       in less than 2 minutes. </li>
       <li> Using symmetry breaking, actually 2686891 conflicts are needed;
       let's assume that this is a random effect. </li>
       <li> Without preprocessing: 2748900 (24 restarts, a bit more than 2
       minutes); so for minisat2 the preprocessing doesn't make a big
       difference. </li>
      </ol>
     </li>
     <li> picosat913 is not as fast as minisat2: 6 1/2 minutes, 10000685
     conflicts. </li>
     <li> precosat236 is a bit slower than minisat2: nearly 2 1/2 minutes,
     1226906 conflicts. </li>
    </ol>
   </li>
   <li> n=138
    <ol>
     <li> adaptnovelty+ yields (nearly) constantly minimum=1 with
     cutoff=10^6. </li>
    </ol>
   </li>
   <li> n=150
    <ol>
     <li> minisat2 seems not to make progress. </li>
     <li> OKsolver_2002: perhaps doable, but likely not easy. </li>
     <li> From the ubcsat-1.0.0-suite seems adaptnovelty+ to be best. </li>
     <li> cutoff=10*10^6 yields minimum=1; with 10 runs and with 100 runs.
     </li>
    </ol>
   </li>
   <li> n=200
    <ol>
     <li> adaptnovelty+ doesn't seem to achieve better than a minimum=10. </li>
    </ol>
   </li>
  </ul>


  \todo Why is minisat2 so much faster than OKsolver_2002 ?
  <ul>
   <li> The four possible reasons seem to be:
    <ul>
     <li> (i) preprocessing </li>
     <li> (ii) full resolution versus tree-resolution </li>
     <li> (iii) finding an easy small sub-problem </li>
     <li> (iv) faster processing (this doesn't seem to play an important role
     here, since minisat2 needs much less nodes than OKsolver_2002). </li>
    </ul>
   </li>
   <li> (i) can be examined by using minisat2's preprocessing for the
   OKsolver_2002, as well as for the other lookahead-solver, and also running
   minisat2 without preprocessing.
    <ol>
     <li> It helps the conflict-driven solvers a bit, but not so much (at least
     in this case). </li>
     <li> So there is something else they are doing well here. </li>
     <li> It seems that look-ahead solvers are much more helped by
     preprocessing here (at least the OKsolver_2002); however still the number
     of nodes is one magnitude bigger compared with the conflict-driven
     solvers. </li>
    </ol>
   </li>
   <li> For (ii) one needed to inspect the resolution refutation produced by
   minisat2. </li>
   <li> Easier to look at (iii), where we only need to see whether the clauses
   used as axioms for the resolution refutation can be easily refuted by
   OKsolver_2002. </li>
  </ul>

*/
