#!/bin/bash
# Oliver Kullmann, 10.3.2011 (Swansea)
# Copyright 2011 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute 
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the 
# License, or any later version.

# "RunPdVdWk1k2 k1 k2 alg runs cutoff" creates a directory
# "Exp_PdVanderWaerden_2-k1-k2_alg-runs-cutoff_date", where the SAT instances
# VanDerWaerden_pd_2-k1-k2_n.cnf for n = k2, k2+1, ... are created
# and ubcsat-okl with parameters alg, runs, cutoff is executed on
# these instances, storing the output in VanDerWaerden_pd_2-k1-k2_n.cnf_OUT.
# If a solution was found, then it is stored in
# VanDerWaerden_pd_2-k1-k2_n.cnf_sol.

# A solution found for n-2 is used as the initial ubcsat-assignment for n.
# Once the first phase is finished, that is, the first unsatisfiable
# instance was found (that is, heuristically determined as unsat),
# the second phase is entered, where in steps of +2 the search advances
# to the next potentially satisfiable instance, skipping the unsatisfiable
# instance in-between. The third phase is entered once the second unsatisfiable
# instance is found in this way.
# The results are two n-values n1, n2: n1 is maximal such that for all n <= n1
# the instances are satisfiable, while n2 is minimal such that for all n >= n2
# the instances are unsatisfiable (always heuristically).

# The parameters of the script can be found in file "Parameters" within the
# experiment-directory, and the (final) results are in file "Results".
# And in file "Statistics" for the successful runs one finds lines with
# - n
# - runs needed
# - osteps of final (successful) run
# - seed
# - "p" for previous or "r" for random initial assignment.
# Logging information is provided in file "Log", and in "Environment"
# information about the computational environment can be found.

set -o errexit
set -o nounset

script_name="RunPdVdWk1k2"
version_number="0.2.6"

if [[ $# != 5 ]]; then
  echo "ERROR[${script_name}]: Five parameters k1, k2, alg, runs, cutoff
  are needed: The progression-lengths k1,k2, the ubcsat-algorithm,
  the number of runs, and the cutoff."
  exit 1
fi

k1=$1
k2=$2
alg=$3
runs=$4
cutoff=$5

if [[ ${k1} -gt ${k2} ]]; then
  echo "ERROR[${script_name}]: k1 <= k2 must hold."
  exit 1
fi

repeats_prevassign=3

timestamp=$(date +"%Y-%m-%d-%H%M%S")

algabbrev=$(echo ${alg} | tr -d " ")
ExpDir="Exp_PdVanderWaerden_2-${k1}-${k2}_${algabbrev}-${runs}-${cutoff}_${timestamp}"
echo -e "Running \"${script_name}\" in version ${version_number}."
echo -e "Creating directory ${ExpDir}.\n"
mkdir ${ExpDir}
cd ${ExpDir}

log_file=Log
environment_file=Environment
parameter_file=Parameters
result_file=Results
statistics_file=Statistics

echo -n "Begin: " > ${log_file}
date >> ${log_file}
echo "Process id = $$" >> ${log_file}

uname -a > ${environment_file}
echo >> ${environment_file}
cat /proc/cpuinfo >> ${environment_file}
echo >> ${environment_file}
free -m >> ${environment_file}

echo "${script_name}, version ${version_number}." > ${parameter_file}
echo -e "Parameters:\n k1=${k1}\n k2=${k2}\n alg=${alg}\n runs=${runs}\n cutoff=${cutoff}\n" >> ${parameter_file}
echo "Call:" >> ${parameter_file}
echo " ${script_name} ${k1} ${k2} \"${alg}\" ${runs} ${cutoff}" >> ${parameter_file}

printf "%7s %5s %10s %10s %2s\n" n run osteps seed type > ${statistics_file}

generator="PdVanderWaerdenCNF-O3-DNDEBUG"
shifter="SolutionShift-O3-DNDEBUG"

phase=1 
# first phase is "all sat", second phase is "alternating", third phase is "all unsat"

for ((n=k2; n<=k2+1; ++n)); do
  SATinstance="VanDerWaerden_pd_2-${k1}-${k2}_${n}.cnf"
  ${generator} ${k1} ${k2} ${n}
  Output="${SATinstance}_OUT"
  Solution="${SATinstance}_sol"
  parameter_line="-alg ${alg} -runs ${runs} -cutoff ${cutoff} -i ${SATinstance} -solve"
  ubcsat-okl ${parameter_line} | tee ${Output}
  cat ${Output} | extract_solution_ubcsat > ${Solution}
done

n0=${k2}

for ((n=k2+2; phase<=2; ++n, ++n0)); do

  initial_assignment_orig="VanDerWaerden_pd_2-${k1}-${k2}_${n0}.cnf_sol"
  initial_assignment="${initial_assignment_orig}_shifted"
  cat ${initial_assignment_orig} | ${shifter} > ${initial_assignment}

  SATinstance="VanDerWaerden_pd_2-${k1}-${k2}_${n}.cnf"
  # Creating the Dimacs-file:
  ${generator} ${k1} ${k2} ${n}

  Output="${SATinstance}_OUT"
  Solution="${SATinstance}_sol"

  # Using the assignment two steps before as initial assignment:
  previous_solution=p # for "previous"
  Output_init="${Output}_init"
  parameter_line="-alg ${alg} -runs ${repeats_prevassign} -cutoff ${cutoff} -i ${SATinstance} -solve -varinitfile ${initial_assignment}"
  ubcsat-okl ${parameter_line} | tee ${Output_init}
  # Finding out whether a satisfying assignment was found (searching for
  # the line "PercentSuccess = x" and determining whether x > 0):
  success=$(awk "/^PercentSuccess = .*/ {if (\$3 > 0) print 1; else print 0;}" ${Output_init})
  if [[ ${success} == 1 ]]; then
    Output=${Output_init}
  fi

  # Using random initial assignments:
  if [[ ${success} != 1 ]]; then
    previous_solution=r # for "random"
    parameter_line="-alg ${alg} -runs ${runs} -cutoff ${cutoff} -i ${SATinstance} -solve"
    ubcsat-okl ${parameter_line} | tee ${Output}
    # Finding out whether a satisfying assignment was found:
    success=$(awk "/^PercentSuccess = .*/ {if (\$3 > 0) print 1; else print 0;}" ${Output})
  fi

  if [[ ${success} == 1 ]]; then

    # Extracting the solution
    cat ${Output} | extract_solution_ubcsat > ${Solution}

    # Printing the solution
    solution_parameters=$(awk '/^  +[0-9]+ 1/ {\
      print $1, $4, $5, $6}' ${Output})
    par_run=$(echo ${solution_parameters} | cut -d " " -f 1)
    par_osteps=$(echo ${solution_parameters} | cut -d " " -f 2)
    par_msteps=$(echo ${solution_parameters} | cut -d " " -f 3)
    par_seed=$(echo ${solution_parameters} | cut -d " " -f 4)
    echo "Solution ubcsat-parameters are:"
    echo " run= ${par_run} osteps= ${par_osteps} msteps= ${par_msteps} seed= ${par_seed}"
    printf "%7u %5u %10u %10s %2s\n" ${n} ${par_run} ${par_osteps} ${par_seed} ${previous_solution} >> ${statistics_file}
    echo "Certificate (the vertices for k=${k1}) for n = ${n} : "
    ExtractCertificate_vdW2 ${Output}
    if [[ ${phase} == 2 ]]; then
      let n+=1
      let n0+=1
    fi

  else
    echo "Break point ${phase}: $((n-1))" >> ${result_file}
    echo "UNSAT for n=${n}"
    let phase+=1
  fi
  echo

done

echo "Final result:"
cat ${result_file}

ps p $$ k time S >> ${log_file}
echo -n "Completed: " >> ${log_file}
date >> ${log_file}

exit 0
