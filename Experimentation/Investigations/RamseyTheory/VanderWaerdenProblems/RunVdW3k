#!/bin/bash
# Oliver Kullmann, 10.10.2010 (Swansea)
# Copyright 2010 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute 
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the 
# License, or any later version.

# "RunVdW3k k n0 alg runs cutoff" creates a directory
# "Exp_VanderWaerden_2-3-k_date_n0_alg-runs-cutoff", where the SAT instances
# VanDerWaerden_2-3-k_n.cnf for n = n_0, n_0+1, ... are created
# and ubcsat-okl with parameters alg, runs, cutoff is executed on
# these instances, storing the output in VanDerWaerden_2-3-k_n.cnf_OUT.
# If a solution was found, then it is stored in VanDerWaerden_2-3-k_n.cnf_sol.
# The solution found for n-1 is used as the initial assignment (for ubcsat)
# for n; for n=n0 either a random assignment is used as initial assignment, or
# it is provided in a file given as an optional sixth parameter (in the
# ubcsat-format, that is, as a space-symbol separated list of literals which
# are assigned to true).
# Running ubcsat stops either with a solution found, and then n is increased
# and the process is repeated, or when no solution was found, and then the
# script stops with exit value 20.
# The parameters of the script can be found in file "Parameters" within the
# experiment-directory.

set -o errexit
set -o nounset

script_name="RunVdW3k"
version_number="0.3.4"

if [[ $# != 5 && $# != 6 ]]; then
  echo "ERROR[${script_name}]: Five parameters k, n0, alg, runs, cutoff
  are needed: The progression-length k, the starting number n0 of vertices,
  the ubcsat-algorithm, the number of runs, and the cutoff.
  An optional sixth parameter is a path for the file containing an
  initial assignment for the first ubcsat-run."
  exit 1
fi

k=$1
n0=$2
alg=$3
runs=$4
cutoff=$5

if [[ $# == 5 ]]; then
  initial_assignment=0
else
  initial_assignment=$6
fi

repeats_prevassign=3

if [[ ${initial_assignment} != 0 ]]; then
  if [[ !(-f ${initial_assignment}) ]]; then
    echo -e "ERROR[${script_name}]: The file specified for the initial assignment is not valid:
    \"${initial_assignment}\""
    exit 1
  else
    initial_assignment="../"${initial_assignment}
  fi
fi

timestamp=$(date +"%Y-%m-%d-%H%M%S")

ExpDir="Exp_VanderWaerden_2-3-${k}_${timestamp}_${n0}_${alg}-${runs}-${cutoff}"
echo -e "Running \"${script_name}\" in version ${version_number}."
echo -e "Creating directory ${ExpDir}.\n"
mkdir ${ExpDir}
cd ${ExpDir}

echo -e "${script_name}:\n k=${k}\n n0=${n0}\n alg=${alg}\n runs=${runs}\n cutoff=${cutoff}\n initial assignment=${initial_assignment}" > Parameters

generator="VanderWaerden-O3-DNDEBUG"

for ((n=${n0}; 1; ++n)); do

  SATinstance="VanDerWaerden_2-3-${k}_${n}.cnf"
  # Creating the Dimacs-file:
  ${generator} 3 ${k} ${n} > ${SATinstance}

  Output="${SATinstance}_OUT"
  Solution="${SATinstance}_sol"

  success="unknown"

  # Using the previous assignment as initial assignment:
  if [[ ${initial_assignment} != 0 ]]; then
    Output_init="${Output}_init"
    parameter_line="-alg ${alg} -runs ${repeats_prevassign} -cutoff ${cutoff} -i ${SATinstance} -solve -varinit ${initial_assignment}"
    ubcsat-okl ${parameter_line} | tee ${Output_init}
    # Finding out whether a satisfying assignment was found (searching for
    # the line "PercentSuccess = x" and determining whether x > 0):
    success=$(awk "/^PercentSuccess = .*/ {if (\$3 > 0) print 1; else print 0;}" ${Output_init})
    if [[ ${success} == 1 ]]; then
      Output=${Output_init}
    fi
  fi

  # Using random initial assignments:
  if [[ ${success} != 1 ]]; then
    parameter_line="-alg ${alg} -runs ${runs} -cutoff ${cutoff} -i ${SATinstance} -solve"
    ubcsat-okl ${parameter_line} | tee ${Output}
    # Finding out whether a satisfying assignment was found:
    success=$(awk "/^PercentSuccess = .*/ {if (\$3 > 0) print 1; else print 0;}" ${Output})
    if [[ ${success} == 0 ]]; then exit 20; fi
  fi

  # Extracting the solution
  cat ${Output} | extract_solution_ubcsat > ${Solution}
  initial_assignment=${Solution}

  # Printing the solution
  echo "Solution ubcsat-parameters are:"
  awk '/^  +[0-9]+ 1/ {\
    print " run=",$1, "osteps=",$4, "msteps=",$5, "seed=",$6}' ${Output}
  echo "Certificate (the vertices for k=3) for n = ${n} : "
  ExtractCertificate_vdW2 ${Output}
  echo

done

exit 1

