#!/bin/bash
# Oliver Kullmann, 23.3.2011 (Swansea)
# Copyright 2011 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute 
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the 
# License, or any later version.

# "RunVdWk1k2 k n0 alg runs cutoff" creates a directory
# "Exp_VanderWaerden_2-k1-k2_n0_alg-runs-cutoff_date", where the SAT instances
# VanDerWaerden_2-k1-k2_n.cnf for n = n_0, n_0+1, ... are created
# and ubcsat-okl with parameters alg, runs, cutoff is executed on
# these instances, storing the output in VanDerWaerden_2-k1-k2_n.cnf_OUT.
# If a solution was found, then it is stored in
# VanDerWaerden_2-k1-k2_n.cnf_sol.
# The solution found for n-1 is used as the initial assignment (for ubcsat)
# for n; for n=n0 either a random assignment is used as initial assignment, or
# it is provided in a file given as an optional sixth parameter (in the
# ubcsat-format, that is, as a space-symbol separated list of literals which
# are assigned to true).
# Running ubcsat stops either with a solution found, and then n is increased
# and the process is repeated, or when no solution was found, and then the
# script stops with exit value 20.
# The parameters of the script can be found in file "Parameters" within the
# experiment-directory.
# And in file "Statistics" for the successful runs one finds lines with
# - n
# - runs needed
# - osteps of final (successful) run
# - seed
# - "p" for previous or "r" for random initial assignment.

set -o errexit
set -o nounset

script_name="RunVdWk1k2"
version_number="0.3.3"

if [[ $# != 6 && $# != 7 ]]; then
  echo "ERROR[${script_name}]: Six parameters k1, k2, n0, alg, runs, cutoff
  are needed: The progression-lengths k1,k2, the starting number n0 of
  vertices, the ubcsat-algorithm, the number of runs, and the cutoff.
  An optional seventh parameter is a path for the file containing an
  initial assignment for the first ubcsat-run."
  echo "However, $# parameters were used."
  exit 1
fi

k1=$1
k2=$2
n0=$3
alg=$4
runs=$5
cutoff=$6

if [[ ${k1} -gt ${k2} ]]; then
  echo "ERROR[${script_name}]: k1 <= k2 must hold."
  exit 1
fi

if [[ $# == 6 ]]; then
  initial_assignment=0
else
  initial_assignment=$7
fi

repeats_prevassign=3

if [[ ${initial_assignment} != 0 ]]; then
  if [[ !(-f ${initial_assignment}) ]]; then
    echo -e "ERROR[${script_name}]: The file specified for the initial assignment is not valid:
    \"${initial_assignment}\""
    exit 1
  else
    initial_assignment="../"${initial_assignment}
  fi
fi

timestamp=$(date +"%Y-%m-%d-%H%M%S")

algabbrev=$(echo ${alg} | tr -d " ")
ExpDir="Exp_VanderWaerden_2-${k1}-${k2}_${n0}_${algabbrev}-${runs}-${cutoff}_${timestamp}"
echo -e "Running \"${script_name}\" in version ${version_number}."
echo -e "Creating directory ${ExpDir}.\n"
mkdir ${ExpDir}
cd ${ExpDir}

log_file=Log
parameter_file=Parameters
result_file=Results
statistics_file=Statistics

echo -n "Begin: " > ${log_file}
date >> ${log_file}
echo "Process id = $$" >> ${log_file}

echo "${script_name}, version ${version_number}." > ${parameter_file}
echo -e "Parameters:\n k1=${k1}\n k2=${k2}\n n0=${n0}\n alg=${alg}\n runs=${runs}\n cutoff=${cutoff}\n initial assignment=${initial_assignment}\n" >> ${parameter_file}
echo "Call:" >> ${parameter_file}
echo -n " ${script_name} ${k1} ${k2} ${n0} \"${alg}\" ${runs} ${cutoff}" >> ${parameter_file}
if [[ ${initial_assignment} != 0 ]]; then
  echo -n " \"$7\"" >> ${parameter_file}
fi
echo >> ${parameter_file}

printf "%7s %5s %10s %10s %2s\n" n run osteps seed type > ${statistics_file}

generator="VanderWaerdenCNF-O3-DNDEBUG"

for ((n=n0; 1; ++n)); do

  SATinstance="VanDerWaerden_2-${k1}-${k2}_${n}.cnf"
  # Creating the Dimacs-file:
  ${generator} ${k1} ${k2} ${n}

  Output="${SATinstance}_OUT"
  Solution="${SATinstance}_sol"

  success="unknown"

  # Using the previous assignment as initial assignment:
  previous_solution=p # for "previous"
  if [[ ${initial_assignment} != 0 ]]; then
    Output_init="${Output}_init"
    parameter_line="-alg ${alg} -runs ${repeats_prevassign} -cutoff ${cutoff} -i ${SATinstance} -solve -varinitfile ${initial_assignment}"
    ubcsat-okl ${parameter_line} | tee ${Output_init}
    # Finding out whether a satisfying assignment was found (searching for
    # the line "PercentSuccess = x" and determining whether x > 0):
    success=$(awk "/^PercentSuccess = .*/ {if (\$3 > 0) print 1; else print 0;}" ${Output_init})
    if [[ ${success} == 1 ]]; then
      Output=${Output_init}
    fi
  fi

  # Using random initial assignments:
  if [[ ${success} != 1 ]]; then
    previous_solution=r # for "random"
    parameter_line="-alg ${alg} -runs ${runs} -cutoff ${cutoff} -i ${SATinstance} -solve"
    ubcsat-okl ${parameter_line} | tee ${Output}
    # Finding out whether a satisfying assignment was found:
    success=$(awk "/^PercentSuccess = .*/ {if (\$3 > 0) print 1; else print 0;}" ${Output})
    if [[ ${success} == 0 ]]; then
      echo "Break point: ${n}" >> ${result_file}
      echo "UNSAT for n=${n}"
      ps p $$ k time S >> ${log_file}
      echo -n "Completed: " >> ${log_file}
      date >> ${log_file}
      exit 20
    fi
  fi

  # Extracting the solution
  cat ${Output} | extract_solution_ubcsat > ${Solution}
  initial_assignment=${Solution}

  # Printing the solution
  solution_parameters=$(awk '/^  +[0-9]+ 1/ {\
    print $1, $4, $5, $6}' ${Output})
  par_run=$(echo ${solution_parameters} | cut -d " " -f 1)
  par_osteps=$(echo ${solution_parameters} | cut -d " " -f 2)
  par_msteps=$(echo ${solution_parameters} | cut -d " " -f 3)
  par_seed=$(echo ${solution_parameters} | cut -d " " -f 4)
  echo "Solution ubcsat-parameters are:"
  echo " run= ${par_run} osteps= ${par_osteps} msteps= ${par_msteps} seed= ${par_seed}"
  printf "%7u %5u %10u %10s %2s\n" ${n} ${par_run} ${par_osteps} ${par_seed} ${previous_solution} >> ${statistics_file}
  echo "Certificate (the vertices for k=${k1}) for n = ${n} : "
  ExtractCertificate_vdW2 ${Output}
  echo

done

exit 1
