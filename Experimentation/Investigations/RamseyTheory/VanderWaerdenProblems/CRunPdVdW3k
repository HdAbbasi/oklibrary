#!/bin/bash
# Oliver Kullmann, 30.1.2011 (Swansea)
# Copyright 2011 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute 
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the 
# License, or any later version.

# "CRunPdVdW3k k solver" creates a directory
# "Exp_PdVanderWaerdenC_2-3-k_solver_date", where the SAT instances
# VanDerWaerden_pd_2-3-k_n.cnf for n = k, k+1, ... are created
# and solver is executed on these instances, storing the output in 
# VanDerWaerden_pd_2-3-k_n.cnf_OUT.

# The results are two n-values n1, n2: n1 is maximal such that for all n <= n1
# the instances are satisfiable, while n2 is minimal such that for all n >= n2
# the instances are unsatisfiable.

# The parameters of the script can be found in file "Parameters" within the
# experiment-directory, and the results are in file "Results".

set -o errexit
set -o nounset

script_name="CRunPdVdW3k"
version_number="0.1"

if [[ $# != 2 ]]; then
  echo "ERROR[${script_name}]: Two parameters k, solver, are needed:
  The progression-length k and the SAT solver."
  exit 1
fi

k=$1
solver=$2

timestamp=$(date +"%Y-%m-%d-%H%M%S")

ExpDir="Exp_PdVanderWaerdenC_2-3-${k}_${solver}_${timestamp}"
echo -e "Running \"${script_name}\" in version ${version_number}."
echo -e "Creating directory ${ExpDir}.\n"
mkdir ${ExpDir}
cd ${ExpDir}

result_file=Results

echo -e "${script_name}:\n k=${k}\n solver=${solver}\n" > Parameters

generator="PdVanderWaerdenCNF-O3-DNDEBUG"

phase=1 
# first phase is "all sat", second phase is "alternating", third phase is "all unsat"

for ((n=k; phase<=2; ++n)); do

  SATinstance="VanDerWaerden_pd_2-3-${k}_${n}.cnf"
  # Creating the Dimacs-file:
  ${generator} 3 ${k} ${n}

  Output="${SATinstance}_OUT"
  result=$(${solver} ${SATinstance} > ${Output}; echo $?)
  
  if [[ ${result} == 10 ]]; then
    if [[ ${phase} == 2 ]]; then
      let n+=1
    fi

  elif [[ ${result} == 20 ]]; then
    echo "Break point ${phase}: $((n-1))" >> ${result_file}
    echo "UNSAT for n=${n}"
    let phase+=1

  else
    echo "ERROR[${script_name}]: Solver return-value neither 10 nor 20."
    exit 1
  fi

done

echo "Final result:"
cat ${result_file}

exit 0
