// Matthew Gwynne, 26.5.2010 (Swansea)
/* Copyright 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file Experimentation/Investigations/BooleanFunctions/plans/BinaryAddition.hpp
  \brief Investigations regarding the presentation of binary addition


  \todo Boolean functions representing binary addition
  <ul>
   <li> Consider n in NN_0. </li>
   <li> "Boolean literals x_1, ..., x_{m} represent 0 <= k <= 2^m-1 in binary"
   is defined by the condition (as constraint) that 
   sum(x_{i} * 2^(i-1),i, 1,m) = m. </li>
   <li> Note here that the variables map to binary digits from the right.
   This allows CNF/DNF translations of binary addition of smaller numbers
   to be extended to addition on larger numbers, by adding variables
   and clauses, rather than having to rename them. </li>
   <li> For m, n in NN, that a boolean function f in 
   m+n+max(m,n)+1 variables x_1, ..., x_{m}, y_1, ..., y_{m},
   z_1, ..., z_{max(m,n)+1} represents binary addition of numbers up to 
   2^m - 1, 2^n - 1 is defined by the following conditions:
    <ol>
     <li> Let x, y, z be the tuples of variables. </li>
     <li> Consider x representing 0 <= p <= 2^m - 1 in (reverse) binary and y 
     representing 0 <= q <= 2^n - 1 in (reverse) binary. </li>
     <li> Then for z representing p+q in (reverse) binary we have f(x,y,z)=1, 
     while for all other z we have f(x,y,z)=0. This covers all cases. </li>
    </ol>
   </li>
  </ul>
  </ul>


  \todo CNF and DNF representations of binary addition
  <ul>
   <li> What variables to use?
    <ul>
     <li> Perhaps bna('x,i), bna('y,i) and bna(z',i), each representing
     the i-th variable in the two input and then output variable lists
     respectively, where "bna" stands for "binary number addition". </li>
    </ul>
   </li>
   <li> At first, given m > 0 and n > 0 we have the full CNF and DNF 
   representations generated by
   \verbatim
declare(bna,noun)$
declare(bna,posfun)$
bna_var(v,i) := apply(nounify(bna),[v,i])$

bv2c_wv(v,V) := setify(map(
  lambda([p], if first(p)=0 then -second(p) else second(p)), 
  map("[", v, V)))$

bin_add_full_dnf_fcl(m,n) := block(
  [zl : if m+n=0 then 0 else max(m,n)+1,
   X : create_list(bna_var('x,i),i,1,m),
   Y : create_list(bna_var('y,i),i,1,n), Z],
  Z : create_list(bna_var('z,i),i,1,zl),
  return([append(X,Y,Z),create_list(
    union(
      bv2c_wv(reverse(int2polyadic_padd(i,2,m)),X),
      bv2c_wv(reverse(int2polyadic_padd(j,2,n)),Y),
      bv2c_wv(reverse(int2polyadic_padd(i+j,2,zl)),Z)),
    i,0,2^m-1,j,0,2^n-1)]))$

bin_add_full_cnf_fcl(m,n) := block(
  [zl : if m+n=0 then 0 else max(m,n)+1,
  X : create_list(bna_var('x,i),i,1,m),
  Y : create_list(bna_var('y,i),i,1,n)],
  Z : create_list(bna_var('z,i),i,1,zl),
  V : append(X,Y,Z),
  return([V,
    listify(
      setdifference(all_tass(V),setify(bin_add_full_dnf_fcl(m,n)[2])))]))$
   \endverbatim
   </li>
  </ul>


  \todo Smallest prime CNF-representation
  <ul>
   <li> Computing all minimum CNF representations using 
   all_minequiv_bvsr_sub_cs gives
    <ol>
     <li> n=1, m=1
     \verbatim
all_minequiv_bvsr_cs(setify(bin_add_full_cnf_fcl(1,1)[2]));
[{{-bna(x,1),-bna(y,1),bna(z,1)},{-bna(x,1),bna(y,1),-bna(z,1)},{-bna(x,1),bna(z,2)},
          {bna(x,1),-bna(y,1),-bna(z,1)},{bna(x,1),bna(y,1),-bna(z,2)},{bna(z,1),bna(z,2)}},
         {{-bna(x,1),-bna(y,1),bna(z,1)},{-bna(x,1),bna(y,1),-bna(z,1)},{-bna(x,1),bna(z,2)},
          {bna(x,1),bna(y,1),bna(z,1)},{bna(x,1),-bna(z,1),-bna(z,2)},{-bna(y,1),bna(z,2)}},
         {{-bna(x,1),-bna(y,1),bna(z,1)},{-bna(x,1),bna(y,1),-bna(z,1)},
          {bna(x,1),-bna(y,1),-bna(z,1)},{bna(x,1),bna(y,1),-bna(z,2)},{-bna(y,1),bna(z,2)},
          {bna(z,1),bna(z,2)}},
         {{-bna(x,1),-bna(y,1),bna(z,1)},{-bna(x,1),bna(y,1),-bna(z,1)},
          {bna(x,1),bna(y,1),bna(z,1)},{bna(x,1),-bna(z,1),-bna(z,2)},{-bna(y,1),bna(z,2)},
          {bna(z,1),bna(z,2)}},
         {{-bna(x,1),-bna(y,1),bna(z,1)},{-bna(x,1),bna(y,1),-bna(z,1)},
          {bna(x,1),bna(y,1),-bna(z,2)},{bna(x,1),-bna(z,1),-bna(z,2)},{-bna(y,1),bna(z,2)},
          {bna(z,1),bna(z,2)}},
         {{-bna(x,1),-bna(y,1),bna(z,1)},{-bna(x,1),bna(z,2)},{bna(x,1),-bna(y,1),-bna(z,1)},
          {bna(x,1),bna(y,1),bna(z,1)},{-bna(y,1),bna(z,2)},{bna(y,1),-bna(z,1),-bna(z,2)}},
         {{-bna(x,1),-bna(y,1),bna(z,1)},{-bna(x,1),bna(z,2)},{bna(x,1),-bna(y,1),-bna(z,1)},
          {bna(x,1),bna(y,1),bna(z,1)},{bna(y,1),-bna(z,1),-bna(z,2)},{bna(z,1),bna(z,2)}},
         {{-bna(x,1),-bna(y,1),bna(z,1)},{-bna(x,1),bna(z,2)},{bna(x,1),-bna(y,1),-bna(z,1)},
          {bna(x,1),bna(y,1),-bna(z,2)},{bna(y,1),-bna(z,1),-bna(z,2)},{bna(z,1),bna(z,2)}},
         {{-bna(x,1),-bna(y,1),bna(z,1)},{-bna(x,1),bna(z,2)},{bna(x,1),bna(y,1),bna(z,1)},
          {bna(x,1),-bna(z,1),-bna(z,2)},{-bna(y,1),bna(z,2)},{bna(y,1),-bna(z,1),-bna(z,2)}}]
     \endverbatim
     with 
     \verbatim
minBinCNFs : all_minequiv_bvsr_cs(setify(bin_add_full_cnf_fcl(1,1)[2]))$
length(minBinCNFs);
9
length(minBinCNFs[1]);
6
     \endverbatim
     </li>
     <li> n=2, m=1
     \verbatim
minBinCNFs : all_minequiv_bvsr_cs(setify(bin_add_full_cnf_fcl(2,1)[2]));
length(minBinCNFs);
84
length(minBinCNFs[1]);
11
A[1];
{{-bna(x,1),-bna(x,2),bna(z,2)},{-bna(x,1),bna(x,2),-bna(z,2)},
 {-bna(x,1),-bna(y,1),bna(z,1)},{bna(x,1),-bna(y,1),-bna(z,1)},
 {bna(x,1),bna(y,1),bna(z,1)},{-bna(x,2),-bna(y,1),bna(z,2)},
 {-bna(x,2),bna(y,1),-bna(z,1),-bna(z,2)},{-bna(x,2),bna(z,3)},
 {bna(x,2),-bna(y,1),-bna(z,2)},{bna(x,2),bna(y,1),-bna(z,1),-bna(z,3)},
 {bna(z,2),bna(z,3)}}
     \endverbatim
     </li>
     <li> n=2, m=2 
     \verbatim
minBinCNFs : all_minequiv_bvsr_cs(setify(bin_add_full_cnf_fcl(2,2)[2]));
length(minBinCNFs);
144
length(minBinCNFs[1]);
17
A[1];
{{-bna(x,1),-bna(x,2),-bna(y,2),bna(z,2)},{-bna(x,1),-bna(x,2),bna(z,3)},
 {-bna(x,1),bna(x,2),-bna(y,2),-bna(z,2)},{-bna(x,1),bna(x,2),bna(y,2),bna(z,2)},
 {-bna(x,1),-bna(y,1),bna(z,1)},{-bna(x,1),bna(y,1),-bna(z,1)},
 {bna(x,1),-bna(x,2),bna(y,1),-bna(y,2),-bna(z,2)},
 {bna(x,1),-bna(x,2),bna(y,1),bna(y,2),bna(z,2)},
 {bna(x,1),bna(x,2),bna(y,1),bna(y,2),-bna(z,2)},{bna(x,1),bna(x,2),bna(y,1),-bna(z,3)},
 {bna(x,1),-bna(y,1),-bna(z,1)},{-bna(x,2),-bna(y,2),bna(z,1),bna(z,2)},
 {-bna(x,2),bna(z,1),bna(z,3)},{bna(x,2),-bna(y,2),bna(z,1),-bna(z,2)},
 {bna(x,2),bna(y,2),bna(z,1),bna(z,2)},{-bna(y,2),bna(z,2),bna(z,3)},
 {bna(y,2),-bna(z,2),-bna(z,3)}}
     \endverbatim
     </li>
     <li> n=3, m=2? </li>
    </ol>
   </li>
  </ul>

  
  \todo Smallest r_1-based CNF representation


  \todo Smallest r_2-based CNF representation

*/
