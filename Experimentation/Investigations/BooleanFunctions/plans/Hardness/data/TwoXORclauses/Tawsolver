# File Experimentation/Investigations/BooleanFunctions/plans/Hardness/data/TwoXORclauses/Tawsolver
# Version information:
# > tawSolver --version
#  tawSolver:
#   authors: Tanbir Ahmed and Oliver Kullmann
#   url's:
#    http://sourceforge.net/projects/tawsolver/
#    https://github.com/OKullmann/oklibrary/blob/master/Satisfiability/Solvers/TawSolver/tawSolver.cpp
#   Version: 2.6.6
#   Last change date: 17.8.2013
#   Mapping k -> weight, for clause-lengths k specified at compile-time:
#     2->4.85  3->1  4->0.354  5->0.11  6->0.0694
#   Divisor for open weights: 1.46
#   Option summary = ""
#   Macro settings:
#    LIT_TYPE = std::int32_t (with 31 binary digits)
#    UCP_STRATEGY = 1
#   Compiled without TAU_ITERATION
#   Compiled without ALL_SOLUTIONS
#   Compiled without PURE_LITERALS
#   Compiled with NDEBUG
#   Compiled with optimisation options
#   Compilation date: Aug 17 2013 21:38:43
#   Compiler: g++, version 4.7.3
#   Provided in the OKlibrary http://www.ok-sat-library.org
#   Git ID = 237cbfc4d9b772a29e125928959af14cb4495d3e

# nds is number of nodes, r1 number of unit-clause-elimination, t time in seconds.
# nds=2^m-1, r1=2^m-4.

m     nds               r1                t
20    1048575           1048572           0.13
25    33554431          33554428          4.41
30    1073741823        1073741820        148.18
35    34359738367       34359738364       5015.46


# In *this* case, leaving out the optimisation-options
# -funroll-loops -funroll-loops
# makes the executable faster, and also UCP_STRATEGY=0 is better *here*.
# So now using
# g++ --std=c++11 -Wall -Ofast -funsafe-loop-optimizations -fno-math-errno -funsafe-math-optimizations -DNDEBUG -DUCP_STRATEGY=0  -o tawSolver tawSolver.cpp

# tawSolver:
# Version: 2.6.6
# Last change date: 17.8.2013
# Option summary = "B"
# Compilation date: Nov 29 2015 14:10:30
# Compiler: g++, version 4.7.1 20120723 [gcc-4_7-branch revision 189773]

m     t
20    0.12
25    3.89
30    129.99
35    4476.45
