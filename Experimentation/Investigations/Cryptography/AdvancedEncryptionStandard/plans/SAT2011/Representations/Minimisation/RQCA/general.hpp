// Matthew Gwynne, 6.1.2011 (Swansea)
/* Copyright 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file Experimentation/Investigations/Cryptography/AdvancedEncryptionStandard/plans/SAT2011/Representations/Minimisation/RQCA/general.hpp
  \brief Experimental results relating to use of weighted MaxSAT solvers for minimising AES boxes.


  \todo Overview
  <ul>
   <li> The R QCA package is written to deal with problems arising from
   sociology, derives small CNF/DNF representations for (partial) truth
   tables (see "Packages" in 
   BuildSystem/ExternalSources/SpecialBuilds/plans/R.hpp). </li>
   <li> To use the R QCA package we must a truth table as a data file
   readable by the R systems readtable function. Therefore we must
   translate a full CNF (as generated by functions in 
   ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/SboxAnalysis.mac etc)
   into a table format:
   \verbatim
fcl2tt(FF) := 
 append(
   map(lambda([C],
     endcons(0,
       map(lambda([L], if elementp(L, C) then 0 else 1), FF[1]))), FF[2]),
   listify(map(lambda([C],
     endcons(1,
       map(lambda([L], if elementp(L, C) then 0 else 1), FF[1]))), 
       setdifference(all_tass(FF[1]),setify(FF[2])))))$
output_tt2table(TT, n) := 
  with_stdout(n, 
    if length(TT) = 0 then (print("O"), print(1))
    else block(
      apply(print, endcons("O",create_list(i,i,1,length(TT[1])-1))),
      for tt_line in TT do
        apply(print,tt_line)))$
   \endverbatim
   </li>
   <li> So for example, to generate the small scale 4-bit sbox as a R data 
   file, we then do:
   \verbatim
maxima> SboxCNF: fcs2fcl(ss_sbox_fullcnf_fcs(2,4,ss_polynomial_2_4))$
maxima> output_tt2table(fcl2tt(SboxCNF),"Sbox.dat")$
   \endverbatim
   </li>
   <li> We can then use the R QCA package to try to generate a small 
   representation:
   \verbatim
R> oklib_load_all()
R> library(QCA)
R> sbox_tt = read.table("Sbox.dat",header=TRUE)
R> eqmcc(sbox_tt, outcome="O", expl.0=TRUE)
   \endverbatim
   </li>
   <li> This method is unlikely to yield much however, as even for this
   smaller problem (the example 4-bit Sbox), we get:
   \verbatim
Error: Impossible to solve the PI chart (too many possible combinations).
   \endverbatim
   </li>
  </ul>


  \todo Add todos.

*/
