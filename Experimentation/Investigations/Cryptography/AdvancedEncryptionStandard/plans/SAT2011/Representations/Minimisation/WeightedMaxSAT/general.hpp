// Matthew Gwynne, 6.1.2011 (Swansea)
/* Copyright 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file Experimentation/Investigations/Cryptography/AdvancedEncryptionStandard/plans/SAT2011/Representations/Minimisation/WeightedMaxSAT/general.hpp
  \brief Experimental results relating to use of weighted MaxSAT solvers for minimising AES boxes.


  \todo Overview
  <ul>
   <li> Given a full CNF as generated by one of the box CNF generation 
   functions (see 
   ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/FieldOperationsAnalysis.mac
   etc), for example:
   \verbatim
maxima> output_rijnmult_fullcnf_stdname(2);
   \endverbatim
   we can generate the subsumption hypergraph for this clause-set and it's
   prime implicates, and then convert this to a weighted MaxSAT problem, which
   encodes that we wish to find an assignment setting the minimum number of 
   variables to true:
   \verbatim
shell> QuineMcCluskeySubsumptionHypergraph-n16-O3-DNDEBUG AES_byte_field_mul_full_2.cnf AES_byte_field_mul_2_pi.cnf > AES_byte_field_mul_2_shg.cnf
shell> cat AES_byte_field_mul_2_shg.cnf | awk --file ${OKPLATFORM}/OKSystem/OKlib/Experimentation/Investigations/Cryptography/AdvancedEncryptionStandard/shg2partial_maxsat.awk > AES_byte_field_mul_2_shg.wcnf
   \endverbatim
   </li>
   <li> We can then use both complete and incomplete weighted partial
   MaxSAT solvers to find minimum and small (minimal) solutions. </li>
   <li> We can use new-ubcsat-okl to find small solutions like so:
   \verbatim
shell> ubcsat-okl  -alg gsat -w -runs 100 -cutoff 1000000 -i AES_byte_field_mul_2_shg.wcnf
   \endverbatim
   and then assuming we find a good solution, we can then extract the solution
   as a CNF file of the small size clause-set:
   \verbatim
shell> new-ubcsat-okl  -alg gsat -w -runs 100 -cutoff 1000000 -wtarget 20 -solve 1 -seed 1402276559 -i AES_byte_field_mul_2_shg.wcnf -r model AES_byte_field_mul_2_m20.result; 
shell> cat AES_byte_field_mul_2_pi.cnf | FilterDimacs AES_byte_field_mul_2_m20.result
   \endverbatim
   </li>
   <li> See "Add new-ubcsat-okl as an option for run_ubcsat" in
   ExperimentSystem/ControllingLocalSearch/plans/DataCollection.hpp
   for discussion on extending run_ubcsat to allow us to find good algorithms 
   for such minimisation problems. </li>
   <li> Add discussion of complete MaxSAT solvers. </li>
  </ul>


  \todo Add todos.


*/
