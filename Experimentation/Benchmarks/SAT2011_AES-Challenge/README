# Matthew Gwynne 26.2.2011 (Swansea)

I Directory content:

  - clause-set concatentation tool ./AppendDimacs-O3-DNDEBUG

  - aes_challenge.cnf is 128-bit AES key discovery challenge

  - aes_ass_challenge.cnf is the 128-bit AES benchmark 
    plaintext-ciphertext variable assignments

  - aes_128_10.cnf is the 128-bit AES uninstantiated formula

  - MD5_Challenge contains the md5 hash values of the AES challenge,
    the assignment and the uninstantiated AES formula.

  - this README file.

II The AES challenge is already provided, but can also be generated by running

AppendDimacs-O3-DNDEBUG aes_128_10.cnf aes_ass_challenge.cnf > aes_challenge.cnf

in this directory.

III Instance

  - with size in bytes
  - "e" for easy, "m" for "medium", "h" for "hard", "vh" for "very hard",
    "eh" for extremely hard", "peh" for "potentially excessively hard",
    "leh" for "likely excessively hard"

19211831  aes_challenge.cnf  (leh)

Instance statistics
  - first row: number of variables, number of clauses, number of literal
    occurrences
  - then the occurring clause-lengths and the number of clauses of that length

Benchmarks/128/aes_challenge.cnf
8080 153304 940464
1 336
2 1152
3 14896
4 3376
5 20016
6 26464
7 75888
8 11032
9 144

IV Underlying report

@TechReport{GwynneKullmann2008AES,
  author =       {Matthew Gwynne and Oliver Kullmann},
  title =        {Attacking {AES} via {SAT}},
  institution =  {arXiv},
  year =         2011,
  number =       {arXiv:??? [cs.DM]},
  month =        {April},
  annote =       {In preparation.}
}

V Description

aes_challenge.cnf is a clause-set which is satisfied by a 
total assignment phi iff for the variables 1,...,384, we have that 
  
  AES((1,...,128),(129,...,256)) = (257,...,384)

for 128-bit AES. That is, that the plaintext variables, given by 1,...,128
and key variables given by 129,...,256 encrypt using the 128-bit AES
encryption to the ciphertext bits 257,...,384. All other variables within 
the clause-sets are uniquely determined given the plaintext, key and 
ciphertext variables.

In particular, we consider the standard AES with nine full rounds, one special 
final round (key addition, SubBytes and ShiftRows) and then the final key 
addition.

For more information, refer to the following reference:

@Book{DaemenRijmen2001Rijndael,
  author =	 {Joan Daemen and Vincent Rijmen},
  title = 	 {The Design of Rijndael},
  publisher = 	 {Springer},
  year = 	 2001,
  address =	 {Berlin},
  note =	 {ISBN 3-540-42580-2; QA76.9.A25 D32 2001}
}

Our translation considers each of the components of the AES, at a high level 
(key schedule, round etc), as gates in a generalised circuit. It then 
iteratively rewrites these gates into circuits using gates for smaller 
components. This process continues until the translation is left with gates 
representing small AES components (Sbox, field multiplications and additions). 

Once we have a generalised circuit with gates corresponding to only small AES 
components, then:
  - The circuit is translated to a CNF introducing new variables for each wire.
  - The gates representing additions within the field (XOR) are replaced by the
    prime implicates for this relation, i.e., the standard representation of 
    the XOR constraint.
  - The gates for the Sbox and field multiplications are replaced with CNF 
    representations with the minimum number of clauses, except in the case
    of the 8-bit Sbox and 8-bit multiplication by 03, which use the smallest
    clause-sets known to us.

Benchmark problems encoding the minimisation problem for the 8-bit Sbox and multiplication by 03 will be submitted as benchmarks for the 2011 MAXSAT and PseudoBoolean competitions.

VI On the choice of instance

The Advanced Encryption Standard is a widely used encryption algorithm and
the performance of SAT solvers on these instances has a bearing the 
cryptographic security of the cipher. Solving this instance in a reasonable
time would break AES and so we provide this instance, with a key generated
using 128 coin flips, as a open challenge to the community. The generated
key has now been destroyed, and so the only way to find the key is to
solve this instance.

VII The OKlibrary http://www.ok-sat-library.org

All developments took place within the OKlibrary, an open-source research
platform around the SAT problem. Also the translation framework used to
generate the instances, formulas and assignments is provided there.

List of relevant directories in OKplatform/OKsystem/OKlib (where OKplatform
is the directory of the unpacked OKlibrary-package):

 - Experimentation/Benchmarks: all our benchmark packages (typically without
   the instances)
 - Experimentation/Investigations/Cryptography/AdvancedEncryptionStandard: all
   current investigations into AES
 - ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/: an AES 
   implementation in the Maxima computer algebra system
 - ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/: the AES 
   translation in the Maxima computer algebra system

The OKlibrary-internal documentation for the SAT2011-benchmarks is provided at

http://cs.swan.ac.uk/~csoliver/ok-sat-library/internet_html/doc/doxygen_html/d3/d83/SAT2011_8hpp.html

