# Matthew Gwynne 26.2.2011 (Swansea)

I Directory content:

  - clause-set concatentation tool ./AppendDimacs-O3-DNDEBUG

  - Benchmarks/B/aes_B_N_keyfind_*.cnf are the N round B-bit AES benchmark
    instances

  - Assignments/B/aes_ass_B_N_keyfind_*.cnf are the N round B-bit AES benchmark
    plaintext-ciphertext variable assignments

  - Formulas/B/aes_ass_B_N_keyfind_*.cnf are the N round B-bit AES benchmark
    uninstantiated AES formulas

  - MD5_Benchmarks128 contains the md5 hash values of the 128-bit AES
    benchmark instances.
  - MD5_Benchmarks64 contains the md5 hash values of the 64-bit AES
    benchmark instances.
  - MD5_Benchmarks32 contains the md5 hash values of the 32-bit AES
    benchmark instances.
  - MD5_Formulas128 contains the md5 hash values of the 128-bit AES
    formulas.
  - MD5_Formulass64 contains the md5 hash values of the 64-bit AES
    formulas.
  - MD5_Formulas32 contains the md5 hash values of the 32-bit AES
    formulas.
  - MD5_Assignments128 contains the md5 hash values of the 128-bit AES
    assignments.
  - MD5_Assignmentss64 contains the md5 hash values of the 64-bit AES
    assignments.
  - MD5_Assignments32 contains the md5 hash values of the 32-bit AES
    assignments.

  - this README file.

II The 24 instances are already provided, but can also be generated by running

bits=128; for r in 1 2 3 10; do for s in 1 2; do ./AppendDimacs-O3-DNDEBUG Formulas/${bits}/aes_${bits}_${r}.cnf Assignments/${bits}/aes_ass_${bits}_${r}_keyfind_${s}.cnf > Benchmarks/${bits}/aes_${bits}_${r}_keyfind_${s}.cnf; done; done

bits=64; for r in 1 2 3 4; do for s in 1 2; do ./AppendDimacs-O3-DNDEBUG Formulas/${bits}/aes_${bits}_${r}.cnf Assignments/${bits}/aes_ass_${bits}_${r}_keyfind_${s}.cnf > Benchmarks/${bits}/aes_${bits}_${r}_keyfind_${s}.cnf; done; done

bits=32; for r in 1 2 3 5; do for s in 1 2; do ./AppendDimacs-O3-DNDEBUG Formulas/${bits}/aes_${bits}_${r}.cnf Assignments/${bits}/aes_ass_${bits}_${r}_keyfind_${s}.cnf > Benchmarks/${bits}/aes_${bits}_${r}_keyfind_${s}.cnf; done; done

in this directory.

III Instances

  - with size in bytes
  - "e" for easy, "m" for "medium", "h" for "hard", "vh" for "very hard",
    "eh" for extremely hard", "peh" for "potentially excessively hard",
    "leh" for "likely excessively hard"

2032954  aes_128_1_keyfind_1.cnf   sat (vh)
2032956  aes_128_1_keyfind_2.cnf   sat (vh)
4089629  aes_128_2_keyfind_1.cnf   sat (eh)
4089625  aes_128_2_keyfind_2.cnf   sat (eh)
6116119  aes_128_3_keyfind_1.cnf   sat (eh)
6116120  aes_128_3_keyfind_2.cnf   sat (eh)
19211912 aes_128_10_keyfind_1.cnf  sat (leh)
19211911 aes_128_10_keyfind_2.cnf  sat (leh)
691596   aes_64_1_keyfind_1.cnf    sat (m)
691600   aes_64_1_keyfind_2.cnf    sat (m)
1361673  aes_64_2_keyfind_1.cnf    sat (h)
1361671  aes_64_2_keyfind_2.cnf    sat (h)
2082411  aes_64_3_keyfind_1.cnf    sat (vh)
2082408  aes_64_3_keyfind_2.cnf    sat (vh)
2814238  aes_64_4_keyfind_1.cnf    sat (vh)
2814229  aes_64_4_keyfind_2.cnf    sat (vh)
292189   aes_32_1_keyfind_1.cnf    sat (e)
292187   aes_32_1_keyfind_2.cnf    sat (e)
575047   aes_32_2_keyfind_1.cnf    sat (e)
575054   aes_32_2_keyfind_2.cnf    sat (e)
857946   aes_32_3_keyfind_1.cnf    sat (h)
857949   aes_32_3_keyfind_2.cnf    sat (h)
1140879  aes_32_4_keyfind_1.cnf    sat (h)
1140873  aes_32_4_keyfind_2.cnf    sat (h)
1431777  aes_32_5_keyfind_1.cnf    sat (h)
1431774  aes_32_5_keyfind_2.cnf    sat (h)

Instance statistics
  - first row: number of variables, number of clauses, number of literal
    occurrences
  - then the occurring clause-lengths and the number of clauses of that length

Benchmarks/128/aes_128_1_keyfind_(1/2).cnf           
1192 16356 97200
1 264
2 128
3 2000
4 368
5 2224
6 2656
7 7592
8 1108
9 16

Benchmarks/128/aes_128_2_keyfind_(1/2).cnf 
2000 31944 192608
1 272
2 256
3 3488
4 736
5 4448
6 5312
7 15184
8 2216
9 32

Benchmarks/128/aes_128_3_keyfind_(1/2).cnf 
2808 47532 288016
1 280
2 384
3 4976
4 1104
5 6672
6 7968
7 22776
8 3324
9 48

Benchmarks/128/aes_128_10_keyfind_(1/2).cnf 
8080 153304 940464
1 336
2 1152
3 14896
4 3376
5 20016
6 26464
7 75888
8 11032
9 144

Benchmarks/64/aes_64_1_keyfind_(1/2).cnf
596 6364 40348
1 132
2 80
3 976
4 272
5 1064
8 3840

Benchmarks/64/aes_64_2_keyfind_(1/2).cnf
1000 12344 79800
1 136
2 160
3 1696
4 544
5 2128
8 7680

Benchmarks/64/aes_64_3_keyfind_(1/2).cnf
1404 18324 119252
1 140
2 240
3 2416
4 816
5 3192
8 11520

Benchmarks/64/aes_64_4_keyfind_(1/2).cnf
1808 24304 158704
1 144
2 320
3 3136
4 1088
5 4256
8 15360

Benchmarks/32/aes_32_1_keyfind_(1/2).cnf
300 2808 18040
1 68
2 40
3 608
4 152
5 20
8 1920

Benchmarks/32/aes_32_2_keyfind_(1/2).cnf
504 5424 35632
1 72
2 80
3 1088
4 304
5 40
8 3840

Benchmarks/32/aes_32_3_keyfind_(1/2).cnf
708 8040 53224
1 76
2 120
3 1568
4 456
5 60
8 5760

Benchmarks/32/aes_32_4_keyfind_(1/2).cnf
912 10656 70816
1 80
2 160
3 2048
4 608
5 80
8 7680

Benchmarks/32/aes_32_5_keyfind_(1/2).cnf
1116 13272 88408
1 84
2 200
3 2528
4 760
5 100
8 9600


IV Template formulas

For each of the benchmarks in Benchmarks/B/aes_B_N_keyfind_*.cnf the 
uninstantiated N-bit AES formula for N rounds is provided in 
Formulas/B/aes_B_N.cnf. The plaintext-ciphertext assignments, given as 
clause-sets with 2*N unit clauses, are then provided in 
Assignments/B/aes_ass_B_N_keyfind_*.cnf. The hexidecimal representations
of the plaintext, key and ciphertext are given in the first comment line
of the assignment files.

See II for instructions on generating the provided benchmarks using the 
uninstantiated formulas and assignments.

V Underlying report



@TechReport{GwynneKullmann2008AES,
  author =       {Matthew Gwynne and Oliver Kullmann},
  title =        {Attacking {AES} via {SAT}},
  institution =  {arXiv},
  year =         2011,
  number =       {arXiv:??? [cs.DM]},
  month =        {April},
  annote =       {In preparation.}
}

VI Description

Benchmarks/B/aes_B_N_keyfind_S.cnf is a clause-set which is satisfied by a 
total assignment phi iff for the variables 1,...,3*B, we have that 
  
  AES((1,...,B),(B+1,...,2*B)) = (2*B+1,...,3*B)

for N round B-bit AES. That is, that the plaintext variables, given by 1,...,B 
and key variables given by B+1,...,2*B encrypt using the corresponding AES
encryption to the ciphertext bits 2*B+1,...,3*B. All other variables within 
the clause-sets are uniquely determined given the plaintext, key and 
ciphertext variables.

In particular, for 128-bit AES, and N=1,2 or 3, 64-bit with N=1,2,3 or 4 and 
for 32-bit AES for N=1,2,3,4 or 5, we consider the AES with N full rounds 
(key addition, SubBytes, ShiftRows and MixColumns), followed by a final key 
addition. For the full 128-bit ten round AES (B=128, N=10), we consider the 
standard AES with nine full rounds, one special final round (key addition, 
SubBytes and ShiftRows) and then the final key addition.

The 64 and 32-bit AES instances refer to small scale variants of the standard
AES given in [Algebraic Aspects of the Advanced Encryption Standard; Cid, 
Murphy and Robshaw]. For more information, refer to the following references:

@Book{DaemenRijmen2001Rijndael,
  author =	 {Joan Daemen and Vincent Rijmen},
  title = 	 {The Design of Rijndael},
  publisher = 	 {Springer},
  year = 	 2001,
  address =	 {Berlin},
  note =	 {ISBN 3-540-42580-2; QA76.9.A25 D32 2001}
}

@Book{CidMurphyRobshaw2006AlgebraicAES,
  author =       {Carlos Cid and Sean Murphy and Matthew Robshaw},
  title =        {Algebraic Aspects of the Advanced Encryption Standard},
  publisher =    {Springer},
  year =         2006,
  note =         {ISBN-10 0-387-24363-1}
}

Our translation considers each of the components of the AES, at a high level 
(key schedule, round etc), as gates in a generalised circuit. It then 
iteratively rewrites these gates into circuits using gates for smaller 
components. This process continues until the translation is left with gates 
representing small AES components (Sbox, field multiplications and additions). 

Once we have a generalised circuit with gates corresponding to only small AES 
components, then:
  - The circuit is translated to a CNF introducing new variables for each wire.
  - The gates representing additions within the field (XOR) are replaced by the
    prime implicates for this relation, i.e., the standard representation of 
    the XOR constraint.
  - The gates for the Sbox and field multiplications are replaced with CNF 
    representations with the minimum number of clauses, except in the case
    of the 8-bit Sbox and 8-bit multiplication by 03, which use the smallest
    clause-sets known to us.

Benchmark problems encoding the minimisation problem for the 8-bit Sbox and multiplication by 03 will be submitted as benchmarks for the 2011 MAXSAT and PseudoBoolean competitions.

VII Example

Finding the key 128-bit key 86FE8B9D1965FC8EB292EA3214D49C44 from the plaintext 
25FF4FCCEB89C0478CCB90ED488581FC and ciphertext 
40FBC7D2468AD643DF44554CA65C47C3 for the full AES:

SAT2011_AES> cat Assignments/128/aes_ass_128_10_keyfind_1.cnf | head -n 1 
c S : 1 P : 25FF4FCCEB89C0478CCB90ED488581FC K : 86FE8B9D1965FC8EB292EA3214D49C44 C : 40FBC7D2468AD643DF44554CA65C47C3 A : [2,8,x^8+x^4+x^3+x+1,4,4,10]
SAT2011_AES> AppendDimacs-O3-DNDEBUG Formulas/128/aes_128_10.cnf Assignments/128/aes_ass_128_10_keyfind_1.cnf > Benchmarks/128/aes_128_10_keyfind_1.cnf
SAT2011_AES> ./solve Benchmarks/128/aes_128_10_keyfind_1.cnf

where "./solve" is a SAT solver of your choice. Assuming the SAT solver solves
the instances, examining variables 129,...,256 yields the key
86FE8B9D1965FC8EB292EA3214D49C44 (or some other key which encrypts
25FF4FCCEB89C0478CCB90ED488581FC to 40FBC7D2468AD643DF44554CA65C47C3).


VIII On the choice of instances

The Advanced Encryption Standard is a widely used encryption algorithm and
the performance of SAT solvers on these instances has a bearing the 
cryptographic security of the cipher.

IX The OKlibrary http://www.ok-sat-library.org

All developments took place within the OKlibrary, an open-source research
platform around the SAT problem. Also the translation framework used to
generate the instances, formulas and assignments is provided there.

List of relevant directories in OKplatform/OKsystem/OKlib (where OKplatform
is the directory of the unpacked OKlibrary-package):

 - Experimentation/Benchmarks: all our benchmark packages (typically without
   the instances)
 - Experimentation/Investigations/Cryptography/AdvancedEncryptionStandard: all
   current investigations into AES
 - ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/: an AES 
   implementation in the Maxima computer algebra system
 - ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/: the AES 
   translation in the Maxima computer algebra system

The OKlibrary-internal documentation for the SAT2011-benchmarks is provided at

http://cs.swan.ac.uk/~csoliver/ok-sat-library/internet_html/doc/doxygen_html/d3/d83/SAT2011_8hpp.html

