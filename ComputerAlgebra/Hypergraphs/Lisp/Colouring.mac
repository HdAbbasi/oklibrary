/* Oliver Kullmann, 26.1.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/Colouring.mac
  \brief Functions related to colouring of hypergraphs

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Colouring.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Constructions.mac")$

/* ***********************
   * Translations to SAT *
   ***********************
*/

/* Colouring variables: terms colv(v), where v is a vertex: */
kill(colv)$
declare(colv,noun)$
declare(colv,posfun)$
colv_var(v) := nounify(colv)(v)$

/* Translating the 2-colouring problem for hypergraph G into the SAT problem
   for a formal boolean clause-set: */

tcol2sat_hg2fcs(G) := block(
 [Fpos : map(lambda([H], map(colv_var,H)), listify(G[2]))],
  [map(colv_var,G[1]), setify(append(Fpos, comp_cs(Fpos)))])$
/* Using the vertices directly as variables; works for example for
   standardised hypergraphs: */
tcol2sat_stdhg2stdfcs(G) := [G[1], union(G[2], comp_cs(G[2]))]$

/* Now for ordered hypergraphs, producing clause-lists: */
/* If G does not contain an empty hyperedge, then the result is
   actually a (formal) clause-set. */
tcol2sat_ohg2fcl(G) := [map(colv_var,G[1]),
  block([Fpos : map(lambda([H], map(colv_var,H)), G[2])],
    append(Fpos, comp_cs(Fpos)))]$
tcol2sat_stdohg2stdfcl(G) := [G[1], append(G[2], comp_cs(G[2]))]$

/* Translating an S-colouring problem (S a set/list of colours) for 
   hypergraph G into the SAT problem for a formal nb-clause-set (using 
   non-boolean variables; with uniform domain).
*/

col2sat_ohg2nbfclud(G,S) := [[map(colv_var,G[1]),
  block([Fpos : map(lambda([H], map(colv_var,H)), G[2])],
    apply(append,create_list(map(lambda([C],cartesian_product(C,{c})),Fpos), c,S)))], S]$
col2sat_stdohg2stdnbfclud(G,S) := [[G[1],
    apply(append,create_list(map(lambda([C],cartesian_product(C,{c})),G[2]), c,S))], S]$


/*!
\endhtmlonly
*/
