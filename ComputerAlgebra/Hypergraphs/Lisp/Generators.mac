/* Oliver Kullmann, 29.11.2007 (Swansea) */
/* Copyright 2007, 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/Generators.mac
  \brief Maxima functions for generating hypergraphs

Use by

oklib_load("Transitional/ComputerAlgebra/Hypergraphs/Lisp/Generators.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("Transitional/ComputerAlgebra/NumberTheory/Lisp/PrimeNumbers.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* ************************
   * Complete hypergraphs *
   ************************
*/

/* The standardised complete r-graph: */
complete_stdhg(n,r) := block([N : setn(n)],
  [N, powerset(N,r)])$


/* *****************************
   * Van der Waerden's theorem *
   *****************************
*/

/* The hypergraph of all arithmetic progressions of size k in {1,...,n}. */
/* Prerequisites: n,k are integers. */
/* RENAME: arithprog_hg */
ArithmeticProgressions(k,n) := block([V : setn(n)],
  if elementp(k,{0,1,2}) then return([V,powerset(V,k)]) 
  elseif n < k or k < 0 then return([V,{}]) 
  elseif k = n then return([V,{V}]) else
  return([V, 
    union(ArithmeticProgressions(k,n-1)[2], 
    setify(create_list(setify(
      create_list(n-d*i,i,0,k-1)), d,1,floor((n-1)/(k-1)))))]))$
arithprog_hg(k,n) := ArithmeticProgressions(k,n)$
arithprog_ohg(k,n) := block([V : create_list(i,i,1,n), VS],
  VS : setify(V),
  if elementp(k,{0,1,2}) then return([V,listify(powerset(VS,k))]) 
  elseif n < k or k < 0 then return([V,[]]) 
  elseif k = n then return([V,[VS]]) else
  return([V, 
    append(arithprog_ohg(k,n-1)[2], 
           create_list(setify(
             create_list(n-d*i,i,0,k-1)), 
               d,1,floor((n-1)/(k-1))))]))$

/* Testing whether the list L represents an arithmetic progression: */
arithmetic_progression_p(L) := if length(L) <= 1 then true
  else arithmetic_progression_d_p(rest(L),L[2] - L[1])$
/* Testing whether the list L represents an arithmetic progression with
   (constant) difference d: */
arithmetic_progression_d_p(L,d) := if length(L) <= 1 then true
  else is(second(L) - first(L) = d) and arithmetic_progression_d_p(rest(L),d)$

/* The list of all arithmetic progressions of length k for the sorted list L
   (following the order of L). */
/* Prerequisites: k natural number >= 0, L ascending. */
arithmetic_progressions(L,k) :=
 if k = 0 then [[]]
 elseif k = 1 then map("[",L)
 else block([l : length(L)],
   if l <= 1 then return([]),
   block([x : first(L), res_without, res_with : []],
     L : rest(L), l : l - 1,
     res_without : arithmetic_progressions(L,k),
     /* Computing all arithmetic progressions starting with x: */
     while l > 0 do block([y : first(L), d, P, lp],
       L : rest(L), l : l - 1,
       d : y - x,
       P : [x,y], lp : 2,
       block([prev_el : y],
         for z in L unless lp = k or z - prev_el > d do
           if z - prev_el = d then (
             P : endcons(z,P), lp : lp + 1, prev_el : z
           )
       ),
       if lp = k then res_with : cons(P,res_with)
     ),
     return(append(reverse(res_with),res_without))))$

/* The hypergraph of all arithmetic progressions of size k in the
   list L of different integers: */
arithprog_list_ohg(k,L) := [L,map(setify,arithmetic_progressions(L,k))]$

/* The theorem of Green-Tao: */
/* The hypergraph of all arithmetic progressions of size k in the first
   n prime numbers. */
/* Prerequisite: k, n integers, k, n >= 0. */

arithprog_primes_ohg(k,n) := [primes_first(n), map(setify,arithprog_primes(k,n))]$
arithprog_primes_hg(k,n) := ohg2hg(arithprog_primes_ohg(k,n))$
  
/* The arithmetic progressions of length k amongst the first n
   prime numbers which finish in n: */
arithprog_primes_finish[k,n] := if n = 0 then [] 
 elseif k = 0 then []
 else block([P : reverse(primes_first(n)), p, res : []],
   p : first(P), 
   if k = 1 then return([[p]]),
   P : rest(P), n : n - 1,
   while n > 0 do block([p2 : first(P), d, prog, lp],
       P : rest(P), n : n - 1,
       d : p - p2, prog : [p2,p], lp : 2,
       block([prev_el : p2],
         for z in P unless lp = k or prev_el - z > d do
           if prev_el - z = d then (
             prog : cons(z,prog), lp : lp + 1, prev_el : z
           )
       ),
       if lp = k then res : cons(prog,res)
   ),
   return(res))$
/* All arithmetic progressions of length k amongst the first n
   prime numbers: */
arithprog_primes(k,n) := if k=0 then [[]] else
 uaapply(append, create_list(arithprog_primes_finish[k,i],i,1,n))$
   

/* ********************
   * Ramsey's theorem *
   ********************
*/

/* We now consider the underlying hypergraphs for "diagonal" Ramsey
   problems, that is, for r-graphs with n vertices we consider
   q-cliques, and a counter-example showing that
   NR([q,q,...,q],r) > n, where the list of q's has length s, is
   a hypergraph colouring using s colours of the following 
   hypergraph.
   In other words, ramsey_hg(q,r,n) has as vertices the r-subsets
   of {1,...,n}, while a hyperedge is given by the set of r-subsets
   of any q-subset of {1,...,n}.
*/
/* Prerequisites: q,r,n >= 0. */
ramsey_hg(q,r,n) := block([V0 : setn(n), V],
 V : powerset(V0,r),
 if q>n then [V,{}]
 elseif r>q then [V,{}]
 else
  [V, map(lambda([T],powerset(T,r)),powerset(V0,q))])$
ramsey_ohg(q,r,n) := block([V0 : setn(n), V],
 V : listify(powerset(V0,r)),
 if q>n then [V,[]]
 elseif r=0 then [V,[{{}}]]
 elseif r>q then [V,[]]
 else
  [V, map(lambda([T],powerset(T,r)), listify(powerset(V0,q)))])$

/*!
\endhtmlonly
*/
