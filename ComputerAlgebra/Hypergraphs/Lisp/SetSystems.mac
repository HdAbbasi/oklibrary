/* Oliver Kullmann, 29.11.2007 (Swansea) */
/* Copyright 2007, 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac
  \brief Maxima functions for handling of set systems

Use by

oklib_load("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$


/* **************
   * Singletons *
   **************
*/

singletonp(S) := is(length(S) = 1)$
single_element(S) := listify(S)[1]$

choose_element(S) := listify(S)[1]$


/* *********************
   * Set constructions *
   *********************
*/

/* The set {1,...,n} */
setn(n) := setify(create_list(i,i,1,n))$
/* The set {m, ..., n} */
setmn(m,n) := setify(create_list(i,i,m,n))$

/* A set of singletons from a set */
singletons(M) := makeset({x},[x],cartesian_product(M))$
/* All unordered pairs (possible degenerated) from two sets */
upairs(A,B) := makeset({x,y},[x,y],cartesian_product(A,B))$


/* **********************************
   * Constructions related to union *
   **********************************
*/

/* The union of a set system: */
/* RENAME: set_sets_union */
set_system_union(S) := list_sets_union(listify(S))$
set_sets_union(S) := list_sets_union(listify(S))$
/* The union of a list of sets: */
list_sets_union(L) := uuapply(union,L)$

/* The union of a family of sets, i.e., given is a domain I and a map f(i).
   I can be a set or a list; use this function instead of 
   apply(union, listify(map(f,I))) resp. apply(union, map(f,I)) iff 
   the memory usage shall be reduced (expecting the f(i) to be large sets
   with large overlaps). */
family_sets_union(I, f) := if emptyp(I) then {} else block([res : {}],
 for i in I do res : union(res, f(i)), res)$

/* The sum of a list of sets: */
set_sum(L) := uuapply(union,
  map(cartesian_product, L, create_list({i},i,1,length(L))))$
/* The n-ary version: */
set_sumn([L]) := set_sum(L)$

/* Complex-union (pairwise union): */
cunion(A,B) := setify(map(lambda([P],uuapply(union,P)),cartesian_product_l([listify(A),listify(B)])))$
/* The special case of adding some set to all elements of
   a set system. */
add_elements(a,B) := cunion({a},B)$
/* Further specialised to adjoining a single element. */
add_element(x,B) := add_elements({x},B)$


/* ********************************************
   * Constructions related to complementation *
   ********************************************
*/

/* Elementwise complementation of set-system S w.r.t. universe U */
ecomp(S,U) := setify(create_list(setdifference(U,s),s,listify(S)))$

/* setdifference2(S,b) returns the set system where the elements of b have been
   removed from every element of S; S can also be a list. */
setdifference2(S,b) := map(lambda([s], setdifference(s,b)), S)$


/* **************************************************
   * Constructions related to the cartesian product *
   **************************************************
*/

/* Correcting a bug in Maxima: */
corr_cartesian_product([S]) := if emptyp(S) then {[]}
 else uuapply(cartesian_product,S)$
/* Now the input is a list of lists, and we obtain the "cartesian
   product" as a list (in the natural order): */
cartesian_product_l(S) := if emptyp(S) then [[]]
 else block([P : cartesian_product_l(rest(S))],
   uaapply(append, create_list(
     map(lambda([t],cons(x,t)), P),
     x,first(S))))$

/* For a set X the set of all tuples of length |X| over X: */
all_transformations_l(X) := apply(corr_cartesian_product,
  create_list(X,i,1,length(X)))$
/* Now input and output are lists (the output is ordered): */
all_transformations_l_l(X) := cartesian_product_l(
  create_list(X,i,1,length(X)))$


/* *************************
   * Tests for set systems *
   *************************
*/

/* has_empty_element(S) is true iff set system S contains the empty set: */
/* RENAME: empty_element_p */
has_empty_element(S) := some_s(emptyp, S)$
empty_element_p(S) := some_s(emptyp, S)$

/* Given a list of sets, computes the first pair of indices of non-disjoint 
   elements (and the empty list if there is no such pair): */
non_disjoint_pair(L) := block([a : l2array(L), l : length(L), found : false, res : []],
  for i : 1 thru l-1 unless found do block([A : a[i]], 
    for j : i+1 thru l unless found do
      if not disjointp(A, a[j]) then (res : [i,j], found : true)),
  return(res))$

/* Whether S is a disjoint set system: */
/* RENAME: disjoint_set_system_p */
is_disjoint_set_system(S) := emptyp(non_disjoint_pair(listify(S)))$
disjoint_set_system_p(S) := emptyp(non_disjoint_pair(listify(S)))$

/* Whether S contains no subsumed elements: */
/* RENAME: antichain_p */
is_antichain(S) := block([S : sort_length(listify(S)), l : length(S), i, j, subsumption : false, A],
  for i : 1 thru l-1 unless subsumption do (A : S[i],
    for j : i+1 thru l unless subsumption do
      if subsetp(A, S[j]) then subsumption : true),
  return(not subsumption)
)$
antichain_p(S) := is_antichain(S)$


/* *****************************************
   * Constructions related to disjointness *
   *****************************************
*/

/* remove_with_element(S,a) is the subset of S of all sets not containing element a */
remove_with_element(S,a) := subset(S, lambda([s], not elementp(a,s)))$

/* more generally, remove_non_disjoint(S,b) is the subset of S of all sets
disjoint to b */
remove_non_disjoint(S,b) := subset(S, lambda([s], disjointp(s,b)))$

/* Replaces two elements by their union until the set system is disjoint */
unify_nondisjoint_elements(S) := block([L : listify(S), p, A, B],
  while not (p : non_disjoint_pair(L), emptyp(p)) do (
    A : L[p[1]], B : L[p[2]],
    L : delete(A,L), L : delete(B,L), L : append(L, [union(A,B)])),
  setify(L))$


/* *****************************************
   * Constructions related to subsumption *
   *****************************************
*/

/* The closure of a set system under subset-formation */
subset_closure(S) := family_sets_union(S, lambda([M],powerset(M)))$


/* Sorts the elements of a list according to their length (ascending) */
sort_length(L) := sort(L, lambda([A,B], length(A) <= length(B)))$
/* Sorts the elements of a list according to their length (descending) */
sort_length_desc(L) := sort(L, lambda([A,B], length(A) >= length(B)))$


/* Eliminates all subsumed elements from a set system: */
min_elements(S) := block([remains : sort_length(listify(S)), result : [], A, not_subsumed],
 while not emptyp(remains) do (
  A : first(remains), remains : rest(remains),
  result : append(result, [A]),
  not_subsumed : sublist_indices(remains, lambda([B], not subsetp(A, B))),
  remains : create_list(remains[j], j, not_subsumed)),
 setify(result)
)$
/* Eliminates all contained elements from a set system: */
max_elements(S) := block([remains : sort_length_desc(listify(S)), result : [], A, not_contained],
 while not emptyp(remains) do (
  A : first(remains), remains : rest(remains),
  result : append(result, [A]),
  not_contained : sublist_indices(remains, lambda([B], not subsetp(B, A))),
  remains : create_list(remains[j], j, not_contained)),
 setify(result)
)$


/*!
\endhtmlonly
*/
