/* Oliver Kullmann, 29.11.2007 (Swansea) */
/* Copyright 2007, 2008, 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac
  \brief Maxima functions for handling of set systems

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$


/* **************
   * Singletons *
   **************
*/

/* Is set S a singleton set: */
singletonp(S) := is(length(S) = 1)$
/* Given a singleton set, return its element: */
single_element(S) := first(S)$

/* Choosing some element from a non-empty set: */
choose_element(S) := listify(S)[1]$
/* Obtain the first element (in the underlying order): */
first_element(S) := first(S)$
second_element(S) := second(S)$
/* Obtain the last element: */
last_element(S) := last(S)$


/* *********************
   * Set constructions *
   *********************
*/

/* The set {1,...,n}: */
setn(n) := setify(create_list(i,i,1,n))$
/* The set {m, ..., n}: */
setmn(m,n) := setify(create_list(i,i,m,n))$

/* A set of singletons from a set: */
singletons(M) := powerset(M,1)$

/* All unordered pairs (possible degenerated) from two sets: */
upairs(A,B) := makeset({x,y},[x,y],cartesian_product(A,B))$


/* **********************************
   * Constructions related to union *
   **********************************
*/

/* The union of a list or of a set of sets: */
lunion(L) := tree_reduce(union,L,{})$

/* The union of a family of sets, i.e., given is a domain I and a map f(i).
   I can be a set or a list. */
/* RENAME: union_fs */
family_sets_union(I, f) := lunion(map(f,I))$
union_fs(I, f) := lunion(map(f,I))$

/* The sum of a list of sets: */
set_sum(L) := lunion(
  map(cartesian_product, L, create_list({i},i,1,length(L))))$
/* The n-ary version: */
set_sumn([L]) := set_sum(L)$

/* Complex-union (pairwise union): */
cunion(A,B) := setify(map(lambda([P],apply(union,P)),cartesian_product_l([listify(A),listify(B)])))$
/* The special case of adding some set to all elements of
   a set system. */
add_elements(a,B) := cunion({a},B)$
/* Further specialised to adjoining a single element. */
add_element(x,B) := add_elements({x},B)$
/* The same functionality, but for lists of sets: */
cunion_l(A,B) := map(lambda([P],apply(union,P)),cartesian_product_l([A,B]))$
add_elements_l(a,B) := map(lambda([S],union(a,S)),B)$
add_element_l(x,B) := map(lambda([S],adjoin(x,S)),B)$


/* *****************************************
   * Constructions related to intersection *
   *****************************************
*/

/* The intersection of a non-empty list of sets (or of a set of sets): */
lintersection(L) := tree_reduce(intersection,L)$


/* ********************************************
   * Constructions related to complementation *
   ********************************************
*/

/* Elementwise complementation of set-system S w.r.t. universe U */
ecomp(S,U) := setify(create_list(setdifference(U,s),s,listify(S)))$

/* setdifference2(S,b) returns the set system where the elements of b have been
   removed from every element of S; S can also be a list. */
setdifference2(S,b) := map(lambda([s], setdifference(s,b)), S)$
/* The special case where b is a single element (to be removed): */
setdifference2e(S,b) := map(lambda([s], disjoin(b,s)), S)$


/* **************************************************
   * Constructions related to the cartesian product *
   **************************************************
*/

/* Correcting a bug in Maxima: */
corr_cartesian_product([S]) := if emptyp(S) then {[]}
 else uaapply(cartesian_product,S)$
/* Now the input is a list of lists, and we obtain the "cartesian
   product" as a list (in the natural order): */
cartesian_product_l(S) := if emptyp(S) then [[]]
 else block([P : cartesian_product_l(rest(S))],
   uaapply(append, create_list(
     map(lambda([t],cons(x,t)), P),
     x,first(S))))$

/* For a set X the set of all tuples of length |X| over X: */
all_transformations_l(X) := uaapply(corr_cartesian_product,
  create_list(X,i,1,length(X)))$
/* Now input and output are lists (the output is ordered): */
all_transformations_l_l(X) := cartesian_product_l(
  create_list(X,i,1,length(X)))$

/* More generally, the set of all tuples of length k over set X: */
all_tuples(X,k) := uaapply(corr_cartesian_product,
  create_list(X,i,1,k))$
/* Now input and output are lists, and the output is ordered (lexicographically): */
all_tuples_l(X,k) := cartesian_product_l(create_list(X,i,1,k))$

/* The set of all ordered tuples of length k over set X: */
all_ord_tuples(X,k) := map(sort, all_tuples(X,k))$
/* Now input and output are lists, and the output is ordered (lexicographically): */
all_ord_tuples_l(X,k) := listify(setify(map(sort, all_tuples_l(X,k))))$


/* ************************************
   * Constructions related to subsets *
   ************************************
*/

/* The list of all k-permutations of a set S.
   The order is first by range (lexicographically),
   then lexicographically.
*/
kpermutations(S,k) := 
 lappend(create_list(listify(permutations(s)),s,listify(powerset(S,k))))$
/* Remark: permutations(S) = setify(kpermutations(S,length(S))). */

/* For a list L, the set of k-subsets of the underlying set of
   objects, lexicographically sorted, as list of lists:
*/
powerset_l(L,k) := map(listify,listify(powerset(setify(L),k)))$
/* The special case k=2, but now allowing arbitrary lists L (thus
   the indices are considered now):
*/
powerlist2(L) := if emptyp(L) then []
elseif length(L) <= 200 then block([R : rest(L), res : []],
 for x in L unless emptyp(R) do (
   res : append(res,create_list([x,y],y,R)), R : rest(R)),
 res)
else block([A : l2ary(L)], 
  create_list([A[first(p)],A[second(p)]], 
              p,listify(powerset(setn(length(L)),2))))$


/* *******************************
   * Tests related to partitions *
   *******************************
*/

/* has_empty_element(S) is true iff set system S (can also be a list)
   contains the empty set: */
/* RENAME: empty_element_p */
has_empty_element(S) := some_s(emptyp, S)$
empty_element_p(S) := some_s(emptyp, S)$

/* Given a list of sets, computes the first pair of indices of non-disjoint 
   elements (and the empty list if there is no such pair): */
non_disjoint_pair(L) := block([a : l2array(L), l : length(L), found : false, res : []],
  for i : 1 thru l-1 unless found do block([A : a[i]], 
    for j : i+1 thru l unless found do
      if not disjointp(A, a[j]) then (res : [i,j], found : true)),
  return(res))$
/* Now returning the list of all pairs (in lecicographical order): */
non_disjoint_pairs(L) := block([a : l2array(L), l : length(L), res : []],
  for i : 1 thru l-1 do block([A : a[i]], 
    for j : i+1 thru l do
      if not disjointp(A, a[j]) then res : cons([i,j],res)),
  return(reverse(res)))$

/* Whether set system S is a disjoint set system: */
/* RENAME: disjoint_set_system_p */
is_disjoint_set_system(S) := emptyp(non_disjoint_pair(listify(S)))$
disjoint_set_system_p(S) := emptyp(non_disjoint_pair(listify(S)))$

/* Checks whether set system P is a partitioning of set X: */
partitionp(P,X) := disjoint_set_system_p(P) and 
  is(lunion(P) = X) and not empty_element_p(P)$


/* ********************************
   * Tests related to subsumption *
   ********************************
*/

/* Whether S contains no subsumed elements: */
/* RENAME: antichain_p */
is_antichain(S) := block([S : sort_length(listify(S)), l : length(S), i, j, subsumption : false, A],
  for i : 1 thru l-1 unless subsumption do (A : S[i],
    for j : i+1 thru l unless subsumption do
      if subsetp(A, S[j]) then subsumption : true),
  return(not subsumption)
)$
antichain_p(S) := is_antichain(S)$


/* *****************************************
   * Constructions related to disjointness *
   *****************************************
*/

/* remove_with_element(S,a) is the subset of S of all sets not containing 
   element a: */
remove_with_element(S,a) := subset(S, lambda([s], not elementp(a,s)))$
/* The same, but for a list L of sets: */
remove_with_element_l(L,a) := sublist(L, lambda([s], not elementp(a,s)))$

/* More generally, remove_non_disjoint(S,b) is the subset of S of all sets
disjoint to b: */
remove_non_disjoint(S,b) := subset(S, lambda([s], disjointp(s,b)))$

/* Replaces two elements by their union until the set system is disjoint: */
unify_nondisjoint_elements(S) := block([L : listify(S), p, A, B],
  while not (p : non_disjoint_pair(L), emptyp(p)) do (
    A : L[p[1]], B : L[p[2]],
    L : delete(A,L), L : delete(B,L), L : append(L, [union(A,B)])),
  setify(L))$


/* *****************************************
   * Constructions related to subsumption *
   *****************************************
*/

/* The closure of a set system under subset-formation: */
subset_closure(S) := family_sets_union(S, lambda([M],powerset(M)))$


/* Sorts the elements of a list according to their length (ascending): */
sort_length(L) := sort(L, lambda([A,B], length(A) <= length(B)))$
/* Sorts the elements of a list according to their length (descending): */
sort_length_desc(L) := sort(L, lambda([A,B], length(A) >= length(B)))$
/* Remark: The Maxima function "sort" is not necessarily stable (??).
   Thus elements of equal lengths may get reordered.
*/


/* Eliminates all subsumed elements from a set system (that is, computes
   the set of all minimal elements w.r.t. the subset-relation): */
min_elements(S) := block([remains : sort_length(listify(S)), result : [], A, not_subsumed],
 while not emptyp(remains) do (
  A : first(remains), remains : rest(remains),
  result : append(result, [A]),
  not_subsumed : sublist_indices(remains, lambda([B], not subsetp(A, B))),
  remains : create_list(remains[j], j, not_subsumed)),
 setify(result)
)$
/* Eliminates all contained elements from a set system: */
max_elements(S) := block([remains : sort_length_desc(listify(S)), result : [], A, not_contained],
 while not emptyp(remains) do (
  A : first(remains), remains : rest(remains),
  result : append(result, [A]),
  not_contained : sublist_indices(remains, lambda([B], not subsetp(B, A))),
  remains : create_list(remains[j], j, not_contained)),
 setify(result)
)$


/*!
\endhtmlonly
*/
