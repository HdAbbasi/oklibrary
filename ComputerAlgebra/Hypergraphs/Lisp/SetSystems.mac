/* Oliver Kullmann, 29.11.2007 (Swansea) */
/* Copyright 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2016 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac
  \brief Maxima functions for handling of set systems

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$


/* ***************
   * Elementship *
   ***************
*/

/* Is every element of list X element of the corresponding set in list L: */
gelementp(X,L) := is(length(X) <= length(L)) and
 every_s(lambda([i], elementp(X[i], L[i])), create_list(i,i,1,length(X)))$


/* **************
   * Singletons *
   **************
*/

/* Is set S a singleton set: */
singletonp(S) := is(length(S) = 1)$
/* Given a singleton set, return its element: */
single_element(S) := first(S)$

/* Choosing some element from a non-empty set: */
choose_element(S) := listify(S)[1]$
/* Obtain the first element (in the underlying order): */
first_element(S) := first(S)$
second_element(S) := second(S)$
/* Obtain the last element: */
last_element(S) := last(S)$


/* *********************
   * Set constructions *
   *********************
*/

/* The set {1,...,n}: */
setn(n) := setify(create_list(i,i,1,n))$
/* The set {m, ..., n}: */
setmn(m,n) := setify(create_list(i,i,m,n))$

/* The corresponding lists: */
listn(n) := create_list(i,i,1,n)$
listmn(m,n) := create_list(i,i,m,n)$

/* A set of singletons from a set: */
singletons(M) := powerset(M,1)$

/* All unordered pairs (possibly degenerated) from two sets: */
upairs(A,B) := makeset({x,y},[x,y],cartesian_product(A,B))$


/* **********************************
   * Constructions related to union *
   **********************************
*/

/* The union of a list or of a set of sets: */
lunion(L) := tree_reduce(union,L,{})$

/* The union of a family of sets, i.e., given is a domain I and a map f(i).
   I can be a set or a list. */
/* RENAME: union_fs */
family_sets_union(I, f) := lunion(map(f,I))$
union_fs(I, f) := lunion(map(f,I))$

/* The sum of a list of sets: */
set_sum(L) := lunion(
  map(cartesian_product, L, create_list({i},i,1,length(L))))$
/* The n-ary version: */
set_sumn([L]) := set_sum(L)$

/* Complex-union (pairwise union): */
cunion(A,B) := setify(map(lambda([P],apply(union,P)),cartesian_product_l([listify(A),listify(B)])))$
/* The special case of adding some set to all elements of
   a set system. */
add_elements(a,B) := cunion({a},B)$
/* Further specialised to adjoining a single element. */
add_element(x,B) := add_elements({x},B)$
/* The same functionality, but for lists of sets: */
cunion_l(A,B) := map(lambda([P],apply(union,P)),cartesian_product_l([A,B]))$
add_elements_l(a,B) := map(lambda([S],union(a,S)),B)$
add_element_l(x,B) := map(lambda([S],adjoin(x,S)),B)$


/* *****************************************
   * Constructions related to intersection *
   *****************************************
*/

/* The intersection of a non-empty list of sets (or of a set of sets): */
lintersection(L) := tree_reduce(intersection,L)$


/* ********************************************
   * Constructions related to complementation *
   ********************************************
*/

/* Elementwise complementation of set-system S w.r.t. universe U */
ecomp(S,U) := setify(create_list(setdifference(U,s),s,listify(S)))$

/* setdifference2(S,b) returns the set system where the elements of b have been
   removed from every element of S; S can also be a list. */
setdifference2(S,b) := map(lambda([s], setdifference(s,b)), S)$
/* The special case where b is a single element (to be removed): */
setdifference2e(S,b) := map(lambda([s], disjoin(b,s)), S)$


/* **************************************************
   * Constructions related to the cartesian product *
   **************************************************
*/

/* The input is a list of lists, and we obtain the "cartesian
   product" as a list (in the natural order): */
cartesian_product_l(S) := if emptyp(S) then [[]]
 else block([P : cartesian_product_l(rest(S))],
   uaapply(append, create_list(
     map(lambda([t],cons(x,t)), P),
     x,first(S))))$

/* For a set X the set of all tuples of length |X| over X: */
all_transformations_l(X) := uaapply(cartesian_product,
  create_list(X,i,1,length(X)))$
/* Now input and output are lists (the output is ordered): */
all_transformations_l_l(X) := cartesian_product_l(
  create_list(X,i,1,length(X)))$

/* More generally, the set of all tuples of length k over set X: */
all_tuples(X,k) := uaapply(cartesian_product,
  create_list(X,i,1,k))$
/* Now input and output are lists, and the output is ordered (lexicographically): */
all_tuples_l(X,k) := cartesian_product_l(create_list(X,i,1,k))$

/* The set of all ordered tuples of length k over set X: */
all_ord_tuples(X,k) := map(sort, all_tuples(X,k))$
/* Now input and output are lists, and the output is ordered (lexicographically): */
all_ord_tuples_l(X,k) := listify(setify(map(sort, all_tuples_l(X,k))))$


/* ************************************
   * Constructions related to subsets *
   ************************************
*/

/* The list of all k-permutations of a set S.
   The order is first by range (lexicographically),
   then lexicographically.
*/
kpermutations(S,k) :=
 lappend(create_list(listify(permutations(s)),s,listify(powerset(S,k))))$
/* Remark: permutations(S) = setify(kpermutations(S,length(S))). */

/* For a list L, the set of k-subsets of the underlying set of
   objects, lexicographically sorted, as list of lists:
*/
powerset_l(L,k) := map(listify,listify(powerset(setify(L),k)))$
/* The special case k=2, but now allowing arbitrary lists L (thus
   the indices are considered now):
*/
powerlist2(L) := if emptyp(L) then []
elseif length(L) <= 200 then block([R : rest(L), res : []],
 for x in L unless emptyp(R) do (
   res : append(res,create_list([x,y],y,R)), R : rest(R)),
 res)
else block([A : l2ary(L)],
  create_list([A[first(p)],A[second(p)]],
              p,listify(powerset(setn(length(L)),2))))$


/* *********************************************
   * Tests related to unions and intersections *
   *********************************************
*/

/* Whether set-system S (a set of sets) is stable under binary union: */
bunion_closed_p(S) := block([a : l2array(listify(S)), result : true, A],
 for i : 1 thru a[0]-1 while result do (
  A : a[i],
  for j : i+1 thru a[0] while (result : elementp(union(A,a[j]),S)) do 0
 ),
 result)$


/* *******************************
   * Tests related to partitions *
   *******************************
*/

/* has_empty_element(S) is true iff set system S (can also be a list)
   contains the empty set: */
/* RENAME: empty_element_p */
has_empty_element(S) := some_s(emptyp, S)$
empty_element_p(S) := some_s(emptyp, S)$

/* Given a list of sets, computes the first pair of indices of non-disjoint
   elements (and the empty list if there is no such pair): */
non_disjoint_pair(L) := block([a : l2array(L), l : length(L), found : false, res : []],
  for i : 1 thru l-1 unless found do block([A : a[i]],
    for j : i+1 thru l unless found do
      if not disjointp(A, a[j]) then (res : [i,j], found : true)),
  return(res))$
/* Now returning the list of all pairs (in lecicographical order): */
non_disjoint_pairs(L) := block([a : l2array(L), l : length(L), res : []],
  for i : 1 thru l-1 do block([A : a[i]],
    for j : i+1 thru l do
      if not disjointp(A, a[j]) then res : cons([i,j],res)),
  return(reverse(res)))$

/* Whether set-system or list S is a disjoint set-system: */
disjoint_set_system_p(S) :=
  is(length(lunion(S)) = sum_l(map(length,listify(S))))$

/* Checks whether list P is a block-partitioning of set X: */
blockpartitionp(P,X) := disjoint_set_system_p(P) and is(lunion(P) = X)$
/* Checks whether set-system P is a partitioning of set X: */
partitionp(P,X) := blockpartitionp(P,X) and not empty_element_p(P)$


/* ********************************
   * Tests related to subsumption *
   ********************************
*/

/* Whether S (set/list of sets) contains no subsumed elements: */
/* RENAME: antichain_p */
is_antichain(S) := block(
 [S : sort_length(listify(S)), l : length(S), subsumption : false, A],
  for i : 1 thru l-1 unless subsumption do (A : S[i],
    for j : i+1 thru l unless subsumption do
      if subsetp(A, S[j]) then subsumption : true),
  return(not subsumption)
)$
antichain_p(S) := is_antichain(S)$

/* Whether S (set of sets) is closed under subsumption: */
subsumption_closed_p(S) := if emptyp(S) then true else
 if not elementp({},S) then false else
 block([missing : false],
  for s in S unless missing do
    for x in s unless missing do
      missing : not elementp(disjoin(x,s),S),
  return(not missing))$

/* Whether S (set of sets) is "accessible", that is, for every non-empty
   element s it is possible to get another element by removing some suitable
   element x from s:
*/
accessible_ss_p(S) := if emptyp(S) then true else
 if not elementp({},S) then false else
 block([found : true],
  for s in disjoin({},S) unless not found do
    for x in s unless (found : elementp(disjoin(x,s),S)) do 0,
  return(found))$


/* Subset-relations at the "second level": */

/* Whether for all A in S1 there is B in S2 with subsetp(A,B): */
lr_subsetp(S1,S2) := (
 if (
   for A in S1 do
     if (for B in S2 do if subsetp(A,B) then return(true))
     = done then return(false)
  ) = done then true else false)$
/* The special case where S1={A}: */
l1r_subsetp(A,S2) :=
 if (for B in S2 do if subsetp(A,B) then return(true))
 = done then false else true$

/* Whether for all B in S2 there is A in S1 with subsetp(A,B): */
rl_subsetp(S1,S2) := (
 if (
   for B in S2 do
     if (for A in S1 do if subsetp(A,B) then return(true))
     = done then return(false)
  ) = done then true else false)$
/* The special case where S2={B}: */
r1l_subsetp(S1,B) :=
 if (for A in S1 do if subsetp(A,B) then return(true))
 = done then false else true$


/* *****************************************
   * Constructions related to disjointness *
   *****************************************
*/

/* remove_with_element(S,a) is the subset of S of all sets not containing
   element a: */
remove_with_element(S,a) := subset(S, lambda([s], not elementp(a,s)))$
/* The same, but for a list L of sets: */
remove_with_element_l(L,a) := sublist(L, lambda([s], not elementp(a,s)))$

/* More generally, remove_non_disjoint(S,b) is the subset of S of all sets
disjoint to b: */
remove_non_disjoint(S,b) := subset(S, lambda([s], disjointp(s,b)))$

/* Replaces two elements by their union until the set system is disjoint: */
unify_nondisjoint_elements(S) := block([L : listify(S), p, A, B],
  while not (p : non_disjoint_pair(L), emptyp(p)) do (
    A : L[p[1]], B : L[p[2]],
    L : delete(A,L), L : delete(B,L), L : append(L, [union(A,B)])),
  setify(L))$


/* *****************************************
   * Constructions related to subsumption *
   *****************************************
*/

/* The closure of a set system under subset-formation: */
subset_closure(S) := family_sets_union(S, lambda([M],powerset(M)))$


/* Eliminating all subsumed elements from a list of sets or set system
  (that is,  computes the list/set of all minimal elements w.r.t. the
  subset-relation).
  Regarding the list-input, in the list-output all the sets are ordered by
  increasing length, while otherwise the given order is kept.
*/

/* The simplest algorithm: */
min_elements_l_0(S) := block(
 [remains : sort_length(S), result : [], A],
 while not emptyp(remains) do (
  A : first(remains), result : cons(A,result),
  remains : sublist(remains, lambda([B], not subsetp(A, B)))
 ),
 reverse(result))$

/* The best algorithm: */
min_elements_l(S) := min_elements_unique_fast_l_(stable_unique(S),first)$

/* Assuming the list S does not contain repeated elements; first a simple
   algorithm:
*/
min_elements_unique_l(S) := block(
 [A : sort_length_part_ary(S), result : [], n],
  n : A[0],
  for i : 1 thru n do (
    result : cons(A[i], result),
    for x in A[i] do
      for j : i+1 thru n do
        A[j] : sublist(A[j], lambda([y], not subsetp(x, y)))
  ),
  lappend(reverse(result)))$

/* Now a more intelligent algorithm (while above we remove for a given set
   A all subsets B with A <= B, now for a given B we test for A <= B,
   considering only relevant A).
   choose_element_(x) for a non-emtpy set x chooses some element.
   According to the above specification, i.e., input list S, output the list
   sorted (stably) by length, with subsumed elements removed.

   The idea is as follows: "result" is the initial part of the final result.
   For every currently established set in result, represented by index i into
   result, an element s of result[i] is chosen, and the map h contains the
   mapping
     s -> h(s) = list of i's encountered so far.
   For a new set x, to be checked whether one of the elements of result
   subsume x, on runs through the elements s of x, and through the i in
   h(s), whether result[i] <= x -- if yes, a subsumption was found, while
   if none is found in this way, then there is none at all: if there would be
   i with A[i] <= x, then for the chosen element s of A[i] we have s in x,
   and thus i would have been encountered.
*/
min_elements_unique_fast_l_(S, choose_element_) := block(
 [l : length(S),
  A, number_blocks, current_block : 1,
  result, index : 1, old_index,
  h],
  if l <= 1 then return(S),
  A : sort_length_part_ary(S),
  /* A is a list of lists (as okl-array), first the smallest .. */
  if emptyp(first(A[1])) then return([{}]),
  h : sm2hm({}),
  /* h(s) is a list of already established (non-subsumed) indices (in result)
     of sets containing s. s is a chosen element from these sets.
  */
  number_blocks : A[0],
  result : okl_make_array(any,l),
  /* The result internally as okl-array; index is the next element to be
     filled. */
  old_index : index,
  /* For the first block there can't be subsumptions: */
  for x in A[current_block] do (result[index] : x, index : index + 1),
  while current_block < number_blocks do block([s, L, subsumption],
    /* Enter the new elements into the hash-map: */
    for i : old_index thru index-1 do (
      s : choose_element_(result[i]),
      L : ev_hm(h,s),
      if L=false then set_hm(h,s,[i])
      else set_hm(h,s, cons(i,L))
    ),
    current_block : current_block + 1,
    old_index : index,
    for x in A[current_block] do (
      subsumption : false,
      for s in x unless subsumption do (
        L : ev_hm(h,s),
        if L#false then
          for i in L unless subsumption do
            subsumption : subsetp(result[i], x)
      ),
      if not subsumption then (result[index] : x, index : index+1)
    )
  ),
  create_list(result[i],i,1,index-1))$

/* Subsumption elimination for a set-system, using the basic algorithm: */
min_elements_0(S) := setify(min_elements_unique_l(listify(S)))$

/* Using the fastest algorithm: */
min_elements(S) :=
  setify(min_elements_unique_fast_l_(listify(S), 'first))$


/* Eliminates all contained elements from a list / set system (where for
   the list the elements are ordered in decreasing length, and otherwise
   the given order is maintained): */
max_elements_l(S) := block(
 [remains : sort_length_desc(S), result : [], A],
 while not emptyp(remains) do (
  A : first(remains), result : cons(A,result),
  remains : sublist(remains, lambda([B], not subsetp(B, A)))
 ),
 reverse(result)
)$

/* Now the list S does not contain repeated elements: */
max_elements_unique_l(S) := block(
 [A : sort_length_part_ary(S), result : [], n],
  n : A[0],
  for i : n thru 1 step -1 do (
    result : cons(A[i], result),
    for x in A[i] do
      for j : i-1 thru 1 step -1 do
        A[j] : sublist(A[j], lambda([y], not subsetp(y, x)))
  ),
  lappend(reverse(result)))$

/* Computing all maximal elements for a set-system: */
max_elements(S) := setify(max_elements_unique_l(listify(S)))$


/* Computes a predicate-function ss such that for a set X the value ss(X)
   is true iff X is subsumed by some element of S (i.e., there is Y in S
   with subsetp(Y,X)=true); S is a set (of sets).
   If S may have subsumed elements, then better use min_elements(S) instead
   of S (the resulting function ss will be more efficient).
*/
check_subsumption_(S, choose_element_) := block(
 [l : length(S),
  A, B, b, L, H],
  if l = 0 then return(lambda([X],false)),
  if l = 1 then return(block([Y:single_element(S)],
    if emptyp(Y) then lambda([X],true)
    else buildq([Y], lambda([X], subsetp(Y,X)))
  )),
  A : sort_length_part_ary(listify(S)),
  if emptyp(first(A[1])) then return(lambda([X],true)),
  b : A[0],
  B : okl_make_array(any,b), for i : 1 thru b do B[i] : l2ary(A[i]),
  L : okl_make_array(fixnum,b), for i : 1 thru b do L[i] : length(B[i][1]),
  H : okl_make_array(any,b),
  for i : 1 thru b do block([h : sm2hm({}), sl : B[i][0], s,x,T],
    for j : 1 thru sl do (
      s : B[i][j],
      x : choose_element_(s),
      T : ev_hm(h,x),
      if T=false then set_hm(h,x,[j])
      else set_hm(h,x, cons(j,T))
    ),
    H[i] : h
  ),
  buildq([B,L,H], lambda([X], block([l : length(X), h, subs : false, T],
    if l=0 then return(false),
    for i : 1 thru L[0] while L[i] <= l and not subs do (
      h : H[i],
      for x in X unless subs do (
        T : ev_hm(h,x),
        if T#false then for y in T unless subs do subs : subsetp(B[i][y], X)
      )
    ),
    return(subs)))))$
/* Convenience instantiation: */
check_subsumption(S) := check_subsumption_(S, 'first)$

/*!
\endhtmlonly
*/
