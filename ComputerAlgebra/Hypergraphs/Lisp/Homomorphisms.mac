/* Oliver Kullmann, 2.11.2011 (Swansea) */
/* Copyright 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/Homomorphisms.mac
  \brief Functions related to homomorphisms of hypergraphs

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Homomorphisms.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$


/* *****************
   * Basic notions *
   *****************
*/

/* Testing whether f is a homomorphism from G1 to G2: */
homomorphism_bydef_hg(f,G1,G2) := subsetp(map(f,G1[1]),G2[1]) and
 every_s(lambda([H], elementp(map(f,H), G2[2])), G1[2])$

/* For a map f defined on the vertices of G, transport G to its image (i.e.,
   compute the image):
*/
transport_hg(f,G) := [map(f,G[1]), map(lambda([H],map(f,H)),G[2])]$
/* Performing subsumption-elimination to the result: */
transportmin_hg(f,G) := min_hg(transport_hg(f,G))$


/* **************************
   * Special transport-maps *
   **************************
*/

/* Let n := A[0] (the length of A).
   Producing a map f from {1,...,n} to {1,...,ceiling(n/m)} defined as follows:
    - 1,...,m is mapped to 1
    - m+1,...,2m is mapped to 2
    - and so on.
   Additionally we have f(0) = n.
*/
colouring_blocks(A,m) := block([M:okl_make_array(fixnum,A[0])],
 for i : 1 thru A[0] do M[A[i]] : ceiling(i/m),
 buildq([M], lambda([x], M[x])))$
/* Producing a map which based on a random permutation of [1,...,n],
   mapping the first m elements to 1, the next m elements to 2, and so on:
*/
random_colouring(n,m) :=
 colouring_blocks(l2ary(random_permutation(create_list(i,i,1,n))),m)$

/* Randomly projecting G such that m vertices in G get collapsed to one new
   vertex (the projection is standardised):
*/
random_projection_hg(G,m) := block(
 [cm : colouring_blocks(l2ary(random_permutation(listify(first(G)))), m)],
  transport_hg(cm,G))$
random_projection_min_hg(G,m) := min_hg(random_projection_hg(G,m))$


/*!
\endhtmlonly
*/
