/* Oliver Kullmann, 8.12.2007 (Swansea) */
/* Copyright 2007, 2008, 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/Basics.mac
  \brief Basic Maxima functions for hypergraphs

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$


/* ***********************
   * Fundamental notions *
   ***********************
*/

/*
 A "hypergraph" is a pair (V,E), where V is a set and E a subset of
 the powerset of V.
*/

/*
 A "general hypergraph" is a triple (V,E,f), where V, E are sets, while
 f is a function such that f(e) for e in E is a subset of V.
*/

/* The "ordered versions" use repetition-free lists instead of sets. */
/* The abbreviations are hg, ohg, ghg, oghg. */


/* ************************************
   * Checking the defining properties *
   ************************************
*/

hg_p(G) := listp(G) and is(length(G)=2) and setp(G[1]) and setp(G[2]) and
  every_s(lambda([H],subsetp(H,G[1])),G[2])$

ohg_p(G) := listp(G) and is(length(G)=2) and listnorep_p(G[1]) and
  listnorep_p(G[2]) and 
  block([V : setify(G[1])], every_s(lambda([H],subsetp(H,V)),G[2]))$

/* Checking whether func_ is a hyperedge function; V is a set, E is a
   list or a set: */
hypfunc_p(func_,V,E) := block(
 [e : errcatch(every_s(lambda([H],subsetp(func_(H),V)), E))],
  not emptyp(e) and e[1])$

ghg_p(G) :=  listp(G) and is(length(G)=3) and setp(G[1]) and setp(G[2]) and
  hypfunc_p(G[3], G[1], G[2])$

oghg_p(G) := listp(G) and is(length(G)=3) and listnorep_p(G[1]) and
  listnorep_p(G[2]) and hypfunc_p(G[3], setify(G[1]), G[2])$


/* *********************
   * Checking equality *
   *********************
*/

/* Equality test for general hypergraphs: */
/* RENAME: ghg_equalp */
ghypequalp(G1,G2) := is(G1[1] = G2[1]) and is(G1[2] = G2[2]) and
 block([break : false],
  for e in G1[2] unless break do
    if G1[3](e) # G2[3](e) then break : true,
  return(not break))$
ghg_equalp(G1,G2) := is(G1[1] = G2[1]) and is(G1[2] = G2[2]) and
 block([break : false],
  for e in G1[2] unless break do
    if G1[3](e) # G2[3](e) then break : true,
  return(not break))$


/* **************
   * Promotions *
   **************
*/

hg2ohg(G) := map(listify,G)$

/* RENAME: hg2ghg */
promote_general_hypergraph(G) := [G[1], G[2], identity]$
hg2ghg(G) := [G[1], G[2], identity]$


/* *************
   * Downcasts *
   *************
*/

ohg2hg(G) := map(setify,G)$

ghg2hg(G) := [G[1], map(G[3],G[2])]$


/* ************* **
   * Conversions *
   ***************
*/

/* Promotes a set system to a hypergraph: */
/* RENAME: ses2hg(S) */
setsystem2hg(S) := [lunion(S), S]$
ses2hg(S) := setsystem2hg(S)$

/* Converts a list of sets to a hypergraph: */
listsets2hg(L) := setsystem2hg(setify(L))$

/* Converts a list of sets to an ordered general hypergraph: */
listsets2oghg(L) := [listify(lunion(L)), L, identity]$


/* *******************
   * Standardisation *
   *******************
*/

/* Standardising an arbitrary ordered hypergraph, using the order of
   the vertices to define their indices:
*/
standardise_ohg(G) := block([h : osm2hm(l2osm_inv(G[1])), t],
 t : lambda([H], map(lambda([x], ev_hm(h,x)), H)),
 [create_list(i,i,1,length(G[1])), map(t, G[2])])$

/* In the same way, standardising an ordered hypergraph whose vertices are 
   natural numbers (>= 1), using an array (of size equal to the maximal
   vertex-value):
*/
standardise_ary_ohg(G) := if emptyp(G[1]) then G else
 block([A : osm2ary_lt(l2osm_inv(G[1]),last(G[1]),fixnum), t],
  t : lambda([H], map(lambda([x], A[x]), H)),
  [create_list(i,i,1,length(G[1])), map(t, G[2])])$


/* ************
   * Matrices *
   ************
*/

/* The combinatorial (hyper)edge-vertex matrix of a hypergraph: */
/* RENAME: hypver_hg2com */
edge_vertex_com_hyp(G) := [G[2], G[1], lambda([H,v], 
  if elementp(v, H) then 1 else 0)]$
edge_vertex_com_hg(G) := edge_vertex_com_hyp(G)$
hypver_hg2com(G) := edge_vertex_com_hyp(G)$
hypver_ghg2com(G) := [G[2],G[1], buildq([E:G[3]], lambda([H,v], 
  if elementp(v, E(H)) then 1 else 0))]$

/* The (hyper)edge intersection matrix (as a square combinatorial matrix)
   of a hypergraph: */
/* RENAME: hypint_hg2scom */
edge_int_com_hyp(G) := block([M : edge_vertex_com_hyp(G)],
 return(com2scom(prod_com(M, trans(M)))))$
edge_int_com_hg(G) := edge_int_com_hyp(G)$

/* The vertex intersection matrix (as a square combinatorial matrix)
   of a hypergraph (for each pair of vertices the number of common
   occurrences): */
/* RENAME: verint_hg2scom */
vertex_int_com_hyp(G) := block([M : edge_vertex_com_hyp(G)],
 return(com2scom(prod_com(trans(M), M))))$
vertex_int_com_hg(G) := vertex_int_com_hyp(G)$


/* *******************
   * Transformations *
   *******************
*/

/* The k-section of a hypergraph (taking over the vertices of G, while the
   hyperedges are k-subsets of the old hyperedges): */
/* RENAME: section_hg */
section_hyp(G,k) := [G[1], family_sets_union(G[2], lambda([H], powerset(H,k)))]$
section_hg(G,k) := section_hyp(G,k)$

/* The k-edge-graph, a k-graph, that is, a k-uniform hypergraph, having as 
    vertices the hyperedges of G and as hyperedges k-sets of hyperedges of G
    with non-empty intersection:
*/
/* RENAME: edge_k_hg */
edge_k_hyp(G,k) := 
 if k=0 then if emptyp(G[1]) then [G[2],{}] else [G[2],{{}}]
 elseif k=1 then [G[2], singletons(disjoin({},G[2]))] else
 [G[2], subset(powerset(G[2],k), lambda([H], not emptyp(lintersection(H))))]$
edge_k_hg(G,k) := edge_k_hyp(G,k)$
/* The edge-graph of a hypergraph: */
/* RENAME: edge_g_hg */
edge_g_hyp(G) := edge_k_hyp(G,2)$
edge_g_hg(G) := edge_g_hyp(G)$

/* The anti-k-edge-graph, a k-graph with vertices the hyperedges of G and as
   hyperedges k-sets of hyperedges of G with empty intersection:
*/
/* RENAME: anti_edge_k_hg */
anti_edge_k_hyp(G,k) := 
 if k=0 then if emptyp(G[1]) then [G[2],{{}}] else [G[2],{}]
 elseif k=1 then [G[2], singletons(intersection({{}},G[2]))] else
 [G[2], subset(powerset(G[2],k), lambda([H], emptyp(lintersection(H))))]$
anti_edge_k_hg(G,k) := anti_edge_k_hyp(G,k)$
/* The Kneser-graph of a hypergraph: */
/* RENAME: kneser_g_hg */
kneser_g_hyp(G) := anti_edge_k_hyp(G,2)$
kneser_g_hg(G) := kneser_g_hyp(G)$


/* *****************
   * Constructions *
   *****************
*/

/* The union of a list L of hypergraphs: */
union_hg([L]) := [lunion(map(first,L)), lunion(map(second,L))]$

/* The edge-wise complement of a hypergraph: */
/* RENAME: ecomp_hg */
ecomp_hyp(G) := [G[1], ecomp(G[2],G[1])]$
ecomp_hg(G) := ecomp_hyp(G)$

/* The dual of a general hypergraph: */
/* RENAME: dual_ghg */
dual_general_hypergraph(G) := [G[2], G[1], buildq([V : G[2], f : G[3]],
 lambda([e], subset(V, lambda([v], elementp(e,f(v))))))]$
dual_ghg(G) := dual_general_hypergraph(G)$


/* ************************************************
   * Constructions related to the subset-relation *
   ************************************************
*/

/* The closure under subset-formation of a hypergraph: */
/* RENAME: subset_closure_hg */
subset_closure_hyp(G) := [G[1], subset_closure(G[2])]$
subset_closure_hg(G) := subset_closure_hyp(G)$

/* For two set-systems S1, S2 the "general subsumption hypergraph" is the
   general hypergraph (S1,S2,E), which has as vertices the elements of S1 and
   as hyperedge-labels the elements of S2, while for (hyperedge-label) H in S2
   its vertex set E(H) is given by the elements of S1 contained in H:
*/
subsumption_ghg(S1,S2) :=
 [S1, S2, buildq([S1], lambda([H], subset(S1, lambda([S], subsetp(S,H)))))]$

/* For the ordering of subsumption_ghg(S1,S2) one uses the given ordering
   on sets S1, S2, that is, the lexicographical ordering.
   Standardisation (of the vertex set) thus uses the lexicographical ordering
   of S1.
*/
/* For ordered set-systems (L1,L2) the "ordered general subsumption hypergraph"
   has the elements of L1, hyperedge-labels the elements of S2, while for H
   in S2 the vertex list is given by the elements of L1 contained in H:
*/
subsumption_oghg(L1,L2) :=
  [L1, L2,
   buildq([L1], lambda([H], subset(setify(L1),lambda([S],subsetp(S,H)))))]$
subsumption_ohg(L1,L2) :=
  ghg2hg(subsumption_ohg(L1,L2))$
/* MG: Should we have ordered edges here? As there is currently a loss of
   information when L1 is setified, but in general the oghg notion
   doesn't have ordered edges (i.e., an edge is a list rather than set). */
  

/* The "reduced subsumption hypergraph" for set-systems (S1,S2) is constructed
   as follows from subsumption_ghg(S1,S2):
    - let G := subsumption_ghg(S1,S2);
    - first subsumption-elimination is performed on G, obtaining G';
    - then all unit-hyperedges {v} are removed from G' together with their
      vertices;
    - finally the general hypergraph is converted into a hypergraph, and
      vertices not occurring in any hyperedge anymore are removed.

The following function computes this reduced subsumption hypergraph together
with the set of sets from S1 which where eliminated by the unit-elimination:
*/
rsubsumption_hg(S1,S2) := block(
 [G : ghg2hg(subsumption_ghg(S1,S2)), U,U2, V,E],
 E : min_elements(G[2]),
 U : subset(E, lambda([H], is(length(H)=1))),
 U2 : map(single_element,U),
 E : setdifference(E,U),
 V : lunion(E),
 [ [V,E], U2 ])$


/* *****************
   * Connectedness *
   *****************
*/

/* Computes the set-system of vertex-sets of connnected components
(those minimal sets, which are pairwise disjoint while their union is
the vertex-set, such that every edge is a subset of some of them): */
components_hg(G) := block([S : unify_nondisjoint_elements(G[2])],
 union(singletons(setdifference(G[1], lunion(S))), S))$
components_ghg(G) := components_hg(ghg2hg(G))$

/* Represent as hypergraph G as the disjoint union of connected hypergraphs,
   which are given in a lexicographically sorted list (using the vertex-sets):
*/
disjoint_union_rep_hg(G) := block([S : components_hg(G), empty_he, A, res],
 empty_he : elementp({},S),
 S : disjoin({},S),
 A : l2ary(map(lambda([s], [s,[]]), listify(S))),
 for H in disjoin({},G[2]) do block([found : false],
  for i : 1 thru A[0] unless found do (
   found : subsetp(H,first(A[i])),
   if found then A[i] : [first(A[i]), cons(H,second(A[i]))]
 )),
 res : map(lambda([G], [first(G),setify(second(G))]), ary2l(A)),
 if empty_he then cons([{},{{}}], res) else res)$

/* Whether a hypergraph is connected (can not be represented as the disjoint
union of two non-trivial hypergraphs): */
is_connected_hg_p(G) := is(length(components_hg(G)) <= 1)$
/* Remark: If G does not contain the empty hyperedge, then G is connected iff
   every two different vertices are connected by a path, while otherwise G
   is connected iff the vertex-set is empty.
*/

/*!
\endhtmlonly
*/
