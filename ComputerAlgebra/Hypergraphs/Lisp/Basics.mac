/* Oliver Kullmann, 8.12.2007 (Swansea) */
/* Copyright 2007, 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/Basics.mac
  \brief Basic Maxima functions for hypergraphs

Use by

oklib_load("Transitional/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$

/*
 A "hypergraph" is a pair (V,E), where V is a set and E a subset of
 the powerset of V.
*/

/*
 A "general hypergraph" is a triple (V,E,f), where V, E are sets, while
 f is a function such that f(e) for e in E is a subset of V.
*/

/* ************* **
   * Conversions *
   ***************
*/

/* Promotes a set system to a hypergraph */
set_system_hypergraph(S) := [set_system_union(S), S]$

/* Converts a list of sets to a hypergraph */
list_sets_hypergraph(L) := set_system_hypergraph(setify(L))$

/* Converts a list of sets to a general hypergraph */
list_sets_general_hypergraph(L) := [list_sets_union(L),
 setify(makelist(i,i,1,length(L))),
 buildq([list : L], lambda([i], list[i]))]$

/* Promotes a hypergraph to a general hypergraph */
promote_general_hypergraph(G) := [G[1], G[2], identity]$

/* The underlying hypergraph */
underlying_hypergraph(G) := [G[1], setify(makelist((G[3])(e), e, listify(G[2])))]$


/* *****************
   * Constructions *
   *****************
*/

/* The k-section of a hypergraph */
section_hyp(G,k) := [G[1], family_sets_union(G[2], lambda([H], powerset(H,k)))]$

/* The edge-wise complement of a hypergraph */
ecomp_hyp(G) := [G[1], ecomp(G[2],G[1])]$

/* The closure under subset-formation of a hypergraph */
subset_closure_hyp(G) := [G[1], subset_closure(G[2])]$

/* The dual of a general hypergraph */
dual_general_hypergraph(G) := [G[2], G[1], buildq([V : G[2], f : G[3]],
 lambda([e], subset(V, lambda([v], elementp(e,f(v))))))]$


/* *****************
   * Connectedness *
   *****************
*/

/* computes the set system of vertex sets of connnected components */
components_hypergraph(G) := unify_nondisjoint_elements(G[2])$
components_general_hypergraph(G) := components_hypergraph(underlying_hypergraph(G))$

/* whether a hypergraph is connected */
is_connected_hypergraph(G) := is(length(components_hypergraph(G)) <= 1)$


/*!
\endhtmlonly
*/
