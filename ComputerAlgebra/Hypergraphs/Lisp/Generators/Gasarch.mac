/* Oliver Kullmann, 26.10.2009 (Swansea) */
/* Copyright 2009, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/Generators/Gasarch.mac
  \brief Maxima functions for generating Gasarch hypergraphs

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/Gasarch.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$


/* *****************************************************
   * Hypergraphs of sub-square-vertices in a rectangle *
   *****************************************************
*/

/* Variables sqv(i,j) for field (i,j): */
kill(sqv)$
declare(sqv,noun)$
sqv_var(i,j) := nounify(sqv)(i,j)$
sqv_pair(P) := nounify(sqv)(first(P),second(P))$

/* Enumerating the fields of a p x q rectangle in layers, starting left-top,
   using matrix-indices, where each layer k is a vertical line from top to
   bottom followed by a horizontal line from right to left (the first layer
   has height and width 1, length 1, the second height and width 2, length 3,
   the third height and width 3, length 5, and so on (assuming p=q here);
   the fields [i,j] on layer k are characterised by max(i,j) = k):
*/
enumerate_rectangle(p,q) := block([m : min(p,q), R],
 R : lappend(create_list(append(create_list([j,i], j,1,i), create_list([i,i-j], j,1,i-1)), i,1,m)),
 R : append(R, lappend(create_list(create_list([i,m-j], j,0,m-1), i,m+1,p))),
 R : append(R, lappend(create_list(create_list([j,i], j,1,m), i,m+1,q))),
 R)$

/* The ordered hypergraph with vertex set the fields of a p x q rectangle,
   ordered according to enumerate_rectangle(p,q), and with hyperedges all
   subsets with (exactly) 4 vertices which are the corners of some rectangle;
   p, q are natural numbers >= 0:
*/
gasarch_ohg(p,q) := [
 map(sqv_pair,enumerate_rectangle(p,q)),
 map(lambda([p], map(sqv_pair, cartesian_product(first(p),second(p)))), cartesian_product_l(map(listify,[powerset(setn(p),2), powerset(setn(q),2)])))]$
gasarch_hg(p,q) := ohg2hg(gasarch_ohg(p,q))$

/* Computing standardisation functions, which standardise the variables
   sqv(i,j) from a p x q rectangle according to the order given by
   enumerate_rectangle:
*/
standardise_gasarch(p,q) :=
  buildq([q], lambda([t], ev(t, sqv(i,j):= unknown, sqv)))$
/* Computing the inversion function (which just applies to natural
   numbers, not to terms as the standardisation-function): */
invstandardise_gasarch(p,q) :=
  buildq([q], lambda([i], unknown))$

/* The hypergraph isomorphic to gasarch_ohg(p,q), standardised according
   to the given order:
*/
gasarch_stdohg(p,q) := block([s : standardise_gasarch(p,q)],
 s(gasarch_ohg(p,q)))$
gasarch_stdhg(p,q) := ohg2hg(gasarch_stdohg(p,q))$


/* **************
   * Statistics *
   **************
*/

nver_gasarch_ohg(p,q) := p*q$
nver_gasarch_hg(p,q) := nver_gasarch_ohg(p,q)$

nhyp_gasarch_ohg(p,q) := if p<=1 or q <=1 then 0
 else (binomial(p*q,2) - p*binomial(q,2) - q*binomial(p,2))/2$
nhyp_gasarch_hg(p,q) := nhyp_gasarch_ohg(p,q)$

/*!
\endhtmlonly
*/

