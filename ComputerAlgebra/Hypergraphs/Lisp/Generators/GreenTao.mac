/* Oliver Kullmann, 17.10.2009 (Swansea) */
/* Copyright 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/Generators/GreenTao.mac
  \brief Maxima functions for generating Green-Tao hypergraphs

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/GreenTao.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/PrimeNumbers.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Combinatorics/Lisp/Enumeration/Subsets.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$


/* *****************************************
   * Arithmetic progressions in the primes *
   *****************************************
*/

/* The list of arithmetic progressions of length k amongst the first
   prime numbers up to prime number p, and finishing with p;
   sorted by decreasing slope (that is, increasing start-value).
*/
/* Prerequisite k >= 3, p > k. */
/* Inherits prp = product_primes(k) and prk = primep(k). */
arithprog_primes_finish[k,p] := arithprog_primes_finish_nm(k,p)$
/* Without memoisation: */
arithprog_primes_finish_nm(k,p) := block([res : []],
  for d : prp step prp thru (p-k)/(k-1) do block([prog : arpr(k,p,-d)],
    if every_s('primep, prog) then res : cons(reverse(prog),res)
  ),
  if prk then block([d : divide(p-k,k-1)],
    if d[2] = 0 then block([prog : arpr(k-1,k+d[1],d[1])],
      if every_s('primep, prog) then res : cons(cons(k,prog),res)
  )),
  return(res))$

/* The list of all arithmetic progressions of length k amongst the first n
   prime numbers (memo=true means memoisation of arithmetic progressions).
   The order is first by increasing end-value of the sequence, and second
   by inreasing start-value.
*/
arithprog_primes(k,n,memo) := 
 if k=0 then [[]] elseif n = 0 then []
 elseif k=1 then create_list([p], p,primes_first(n))
 elseif k=2 then map(listify,colex_ksubsets_l(setify(primes_first(n)),2))
 else block([p : 1, res : [], prp : product_primes(k), prk : primep(k)],
   thru n do (
     p : next_prime(p),
     if p > k then 
       if memo then res : append(res,arithprog_primes_finish[k,p])
       else res : append(res,arithprog_primes_finish_nm(k,p))
   ),
   res)$

/* The hypergraph of all arithmetic progressions of size k in the first
   n prime numbers.
   Prerequisite: k, n integers, k, n >= 0.
   The order of the ordered version is first by increasing end-value, second
   by increasing start-value of the arithmetic progressions (in this
   way increasing (just) n means that the new hyperedges can just be
   appended at the end).
*/
arithprog_primes_ohg(k,n) := 
 [primes_first(n), map(setify,arithprog_primes(k,n,true))]$
arithprog_primes_hg(k,n) := ohg2hg(arithprog_primes_ohg(k,n))$


/* An arithmetic progressions of size k  is regarding to the structure of
   arithmetic progressions of size k' <= k in it isomorphic to the set
   {1,...,k}, that is, the arithmetic progressions of size k' in it correspond
   exactly to those in arithprog_hg(k',k).
   So we gain a better understanding  of arithprog_primes_hg(k,n) if we
   find out the maximal progressions in the vertex set, and remove the
   contained progressions.
   The following functions computes the ordered hypergraph of all maximal
   arithmetic progressions of size at least k within the first n prime numbers.
   Ordering is first by size, and then alphabetically.
   Prerequisite: 0 <= k <= n.
*/
arithprog_primes_max_ohg(k,n) := block(
 [V : primes_first(n), found_empty, A : okl_make_array(any,n)],
  if k=0 then return([V,[{}]]),
  A[k] : arithprog_primes(k,n,true),
  if emptyp(A[k]) then return [V,[]],
  found_empty : false,
  for kp : k+1 thru n unless found_empty do (
    A[kp] : arithprog_primes(kp,n,true),
    if emptyp(A[kp]) then found_empty : true else
    for kpp : kp-1 thru k step -1 do  block(
       [E : setify(lappend(map(lambda([P],arithmetic_progressions(P,kpp)), A[kp])))],
       A[kpp] : sublist(A[kpp], lambda([P], not elementp(P,E)))) 
  ),
  return([V, map(setify,lappend(delete(false,ary2l(A))))]))$


/* **************
   * Statistics *
   **************
*/

nver_arithprog_primes_ohg(k,n) := n$
nver_arithprog_primes_hg(k,n) := n$

nhyp_arithprog_primes_ohg(k,n) := 
 if n=0 then if k=0 then 1 else 0 else
  n_arithprog_primes_c(k,n)$
nhyp_arithprog_primes_hg(k,n) := nhyp_arithprog_primes_ohg(k,n)$


/* *******************
   * Standardisation *
   *******************
*/

/* The following function is to be applied to an ordered hypergraph G
   created by arithprog_primes_ohg, and it standardises the vertex set.

   A single translation from a vertex v of G to its standardisation is given
   by
     rank_primes(v),
   while the inverse, given a standardised index i, is given by
     unrank_primes(i).

   Faster are the generic functions standardise_ohg(G) and
   standardise_ary_ohg.
*/

/* Directly by definition (very slow): */
std_primes_ohg(G) := [create_list(i,i,1,length(G[1])),
 map(lambda([H], rank_primes_s(H)), G[2])]$

arithprog_primes_stdohg(k,n) := standardise_ary_ohg(arithprog_primes_stdohg(k,n))$

/*!
\endhtmlonly
*/
