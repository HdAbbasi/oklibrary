/* Oliver Kullmann, 12.7.2009 (Swansea) */
/* Copyright 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/Generators/Hindman.mac
  \brief Maxima functions for generating hypergraphs

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/Hindman.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TermSystems/Lisp/Conversions.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* *****************
   * Hindman quads *
   *****************
*/

/* The hypergraph with vertex set {1, ..., n} and as hyperedges all possible
   subsets {x,y,x+y,x*y}:
*/
hindman_a1k2_ohg(n) := 
 [create_list(i,i,1,n),
  append(create_list({1,y,1+y},y,1,n-1),
    create_list({x,y,x+y,x*y}, x,2,floor(sqrt(n)), y,x,floor(n/x)))]$

nver_hindman_a1k2_ohg(n) := n$
nhyp_hindman_a1k2_ohg(n) := 
 if n <= 1 then 0 else block([s : floor(sqrt(n))],
 n-1 - (s-1)*s/2 + sum(floor(n/x), x,2,s))$
/* By definition: nhyp_hindman_a1k2_ohg(n) = 
     n-1 + sum(floor(n/x) - x + 1, x, 2, floor(sqrt(n)))
*/
/* We have nhyp_hindman_a1k2_ohg(n) = count_quadintsol_bydef(1,n)
   (see ComputerAlgebra/NumberTheory/Lisp/Quadratics.mac).
*/

/* The "injective" version, not allowing x=y: */
hindmani_a1k2_ohg(n) := 
 [create_list(i,i,1,n),
  append(create_list({1,y,1+y},y,2,n-1),
    create_list({x,y,x+y,x*y}, x,2,floor(sqrt(n)), y,x+1,floor(n/x)))]$

nver_hindmani_a1k2_ohg(n) := n$
nhyp_hindmani_a1k2_ohg(n) := 
 if n <= 2 then 0 else block([s : floor(sqrt(n))],
 n-1 - (s+1)*s/2 + sum(floor(n/x), x,2,s))$
/* nhyp_hindmani_a1k2_ohg(n) = 
     n-2 + sum(floor(n/x) - x, x, 2, floor(sqrt(n))) = 
     nhyp_hindman_a1k2_ohg(n) - floor(sqrt(n))
*/

/* RENAME: hindman_k2_ohg(a,n) */
/* Prerequisite: a >= 1 */
hindmanquadsgen_degenerated_ohg(a,n) := [create_list(i,i,a,n),
 block([M : create_list({x,y,x+y,x*y}, x,max(a,2),floor(sqrt(n)), y,x,floor(n/x))],
  if a >= 2 then M else
   append(create_list({1,y,1+y},y,1,n-1),M))]$
hindman_k2_ohg(a,n) := hindmanquadsgen_degenerated_ohg(a,n)$


/* RENAME: hindmani_k2_ohg(a,n) */
hindmanquadsgen_ohg(a,n) := [create_list(i,i,a,n),
 block([M : create_list({x,y,x+y,x*y}, x,max(a,2),floor(sqrt(n)), y,x+1,floor(n/x))],
  if a >= 2 then M else
   append(create_list({1,y,1+y},y,2,n-1),M))]$


/* ********************
   * The general case *
   ********************
*/

/* First trivial implementations (for correctness checking). */

/* Prerequisites: a >= 1, k >= 0, n >= 0 (all natural numbers). */

/* The order on the hyperedges {x_1,...,x_k, ... } is induced by
   the lexicographical order on the tuples [x_1, ..., x_k].
   For k >= 3 duplicates can occur, and then the first in the list
   is kept (all others are removed).
*/
hindman_ohg_0(a,k,n) := block(
 [V : create_list(i,i,a,n),
  Var : create_list(indexed_symbol(i),i,1,k),
  T, H],
  T : all_ord_tuples_l(V,k),
  H : union(
   map(sum_l,map(listify,disjoin({},powerset(setify(Var))))),
   map(prod_l,map(listify,disjoin({},powerset(setify(Var)))))),
  [V, stable_unique(sublist(
    map(lambda([t], at(H, map("=", Var,t))), T),
    lambda([S], subsetp(S,setify(V)))))])$

hindmani_ohg_0(a,k,n) := block(
 [V : create_list(i,i,a,n),
  Var : create_list(indexed_symbol(i),i,1,k),
  T, H],
  T : map(listify,listify(powerset(setify(V),k))),
  H : union(
   map(sum_l,map(listify,disjoin({},powerset(setify(Var))))),
   map(prod_l,map(listify,disjoin({},powerset(setify(Var)))))),
  [V, sublist(
    map(lambda([t], at(H, map("=", Var,t))), T),
    lambda([S], subsetp(S,setify(V))))])$

/*!
\endhtmlonly
*/

