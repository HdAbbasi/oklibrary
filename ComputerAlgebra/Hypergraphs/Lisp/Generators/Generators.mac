/* Oliver Kullmann, 29.11.2007 (Swansea) */
/* Copyright 2007, 2008, 2009, 2010, 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/Generators/Generators.mac
  \brief Maxima functions for generating hypergraphs

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/Generators.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/PrimeNumbers.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Combinatorics/Lisp/Enumeration/Subsets.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/VanderWaerden.mac")$
oklib_include("OKlib/ComputerAlgebra/Numerical/Lisp/Norms.mac")$


/* ************************
   * Complete hypergraphs *
   ************************
*/

/* The complete r-graph with vertex set V: */
complete_hg(V,r) := [V, powerset(V,r)]$
/* The standardised complete r-graph: */
complete_stdhg(n,r) := complete_hg(setn(n),r)$

/* Using colexicographical order, where V now is a list: */
complete_ohg(V,r) := [V, colex_ksubsets_ll(V,r)]$
complete_stdohg(n,r) := complete_ohg(create_list(i,i,1,n),r)$

/* Statistics functions: */

nver_complete_hg(n,r) := n$
nhyp_complete_hg(n,r) := binomial(n,r)$


/* *******************
   * Schur's theorem *
   *******************
*/

/* TODO: move to dedicated file */

/* The hypergraph with vertex set {1, ..., n} (n >= 0) and hyperedges {x,y,z}
   with x+y=z (note that x=y is possible, while z notin {x,y}).
*/
/* TODO: We should use antilexicographical order, so that higher n just
   adds new hyperedges to the end.
*/
schurtriples_ohg(n) :=
 [create_list(i,i,1,n), create_list({x,y,x+y}, x,1,floor(n/2), y,x,n-x)]$
schurtriples_hg(n) := ohg2hg(schurtriples_ohg(n))$
/* TODO: We should provide a version without subsumptions:
   Precisely the hyperedges {x,2x} with 3x <= n subsume other hyperedges,
   namely precisely the hyperedge {x,2x,3x}.
   Call it "schurtriples_me" (for "minimal elements").
*/

/* Statistics functions: */

nver_schurtriples_hg(n) := n$
nver_schurtriples_ohg(n) := n$
nhyp_list_schurtriples_hg(n) := if n <= 1 then [] elseif n=2 then [[2,1]] else
 [[2, floor(n/2)], [3, floor((n-1)/2) * ceiling((n-1)/2)]]$
nhyp_list_schurtriples_ohg(n) := nhyp_list_schurtriples_hg(n)$
nhyp_schurtriples_hg(n) := floor(n/2) + floor((n-1)/2) * ceiling((n-1)/2)$
nhyp_schurtriples_ohg(n) := nhyp_schurtriples_hg(n)$


/* k >= 3 */
/* To be completed. */
linequations_ohg(k,n) := block([V : setn(n)],
  0)$
/* Remark: linequations_ohg(3,n) = schurtriples_ohg(3). */


/* ********************
   * Ramsey's theorem *
   ********************
*/

/* We now consider the underlying hypergraphs for Ramsey problems, that is,
   for r-graphs with n vertices we consider q-cliques, and a counter-example
   showing that ramsey_s^r(q,q,...,q) > n, where the list of q's has length s,
   is a hypergraph colouring using s colours of the following hypergraph.
   In other words, ramsey_hg(q,r,n) has as vertices the r-subsets
   of {1,...,n}, while a hyperedge is given by the set of r-subsets
   of any q-subset of {1,...,n}.
   Prerequisites: q,r,n >= 0.
*/
ramsey_hg(q,r,n) := block([V0 : setn(n), V],
 V : powerset(V0,r),
 if q>n then [V,{}]
 elseif r>q then [V,{}]
 else
  [V, map(lambda([T],powerset(T,r)),powerset(V0,q))])$
/* The ordered version, using lexicographical ordering on the vertices
   as well as on the hyperedges (considered as q-subsets):
*/
ramsey_ohg(q,r,n) := block([V0 : setn(n), V],
 V : listify(powerset(V0,r)),
 if q>n then [V,[]]
 elseif r=0 then [V,[{{}}]]
 elseif r>q then [V,[]]
 else
  [V, map(lambda([T],powerset(T,r)), listify(powerset(V0,q)))])$

/* Now using vertices e.g. "rv(1,2,3)" instead of "{1,2,3}". */

kill(rv)$
declare(rv,noun)$
rv_var([L]) := apply(nounify(rv),L)$
set_rv(s) := apply(rv_var,listify(s))$

ramseyrv_ohg(q,r,n) := block([V0 : setn(n), V],
 V : map(set_rv,listify(powerset(V0,r))),
 if q>n then [V,[]]
 elseif r=0 then [V,[{{}}]]
 elseif r>q then [V,[]]
 else
  [V, map(lambda([T],map(set_rv,powerset(T,r))), listify(powerset(V0,q)))])$

/* Standardised Ramsey hypergraphs, now using colexicographical ordering of
   the vertices (as r-subsets of {1,...,n}) to convert them into natural
   numbers (while keeping the lexicographical order of hyperedges, as in
   ramseyrv_ohg):
*/
ramsey_stdohg(q,r,n) :=
 ev(ramseyrv_ohg(q,r,n), rv([L]):=rank_colex_ksubsets(setify(L)), rv)$
/* Note that the vertex list is ordered in such a way to keep the
   correspondence to the lexicographical ordering of the vertices.
*/


/* Statistics functions: */

nver_ramsey_hg(q,r,n) := binomial(n,r)$
nver_ramsey_ohg(q,r,n) := binomial(n,r)$
nver_ramsey_stdohg(q,r,n) := binomial(n,r)$

nhyp_ramsey_hg(q,r,n) :=
  if q > n then 0
  elseif r > n then 0
  else if r > q then 0
  elseif r = 0 then 1
  else binomial(n,q)$
nhyp_ramsey_ohg(q,r,n) :=
  if q > n then 0
  elseif r > n then 0
  else if r > q then 0
  elseif r = 0 then 1
  else binomial(n,q)$


/* ***************************
   * Generalised Tic-tac-toe *
   ***************************
*/

/*
  Let m >= 1 be the numbers of rows and n >= 1 the number of columns.
*/

/*
  Computing the horizontal, vertical and diagonal lines:
  - each of the four collection of lines represents a partitioning
    of the m*n fields of the rectangle;
  - direction of "scanning" is from left to right, and top to bottom.
*/

/* First the representations of the complete lines (of maximal length) by
   their two endpoints, via the matrix-indices (1-based).
*/

/* Horizontal lines (slope [0,1]): */
gttt_horiz(m,n) := create_list([[i,1],[i,n]], i,1,m)$
/* Vertical lines (slope [1,0]): */
gttt_vert(m,n) := create_list([[1,i],[m,i]], i,1,n)$

/* Diagonals from top-left to bottom-right (the "principal diagonal"
   and its parallels; slope [1,1]):
*/
gttt_tlbr(m,n) := create_list(
 [[max(m-i+1,1),max(i-m+1,1)],[m-max(i-n,0), min(i,n)]],
 i,1,m+n-1)$

/* Diagonals from bottom-left to top-right (the "antidiagonal" and its
   parallels; slope [1,-1]):
*/
gttt_bltr(m,n) :=
 map(lambda([L], map(lambda([p],[m-p[1]+1,p[2]]), L)),
     gttt_tlbr(m,n))$

/*
  All maximal lines, in the order horizontal, vertical, top-left to
  bottom-right, bottom-left to top-right, with repetition (only the first
  occurrence of a line remains), represented by the two end-points:
*/
gttt_lines(m,n) :=
 if m=1 and n=1 then [[[1,1],[1,1]]]
 else if m=1 or n=1 then append(gttt_horiz(m,n), gttt_vert(m,n))
 else append(gttt_horiz(m,n), gttt_vert(m,n), gttt_tlbr(m,n), gttt_bltr(m,n))$

/* A line as a sequence of points, of length k with start-point p and
   slope [dx,dy], is created by
     arpr(k,p,[dx,dy]).
   The possible [dx,dy] here are (given that we standardise movement by only
   going from left to right or top to bottom):
   - [0,1] (horizontal),
   - [1,0] (vertical),
   - [1,1] (top-left to bottom-right),
   - [-1,1] (bottom-left to top-right).
   Trivial lines (length 1) shall have slope [0,0].
*/

/* The length of a line (as the number of vertices in it) given by the two
   endpoints:
*/
gttt_length(a,b) := dist_vec(a,b,inf)+1$

/* For two endpoints a,b the slope [dx,dy]: */
gttt_slope(a,b) := [signum(first(b)-first(a)), signum(second(b)-second(a))]$

/* For a line represented by two endpoints a,b, the list of the pairs
   [start-point, slope] for lines of length at least k >= 1:
*/
gttt_startpoints(a,b,k) := block([l : gttt_length(a,b), s : gttt_slope(a,b)],
 create_list([a+i*s,s], i,0,l-k))$

/* All (different) lines of length (exactly) k >= 1, represented by pairs
   [start-point, slope]:
*/
gttt_lines_k(k,m,n) :=
 if k=1 then create_list([[i,j],[0,0]], i,1,m, j,1,n)
 else lappend(
   map(lambda([p], gttt_startpoints(p[1],p[2],k)),
       sublist(gttt_lines(m,n), lambda([p], apply(gttt_length,p)>=k))))$

/* The ordered hypergraph underlying generalised tic-tac-toe (k in a row
   on an mxn board), with vertices the pairs [i,j] and hyperedges the lines
   (horizontal, vertical, diagonal, anti-diagonal) of length k:
*/
gttt_ohg(k,m,n) := [
 create_list([i,j], i,1,m, j,1,n),
 map(setify, map(lambda([p], arpr(k, p[1], p[2])), gttt_lines_k(k,m,n)))
]$


/*!
\endhtmlonly
*/
