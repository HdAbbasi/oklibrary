/* Oliver Kullmann, 29.11.2007 (Swansea) */
/* Copyright 2007, 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/Generators/Generators.mac
  \brief Maxima functions for generating hypergraphs

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/Generators.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/PrimeNumbers.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Combinatorics/Lisp/Enumeration/Subsets.mac")$


/* ************************
   * Complete hypergraphs *
   ************************
*/

/* The standardised complete r-graph: */
complete_stdhg(n,r) := block([N : setn(n)],
  [N, powerset(N,r)])$

/* Statistics functions: */

nver_complete_hg(n,r) := n$
nhyp_complete_hg(n,r) := binomial(n,r)$


/* *****************************
   * Van der Waerden's theorem *
   *****************************
*/

/* The arithmetic progression of length k and slope d, starting with a: */
arpr(k,a,d) := create_list(a + i*d, i,0,k-1)$
/* If d = 0, then the progression is degenerated. */

/* The hypergraph of all arithmetic progressions of size k in {1,...,n}. */
/* Prerequisites: n,k are natural numbers >= 0. */
/* The order of hyperedges: Sorted by increasing last vertex, inside such
   a segment first slope 1, then 2, ... .
*/
/* First the list of arithmetic progressions of length ending in vertex n
   for n, k >= 1: */
arithprog_finish(k,n) :=
 if k=1 then [{n}] else
  create_list(setify(create_list(n-d*i,i,0,k-1)), d,1,floor((n-1)/(k-1)))$
arithprog_ohg(k,n) := if k=0 then [create_list(i,i,1,n),[{}]]
 elseif n=0 then [[],[]] else
 [create_list(i,i,1,n),
  lappend(create_list(arithprog_finish(k,i),i,1,n))]$
arithprog_hg(k,n) := ohg2hg(arithprog_ohg(k,n))$


/* Statistics functions: */

nver_arithprog_hg(k,n) := n$
nver_arithprog_ohg(k,n) := n$

nhyp_arithprog_hg(k,n) := 
 if k=0 then 1
 elseif k=1 then n
 elseif n < k then 0
 else block([q : floor((n-1)/(k-1))], q * (n - 1/2*(k-1)*(q+1)))$
nhyp_arithprog_ohg(k,n) := nhyp_arithprog_hg(k,n)$


/* Testing whether the list L represents an arithmetic progression: */
arithmetic_progression_p(L) := if length(L) <= 1 then true
  else arithmetic_progression_d_p(rest(L),L[2] - L[1])$
/* Testing whether the list L represents an arithmetic progression with
   (constant) difference d: */
arithmetic_progression_d_p(L,d) := if length(L) <= 1 then true
  else is(second(L) - first(L) = d) and arithmetic_progression_d_p(rest(L),d)$

/* The list of all arithmetic progressions of length k for the sorted list L
   (following the order of L, first all progressions starting with the
   first vertex, then with the second, ...). */
/* Prerequisites: k natural number >= 0, L ascending. */
arithmetic_progressions(L,k) :=
 if k = 0 then [[]]
 elseif k = 1 then map("[",L)
 else block([l : length(L)],
   if l <= 1 then return([]),
   block([x : first(L), res_without, res_with : []],
     L : rest(L), l : l - 1,
     res_without : arithmetic_progressions(L,k),
     /* Computing all arithmetic progressions starting with x: */
     while l > 0 do block([y : first(L), d, P, lp],
       L : rest(L), l : l - 1,
       d : y - x,
       P : [x,y], lp : 2,
       block([prev_el : y],
         for z in L unless lp = k or z - prev_el > d do
           if z - prev_el = d then (
             P : endcons(z,P), lp : lp + 1, prev_el : z
           )
       ),
       if lp = k then res_with : cons(P,res_with)
     ),
     return(append(reverse(res_with),res_without))))$

/* The hypergraph of all arithmetic progressions of size k in the
   list L of different integers: */
arithprog_list_ohg(k,L) := [L,map(setify,arithmetic_progressions(L,k))]$
arithprog_list_hg(k,L) := ohg2hg(arithprog_list_ohg(k,L))$


/* ***********************
   * Green-Tao's theorem *
   ***********************
*/

/* The list of arithmetic progressions of length k amongst the first
   prime numbers up to prime number p, and finishing with p. */
/* Prerequisite k >= 3, p > k. */
/* Inherits prp = product_primes(k) and prk = primep(k). */
arithprog_primes_finish[k,p] := arithprog_primes_finish_nm(k,p)$
/* Without memoisation: */
arithprog_primes_finish_nm(k,p) := block([res : []],
  if prk then block([d : divide(p-k,k-1)],
    if d[2] = 0 then block([prog : arpr(k-1,k+d[1],d[1])],
      if every_s('primep, prog) then res : cons(cons(k,prog),res)
  )),
  for d : prp step prp thru (p-k)/(k-1) do block([prog : arpr(k,p,-d)],
    if every_s('primep, prog) then res : cons(reverse(prog),res)
  ),
  return(res))$

/* The list of all arithmetic progressions of length k amongst the first n
   prime numbers (memo=true means memoisation of arithmetic progressions):
*/
arithprog_primes(k,n,memo) := 
 if k=0 then [[]] elseif n = 0 then []
 elseif k=1 then create_list([p], p,primes_first(n))
 elseif k=2 then map(listify,listify(powerset(setify(primes_first(n)),2)))
 else block([p : 1, res : [], prp : product_primes(k), prk : primep(k)],
   thru n do (
     p : next_prime(p),
     if p > k then 
       if memo then res : append(res,arithprog_primes_finish[k,p])
       else res : append(res,arithprog_primes_finish_nm(k,p))
   ),
   res)$

/* The hypergraph of all arithmetic progressions of size k in the first
   n prime numbers. */
/* Prerequisite: k, n integers, k, n >= 0. */
arithprog_primes_ohg(k,n) := 
 [primes_first(n), map(setify,arithprog_primes(k,n,true))]$
arithprog_primes_hg(k,n) := ohg2hg(arithprog_primes_ohg(k,n))$

/* Statistics functions: */

nver_arithprog_primes_ohg(k,n) := n$
nver_arithprog_primes_hg(k,n) := n$

nhyp_arithprog_primes_ohg(k,n) := 
 if n=0 then if k=0 then 1 else 0 else
  n_arithprog_primes_c(k,n)$
nhyp_arithprog_primes_hg(k,n) := nhyp_arithprog_primes_ohg(k,n)$


/* ******************************
   * Schur's and Rado's theorem *
   ******************************
*/

/* The hypergraph with vertex set {1, ..., n} and hyperedges {x,y,z}
   with x+y=z (note that x=y is possible, while z notin {x,y}).
*/
schurtriples_ohg(n) := 
 [create_list(i,i,1,n), create_list({x,y,x+y}, x,1,floor(n/2), y,x,n-x)]$
schurtriples_hg(n) := ohg2hg(schurtriples_ohg(n))$

/* k >= 3 */
/* To be completed. */
linequations_ohg(k,n) := block([V : setn(n)],
  0)$
/* Remark: linequations_ohg(3,n) = schurtriples_ohg(3). */


/* ********************
   * Ramsey's theorem *
   ********************
*/

/* We now consider the underlying hypergraphs for "diagonal" Ramsey
   problems, that is, for r-graphs with n vertices we consider
   q-cliques, and a counter-example showing that
   NR([q,q,...,q],r) > n, where the list of q's has length s, is
   a hypergraph colouring using s colours of the following 
   hypergraph.
   In other words, ramsey_hg(q,r,n) has as vertices the r-subsets
   of {1,...,n}, while a hyperedge is given by the set of r-subsets
   of any q-subset of {1,...,n}.
*/
/* Prerequisites: q,r,n >= 0. */
ramsey_hg(q,r,n) := block([V0 : setn(n), V],
 V : powerset(V0,r),
 if q>n then [V,{}]
 elseif r>q then [V,{}]
 else
  [V, map(lambda([T],powerset(T,r)),powerset(V0,q))])$
ramsey_ohg(q,r,n) := block([V0 : setn(n), V],
 V : listify(powerset(V0,r)),
 if q>n then [V,[]]
 elseif r=0 then [V,[{{}}]]
 elseif r>q then [V,[]]
 else
  [V, map(lambda([T],powerset(T,r)), listify(powerset(V0,q)))])$

/* The same, but using vertices e.g. "rv(1,2,3)" instead of "{1,2,3}" */

kill(rv)$
declare(rv,noun)$
rv_var([L]) := apply(nounify(rv),L)$
set_rv(s) := apply(rv_var,listify(s))$

ramseyrv_ohg(q,r,n) := block([V0 : setn(n), V],
 V : map(set_rv,listify(powerset(V0,r))),
 if q>n then [V,[]]
 elseif r=0 then [V,[{{}}]]
 elseif r>q then [V,[]]
 else
  [V, map(lambda([T],map(set_rv,powerset(T,r))), listify(powerset(V0,q)))])$

/* Standardised Ramsey hypergraphs, using colexicographical ordering of
   the vertices (as r-subsets of {1,...,n}) to convert them into natural
   numbers (while keeping the lexicographical order of ramsey_stdohg):
*/
ramsey_stdohg(q,r,n) :=
 ev(ramseyrv_ohg(q,r,n), rv([L]):=rank_colex_subsets(setify(L)), rv)$

/* Statistics functions: */

nver_ramsey_hg(q,r,n) := binom(n,r)$
nver_ramsey_ohg(q,r,n) := binom(n,r)$
nver_ramsey_stdohg(q,r,n) := binom(n,r)$

nhyp_ramsey_hg(q,r,n) := 
  if q > n then 0
  elseif r > n then 0
  else if r > q then 0
  elseif r = 0 then 1
  else binom(n,q)$ 
nhyp_ramsey_ohg(q,r,n) := 
  if q > n then 0
  elseif r > n then 0
  else if r > q then 0
  elseif r = 0 then 1
  else binom(n,q)$ 

/*!
\endhtmlonly
*/
