/* Oliver Kullmann, 23.10.2010 (Swansea) */
/* Copyright 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/Generators/VanderWaerden.mac
  \brief Tools related to the generation of hypergraphs of arithmetic progressions

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/VanderWaerden.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* ***************************
   * Arithmetic progressions *
   ***************************
*/

/* The arithmetic progression of length k and slope d, starting with a: */
arpr(k,a,d) := create_list(a + i*d, i,0,k-1)$
/* If d = 0, then the progression is degenerated. */

/* Testing whether the list L represents an arithmetic progression: */
arithmetic_progression_p(L) := if length(L) <= 1 then true
  else arithmetic_progression_d_p(rest(L),L[2] - L[1])$
/* Testing whether the list L represents an arithmetic progression with
   (constant) difference d: */
arithmetic_progression_d_p(L,d) := if length(L) <= 1 then true
  else is(second(L) - first(L) = d) and arithmetic_progression_d_p(rest(L),d)$


/* ***************************************************
   * Standard hypergraphs of arithmetic progressions *
   ***************************************************
*/

/* The list of arithmetic progressions of length k, ending in vertex n
   for n, k >= 1, smallest started-vertex first:
*/
arithprog_finish(k,n) :=
 if k=1 then [{n}] else
  reverse(create_list(setify(create_list(n-d*i,i,0,k-1)), d,1,floor((n-1)/(k-1))))$


/* The hypergraph of all arithmetic progressions of size k in {1,...,n}.
   The order of hyperedges: Sorted by increasing last vertex, inside such
   a segment with decreasing slope. This amounts to colexicographical
   ordering.
   Prerequisites: n,k are natural numbers >= 0.
*/
arithprog_ohg(k,n) := if k=0 then [create_list(i,i,1,n),[{}]]
 elseif n=0 then [[],[]] else
 [create_list(i,i,1,n),
  lappend(create_list(arithprog_finish(k,i),i,1,n))]$
arithprog_hg(k,n) := ohg2hg(arithprog_ohg(k,n))$

/* Statistics functions: */

nver_arithprog_hg(k,n) := n$
nver_arithprog_ohg(k,n) := n$

nhyp_arithprog_hg(k,n) := 
 if k=0 then 1
 elseif k=1 then n
 elseif n < k then 0
 else block([q : floor((n-1)/(k-1))], q * (n - 1/2*(k-1)*(q+1)))$
nhyp_arithprog_ohg(k,n) := nhyp_arithprog_hg(k,n)$


/* Statefree iteration through all arithmetic progressions of length k
   in the natural numbers, in colexicographical order.
*/
/* Prerequisite: k natural number >= 0: */
first_colex_arithprog(k) := create_list(i,i,1,k)$
/* Prerequisite: P ascending arithmetic progression of natural numbers >= 1: */
next_colex_arithprog(P) := block([k : length(P)],
 if k=0 then done
 elseif k=1 then [first(P)+1]
 else block([d : second(P) - first(P), l : last(P)],
  if d>1 then d : d-1
  else (d : floor(l/(k-1)), l : l+1),
  reverse(create_list(l-i*d,i,0,k-1))
 ))$


/* ******************************************************
   * Generalised hypergraphs of arithmetic progressions *
   ******************************************************
*/

/* The list of all arithmetic progressions of length k for the sorted list L
   (following the order of L, first all progressions starting with the
   first vertex, then with the second, ...). This amounts to lexicographical
   ordering.
   Prerequisites: k natural number >= 0, L ascending w.r.t. ">".
*/
arithmetic_progressions(L,k) :=
 if k = 0 then [[]]
 elseif k = 1 then map("[",L)
 else block([l : length(L)],
   if l <= 1 then return([]),
   block([x : first(L), res_without, res_with : []],
     L : rest(L), l : l - 1,
     res_without : arithmetic_progressions(L,k),
     /* Computing all arithmetic progressions starting with x: */
     while l > 0 do block([y : first(L), d, P, lp],
       L : rest(L), l : l - 1,
       d : y - x,
       P : [x,y], lp : 2,
       block([prev_el : y],
         for z in L unless lp = k or z - prev_el > d do
           if z - prev_el = d then (
             P : endcons(z,P), lp : lp + 1, prev_el : z
           )
       ),
       if lp = k then res_with : cons(P,res_with)
     ),
     return(append(reverse(res_with),res_without))))$

/* The hypergraph of all arithmetic progressions of size k in the
   list L of different integers: */
arithprog_list_ohg(k,L) := [L,map(setify,arithmetic_progressions(L,k))]$
arithprog_list_hg(k,L) := ohg2hg(arithprog_list_ohg(k,L))$


/* ************
   * Symmetry *
   ************
*/

/* VdW-hypergraphs G have the mirror symmetry m. Now for an ordered 
   vdW-hypergraph G enforce that all colourings f are symmetric w.r.t. m,
   that is, f(v) = f(m(v)).
   More precisely:
   Let n be the number of vertices in n (so the vertices are 1, ..., n).
   Then m(v) = n-v+1. m is a bijection from {1,...,floor(n/2)} to 
   {ceil(n/2)+1,...,n}, while for odd n the vertex floor(n/2)+1=ceil(n/2)
   is fixed.
   Now the function replaces every vertex v >= n/2+1 by its mirror image m(v).
   The new vertices are 1, ..., ceil(n/2).
   Removes all repetitions from the obtained list of hyperedges, keeping always
   the first occurrence.

   This amounts to considering for colourings of G only the palindromic
   colourings, which are read forward and backward the same.
*/
palindromise_vdw_ohg(G) := 
 if emptyp(first(G)) or emptyp(second(G)) or emptyp(first(second(G))) then G 
 else block([n : last(first(G)), div],
  div : ceiling(n/2),
  [create_list(i,i,1,div),
   stable_unique(map(
      lambda([H], map(lambda([v], if v >= div+1 then n-v+1 else v), H)),
      sublist(second(G), lambda([H], is(first(H) < div+1)))))])$
/* Comment: uses that first(H) is the smallest element of set H. */


/*!
\endhtmlonly
*/
