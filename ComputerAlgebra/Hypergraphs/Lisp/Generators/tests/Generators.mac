/* Oliver Kullmann, 26.6.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/Generators/tests/Generators.mac
  \brief Tests for hypergraph generators

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/tests/Generators.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/tests/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/Generators.mac")$

kill(f)$


/* ************************
   * Complete hypergraphs *
   ************************
*/

okltest_complete_hg(f) := (
  assert(f({},0) = [{},{{}}]),
  assert(f({},1) = [{},{}]),
  assert(f({-1},0) = [{-1},{{}}]),
  assert(f({-1},1) = [{-1},{{-1}}]),
  assert(f({-1},2) = [{-1},{}]),
  true)$

okltest_complete_stdhg(f) := (
  assert(f(0,0) = [{},{{}}]),
  assert(f(0,1) = [{},{}]),
  assert(f(1,0) = [{1},{{}}]),
  assert(f(1,1) = [{1},{{1}}]),
  assert(f(2,0) = [{1,2},{{}}]),
  assert(f(2,1) = [{1,2},{{1},{2}}]),
  assert(f(2,2) = [{1,2},{{1,2}}]),
  assert(okltest_complete_stdg(buildq([f],lambda([n],f(n,2))))),
  true)$

okltest_complete_ohg(f) := (
  assert(f([],0) = [[],[{}]]),
  assert(f([2,1,-3],2) = [[2,1,-3],[{2,1},{2,-3},{1,-3}]]),
  assert(f([2,1,-3,-2],2) = [[2,1,-3,-2],[{2,1},{2,-3},{1,-3},{2,-2},{1,-2},{-3,-2}]]),
  assert(okltest_complete_hg(buildq([f], lambda([V,r], ohg2hg(f(listify(V),r))))) = true),
  true)$

okltest_complete_stdohg(f) := (
  assert(f(0,0) = [[],[{}]]),
  assert(f(4,2) = [[1,2,3,4],[{1,2},{1,3},{2,3},{1,4},{2,4},{3,4}]]),
  assert(okltest_complete_stdhg(buildq([f], lambda([n,r], ohg2hg(f(n,r))))) = true),
  true)$

okltest_nver_complete_hg(f) := (
  for n : 0 thru 4 do
    for r : 0 thru 4 do block([nver : f(n,r)],
      assert(nver = length(complete_stdhg(n,r)[1])),
      assert(nver = length(complete_stdohg(n,r)[1]))
  ),
  true)$

okltest_nhyp_complete_hg(f) := (
  for n : 0 thru 4 do
    for r : 0 thru 4 do block([nhyp : f(n,r)],
      assert(f(n,r) = length(complete_stdhg(n,r)[2])),
      assert(f(n,r) = length(complete_stdohg(n,r)[2]))
  ),
  true)$


/* ***************************
   * Generalised Tic-tac-toe *
   ***************************
*/

okltest_gttt_tlbr(f) := (
  assert(f(1,1) = [[[1,1],[1,1]]]),
  for n : 1 thru 5 do
    assert(f(1,n) = create_list([[1,i],[1,i]],i,1,n)),
  for m : 1 thru 5 do
    assert(f(m,1) = create_list([[m-i,1],[m-i,1]],i,0,m-1)),
  assert(f(2,2) = [[[2,1],[2,1]],[[1,1],[2,2]],[[1,2],[1,2]]]),
  assert(f(2,3) = [[[2,1],[2,1]],[[1,1],[2,2]],[[1,2],[2,3]],[[1,3],[1,3]]]),
  assert(f(3,2) = [[[3,1],[3,1]],[[2,1],[3,2]],[[1,1],[2,2]],[[1,2],[1,2]]]),
  assert(f(3,3) = [[[3,1],[3,1]],[[2,1],[3,2]],[[1,1],[3,3]],[[1,2],[2,3]],[[1,3],[1,3]]]),
  assert(f(4,6) = [[[4,1],[4,1]],[[3,1],[4,2]],[[2,1],[4,3]],[[1,1],[4,4]],[[1,2],[4,5]],[[1,3],[4,6]],[[1,4],[3,6]],[[1,5],[2,6]],[[1,6],[1,6]]]),
  true)$

okltest_gttt_bltr(f) := (
  assert(f(1,1) = [[[1,1],[1,1]]]),
  for n : 1 thru 5 do
    assert(f(1,n) = create_list([[1,i],[1,i]],i,1,n)),
  for m : 1 thru 5 do
    assert(f(m,1) = create_list([[i,1],[i,1]],i,1,m)),
  assert(f(2,2) = [[[1,1],[1,1]],[[2,1],[1,2]],[[2,2],[2,2]]]),
  assert(f(2,3) = [[[1,1],[1,1]],[[2,1],[1,2]],[[2,2],[1,3]],[[2,3],[2,3]]]),
  assert(f(3,2) = [[[1,1],[1,1]],[[2,1],[1,2]],[[3,1],[2,2]],[[3,2],[3,2]]]),
  assert(f(3,3) = [[[1,1],[1,1]],[[2,1],[1,2]],[[3,1],[1,3]],[[3,2],[2,3]],[[3,3],[3,3]]]),
  assert(f(4,6) = [[[1,1],[1,1]],[[2,1],[1,2]],[[3,1],[1,3]],[[4,1],[1,4]],[[4,2],[1,5]],[[4,3],[1,6]],[[4,4],[2,6]],[[4,5],[3,6]],[[4,6],[4,6]]]),
  true)$

okltest_gttt_lines(f) := (
  assert(f(1,1) = [[[1,1],[1,1]]]),
  assert(f(1,2) = [ [[1,1],[1,2]], [[1,1],[1,1]],[[1,2],[1,2]] ]),
  assert(f(2,1) = [ [[1,1],[1,1]],[[2,1],[2,1]], [[1,1],[2,1]] ]),
  assert(f(2,2) = [ [[1,1],[1,2]],[[2,1],[2,2]], [[1,1],[2,1]],[[1,2],[2,2]], [[2,1],[2,1]],[[1,1],[2,2]],[[1,2],[1,2]], [[1,1],[1,1]],[[2,1],[1,2]],[[2,2],[2,2]] ]),
  true)$

okltest_gttt_length(f) := block([x,y],
  assert(f([x,y],[x,y]) = 1),
  assert(f([1,1],[3,3]) = 3),
  assert(f([3,3],[1,1]) = 3),
  assert(f([1,1],[1,4]) = 4),
  assert(f([4,7],[9,7]) = 6),
  true)$

okltest_gttt_slope(f) := block([x,y],
  assert(f([x,y],[x,y]) = [0,0]),
  assert(f([1,1],[1,2]) = [0,1]),
  assert(f([1,1],[2,1]) = [1,0]),
  assert(f([1,1],[2,2]) = [1,1]),
  assert(f([2,1],[1,2]) = [-1,1]),
  assert(f([1,1],[1,3]) = [0,1]),
  assert(f([1,1],[4,1]) = [1,0]),
  assert(f([1,1],[3,3]) = [1,1]),
  assert(f([3,1],[1,3]) = [-1,1]),
  true)$

okltest_gttt_startpoints(f) := block([x,y],
  assert(f([x,y],[x,y],1) = [[[x,y],[0,0]]]),
  assert(f([1,1],[3,1],1) = [[[1,1],[1,0]],[[2,1],[1,0]],[[3,1],[1,0]]]),
  assert(f([1,1],[3,1],2) = [[[1,1],[1,0]],[[2,1],[1,0]]]),
  assert(f([1,1],[3,1],3) = [[[1,1],[1,0]]]),
  assert(f([1,1],[3,1],4) = []),
  assert(f([1,1],[3,3],1) = [[[1,1],[1,1]],[[2,2],[1,1]],[[3,3],[1,1]]]),
  assert(f([1,1],[3,3],2) = [[[1,1],[1,1]],[[2,2],[1,1]]]),
  assert(f([1,1],[3,3],3) = [[[1,1],[1,1]]]),
  assert(f([1,1],[3,3],4) = []),
  true)$

okltest_gttt_lines_k(f) := (
  assert(f(1,1,1) = [[[1,1],[0,0]]]),
  assert(f(1,2,2) = [[[1,1],[0,0]],[[1,2],[0,0]],[[2,1],[0,0]],[[2,2],[0,0]]]),
  assert(f(2,1,1) = []),
  assert(f(2,1,2) = [[[1,1],[0,1]]]),
  assert(f(2,2,1) = [[[1,1],[1,0]]]),
  assert(f(2,2,2) = [ [[1,1],[0,1]],[[2,1],[0,1]],[[1,1],[1,0]],[[1,2],[1,0]],[[1,1],[1,1]],[[2,1],[-1,1]] ]),
  assert(f(3,2,2) = []),
  assert(f(3,2,3) = [[[1,1],[0,1]],[[2,1],[0,1]]]),
  assert(f(3,3,2) = [[[1,1],[1,0]],[[1,2],[1,0]]]),
  assert(f(3,3,3) = [ [[1,1],[0,1]],[[2,1],[0,1]],[[3,1],[0,1]], [[1,1],[1,0]],[[1,2],[1,0]],[[1,3],[1,0]], [[1,1],[1,1]], [[3,1],[-1,1]] ]),
  true)$

okltest_gttt_ohg(f) := (
  assert(f(1,1,1) = [[[1,1]], [{[1,1]}]]),
  assert(f(2,1,1) = [[[1,1]], []]),
  assert(f(2,2,2) = [[[1,1],[1,2],[2,1],[2,2]], [{[1,1],[1,2]},{[2,1],[2,2]},{[1,1],[2,1]},{[1,2],[2,2]},{[1,1],[2,2]},{[2,1],[1,2]}]]),
  true)$

/*!
\endhtmlonly
*/
