/* Oliver Kullmann, 26.6.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/Generators/tests/Generators.mac
  \brief Tests for hypergraph generators

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/tests/Generators.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/tests/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$

kill(f)$


/* ************************
   * Complete hypergraphs *
   ************************
*/

okltest_complete_stdhg(f) := (
  assert(f(0,0) = [{},{{}}]),
  assert(f(0,1) = [{},{}]),
  assert(f(1,0) = [{1},{{}}]),
  assert(f(1,1) = [{1},{{1}}]),
  assert(f(2,0) = [{1,2},{{}}]),
  assert(f(2,1) = [{1,2},{{1},{2}}]),
  assert(f(2,2) = [{1,2},{{1,2}}]),
  assert(okltest_complete_stdg(buildq([f],lambda([n],f(n,2))))),
  true)$


/* *****************************
   * Van der Waerden's theorem *
   *****************************
*/

okltest_arithprog_hg(f) := (
  assert(f(0,-1) = [{},{{}}]),
  assert(f(1,-1) = [{},{}]),
  assert(f(0,0) = [{},{{}}]),
  assert(f(1,0) = [{},{}]),
  assert(f(-1,-1) = [{},{}]),
  assert(f(-1,0) = [{},{}]),
  assert(f(-1,1) = [{1},{}]),
  assert(f(2,1) = [{1},{}]),
  for n : 0 thru 4 do block([N : setn(n)],
    for k in [0,1,2,n] do
      assert(f(k,n) = [N,powerset(N,k)])
  ),
  assert(f(3,4) = [{1,2,3,4},{{1,2,3},{2,3,4}}]),
  true)$

okltest_arithprog_ohg(f) := (
  for k : 0 thru 4 do
    for n : 0 thru 4 do
      assert(ohg_p(f(k,n))),
  assert(okltest_arithprog_hg(buildq([f],lambda([k,n],ohg2hg(f(k,n)))))),
  true)$

okltest_arithmetic_progression_p(f) := (
  assert(f([]) = true),
  assert(f([1]) = true),
  assert(f([1,3]) = true),
  assert(f([1,2,3]) = true),
  assert(f([1,2,4]) = false),
  assert(f([1,3,5,7]) = true),
  assert(f([1,3,4,6]) = false),
  true)$

okltest_arithmetic_progression_d_p(f) := (
  /* XXX */
  true)$

okltest_arithmetic_progressions(f) := (
  assert(f([],0) = [[]]),
  assert(f([1],0) = [[]]),
  assert(f([],1) = []),
  assert(f([1],1) = [[1]]),
  assert(f([2,4],1) = [[2],[4]]),
  assert(f([],2) = []),
  assert(f([1],2) = []),
  assert(f([1,3],2) = [[1,3]]),
  assert(f([1,2,3],2) = [[1,2],[1,3],[2,3]]),
  assert(f([1,3,4,6],2) = [[1,3],[1,4],[1,6],[3,4],[3,6],[4,6]]),
  assert(f([1,2,3],3) = [[1,2,3]]),
  assert(f([1,3,4,6],3) = []),
  assert(f([1,3,4,5,6],3) = [[1,3,5],[3,4,5],[4,5,6]]),
  assert(f([1,3,5,6,8,9,10,12],3) = [[1,3,5],[1,5,9],[3,6,9],[6,8,10],[6,9,12],[8,9,10],[8,10,12]]),
  assert(okltest_arithprog_ohg(buildq([f],lambda([k,n],[create_list(i,i,1,n),map(setify,f(create_list(i,i,1,n),k))])))),
  true)$

okltest_arithprog_list_ohg(f) := (

  true)$


/* ***********************
   * Green-Tao's theorem *
   ***********************
*/

okltest_arithprog_primes_finish(f) := block([primes_rev_init_seg : []],
  assert(f[0,0] = []),
  assert(f[1,0] = []),
  primes_rev_init_seg : [2],
  assert(f[0,1] = []),
  assert(f[1,1] = [[2]]),
  primes_rev_init_seg : [3,2],
  assert(f[1,2] = [[3]]),
  primes_rev_init_seg : [7,5,3,2],
  assert(f[2,4] = [[2,7],[3,7],[5,7]]),
  /* XXX */
  true)$

okltest_arithprog_primes_finish_nm(f) := block([primes_rev_init_seg : []],
  assert(f(0) = []),
  assert(f(1) = []),
  primes_rev_init_seg : [2],
  assert(f(0) = []),
  assert(f(1) = [[2]]),
  primes_rev_init_seg : [3,2],
  assert(f(1) = [[3]]),
  primes_rev_init_seg : [7,5,3,2],
  assert(f(2) = [[2,7],[3,7],[5,7]]),
  /* XXX */
  true)$

okltest_arithprog_primes(f) := (
  /* XXX */
  for k : 0 thru 4 do
    for n : 0 thru 6 do
      assert(setify(f(k,n)) = setify(arithmetic_progressions(primes_first(n),k))),
  true)$

okltest_arithprog_primes_ohg(f) := (
  assert(f(0,0) = [[],[{}]]),
  assert(f(0,1) = [[2],[{}]]),
  assert(f(1,0) = [[],[]]),
  assert(f(1,1) = [[2],[{2}]]),
  assert(f(1,2) = [[2,3],[{2},{3}]]),
  assert(f(2,0) = [[],[]]),
  assert(f(2,1) = [[2],[]]),
  assert(f(2,2) = [[2,3],[{2,3}]]),
  assert(f(2,3) = [[2,3,5],[{2,3},{2,5},{3,5}]]),
  assert(f(3,4) = [[2,3,5,7],[{3,5,7}]]),
  true)$


/* ******************************
   * Schur's and Rado's theorem *
   ******************************
*/

okltest_schurtriples_ohg(f) := (
  assert(f(0) = [[],[]]),
  assert(f(1) = [[1],[]]),
  assert(f(2) = [[1,2], [{1,1,2}]]),
  assert(f(3) = [[1,2,3], [{1,2},{1,2,3}]]),
  assert(f(4) = [[1,2,3,4], [{1,2},{1,2,3},{1,3,4},{2,2,4}]]),
  true)$

okltest_schurtriples_hg(f) := (
  assert(f(0) = [{},{}]),
  assert(f(1) = [{1},{}]),
  assert(f(2) = [{1,2}, {{1,1,2}}]),
  assert(f(3) = [{1,2,3}, {{1,2},{1,2,3}}]),
  assert(f(4) = [{1,2,3,4}, {{1,2},{1,2,3},{1,3,4},{2,2,4}}]),
  true)$


/* ********************
   * Ramsey's theorem *
   ********************
*/

okltest_ramsey_hg(f) := (
  for q : 0 thru 3 do
    for r : 0 thru 3 do
      for n : 0 thru 3 do block([G : f(q,r,n)],
        assert(length(G[1]) = binom(n,r)),
        assert(length(G[2]) = if q>n then 0 else
          if r<=q then (if r=0 then 1 else binom(n,q)) else 0)),
  true)$

okltest_ramsey_ohg(f) := (
  assert(f(0,0,0) = [[{}],[{{}}]]),
  assert(f(0,0,1) = [[{}],[{{}}]]),
  assert(f(0,1,0) = [[],[]]),
  assert(f(1,0,0) = [[{}],[]]),
  assert(f(0,0,2) = [[{}], [{{}}]]),
  assert(f(0,2,0) = [[], []]),
  assert(f(2,0,0) = [[{}], []]).
  /* XXX */
  for q : 0 thru 3 do
    for r : 0 thru 3 do
      for n : 0 thru 3 do
        assert(ohg_p(f(q,r,n))),
  assert(okltest_ramsey_hg(buildq([f],lambda([q,r,n],ohg2hg(f(q,r,n)))))),
  true)$

okltest_rv_var(f) := block([x,y,z],
  assert(f() = rv()),
  assert(f(x) = rv(x)),
  assert(f(x,y) = rv(x,y)),
  assert(f(x,y,z) = rv(x,y,z)),
  true)$

okltest_set_rv(f) := (
  assert(f({}) = rv()),
  assert(f({1}) = rv(1)),
  assert(f({1,3,5}) = rv(1,3,5)),
  true)$

okltest_ramseyrv_ohg(f) := (
  assert(okltest_ramsey_ohg(buildq([f], lambda([q,r,n], ev(f(q,r,n), rv([L]):=setify(L), rv)))) = true),
  /* XXX */
  true)$

okltest_ramsey_stdohg(f) := (
  assert(f(4,3,5) = [[1,2,5,3,6,8,4,7,9,10],[{1,2,3,4},{1,5,6,7},{2,5,8,9},{3,6,8,10},{4,7,9,10}]]),
  /* XXX */
  true)$

/*!
\endhtmlonly
*/
