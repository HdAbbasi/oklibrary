/* Oliver Kullmann, 27.3.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/tests/SetSystems.mac
  \brief Tests regarding set-system functions

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/tests/SetSystems.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$


kill(f)$

/* **************
   * Singletons *
   **************
*/

okltest_singletonp(f) := (
  assert(f({}) = false),
  assert(f({1}) = true),
  assert(f({1,2}) = false),
  true)$

okltest_single_element(f) := (
  assert(f({1}) = 1),
  assert(f({{}}) = {}),
  true)$

okltest_choose_element(f) := (
  assert(f({1}) = 1),
  assert(elementp(f({1,2}),{1,2}) = true),
  true)$

okltest_first_element(f) := (
  assert(f({1}) = 1),
  assert(f({1,2,3}) = 1),
  assert(f({1,2,3,-1,-2,-3}) = -3),
  assert(f({{1,2},{1,3},{2,3}}) = {1,2}),
  assert(f({{1,2},{1,3},{2,-3}}) = {-3,2}),
  assert(f({[],[1],[2]}) = []),
  true)$

okltest_last_element(f) := (
  assert(f({1}) = 1),
  assert(f({1,2,3}) = 3),
  assert(f({1,2,3,-1,-2,-3}) = 3),
  assert(f({{1,2},{1,3},{2,3}}) = {2,3}),
  assert(f({{1,2},{1,3},{2,-3}}) = {1,3}),
  assert(f({[],[1],[2]}) = [2]),
  true)$


/* *********************
   * Set constructions *
   *********************
*/

okltest_setn(f) := (
  assert(f(0) = {}),
  assert(f(1) = {1}),
  assert(f(2) = {1,2}),
  assert(f(-1) = {}),
  true)$

okltest_setmn(f) := (
  okltest_setn(buildq([f],lambda([n],f(1,n)))),
  assert(f(0,0) = {0}),
  assert(f(2,5) = {2,3,4,5}),
  assert(f(2,1) = {}),
  assert(f(-3,-4) = {}),
  assert(f(-4,-3) = {-4,-3}),
  true)$

okltest_singletons(f) := (
  assert(f({}) = {}),
  assert(f({{}}) = {{{}}}),
  assert(f({1,2}) = {{1},{2}}),
  assert(f({1,2,4}) = {{1},{2},{4}}),
  true)$

okltest_upairs(f) := (
  assert(f({},{}) = {}),
  assert(f({},{1}) = {}),
  assert(f({1},{}) = {}),
  assert(f({1},{1}) = {{1}}),
  assert(f({1},{2}) = {{1,2}}),
  assert(f({1,2},{2,3}) = {{1,2},{1,3},{2},{2,3}}),
  true)$


/* **********************************
   * Constructions related to union *
   **********************************
*/

okltest_lunion(f) := block(
  assert(f({}) = {}),
  assert(f({{}}) = {}),
  assert(f({{1,2},{2,3},{3,4}}) = {1,2,3,4}),
  assert(f({{-6,-5,-4,-3,-2,-1},{-6,-5,-4,-3,-2,1},{-6,-5,-4,-3,-1,2},{-6,-5,-4,-3,1,2},{-6,-5,-4,-2,-1,3},{-6,-5,-4,-2,1,3},{-6,-5,-4,-1,2,3},{-6,-5,-4,1,2,3}, {-6,-5,-3,-2,-1,4},{-6,-5,-3,-2,1,4},{-6,-5,-3,-1,2,4},{-6,-5,-3,1,2,4},{-6,-5,-2,-1,3,4},{-6,-5,-2,1,3,4},{-6,-5,-1,2,3,4},{-6,-5,1,2,3,4},{-6,-4,-3,-2,-1,5},{-6,-4,-3,-2,1,5},{-6,-4,-3,-1,2,5},{-6,-4,-3,1,2,5},{-6,-4,-2,-1,3,5},{-6,-4,-2,1,3,5},{-6,-4,-1,2,3,5},{-6,-4,1,2,3,5},{-6,-3,-2,-1,4,5},{-6,-3,-2,1,4,5},{-6,-3,-1,2,4,5},{-6,-3,1,2,4,5},{-6,-2,-1,3,4,5},{-6,-2,1,3,4,5},{-6,-1,2,3,4,5},{-6,1,2,3,4,5},{-5,-4,-3,-2,-1,6},{-5,-4,-3,-2,1,6},{-5,-4,-3,-1,2,6},{-5,-4,-3,1,2,6},{-5,-4,-2,-1,3,6},{-5,-4,-2,1,3,6}, {-5,-4,-1,2,3,6},{-5,-4,1,2,3,6},{-5,-3,-2,-1,4,6},{-5,-3,-2,1,4,6},{-5,-3,-1,2,4,6},{-5,-3,1,2,4,6},{-5,-2,-1,3,4,6},{-5,-2,1,3,4,6},{-5,-1,2,3,4,6},{-5,1,2,3,4,6}, {-4,-3,-2,-1,5,6},{-4,-3,-2,1,5,6},{-4,-3,-1,2,5,6},{-4,-3,1,2,5,6},{-4,-2,-1,3,5,6},{-4,-3,-2,-1,5,6},{-4,-3,-2,1,5,6},{-4,-3,-1,2,5,6},{-4,-3,1,2,5,6},{-4,-2,-1,3,5,6},{-4,-2,1,3,5,6},{-4,-1,2,3,5,6},{-4,1,2,3,5,6},{-3,-2,-1,4,5,6},{-3,-2,1,4,5,6}, {-3,-1,2,4,5,6},{-3,1,2,4,5,6},{-2,-1,3,4,5,6},{-2,1,3,4,5,6},{-1,2,3,4,5,6},{1,2,3,4,5,6}}) = {-1,-2,-3,-4,-5,-6,1,2,3,4,5,6}),
  assert(f([]) = {}),
  assert(f([{}]) = {}),
  assert(f([{1,2},{2,3},{3,4}]) = {1,2,3,4}),
  if oklib_test_level = 0 then return(true),
  assert(f(create_list({i},i,1,2^16+1)) = setn(2^16+1)),
  true)$

okltest_family_sets_union(f) := block([func],
  assert(f({},func) = {}),
  for n : 0 thru 4 do block([N : setn(n)],
    assert(f(N, lambda([i],{i})) = N)),
  true)$

okltest_set_sum(f) := (
  assert(f([]) = {}),
  assert(f([{1}]) = {[1,1]}),
  for n : 0 thru 3 do block([N : setn(n)],
    assert(f([N]) = corr_cartesian_product(N,{1}))),
  assert(f([{1,2},{1,3}]) = {[1,1],[2,1],[1,2],[3,2]}),
  true)$

okltest_cunion(f) := (
  assert(f({},{{1,2}}) = {}),
  assert(f({{}},{{1,2}}) = {{1,2}}),
  assert(f({{1,2},{2,3}},{{3,4},{4,5}}) = {{1,2,3,4},{1,2,4,5},{2,3,4},{2,3,4,5}}),
  true)$

okltest_add_elements(f) := (
  assert(f({1,2},{{},{3,4},{1,4}}) = {{1,2},{1,2,3,4},{1,2,4}}),
  /* XXX */
  true)$

okltest_add_element(f) := (
  assert(f(1,{}) = {}),
  assert(f(1,{{}}) = {{1}}),
  assert(f(1,{{1},{2,3}}) = {{1},{1,2,3}}),
  true)$

okltest_cunion_l(f) := (
  okltest_cunion(buildq([f], lambda([A,B], setify(f(listify(A),listify(B)))))),
  /* XXX */
  true)$

okltest_add_elements_l(f) := (
  okltest_add_elements(buildq([f], lambda([x,S], setify(f(x,listify(S)))))),
  /* XXX */
  true)$

okltest_add_element_l(f) := (
  okltest_add_element(buildq([f], lambda([x,S], setify(f(x,listify(S)))))),
  /* XXX */
  true)$


/* ********************************************
   * Constructions related to complementation *
   ********************************************
*/

okltest_ecomp(f) := (
  assert(f({},{}) = {}),
  assert(f({},{1}) = {}),
  assert(f({{}},{}) = {{}}),
  assert(f({{}},{1}) = {{1}}),
  assert(f({{1},{2}},{1,2,3}) = {{2,3},{1,3}}),
  true)$

okltest_setdifference2(f) := (
  assert(f({},{}) = {}),
  assert(f({{1},{}},{}) = {{1},{}}),
  assert(f({{1},{}},{2}) = {{1},{}}),
  assert(f({{1,2},{2,3}},{1}) = {{2},{2,3}}),
  assert(f({{1,2},{2,3}},{1,2,3}) = {{}}),
  assert(f([],{}) = []),
  assert(f([{1},{}],{}) = [{1},{}]),
  assert(f([{1},{}],{2}) = [{1},{}]),
  assert(f([{1,2},{2,3}],{1}) = [{2},{2,3}]),
  assert(f([{1,2},{2,3}],{1,2,3}) = [{},{}]),
  true)$

okltest_setdifference2e(f) := (
  assert(f([],1) = []),
  assert(f({},1) = {}),
  assert(f([{1,2},{},{3},{2,3}],2) = [{1},{},{3},{3}]),
  true)$


/* **************************************************
   * Constructions related to the cartesian product *
   **************************************************
*/

okltest_corr_cartesian_product(f) := (
  assert(f() = {[]}),
  assert(f({}) = {}),
  assert(f({1,3}) = {[1],[3]}),
  assert(f({-1,-2},{2}) = {[-1,2],[-2,2]}),
  true)$

okltest_cartesian_product_l(f) := (
  assert(f([]) = [[]]),
  assert(f([[]]) = []),
  assert(f([[1]]) = [[1]]),
  assert(f([[2,1]]) = [[2],[1]]),
  assert(f([[1],[]]) = []),
  assert(f([[1,2],[-3,-4]]) = [[1,-3],[1,-4],[2,-3],[2,-4]]),
  assert(okltest_corr_cartesian_product(buildq([f],lambda([[S]],setify(f(map(listify,S))))))),
  true)$

okltest_all_transformations_l(f) := (
  assert(f({}) = {[]}),
  assert(f({2}) = {[2]}),
  assert(f({-1,1}) = {[-1,-1],[-1,1],[1,-1],[1,1]}),
  assert(length(f({0,2,4})) = 27),
  true)$

okltest_all_transformations_l_l(f) := (
  assert(f([]) = [[]]),
  assert(f([2,1]) = [[2,2],[2,1],[1,2],[1,1]]),
  assert(okltest_all_transformations_l(buildq([f],lambda([X],setify(f(listify(X))))))),
  true)$

okltest_all_tuples(f) := (
  assert(f({},0) = {[]}),
  assert(f({},1) = {}),
  assert(f({1},0) = {[]}),
  assert(f({1},1) = {[1]}),
  assert(f({1},2) = {[1,1]}),
  assert(f({1,2},0) = {[]}),
  assert(f({1,2},1) = {[1],[2]}),
  assert(f({1,2},2) = {[1,2],[2,1],[1,1],[2,2]}),
  assert(f({1,2},3) = {[1,1,1],[1,1,2],[1,2,1],[2,1,1],[1,2,2],[2,1,2],[2,2,1],[2,2,2]}),
  assert(okltest_all_transformations_l(buildq([f],lambda([X],f(X,length(X))))) = true),
  true)$

okltest_all_tuples_l(f) := (
  assert(f([],0) = [[]]),
  assert(f([],1) = []),
  assert(f([1],0) = [[]]),
  assert(f([1],1) = [[1]]),
  assert(f([1],2) = [[1,1]]),
  assert(f([1,2],0) = [[]]),
  assert(f([1,2],1) = [[1],[2]]),
  assert(f([1,2],2) = [[1,1],[1,2],[2,1],[2,2]]),
  assert(f([1,2],3) = [[1,1,1],[1,1,2],[1,2,1],[1,2,2],[2,1,1],[2,1,2],[2,2,1],[2,2,2]]),
  assert(okltest_all_transformations_l_l(buildq([f],lambda([X],f(X,length(X))))) = true),
  true)$


/* ************************************
   * Constructions related to subsets *
   ************************************
*/

okltest_kpermutations(f) := (
  for n : 0 thru 5 do block([N : setn(n)],
    assert(f(N,0) = [[]]),
    assert(f(N,1) = create_list([i],i,1,n))
  ),
  assert(f({1,3,5},2) = [[1,3],[3,1],[1,5],[5,1],[3,5],[5,3]]),
  assert(length(f({1,4,8,9},3)) = 4*3*2),
  true)$

okltest_powerset_l(f) := (
  assert(f([],0) = [[]]),
  assert(f([],1) = []),
  assert(f([1],0) = [[]]),
  assert(f([1],1) = [[1]]),
  assert(f([1],2) = []),
  assert(f([1,1],0) = [[]]),
  assert(f([1,1],1) = [[1]]),
  assert(f([1,1],2) = []),
  assert(f([1,2],0) = [[]]),
  assert(f([1,2],1) = [[1],[2]]),
  assert(f([1,2],2) = [[1,2]]),
  assert(f([1,2],3) = []),
  assert(f([2,1],0) = [[]]),
  assert(f([2,1],1) = [[1],[2]]),
  assert(f([2,1],2) = [[1,2]]),
  assert(f([2,1],3) = []),
  assert(f([2,1,2,2,1,1],0) = [[]]),
  assert(f([2,1,2,2,1,1],1) = [[1],[2]]),
  assert(f([2,1,2,2,1,1],2) = [[1,2]]),
  assert(f([2,1,2,2,1,1],3) = []),
  assert(f([1,2,3],0) = [[]]),
  assert(f([1,2,3],1) = [[1],[2],[3]]),
  assert(f([1,2,3],2) = [[1,2],[1,3],[2,3]]),
  assert(f([1,2,3],3) = [[1,2,3]]),
  assert(f([1,2,3],4) = []),
  true)$

okltest_powerlist2(f) := block(
  assert(f([]) = []),
  assert(f([1]) = []),
  for n : 0 thru 5 do 
    assert(f(create_list(1,i,1,n)) = create_list([1,1],i,1,binomial(n,2))),
  assert(f([1,2]) = [[1,2]]),
  assert(f([1,2,3]) = [[1,2],[1,3],[2,3]]),
  assert(f([1,2,1]) = [[1,2],[1,1],[2,1]]),
  if oklib_test_level = 0 then return(true),
  assert(f(create_list(1,i,1,300)) = create_list([1,1],i,1,binomial(300,2))),
  block([R : f(create_list(i,i,1,300))],
    assert(length(R) = binomial(300,2)),
    assert(setify(R) = map(listify,powerset(setn(300),2)))
  ),
  true)$


/* *******************************
   * Tests related to partitions *
   *******************************
*/

okltest_empty_element_p(f) := (
  assert(f({}) = false),
  assert(f({{}}) = true),
  assert(f({{1}}) = false),
  assert(f({{1},{}}) = true),
  true)$

okltest_non_disjoint_pair(f) := (
  assert(f([]) = []),
  assert(f([{}]) = []),
  assert(f([{1},{2}]) = []),
  assert(f([{1},{1,2}]) = [1,2]),
  assert(f([{1,2},{3,4},{5,6},{5,7}]) = [3,4]),
  assert(f([{1},{1,2},{1,3}]) = [1,2]),
  true)$

okltest_disjoint_set_system_p(f) := (
  assert(f({}) = true),
  assert(f({{}}) = true),
  assert(f({{1},{},{2}}) = true),
  assert(f({{1}}) = true),
  assert(f({{1,2},{2,3}}) = false),
  assert(f({{1},{2},{},{3},{3,4}}) = false),
  true)$

okltest_partitionp(f) := block(
  assert(f({},{}) = true),
  assert(f({{}},{}) = false),
  assert(f({{1},{}},{1}) = false),
  assert(f({{1}},{1}) = true),
  assert(f({{}},{1}) = false),
  assert(f({{2}},{1}) = false),
  assert(f({{2},{1}},{1}) = false),
  assert(f({{1},{2},{3}},{1,2,3}) = true),
  assert(f({{1},{2,3},{3,4}},{1,2,3,4}) = false),
  assert(f({{1,2,3,4}},{1,2,3,4}) = true),
  assert(f({{1},{2},{3},{4}},{1,2,3}) = false),
  true)$


/* ********************************
   * Tests related to subsumption *
   ********************************
*/

okltest_sort_length(f) := (
  assert(f([]) = []),
  for n : 0 thru 5 do block([L : create_list(setn(i),i,1,n)],
    assert(f(reverse(L)) = L)
  ),
  assert(elementp(f([{1,2},{2,3}]), {[{1,2},{2,3}],[{2,3},{1,2}]}) = true),
  true)$

okltest_sort_length_desc(f) := (
  /* XXX */
  true)$

okltest_antichain_p(f) := (
  assert(f({}) = true),
  assert(f({{}}) = true),
  assert(f({{1}}) = true),
  assert(f({{1,2},{2,3}}) = true),
  assert(f({{1,2},{2}}) = false),
  true)$


/* *****************************************
   * Constructions related to disjointness *
   *****************************************
*/

okltest_remove_with_element(f) := (
  assert(f({},1) = {}),
  assert(f({{1},{2}},1) = {{2}}),
  true)$

okltest_remove_with_element_l(f) := (
  assert(f([],1) = []),
  assert(f([{1},{2},{1},{1,3},{2,3}],1) = [{2},{2,3}]),
  true)$

okltest_remove_non_disjoint(f) := (
  assert(f({},{}) = {}),
  assert(f({{1,2},{2,3},{3,4},{},{1,3}},{2,4}) = {{},{1,3}}),
  true)$

okltest_unify_nondisjoint_elements(f) := (
  /* XXX */
  true)$


/* *****************************************
   * Constructions related to subsumption  *
   *****************************************
*/

okltest_min_elements(f) := (
  assert(f({}) = {}),
  assert(f({{}}) = {{}}),
  assert(f({{1},{2}}) = {{1},{2}}),
  assert(f({{1,2},{1,2,4},{3},{3,4},{5,6}}) = {{1,2},{3},{5,6}}),
  for n : 0 thru 3 do
    assert(f(powerset(setn(n))) = {{}}),
  true)$

okltest_max_elements(f) := (
  assert(f({}) = {}),
  assert(f({{}}) = {{}}),
  assert(f({{1},{2}}) = {{1},{2}}),
  assert(f({{1,2},{1,2,4},{3},{3,4},{5,6}}) = {{1,2,4},{3,4},{5,6}}),
  for n : 0 thru 3 do
    assert(f(powerset(setn(n))) = {setn(n)}),
  true)$

/*!
\endhtmlonly
*/
