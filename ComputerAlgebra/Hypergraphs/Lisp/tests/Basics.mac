/* Oliver Kullmann, 16.3.2008 (Swansea) */
/* Copyright 2008, 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/tests/Basics.mac
  \brief Tests for basic hypergraph functions

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/tests/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/tests/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$


kill(f)$

/* ************************************
   * Checking the defining properties *
   ************************************
*/

okltest_hg_p(f) := (
  assert(f(0) = false),
  assert(f([]) = false),
  assert(f([{}]) = false),
  assert(f([{},[]]) = false),
  assert(f([[],{}]) = false),
  assert(f([{},{}]) = true),
  /* XXX */
  true)$

okltest_ohg_p(f) := (
  assert(f(0) = false),
  assert(f([]) = false),
  assert(f([[]]) = false),
  assert(f([{},[]]) = false),
  assert(f([[],{}]) = false),
  assert(f([[],[]]) = true),
  /* XXX */
  true)$

okltest_ghg_p(f) := (
  /* XXX */
  true)$

okltest_oghg_p(f) := (
  /* XXX */
  true)$


/* *********************
   * Checking equality *
   *********************
*/


/* **************
   * Promotions *
   **************
*/

okltest_hg2ohg(f) := (
  assert(f([{},{}]) = [[],[]]),
  assert(f([{},{{}}]) = [[],[{}]]),
  assert(f([{1},{}]) = [[1],[]]),
  assert(f([{1},{{}}]) = [[1],[{}]]),
  assert(f([{1},{{},{1}}]) = [[1],[{},{1}]]),
  true)$


/* *************
   * Downcasts *
   *************
*/

okltest_ghg2hg(f) := (
  assert(f([{},{},identity]) = [{},{}]),
  assert(f([{1},{},identity]) = [{1},{}]),
  assert(f([{},{1},lambda([H],{})]) = [{},{{}}]),
  assert(f([{1,2},{1,2,3},lambda([e],if e<=2 then {1,2} else {2,3})]) = [{1,2},{{1,2},{2,3}}]),
  true)$


/* ************* **
   * Conversions *
   ***************
*/

okltest_setsystem2hg(f) := (
  assert(f({}) = [{},{}]),
  assert(f({{}}) = [{},{{}}]),
  assert(f({{1}}) = [{1},{{1}}]),
  assert(f({{},{1},{1,2}}) = [{1,2},{{},{1},{1,2}}]),
  true)$

okltest_listsets2hg(f) := (
  assert(f([]) = [{},{}]),
  assert(f([{}]) = [{},{{}}]),
  assert(f([{1}]) = [{1},{{1}}]),
  assert(f([{},{1},{1,2}]) = [{1,2},{{},{1},{1,2}}]),
  true)$

okltest_listsets2oghg(f) := (
  assert(f([]) = [[],[],identity]),
  assert(f([{}]) = [[],[{}],identity]),
  assert(f([{1}]) = [[1],[{1}],identity]),
  assert(f([{1,2},{-3,1},{3,2}]) = [[-3,1,2,3],[{1,2},{-3,1},{2,3}],identity]),
  true)$


/* ************
   * Matrices *
   ************
*/

okltest_hypver_hg2com(f) := (
  assert(comequalp(f([{},{}]), emptycom) = true),
  assert(comequalp(f([{},{{}}]), zerocom({{}},{})) = true),
  assert(comequalp(f([{1},{}]), zerocom({},{1})) = true),
  assert(comequalp(f([{1},{{}}]), zerocom({{}},{1})) = true),
  assert(comequalp(f([{1},{{1}}]), constantcom({{1}},{1},1)) = true),
  assert(comequalp(f([{1,2},{{1}}]), [{{1}},{1,2},lambda([H,v],if v=1 then 1 else 0)]) = true),
true)$

okltest_hypver_ghg2com(f) := block([x,y],
  assert(com_equalp(f([{},{},x]), [{},{},y]) = true),
  /* XXX */
  assert(okltest_hypver_hg2com(buildq([f], lambda([G], f(hg2ghg(G))))) = true),
  true)$

okltest_edge_int_com_hg(f) := (
  assert(scomequalp(f([{},{}]), emptyscom) = true),
  assert(scomequalp(f([{},{{}}]), zeroscom({{}})) = true),
  assert(scomequalp(f([{1,2},{{}}]), zeroscom({{}})) = true),
  assert(scomequalp(f([{1},{{1}}]), constantscom({{1}},1)) = true),
  assert(scomequalp(f([{1},{{1},{}}]), [{{1},{}},lambda([H1,H2], if emptyp(H1) or emptyp(H2) then 0 else 1)]) = true),
  assert(scomequalp(f([{1,2},{{1},{2}}]), [{{1},{2}},lambda([H1,H2], if H1 = H2 then 1 else 0)]) = true),
  assert(scomequalp(f([{1,2},{{1},{1,2}}]), [{{1},{1,2}},lambda([H1,H2], if H1 = {1} or H2 = {1} then 1 else 2)]) = true),
  true)$

okltest_vertex_int_com_hg(f) := (
  assert(scomequalp(f([{},{}]), emptyscom) = true),
  assert(scomequalp(f([{},{{}}]), emptyscom) = true),
  assert(scomequalp(f([{1,2},{{}}]), zeroscom({1,2})) = true),
  assert(scomequalp(f([{1},{{1}}]), constantscom({1},1)) = true),
  assert(scomequalp(f([{1},{{1},{}}]), constantscom({1},1)) = true),
  assert(scomequalp(f([{1,2},{{1},{2}}]), [{1,2},lambda([v1,v2], if v1 = v2 then 1 else 0)]) = true),
  assert(scomequalp(f([{1,2},{{1},{1,2}}]), [{1,2},lambda([v1,v2], if v1 = 1 and v2 = 1 then 2 else 1)]) = true),
  true)$


/* *******************
   * Transformations *
   *******************
*/

okltest_edge_k_hg(f) := (
  for n : 0 thru 2 do
    assert(f([{},{}],n) = [{},{}]),
  for n : 0 thru 2 do
    assert(f([{},{{}}],n) = [{{}},{}]),
  for n : 0 thru 2 do
    assert(f([{1},{}],n) = [{}, if n=0 then {{}} else {}]),
  for n : 0 thru 2 do
    assert(f([{1},{{}}],n) = [{{}}, if n=0 then {{}} else {}]),
  /* XXX */
  true)$

okltest_edge_g_hg(f) := (
  /* XXX */
  assert(f([{1,2,3,4},{{1},{2},{1,2},{2,3}}]) = [{{1},{2},{1,2},{2,3}}, {{{1},{1,2}},{{2},{1,2}},{{2},{2,3}},{{1,2},{2,3}}}]),
  true)$

okltest_anti_edge_k_hg(f) := (
  assert(okltest_edge_k_hg(buildq([f], lambda([G,k], block([E:f(G,k)], [E[1], setdifference(powerset(G[2],k),E[2])])))) = true),
  true)$

okltest_kneser_g_hg(f) := (
  /* XXX */
  assert(okltest_kneser_g(buildq([f], lambda([n,m], kneser_g_hg(complete_stdhg(n,m))))) = true),
  true)$


/* *****************
   * Constructions *
   *****************
*/

okltest_union_hg(f) := (
  assert(f() = [{},{}]),
  for n : 0 thru 3 do
    assert(apply(f,create_list([{},{}],i,1,n)) = [{},{}]),
  assert(f([{1,2,3},{{1,2},{2,3}}],[{2,3,4},{{2,4},{3}}]) = [{1,2,3,4},{{1,2},{2,3},{2,4},{3}}]),
  true)$


/* ************************************************
   * Constructions related to the subset-relation *
   ************************************************
*/

okltest_subsumption_ghg(f) := block([E],
  assert(ghg_equalp(f({},{}), [{},{},E]) = true),
  assert(ghg_equalp(f({},{{}}), [{},{{}}, lambda([H],{})]) = true),
  assert(ghg_equalp(f({{}},{}), [{{}},{}, E]) = true),
  assert(ghg_equalp(f({{}},{{}}), [{{}},{{}}, lambda([H],{{}})]) = true),
  assert(ghg_equalp(f({{1},{1,2}},{{3},{1,3},{1,2,3}}), [{{1},{1,2}}, {{3},{1,3},{1,2,3}}, lambda([H], if H={3} then {} elseif H={1,3} then {{1}} else {{1},{1,2}})]) = true),
  /* XXX */
  true)$

okltest_rsubsumption_hg(f) := (
  assert(f({},{}) = [[{},{}], {}]),
  assert(f({},{{}}) = [[{},{{}}], {}]),
  assert(f({{1}},{{}}) = [[{}, {{}}], {}]),
  assert(f({{1}},{{1}}) = [[{}, {}], {{1}}]),
  assert(f({{1}},{{1},{}}) = [[{}, {{}}], {}]),
  assert(f({{1},{2}}, {{1,2}}) = [[{{1},{2}}, {{{1},{2}}}], {}]),
  assert(f({{1,2},{-2,3}}, {{1,2,3},{-1,2,3},{1,-2,3},{1,-2,-3}}) = [[{},{{}}], {}]),
assert(f({{1,2},{-2,3}}, {{1,2,3},{1,-2,3},{1,2,-3}}) = [[{},{}], {{1,2},{-2,3}}]),
  /* XXX */
  true)$


/* *****************
   * Connectedness *
   *****************
*/

okltest_components_hg(f) := (
  assert(f([{},{}]) = {}),
  assert(f([{},{{}}]) = {{}}),
  assert(f([{1},{}]) = {{1}}),
  assert(f([{1},{{}}]) = {{1},{}}),
  assert(f([{1},{{},{1}}]) = {{1},{}}),
  assert(f([{1,2},{}]) = {{1},{2}}),
  assert(f([{1,2},{{}}]) = {{},{1},{2}}),
  assert(f([{1,2},{{1}}]) = {{1},{2}}),
  assert(f([{1,2},{{2}}]) = {{1},{2}}),
  assert(f([{1,2},{{},{1}}]) = {{},{1},{2}}),
  assert(f([{1,2},{{},{1},{2}}]) = {{},{1},{2}}),
  assert(f([{1,2},{{1,2}}]) = {{1,2}}),
  assert(f([{1,2},{{1,2},{}}]) = {{},{1,2}}),
  assert(f([{1,2},{{1,2},{},{1},{2}}]) = {{},{1,2}}),
  assert(f([{1,2,3},{{1,2},{1,3}}]) = {{1,2,3}}),
  assert(f([{1,2,3},{{1,2},{1,3},{}}]) = {{},{1,2,3}}),
  assert(f([{1,2,3},{{1},{2},{3}}]) = {{1},{2},{3}}),
  true)$

okltest_components_ghg(f) := (
  /* XXX */
  assert(okltest_components_hg(buildq([f], lambda([G], f(hg2ghg(G))))) = true),
  true)$

okltest_is_connected_hg_p(f) := (
  assert(f([{},{}]) = true),
  assert(f([{},{{}}]) = true),
  assert(f([{1},{}]) = true),
  assert(f([{1},{{}}]) = false),
  assert(f([{1},{{},{1}}]) = false),
  assert(f([{1,2},{}]) = false),
  assert(f([{1,2},{{}}]) = false),
  assert(f([{1,2},{{1}}]) = false),
  assert(f([{1,2},{{2}}]) = false),
  assert(f([{1,2},{{},{1}}]) = false),
  assert(f([{1,2},{{},{1},{2}}]) = false),
  assert(f([{1,2},{{1,2}}]) = true),
  assert(f([{1,2},{{1,2},{}}]) = false),
  assert(f([{1,2},{{1,2},{},{1},{2}}]) = false),
  assert(f([{1,2,3},{{1,2},{1,3}}]) = true),
  assert(f([{1,2,3},{{1,2},{1,3},{}}]) = false),
  assert(f([{1,2,3},{{1},{2},{3}}]) = false),
  true)$


/*!
\endhtmlonly
*/
