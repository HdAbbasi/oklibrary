/* Oliver Kullmann, 20.6.2009 (Swansea) */
/* Copyright 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/Transversals/Bounded/MaintainingBound.mac
  \brief Computing size-bounded transversals "from below" (starting with the empty set)

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Transversals/Bounded/MaintainingBound.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Transversals/Basics.mac")$


/* *************************************
   * Finding size-bounded transversals *
   *************************************
*/

/* Computing a list of transversals of length at most B of a list L of sets,
   via branching on vertices (note that transversals don't need to be
   minimal). All inclusion-minimal transversals are listed; a non-minimal
   transversal is left out iff on its associated branch in
   the search tree it happens that one occurring vertex completely disappears
   as a result of removing all hyperedges containing some (other) vertex.
   If B is the transversal number of L, then (thus) exactly all transversals
   of minimum length are found.
*/
/* Prerequisite: B is a natural number >= 0. */
/* RENAME: transversals_bv (for branching on "vertices", not just on
   "elements"); perhaps also "set system" should be in the name (as "ses").
*/
transversals_be(L,B) := if emptyp(L) then [{}]
 elseif empty_element_p(L) then []
 elseif B=0 then [] 
 elseif B=1 then create_list({x},x,listify(lintersection(L))) else
 block([a : first_element(first(L))],
   return(append(
    add_element_l(a,transversals_be(remove_with_element_l(L,a),B-1)),
    transversals_be(setdifference2e(L,a),B))))$

/* The variation where L is kept sorted in ascending order by length (so that
   the empty clause and unit-clauses are easily detected):
*/
/* RENAME: transversals_bvs (possibly transversals_bvs_ses) */
transversals_bes(L,B) := transversals_bes_(sort_length(L),B)$
transversals_bes_(L,B) := if emptyp(L) then [{}]
 else block([H : first(L)],
  if emptyp(H) or B=0 then return([]),
  if B=1 then return(create_list({x},x,listify(lintersection(L)))),
  block([a : first_element(H)],
   if length(H) = 1 then
     return(add_element_l(a,transversals_bes_(remove_with_element_l(L,a),B-1)))
   else
     return(append(
      add_element_l(a,transversals_bes_(remove_with_element_l(L,a),B-1)),
      transversals_bes_(sort_length(setdifference2e(L,a)),B)))))$

/* Given a hypergraph G without empty hyperedge and a (known) 
   lower bound lb on the size of a minimum transversal, compute the list of
   minimum transversals by using B = lb, B+1, ...
*/
minimum_transversals_lbbvs_hg(G,lb) := block(
 [L : sort_length(listify(G[2])), M],
  if oklib_monitor then 
    print("minimum_transversals_lbbvs_hg: ", length(lunion(L)), length(L), lb),
  M : transversals_bes(L,lb),
  while emptyp(M) do (
    if oklib_monitor then printf(true,"~d ",lb),
    lb : lb + 1, M : transversals_bes(L,lb)
  ),
  if oklib_monitor then printf(true,"~%"),
  return(M))$
minimum_transversals_bvs_hg(G) := minimum_transversals_lbbvs_hg(G,0)$


/* *********************************
   * Monotone hypergraph sequences *
   *********************************
*/

/* Application: Given a monoton hypergraph generator mongen(n) (monoton w.r.t.
   the hyperedge sets), such that MT0 is a non-empty list of (all) the minimum
   transversals of mongen(0), and where mongen(n+1) has (exactly) one node
   more than mongen(n), and this node occurs in all new edges, compute the
   list of lists of (all) minimum transversals for n = 0, ..., N.
*/
minimum_transversals_mongen(N,mongen_,MT0) := 
 block([L : [MT0], t : length(first(MT0)), G0 : mongen_(0)],
  for n : 1 thru N do block(
  [G1 : mongen_(n), E, MT1],
   E : setdifference(G1[2], G0[2]),
   MT1 : sublist(MT0, lambda([T],transversal_p(T, E))),
   if emptyp(MT1) then block(
    [a : single_element(setdifference(G1[1],G0[1]))],
     t : t + 1,
     MT1 : append(
       add_element_l(a,MT0),
       transversals_bes(sort_length(listify(setdifference2e(G1[2],a))),t))),
   if oklib_monitor then print(n,t,length(MT1)),
   L : cons(MT1,L),
   MT0 : MT1, G0 : G1
  ),
  return(reverse(L)))$


/* *********************************
   * Stratification of hypergraphs *
   *********************************
*/

/* Computing the set of minimum transversals of a hypergraph G through
   stratification via the list L of vertices.
   Note that an empty hyperedge in G is ignored.
*/
minimum_transversals_stratabvs_hg(G,L) :=
 block([mongen : hg2hgmongen(G,L), MT0 : [{}], G0 : [{},{}], t : 0],
  for n : 1 thru length(L) do block(
  [G1 : mongen(n), E, MT1],
   E : setdifference(G1[2], G0[2]),
   MT1 : sublist(MT0, lambda([T],transversal_p(T, E))),
   if emptyp(MT1) then block(
    [a : single_element(setdifference(G1[1],G0[1]))],
     t : t + 1,
     MT1 : append(
       add_element_l(a,MT0),
       transversals_bes(sort_length(listify(setdifference2e(G1[2],a))),t))
   ),
   MT0 : MT1, G0 : G1
  ),
  MT0)$
/* Using the given order of vertices: */
minimum_transversals_stratabvs_ohg(G) :=
 minimum_transversals_stratabvs_hg(ohg2hg(G),G[1])$

/* Heuristics: Using vertex degrees (highest first). */
minimum_transversals_stratavdegbvs_hg(G) :=
 minimum_transversals_stratabvs_hg(G, map(first,sorted_vertex_degrees_hg(G)))$
minimum_transversals_stratavdegbvs_ohg(G) :=
 minimum_transversals_stratabvs_hg(G, map(first,sorted_vertex_degrees_ohg(G)))$


/*!
\endhtmlonly
*/
