/* Oliver Kullmann, 3.2.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/Transversals/tests/Transversals.mac
  \brief Tests for transversal-functions

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Transversals/tests/Transversals.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/tests/IndependentSets.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Transversals/Transversals.mac")$

kill(f)$


okltest_transversal_p(f) := (
  assert(f({},{}) = true),
  assert(f({},{{}}) = false),
  assert(f({},{{1}}) = false),
  assert(f({1,2},{{1,3},{2,4},{1,2,3,4}}) = true),
  assert(f({1,2,9},{{1,3},{2,4},{1,2,3,4}}) = true),
  true)$

okltest_etransversal_p(f) := (
  assert(f({},{}) = true),
  assert(f({},{{}}) = false),
  assert(f({},{{1}}) = false),
  assert(f({1,2},{{1,3},{2,4},{1,2,3,4}}) = false),
  assert(f({1,2},{{1,3},{2,4},{2,3,4}}) = true),
  assert(f({1,2,9},{{1,3},{2,4},{1,2,3,4}}) = false),
  assert(f({1,2,9},{{1,3},{2,4},{1,3,4}}) = true),
  assert(f({{2},{2,1},{2,3},{2,4}}, {{{1},{2},{3,4}},{{1},{2,3},{4}},{{1},{3},{2,4}},{{1,2},{3},{4}},{{1,3},{2},{4}},{{1,4},{2},{3}}}) = true),
  true)$


/* ************************************
   * Finding all minimal transversals *
   ************************************
*/

/* Helper function for testing whether f applied twice to hypergraph G
   yields G after removal of subsumed elements from G:
*/
check_involutiv_min(f,G) := block([G2 : f(f(G))],
  is(G2[1] = G[1] and G2[2] = min_elements(G[2])))$

/* Testing whether f computes the transversal hypergraph of a hypergraph G: */
okltest_transversal_hyp(f) := block([G],
  assert(f([{},{}]) = [{},{{}}]),
  assert(f([{},{{}}]) = [{},{}]),
  assert(f([{1,2},{{1,2}}]) = [{1,2},{{1},{2}}]),
  assert(f([{1,2,3,4},{{1,2},{1,3},{1,4}}]) = [{1,2,3,4},{{1},{2,3,4}}]),
  assert(check_involutiv_min(f,[{1,2,3,4},{{1,2},{1,2,4},{2,3},{1,3}}])),
  for k : 0 thru 3 do
    for n : 0 thru 6 do
      assert(check_involutiv_min(f,arithprog_hg(k,n))),
  if oklib_test_level = 0 then return(true),
  block([oklib_test_level : min(oklib_test_level-1, 2)],
    okltest_independence_hyp(buildq([f],lambda([G],ecomp_hyp(f(G)))))
  ),
true)$

/* Testing whether f(N,mongen_) computes the list of all transversals
   for n = 0,...,N for monoton hypergraph generator mongen_ (adding
   exactly one new vertex at a time, and all new hyperedges contain this
   vertex).
*/
okltest_transversals_mongen(f) := (
  block([N : 5],
   for r : 0 thru 3 do block([G : lambda([n], complete_stdhg(n,r)), L],
    L : f(N,G),
    for i : 1 thru N+1 do block([n : i-1],
      if n < r then
        assert(L[i] = [{}])
      else block([res : powerset(setn(n),n-r+1)],
        assert(length(L[i]) = length(res)),
        assert(setify(L[i]) = res)
  )))),
  block(
   [N : if oklib_test_level=0 then 8 else 12, 
    G : lambda([n],arithprog_hg(3,n)), L],
    L : f(N,G),
    for i : 1 thru N+1 do block([n : i-1, res],
      res : transversal_hg_rs(G(n))[2],
      assert(setify(L[i]) = res),
      assert(length(L[i]) = length(res))
  )),
  true)$

/* Testing the more general function, which requires to specify a start
   value n0 and a (complete) list of transversals (w.r.t. n0):
*/
okltest_transversals_mongen_init(f) := (
  block([N0 : 3, N : 5],
   for r : 0 thru 3 do block([G : lambda([n], complete_stdhg(n,r)), L],
    L : f(N,G,N0,listify(transversal_ses_rs(G(N0)[2]))),
    for i : 1 thru N+1-N0 do block([n : N0+i-1],
      if n < r then
        assert(L[i] = [{}])
      else block([res : powerset(setn(n),n-r+1)],
        assert(length(L[i]) = length(res)),
        assert(setify(L[i]) = res)
  )))),
  true)$


/* *************************************
   * Finding size-bounded transversals *
   *************************************
*/

okltest_transversals_be(f) := (
  assert(f([],0) = [{}]),
  assert(f([],1) = [{}]),
  assert(f([{}],0) = []),
  assert(f([{}],1) = []),
  assert(f([{1}],0) = []),
  assert(f([{1}],1) = [{1}]),
  assert(f([{1}],2) = [{1}]),
  assert(f([{1,2}],0) = []),
  assert(f([{1,2}],1) = [{1},{2}]),
  assert(f([{1,2}],2) = [{1},{2}]),
  assert(f([{1,2},{2,3}],0) = []),
  assert(f([{1,2},{2,3}],1) = [{2}]),
  assert(elementp(f([{1,2},{2,3}],2), {[{1,2},{1,3},{2}], [{2},{1,3}]}) = true),
  assert(f([{1,2,3},{1,3},{1,2}],1) = [{1}]),
  assert(f([{1,2},{1,3},{2,3}],1) = []),
  true)$

okltest_minimum_transversals_mongen(f) := block(
 [A3_ : lambda([n], arithprog_hg(3,n))],
  assert(map(length,f(10,A3_,[{}])) = [1,1,1,3,2,1,4,10,25,4,24]),
  true)$

okltest_minimum_transversals_lbbvs_hg(f) := (
  /* XXX */
  true)$

okltest_minimum_transversals_bvs_hg(f) := (
  assert(f([{},{}]) = [{}]),
  for n : 0 thru 5 do block([N : setn(n)],
    assert(f([N, singletons(N)]) = [N])),
  /* XXX */
  true)$


/* ************************
   * Greedy approximation *
   ************************
*/

okltest_greedy_transversal_ohg(f) := (
  assert(f([{},{}]) = {}),
  assert(f([{},{{}}]) = false),
  /* XXX */
  true)$

okltest_greedy_transversal_(f) := (
  assert(f([]) = {}),
  for n : 0 thru 5 do block([N : setn(n)],
    assert(f(listify(singletons(N))) = N)),
  assert(f([{1,2},{1,3},{2,4},{1,5},{2,3}]) = {1,2}),
  /* XXX */
  true)$


/*!
\endhtmlonly
*/
