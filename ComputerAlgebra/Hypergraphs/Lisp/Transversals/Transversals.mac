/* Oliver Kullmann, 2.2.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/Transversals/Transversals.mac
  \brief Functions for hypergraph transversals

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Transversals/Transversals.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* Checking whether T is a transversal for set system S (S may be also
   a list of sets).
   Note that T doesn't need to be minimal.
*/
transversal_p(T,S) := every_s(lambda([H], not disjointp(H,T)), S)$
/* Checking for an exact transversal: */
etransversal_p(T,S) := every_s(lambda([H], is(length(intersection(H,T))=1)), S)$

/* ************************************
   * Finding all minimal transversals *
   ************************************
*/

/* The tranversal hypergraph via the independence hypergraph: */
/* RENAME: transversal_hg_ind */
transversal_hyp_ind(G, Ind) := ecomp_hyp(Ind(G))$
transversal_hg_ind(G, Ind) := transversal_hyp_ind(G, Ind)$

/* The transversal hypergraph of a hypergraph G, via recursive splitting: */
/* RENAME: transversal_hg_rs */
transversal_hyp_rs(G) := [G[1],transversal_ses_rs(min_elements(G[2]))]$
transversal_hg_rs(G) := transversal_hyp_rs(G)$
/* The transversal hypergraph of a set-system S: */
transversal_ses_rs(S) := block([M : listify(S),l, h,S1,S2],
 l : length(M),
 if l = 0 then return({{}})
 elseif l = 1 then return(singletons(M[1]))
 elseif l = 2 then return(block([I : intersection(M[1],M[2])],
  union(singletons(I), 
        upairs(setdifference(M[1],I), setdifference(M[2],I))))),
 h : floor(l/2),
 S1 : rest(M,-h),
 S2 : rest(M,l-h),
 return(min_elements(cunion(transversal_ses_rs(S1),transversal_ses_rs(S2)))))$


/* *************************************
   * Finding size-bounded transversals *
   *************************************
*/

/* Computing a list of transversals of length at most B of a list L of sets,
   via branching on vertices (note that transversals don't need to be
   minimal). All inclusion-minimal transversals are listed; a non-minimal
   transversal is left out iff on its associated branch in
   the search tree it happens that one occurring vertex completely disappears
   as a result of removing all hyperedges containing some (other) vertex.
   If B is the transversal number of L, then (thus) exactly all transversals
   of minimum length are found.
*/
/* Prerequisite: B is a natural number >= 0. */
/* RENAME: transversals_bv (for branching on "vertices", not just on
   "elements"); perhaps also "set system" should be in the name (as "ses").
*/
transversals_be(L,B) := if emptyp(L) then [{}]
 elseif empty_element_p(L) then []
 elseif B=0 then [] 
 elseif B=1 then create_list({x},x,listify(lintersection(L))) else
 block([a : first_element(first(L))],
   return(append(
    add_element_l(a,transversals_be(remove_with_element_l(L,a),B-1)),
    transversals_be(setdifference2e(L,a),B))))$

/* The variation where L is kept sorted in ascending order by length (so that
   the empty clause and unit-clauses are easily detected):
*/
transversals_bes(L,B) := transversals_bes_(sort_length(L),B)$
transversals_bes_(L,B) := if emptyp(L) then [{}]
 else block([H : first(L)],
  if emptyp(H) or B=0 then return([]),
  if B=1 then return(create_list({x},x,listify(lintersection(L)))),
  block([a : first_element(H)],
   if length(H) = 1 then
     return(add_element_l(a,transversals_bes_(remove_with_element_l(L,a),B-1)))
   else
     return(append(
      add_element_l(a,transversals_bes_(remove_with_element_l(L,a),B-1)),
      transversals_bes_(sort_length(setdifference2e(L,a)),B)))))$

/* Application: Given a monoton hypergraph generator mongen(n) (monoton w.r.t.
   the hyperedge sets), such that MT0 is a non-empty list of (all) the minimum
   transversals of mongen(0), and where mongen(n+1) has (exactly) one node
   more than mongen(n), and this node occurs in all new edges, compute the
   list of lists of (all) minimum transversals for n = 0, ..., N.
*/
minimum_transversals_mongen(N,mongen_,MT0) := 
 block([L : [MT0], t : length(first(MT0)), G0 : mongen_(0)],
  for n : 1 thru N do block(
  [G1 : mongen_(n), E, MT1],
   E : setdifference(G1[2], G0[2]),
   MT1 : sublist(MT0, lambda([T],transversal_p(T, E))),
   if emptyp(MT1) then block(
    [a : single_element(setdifference(G1[1],G0[1]))],
     t : t + 1, 
     MT1 : append(
       add_element_l(a,MT0),
       transversals_bes(sort_length(listify(setdifference2e(G1[2],a))),t))),
   if oklib_monitor then print(n,t,length(MT1)),
   L : cons(MT1,L),
   MT0 : MT1, G0 : G1
  ),
  return(reverse(L)))$



/*!
\endhtmlonly
*/
