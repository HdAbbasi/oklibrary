/* Oliver Kullmann, 16.7.2008 (Swansea) */
/* Copyright 2008, 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Algebra/Lisp/Ringframes/Rings/ResidueClasses.mac
  \brief Providing implementations of rings of residue classes (modular arithmetic)

Use by

oklib_load("OKlib/ComputerAlgebra/Algebra/Lisp/Ringframes/Rings/ResidueClasses.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$


/* The basic operations for modular arithmetic: */

/* Prerequisite: n >= 1. */
mod_add(n) := buildq([n],lambda([x,y],mod(x+y,n)))$
mod_mul(n) := buildq([n],lambda([x,y],mod(x*y,n)))$
/* These functions can also be used "modulo n", i.e., their inputs
can be arbitrary integers. */

/* The ring of residue classes modulo n, using the standard representation
   of the elements by 0, ..., n-1: */
residues_rng(n) := [setmn(0,n-1), mod_add(n), mod_mul(n), [0], [mod(1,n)]]$

/* The additive inverse: */
mod_add_inv(n) := buildq([n],lambda([x],mod(-x,n)))$
/* The multiplicative inverse (returns false for non-invertible
   elements: */
mod_mul_inv(n) := buildq([n],lambda([x],inv_mod(x,n)))$
/* These functions can also be used "modulo n", i.e., their inputs
can be arbitrary integers. */


/* Remarks:

 - The additive part of residues_rng(n) is used in
   Algebra/Lisp/Groupoids/Groups/CyclicGroups.mac by cyclic_ugrp(n) as the
   standard model of a cyclic group of order n.
 - The multiplicative group of invertible elements of residues_rng(n) is
   a cyclic group iff has_primite_modular_root_p(n) is true (see
   NumberTheory/Lisp/ModularArithmetic.mac), and a generator is then given by
   smallest_primitive_modular_root(n).

*/

/*!
\endhtmlonly
*/

