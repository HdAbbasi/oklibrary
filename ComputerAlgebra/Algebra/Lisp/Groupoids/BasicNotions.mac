/* Oliver Kullmann, 6.7.2008 (Swansea) */
/* Copyright 2008, 2009, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Algebra/Lisp/Groupoids/BasicNotions.mac
  \brief Basic notions (like test-predicates and conversions) for groupoids

Use by

oklib_load("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/BasicNotions.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/Associativity.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/NeutralElements.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/InvertibleElements.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/UniquelySolvableElements.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/Commutativity.mac")$
oklib_include("OKlib/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* ***********************
   * Fundamental notions *
   ***********************
*/

/* ************************************
   * Checking the defining properties *
   ************************************
*/

/* Checking whether compo is a binary law of composition on set X: */
compo_p(compo,X) := block(
 [e : errcatch(
   subsetp(map(lambda([P],apply(compo,P)),cartesian_product(X,X)),X))],
 not emptyp(e) and e[1])$

/* Groupoids: */
grd_p(V) := listp(V) and is(length(V)=2) and setp(V[1]) and compo_p(V[2],V[1])$
ugrd_p(V) := listp(V) and is(length(V)=3) and grd_p([V[1],V[2]]) and 
  elementp(V[3],V[1]) and neutral_el_grd(V,V[3])$
cgrd_p(V) := grd_p(V) and commutative_bydef_grd(V)$
cugrd_p(V) := ugrd_p(V) and commutative_bydef_grd(V)$

ogrd_p(V) := listp(V) and is(length(V)=2) and listnorep_p(first(V)) and
  grd_p(ogrd2grd(V))$
ougrd_p(V) := listp(V) and is(length(V)=3) and listnorep_p(first(V)) and
  not emptyp(first(V)) and is(first(first(V)) = third(V)) and
  ugrd_p(ougrd2ugrd(V))$

/* Semigroups and monoids: */
sgr_p(S) := grd_p(S) and associative_bydef_grd(S)$
csgr_p(S) := sgr_p(S) and commutative_bydef_grd(S)$
mon_p(M) := listp(M) and is(length(M)=3) and sgr_p([M[1],M[2]]) and 
  elementp(M[3],M[1]) and neutral_el_grd(M,M[3])$
cmon_p(M) := mon_p(M) and commutative_bydef_grd(M)$

/* Quasigroups: */
qgrp_p(Q) := grd_p(Q) and uniquelysolvable_bydef_grd(Q)$
/* Remark: qgrp_p(Q) = ls_p(Q). */
/* Commutative quasigroups: */
cqgrp_p(Q) := qgrp_p(Q) and commutative_bydef_grd(Q)$
/* Unital quasigroups (also known as "loops"): */
uqgrp_p(L) := ugrd_p(L) and uniquelysolvable_bydef_grd(ugrd2grd(L))$
/* Commutative unital quasigroups: */
cuqgrp_p(L) := uqgrp_p(L) and commutative_bydef_grd(ugrd2grd(L))$

oqgrp_p(Q) := listp(Q) and is(length(Q)=2) and listnorep_p(first(Q)) and
  qgrp_p(ogrd2grd(Q))$
ouqgrp_p(L) := listp(L) and is(length(L)=3) and listnorep_p(first(L)) and
  not emptyp(first(L)) and is(first(first(L)) = third(L)) and
  uqgrp_p(ougrd2ugrd(L))$

/* Groups: */
grp_p(G) := qgrp_p(G) and associative_bydef_grd(G) and not emptyp(G[1])$
cgrp_p(G) := grp_p(G) and commutative_bydef_grd(G)$
ugrp_p(G) := uqgrp_p(G) and associative_bydef_grd(G)$
cugrp_p(G) := ugrp_p(G) and commutative_bydef_grd(G)$
ugrpi_p(G) := ugrp_p(rest(G,-1)) and inversion_ugrd(G,G[4])$
cugrpi_p(G) := ugrpi_p(G) and commutative_bydef_grd(G)$

ogrp_p(G) := listp(G) and is(length(G)=2) and listnorep_p(first(G)) and
  grp_p(ogrd2grd(G))$
ougrp_p(G) := listp(G) and is(length(G)=3) and listnorep_p(first(G)) and
  not emptyp(first(G)) and is(first(first(G)) = third(G)) and
  ugrp_p(ougrd2ugrd(G))$
ougrpi_p(G) := listp(G) and is(length(G)=4) and listnorep_p(first(G)) and
  not emptyp(first(G)) and is(first(first(G)) = third(G)) and
  ugrpi_p(ougrpi2ugrpi(G))$


/* *********************
   * Checking equality *
   *********************
*/

grd_equalp(V1,V2) := scom_equalp(V1,V2)$
ugrd_equalp(V1,V2) := grd_equalp(rest(V1,-1),rest(V2,-1)) and is(V1[3]=V2[3])$


/* *************
   * Downcasts *
   *************
*/

ugrd2grd(V) := rest(V,-1)$

ogrd2grd(V) := [setify(first(V)), second(V)]$
ougrd2ugrd(V) := [setify(first(V)), second(V), third(V)]$

ugrpi2ugrp(G) := rest(G,-1)$
ugrpi2grp(G) := rest(G,-2)$
ugrp2grp(G) := rest(G,-1)$

ougrp2ugrp(G) := [setify(first(G)), second(G), third(G)]$
ougrpi2ugrpi(G) := [setify(first(G)), second(G), third(G), fourth(G)]$


/* **************
   * Promotions *
   **************
*/

/* grp2ugrp(G), grp2ugrpi(G), ugrp2ugrpi(G) : 
   here we have the typical three possibilities ... 
*/

grd2ogrd(V) := [listify(first(V)), second(V)]$
ugrd2ougrd(V) := [cons(third(V), listify(disjoin(third(V),first(V)))),
 second(V), third(V)]$

ugrp2ougrp(G) := ugrd2ougrd(G)$
ugrpi2ougrpi(G) := [cons(third(G), listify(disjoin(third(G),first(G)))),
 second(G), third(G), fourth(G)]$


/* ***************
   * Conversions *
   ***************
*/

/* Between combinatorial square matrices and groupoids: */
scom2grd(M) := M$
grd2scom(V) := V$

/* Transforming a Maxima matrix into a groupoid. */
/* Prerequisite: all values of M must be indices. */
m2grd(M) := scom2grd(m2scom(M))$
/* Transforming a groupoid into a Maxima matrix.
   Note that this keeps the values of the composition intact and
   does not rename them.
*/
grd2m(V) := scom2m(grd2scom(V))$

/* Standardising a groupoid: */
grd2stdgrd(V) := block([L : listify(V[1]), S, a, compo : V[2], h],
  S : setn(length(L)),
  a : l2array(L),
  h : osm2hm(map("[", L, create_list(i,i,1,length(L)))), 
  ev(buildq([L,S,a,compo,h], [S, lambda([x,y], ev_hm(h,compo(a[x],a[y])))])))$
/* We have for W := grd2stdgrd(V) :
 - W[1] = {1, ..., length(V[1])}
 - W is isomorphic to V via i -> V[1][i].
*/

/* Now transforming a groupoid into a Maxima matrix with corresponding 
   renaming of the values:
*/
grd2m_std(V) := grd2m(grd2stdgrd(V))$
/* Note that m2grd(grd2m_std(V)) is isomorphic to V. */


/* ******************
   * Basic examples *
   ******************
*/

/* A smallest non-associativ groupoid: */
non_assoc_2_grd : m2grd(matrix([2,2],[1,2]))$


/*!
\endhtmlonly
*/

