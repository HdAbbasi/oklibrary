/* Oliver Kullmann, 18.5.2010 (Swansea) */
/* Copyright 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Algebra/Lisp/Groupoids/Semigroups/tests/Order.mac
  \brief Tests for monoids of partial assignments

Use by

oklib_load("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/Semigroups/tests/Order.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/Ringframes/Rings/ResidueClasses.mac")$

kill(f)$

okltest_closure_element_sgr(f) := (
  assert(f(mod_mul(1),0) = {0}),
  assert(f(mod_mul(3),0) = {0}),
  assert(f(mod_mul(3),1) = {1}),
  assert(f(mod_mul(3),2) = {1,2}),
  assert(f(mod_mul(4),2) = {0,2}),
  assert(f(mod_mul(4),3) = {1,3}),
  assert(okltest_order_element_sgr(buildq([f],lambda([comp_,a],length(f(comp_,a))))) = true),
  true)$

okltest_order_element_sgr(f) := (
  for p in [2,3,5,7] do
    for i : 1 thru p-1 do
      assert(f(mod_add(p),i) = p),
  true)$

okltest_ipo_element_sgr(f) := (
  assert(f(mod_mul(6),2) = [1,2,2]),
  assert(f(mod_mul(6),3) = [1,1,1]),
  assert(f(mod_mul(6),4) = [1,1,1]),
  assert(f(mod_mul(6),5) = [1,2,2]),
  assert(okltest_order_element_sgr(buildq([f],lambda([comp_,a],f(comp_,a)[3]))) = true),
  true)$

okltest_ipokernel_element_sgr(f) := (
  assert(f(mod_mul(8),2) = [[3,1,3],[0]]),
  assert(f(mod_mul(8),3) = [[1,2,2],[3,1]]),
  assert(f(mod_mul(8),4) = [[2,1,2],[0]]),
  assert(f(mod_mul(8),5) = [[1,2,2],[5,1]]),
  assert(f(mod_mul(8),6) = [[3,1,3],[0]]),
  assert(f(mod_mul(8),7) = [[1,2,2],[7,1]]),
  assert(okltest_ipo_element_sgr(buildq([f],lambda([comp_,a],f(comp_,a)[1]))) = true),
  true)$

/*!
\endhtmlonly
*/
