/* Oliver Kullmann, 14.1.2009 (Swansea) */
/* Copyright 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Algebra/Lisp/Groupoids/Enumeration.mac
  \brief Enumerating groupoids

  Counting, enumerating, classifying, w.r.t. isomorphism classes, isotopy
  classes, or "raw" objects.

Use by

oklib_load("Transitional/ComputerAlgebra/Algebra/Lisp/Groupoids/Enumeration.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Algebra/Lisp/Groupoids/BasicNotions.mac")$
oklib_include("Transitional/ComputerAlgebra/Algebra/Lisp/Groupoids/Homomorphisms.mac")$
oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("Transitional/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac")$

/* *************************
   * Enumerating groupoids *
   *************************
*/

/* The isomorphism classes of the set of all standardised groupoids of order n
   (with base set {1,...,n}); the results are directly represented as
   Maxima matrices. (Given such a matrix M, the corresponding groupoid
   is obtained by scom2grd(m2scom(M)).)
*/
/* First the direct computation: */
all_isomorphisms_classes_bydef_grd(n) := 
 map(lambda([C], map(lambda([G], lmscom2m(grd2scom(G))), C)),
  equiv_classes(
    setify(map(scom2grd,map(m2scom,all_m(n,n,create_list(i,i,1,n))))),
    is_isomorphic_bydef_grd))$
/* Now the more efficient computation by actively computing the
   equivalence classes.
*/
/* First an auxiliary function, which for a given set S of groupoids
   represented as Maxima matrices computes the complete isomorphism
   classes of these matrices (w.r.t. all groupoids of order n).
   Inherits: the set all_perm of permutations of N
   (as functions).
*/
all_isomorphisms_classes_actively_sm_grd(S) := block(
 [result : []],
  while not emptyp(S) do block(
   [M : scom2grd(m2scom(choose_element(S))), C],
    /* C is the isomorphism class of M */
    C : setify(map(lambda([f], scom2m(grd2scom(transport_grd(M,f)))), all_perm)),
    S : setdifference(S, C),
    result : cons(C,result)
  ),
  setify(result))$
/* Now the full function (running through all groupoids of order n):
*/
all_isomorphisms_classes_actively_grd(n) := block(
 [N : create_list(i,i,1,n), all_perm],
  all_perm : map(lambda([p], lambda_array(l2ary(p))),
           listify(permutations(N))), /* all permutations */
  all_isomorphisms_classes_actively_sm_grd(setify(all_m(n,n,N))))$

/* Now all isotopy classes (a rougher equivalence relation than isomorphism):
*/
/* Perhaps should be better also organised as above. XXX */
all_isotopism_classes_actively_grd(n) := block(
 [N : create_list(i,i,1,n), G, LP, LP3, result : []],
  G : setify(all_m(n,n,N)), /* all groupoids */
  LP : map(lambda([p], lambda_array(l2ary(p))),
           listify(permutations(N))), /* all permutations */
  LP3 : cartesian_product_l([LP,LP,LP]),
  while not emptyp(G) do block(
   [M : scom2grd(m2scom(choose_element(G))), C],
    /* C is the isomorphism class of M */
    C : setify(map(lambda([F], 
                 scom2m(grd2scom(transport3_grd(M,F[1],F[2],F[3])))), LP3)),
    G : setdifference(G, C),
    result : cons(C,result)
  ),
  setify(result))$

/* Creating all isotopy classes, which are further subdivided into
   isomorphism classes:
*/
all_isotopismisomorphism_classes_actively_grd(n) := block(
 [all_perm : map(lambda([p], lambda_array(l2ary(p))),
           listify(permutations(create_list(i,i,1,n))))],
  map(all_isomorphisms_classes_actively_sm_grd,
      all_isotopism_classes_actively_grd(n)))$


/*!
\endhtmlonly
*/

