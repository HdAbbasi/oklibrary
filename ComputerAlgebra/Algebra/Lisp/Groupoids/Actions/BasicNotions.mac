/* Oliver Kullmann, 10.7.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Algebra/Lisp/Groupoids/Actions/BasicNotions.mac
  \brief Basic notions (like test-predicates and conversions) for actions of sets

Use by

oklib_load("Transitional/ComputerAlgebra/Algebra/Lisp/Groupoids/Actions/BasicNotions.mac");

*/

/*!
\htmlonly
*/

/*
 A *left-action* of a set A on a set X is a map *: A x X -> X.
*/

orbit_act(act,A,x) := map(lambda([a],act(a,x)), A)$
orbit_ract(act,x,A) := map(lambda([a],act(x,a)), A)$

stabiliser_act(act,A,x) := subset(A,lambda([a],is(act(a,x)=x)))$
stabiliser_ract(act,x,A) := subset(A,lambda([a],is(act(x,a)=x)))$

/* A left-action as a map into the transformation semigroup,
   using maps: */
action_transformation_maps(op) := buildq([op],
  lambda([v], lambda([x], op(v,x))))$
/* Now assuming that X = {1, ..., n}, and representing transformations
   as lists: */
action_transformation_l(op,n) := buildq([op,n],
  lambda([v], create_list(op(v,i), i,1,n)))$

/* A right-action as a map into the transformation semigroup,
   using maps: */
raction_transformation_maps(op) := buildq([op],
  lambda([v], lambda([x], op(x,v))))$
/* Now assuming that X = {1, ..., n}, and representing transformations
   as lists: */
raction_transformation_l(op,n) := buildq([op,n],
  lambda([v], create_list(op(i,v), i,1,n)))$


/* An action on a groupoid preserves the operation.
*/

action_bydef_set_grd(act,A,V) := block([counterexample : false],
 for a in A unless counterexample do
  for x in V[1] unless counterexample do
   for y in V[1] unless counterexample do
     if act(a,V[2](x,y)) # V[2](act(a,x),act(a,y)) then counterexample : true,
 return(not counterexample))$
raction_bydef_set_grd(act,V,A) := block([counterexample : false],
 for a in A unless counterexample do
  for x in V[1] unless counterexample do
   for y in V[1] unless counterexample do
     if act(V[2](x,y),a) # V[2](act(x,a),act(y,a)) then counterexample : true,
 return(not counterexample))$


action_bydef_set_ugrd(act,A,V) :=
  every(lambda([a], is(act(a,V[3]) = V[3])), A) and action_bydef_set_grd(act,A,V)$
raction_bydef_set_ugrd(act,V,A) :=
  every(lambda([a], is(act(V[3],a) = V[3])), A) and raction_bydef_set_grd(act,V,A)$


*/

