/* Oliver Kullmann, 9.7.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Algebra/Lisp/Groupoids/Homomorphisms.mac
  \brief Basic operations for groupoid homomorphisms

Use by

oklib_load("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/Homomorphisms.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$

/* ***********************
   * Fundamental notions *
   ***********************
*/

/* Test whether f is a groupoid homomorphism with domain V, where
   the target-composition is compo. */
/* Prerequisite: For all x, y in V it is compo(f(x),f(y)) defined.
*/
homomorphism_bydef_grd(f,V,compo) := block([counterexample : false],
 for x in V[1] unless counterexample do
  for y in V[1] unless counterexample do
    if f(V[2](x,y)) # compo(f(x),f(y)) then counterexample : true,
 return(not counterexample))$
homomorphism_bydef2_grd(f,V1,V2) := homomorphism_bydef_grd(f,V1,V2[2])$
/* Testing whether we have a unital groupoid homomorphism. */
/* Again compo(f(x),f(y)) must be always defined. */
homomorphism_bydef_ugrd(f,V,compo,e) := is(f(V[3]) = e) and 
  homomorphism_bydef_grd(f,V,compo)$
homomorphism_bydef2_ugrd(f,V1,V2) := homomorphism_bydef_ugrd(f,V1,V2[2],V2[3])$


/* The canonical congruence relation on a groupoid V given by a
   homomorphism f: */
induced_congruence_grd(V,f) := buildq([f], lambda([x,y], is(f(x) = f(y))))$


/* ***********************
   * Isomorphism testing *
   ***********************
*/

/* Testing whether two groupoids are isomorphic by running through all
   bijections:
*/
is_isomorphic_bydef_grd(V1,V2) := if length(V1[1]) # length(V2[1]) then false
 else block(
 [L1 : listify(V1[1]), L2 : listify(V2[1]), found : false],
  for p in permutations(L2) unless found do
    found : homomorphism_bydef_grd(lambda_hm(osm2hm(map("[", L1,p))),V1,V2[2]),
  return(found))$

/* Given a groupoid V and an injective map f, transport the structure V
   via f (obtaining a groupoid V' such that f is an isomorphism from
   V to V'):
*/
transport_grd(V,f) := block(
 [h : osm2hm(map(lambda([P], [map(f,P), f(apply(V[2],P))]), 
        cartesian_product(V[1],V[1])))],
  [map(f,V[1]), buildq([h], lambda([x,y], ev_hm(h,[x,y])))])$
/* Now transporting via an "isotopy"; the three maps f,g,h must all be
   bijections from V to the same set.
*/
transport3_grd(V,f,g,h) := block(
 [h : osm2hm(map(lambda([P], [[f(P[1]),g(P[2])], h(apply(V[2],P))]), 
        cartesian_product(V[1],V[1])))],
  [map(f,V[1]), buildq([h], lambda([x,y], ev_hm(h,[x,y])))])$


/*!
\endhtmlonly
*/

