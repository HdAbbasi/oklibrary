/* Oliver Kullmann, 6.7.2008 (Swansea) */
/* Copyright 2008, 2009, 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Algebra/Lisp/Groupoids/Groups/SymmetricGroups.mac
  \brief Implementing symmetric groups

Use by

oklib_load("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/Groups/SymmetricGroups.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/Semigroups/TransformationMonoids.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* **************************
   * Permutations as lists *
   **************************
*/

permutation_l_inv(n) := buildq([n],
 lambda([p], ary2l(osm2ary_lt(l2osm_inv(p), n, fixnum))))$

/* The symmetric group with n (>= 0) elements, as submonoid of the full
   transformation monoid trf_l_mon(n):
*/
sym_l_ugrp(n) :=
 [permutations(setn(n)),
  transformation_l_compo,
  create_list(i,i,1,n)]$
sym_l_ugrpi(n) := endcons(permutation_l_inv(n), sym_l_ugrp(n))$
/* Lexicographical order: */
sym_l_ougrp(n) :=
 [listify(permutations(setn(n))),
  transformation_l_compo,
  create_list(i,i,1,n)]$


/* **********************
   * Cycle presentation *
   **********************
*/

/* A "cycle presentation" of some permutation over {1,...,n} is a
   set of repetition-free lists, each list starting with its smallest
   element, so that these lists as sets are a partitioning of {1,...,n}.
*/

/* For a permutation over {1,...,n} as function/list compute the
   cycle presentation (a set of lists, each list representing a
   cyle, standardised to start with the smallest element):
*/
cyclepres_pmtf(p,n) := block([res:{}, rem:setn(n)],
 while not emptyp(rem) do block([x : lmin(rem), C, y],
   C : [x],
   y : p(x),
   while y#x do (
     C : cons(y, C),
     y : p(y)
   ),
   res : adjoin(reverse(C),res),
   rem : setdifference(rem,setify(C))
 ),
 res)$
cyclepres_perl(p) := cyclepres_pmtf(trfl2trff(p), length(p))$

/* Inversely, for a cycle presentation c over {1,...,n} compute the
   corresponding permutation as a hash-map resp. as a list:
*/
cyclepres2hm(c) := block([h : sm2hm({})],
  for C in c do h : compose_hm_sm(h, map("[",C,rotate(C,-1))), h)$
cyclepres2perl(c) := block([h : cyclepres2hm(c)],
  create_list(ev_hm(h,i),i,1,sum_l(map(length,listify(c)))))$

/* Remark: cyclepres_perl(cyclepres2perl(c)) = c and
           cyclepres2perl(cyclepres_perl(p)) = p.
*/

/* The cycle-type of a permutation as function/list: */
cycletype_pmtf(p,n) :=
  list_distribution(map(length,listify(cyclepres_pmtf(p,n))))$
cycletype_perl(p) := cycletype_pmtf(trfl2trff(p), length(p))$

/* Note that two permutations over {1,...,n} are conjugated iff their
   cycle-types are equal.
*/

/* For conversions between transformations as lists and as functions see
   Algebra/Lisp/Groupoids/Semigroups/TransformationMonoids.mac.
*/


/* ********************
   * Basic operations *
   ********************
*/

oklib_plain_include(functs)$ /* for lcm */

/* Computing the order of a permutation as function/list: */
order_element_pmtf(p,n) :=
  apply(lcm, map(length,listify(cyclepres_pmtf(p,n))))$
order_element_perl(p) := order_element_pmtf(trfl2trff(p), length(p))$

/* The inversion-vector of permutation p as list (of the same length, with
   trailing zero, counting for each position the number of smaller elements
   to the right):
*/
inversion_vector_perl(p) := if emptyp(p) then [] else
 cons(countlt_l(first(p),rest(p)), inversion_vector_perl(rest(p)))$
/* The inverse operation, computing the permutation as list of an
   inversion-vector: */
perl_inversion_vector(v) := if emptyp(v) then [] else
 block([x : first(v)+1],
  cons(x,
    map(lambda([y], if y >= x then y+1 else y),
        perl_inversion_vector(rest(v)))))$


/* The number of involutions (self-inverse permutations) of the
   symmetric group:
*/
numinvolutions_symgrp(n) := if n<=1 then 1 else
 numinvolutions_symgrp(n-1) + (n-1) * numinvolutions_symgrp(n-2)$
/* This is http://oeis.org/A000085 . */

/*!
\endhtmlonly
*/
