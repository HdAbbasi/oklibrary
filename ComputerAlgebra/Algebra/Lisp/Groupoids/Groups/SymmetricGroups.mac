/* Oliver Kullmann, 6.7.2008 (Swansea) */
/* Copyright 2008, 2009, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Algebra/Lisp/Groupoids/Groups/SymmetricGroups.mac
  \brief Implementing symmetric groups

Use by

oklib_load("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/Groups/SymmetricGroups.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/Semigroups/TransformationMonoids.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$


/* **************************
   * Permutations as lists *
   **************************
*/

/* The symmetric group with n elements, as submonoid of the full transformation
   monoid trf_l_mon(n):
*/
sym_l_ugrp(n) := 
 [permutations(setn(n)),
  transformation_l_compo,
  create_list(i,i,1,n)]$


/* **********************
   * Cycle presentation *
   **********************
*/

/* For a permutation over {1,...,n} as function/list compute the 
   cycle presentation (a set of lists, each list representing a
   cyle, standardised to start with the smallest element):
*/
cyclepres_pmtf(p,n) := block([res:{}, rem:setn(n)],
 while not emptyp(rem) do block([x : lmin(rem), C, y],
   C : [x],
   y : p(x),
   while y#x do (
     C : cons(y, C),
     y : p(y)
   ),
   res : adjoin(reverse(C),res),
   rem : setdifference(rem,setify(C))
 ),
 res)$
cyclepres_perl(p) := cyclepres_pmtf(trfl2trff(p), length(p))$

/* The cycle-type of a permutation as function/list: */
cycletype_pmtf(p,n) := 
  list_distribution(map(length,listify(cyclepres_pmtf(p,n))))$
cycletype_perl(p) := cycletype_pmtf(trfl2trff(p), length(p))$
/* Note that two permutations over {1,...,n} are conjugated iff their
   cycle-types are equal.
*/

/* For conversions between transformations as lists and as functions see
   Algebra/Lisp/Groupoids/Semigroups/TransformationMonoids.mac.
*/


/* ********************
   * Basic operations *
   ********************
*/

oklib_plain_include(functs)$

/* Computing the order of a permutation as function/list: */
order_element_pmtf(p,n) :=
  apply(lcm, map(length,listify(cyclepres_pmtf(p,n))))$
order_element_perl(p) := order_element_pmtf(trfl2trff(p), length(p))$


/*!
\endhtmlonly
*/
