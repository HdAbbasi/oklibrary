/* Oliver Kullmann, 6.7.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Algebra/Lisp/Groupoids/tests/BasicNotions.mac
  \brief Tests for the basic groupoid-notions

Use by

oklib_load("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/tests/BasicNotions.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/Semigroups/BasicExamples.mac");
oklib_include("OKlib/ComputerAlgebra/CombinatorialMatrices/Lisp/LatinSquares/tests/BasicNotions.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/BasicNotions.mac")$


kill(f)$

/* ************************************
   * Checking the defining properties *
   ************************************
*/

okltest_compo_p(f) := (
  assert(f(identity,{}) = true),
  assert(f("+",{0}) = true),
  assert(f("+",{0,1}) = false),
  assert(f("*",{0,1,-1}) = true),
  assert(f("*",{0,1,-1,x}) = false),
  assert(f(0,{1}) = false),
  assert(f({},{1}) = false),
  assert(f(lambda([x,y],[1]),{[1]}) = true),
  true)$


okltest_grd_p(f) := (
  assert(f(0) = false),
  assert(f({}) = false),
  assert(f([]) = false),
  assert(f([{}]) = false),
  assert(f([{},{}]) = true),
  assert(f([{1},{}]) = false),
  assert(f(empty_sgr) = true),
  assert(f(singleton_sgr) = true),
  assert(f(non_assoc_2_grd) = true),
  true)$

okltest_ugrd_p(f) := (
  /* XXX */
  true)$

okltest_cgrd_p(f) := (
  /* XXX */
  true)$

okltest_cugrd_p(f) := (
  /* XXX */
  true)$


okltest_sgr_p(f) := (
  assert(f(0) = false),
  assert(f({}) = false),
  assert(f([]) = false),
  assert(f([{}]) = false),
  assert(f([{},{}]) = true),
  assert(f([{1},{}]) = false),
  assert(f(empty_sgr) = true),
  assert(f(singleton_sgr) = true),
  assert(f(non_assoc_2_grd) = false),
  assert(f(null_sgr({1,2},1)) = true),
  assert(f(leftnull_sgr({1,2,3})) = true),
  assert(f(rightnull_sgr({-1,2,-3})) = true),
  true)$

okltest_csgr_p(f) := (
  /* XXX */
  true)$

okltest_mon_p(f) := (
  /* XXX */
  true)$

okltest_cmon_p(f) := (
  /* XXX */
  true)$


/* Remark: The semantics of okltest_qgrp_p is identical with that of
   okltest_ls_p. Currently all tests are handled by okltest_ls_p.
*/
okltest_qgrp_p(f) := (
  assert(okltest_ls_p(f)),
  true)$

okltest_cqgrp_p(f) := (
  /* XXX */
  true)$

okltest_uqgrp_p(f) := (
  assert(f(endcons(1,m2grd(matrix([1,2,3],[2,3,1],[3,1,2])))) = true),
  assert(f(endcons(1,m2grd(matrix([1,2,3],[2,1,2],[3,2,1])))) = false),
  /* XXX */
  true)$

okltest_cuqgrp_p(f) := (
  /* XXX */
  true)$


okltest_grp_p(f) := (
  /* XXX */
  true)$

okltest_cgrp_p(f) := (
  /* XXX */
  true)$

okltest_ugrp_p(f) := (
  /* XXX */
  true)$

okltest_cugrp_p(f) := (
  /* XXX */
  true)$

okltest_ugrpi_p(f) := (
  /* XXX */
  true)$

okltest_cugrpi_p(f) := (
  /* XXX */
  true)$


/* *********************
   * Checking equality *
   *********************
*/

okltest_grd_equalp(f) := (
  assert(f(empty_sgr,empty_sgr) = true),
  assert(f(empty_sgr,singleton_sgr) = false),
  assert(f(singleton_sgr,empty_sgr) = false),
  assert(f(singleton_sgr,singleton_sgr) = true),
  assert(f(null_sgr({1},1),null_sgr({1},1)) = true),
  assert(f(null_sgr({1},1),null_sgr({2},2)) = false),
  assert(f(null_sgr({1,2},2),null_sgr({2},2)) = false),
  assert(f(leftnull_sgr({1}),rightnull_sgr({1})) = true),
  assert(f(leftnull_sgr({1}),rightnull_sgr({2})) = false),
  assert(f(leftnull_sgr({1,2}),rightnull_sgr({1,2})) = false),
  true)$

okltest_ugrd_equalp(f) := (
  /* XXX */
  true)$


/* *************
   * Downcasts *
   *************
*/

okltest_ugrd2grd(f) := (
  /* XXX */
  true)$

okltest_ugrpi2ugrp(f) := (
  /* XXX */
  true)$

okltest_ugrpi2grp(f) := (
  /* XXX */
  true)$

okltest_ugrp2grp(f) := (
  /* XXX */
  true)$


/* **************
   * Promotions *
   **************
*/

/* ***************
   * Conversions *
   ***************
*/

okltest_scom2grd(f) := block([M],
  assert(f(M) = M),
  true)$

okltest_grd2scom(f) := block([V],
  assert(f(V) = V),
  true)$

okltest_m2grd(f) := (
  assert(grd_equalp(f(matrix()), empty_sgr) = true),
  assert(grd_equalp(f(matrix([1])), singleton_sgr) = true),
  assert(grd_equalp(f(matrix([1,1],[2,2])), leftnull_sgr({1,2})) = true),
  assert(grd_equalp(f(matrix([1,2],[1,2])), rightnull_sgr({1,2})) = true),
  true)$

okltest_grd2m(f) := (
  assert(f(empty_sgr) = matrix()),
  assert(f(singleton_sgr) = matrix([1])),
  assert(f(null_sgr({[],{}},{})) = matrix([{},{}],[{},{}])),
  true)$

okltest_grd2stdgrd(f) := (
  assert(grd_equalp(f(empty_sgr), empty_sgr) = true),
  assert(grd_equalp(f(singleton_sgr), singleton_sgr) = true),
  assert(grd_equalp(f(leftnull_sgr({2,3,4})), leftnull_sgr({1,2,3})) = true),
  assert(grd_equalp(f(rightnull_sgr({[],[1],[2]})), rightnull_sgr({1,2,3})) = true),
  true)$

okltest_grd2m_std(f) := (
  assert(f(empty_sgr) = matrix()),
  assert(f(singleton_sgr) = matrix([1])),
  assert(f(leftnull_sgr({[],[1],[2]})) = matrix([1,1,1],[2,2,2],[3,3,3])),
  true)$


/*!
\endhtmlonly
*/
