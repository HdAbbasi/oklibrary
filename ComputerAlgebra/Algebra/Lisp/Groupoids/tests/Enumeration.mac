/* Oliver Kullmann, 14.1.2009 (Swansea) */
/* Copyright 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Algebra/Lisp/Groupoids/tests/Enumeration.mac
  \brief Tests regarding enumeration of groupoids

Use by

oklib_load("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/tests/Enumeration.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$

kill(f)$


/* *********************
   * Basic enumeration *
   *********************
*/

okltest_all_grd2m(f) := block(
  assert(f(0) = [matrix()]),
  assert(f(1) = [matrix([1])]),
  assert(f(2) = [
 matrix([1,1],[1,1]),matrix([1,1],[1,2]),matrix([1,1],[2,1]),
 matrix([1,1],[2,2]),matrix([1,2],[1,1]),matrix([1,2],[1,2]),
 matrix([1,2],[2,1]),matrix([1,2],[2,2]),matrix([2,1],[1,1]),
 matrix([2,1],[1,2]),matrix([2,1],[2,1]),matrix([2,1],[2,2]),
 matrix([2,2],[1,1]),matrix([2,2],[1,2]),matrix([2,2],[2,1]),
 matrix([2,2],[2,2])]),
  if oklib_test_level = 0 then return(true),
  assert(length(f(3)) = 19683),
  true)$

okltest_all_grd(f) := block(
  okltest_all_grd2m(buildq([f], lambda([n], map(lmscom2m,f(n))))),
  true)$


/* ************
   * Counting *
   ************
*/

okltest_counting_groupoids(F) := block(
 [N : if oklib_test_level = 0 then 2 else 3],
  for n : 0 thru N do block([L : all_grd(n)],
    for P in F do (
      assert(P[1](n) = length(sublist(L,
        lambda([G], every_s(lambda([p],p(G)), P[2])))))
  )),
  true)$


/* ***********************************
   * Enumerating isomorphism classes *
   ***********************************
*/

/* Generic test function whether f(n) computes all isomorphism classes of
   groupoids (represented as matrices) of order n:
*/
okltest_all_isomorphism_classes_grd(f) := (
  assert(f(0) = {{matrix()}}),
  assert(f(1) = {{matrix([1])}}),
  assert(f(2) = {
 {matrix([1,1],[1,1]),matrix([2,2],[2,2])},
 {matrix([1,1],[1,2]),matrix([1,2],[2,2])},
 {matrix([1,1],[2,1]),matrix([2,1],[2,2])},
 {matrix([1,1],[2,2])},
 {matrix([1,2],[1,1]),matrix([2,2],[1,2])},
 {matrix([1,2],[1,2])},
 {matrix([1,2],[2,1]),matrix([2,1],[1,2])},
 {matrix([2,1],[1,1]),matrix([2,2],[2,1])},
 {matrix([2,1],[2,1])},
 {matrix([2,2],[1,1])}}),
  true)$

okltest_all_isomorphism_classes_actively_sm_grd(f) := (
  /* XXX */
  true)$


/* *********************************
   * Enumerating isotopism classes *
   *********************************
*/

/* Generic test function whether f(n) computes all isotopism classes of
   groupoids (represented as matrices) of order n:
*/
okltest_all_isotopism_classes_grd(f) := (
  assert(f(0) = {{matrix()}}),
  assert(f(1) = {{matrix([1])}}),
  assert(f(2) = {
 {matrix([1,1],[1,1]),matrix([2,2],[2,2])},
 {matrix([1,1],[1,2]),matrix([1,1],[2,1]),matrix([1,2],[1,1]),
    matrix([1,2],[2,2]),matrix([2,1],[1,1]),matrix([2,1],[2,2]),
    matrix([2,2],[1,2]),matrix([2,2],[2,1])},
 {matrix([1,1],[2,2]),matrix([2,2],[1,1])},
 {matrix([1,2],[1,2]),matrix([2,1],[2,1])},
 {matrix([1,2],[2,1]),matrix([2,1],[1,2])}}),
  true)$

okltest_all_isotopismisomorphism_classes_grd(f) := (
  assert(f(0) = {{{matrix()}}}),
  assert(f(1) = {{{matrix([1])}}}),
  assert(f(2) = {
 { {matrix([1,1],[1,1]),matrix([2,2],[2,2])} },
 { {matrix([1,1],[1,2]),matrix([1,2],[2,2])},
   {matrix([1,1],[2,1]),matrix([2,1],[2,2])},
   {matrix([1,2],[1,1]),matrix([2,2],[1,2])},
   {matrix([2,1],[1,1]),matrix([2,2],[2,1])}},
 { {matrix([1,1],[2,2])},
   {matrix([2,2],[1,1])} },
 { {matrix([1,2],[1,2])},
   {matrix([2,1],[2,1])} },
 { {matrix([1,2],[2,1]),matrix([2,1],[1,2])} }}),
  true)$


/*!
\endhtmlonly
*/
