/* Oliver Kullmann, 14.1.2009 (Swansea) */
/* Copyright 2009, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Algebra/Lisp/Groupoids/tests/InvertibleElements.mac
  \brief Tests regarding invertible elements in groupoids

Use by

oklib_load("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/tests/InvertibleElements.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/Semigroups/BasicExamples.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/BasicNotions.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/Constructions.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/Groups/CyclicGroups.mac")$

kill(f)$


/* **********
   * Basics *
   **********
*/

okltest_leftinvertible_el_ugrd(f) := block([V],
  assert(f(singleton_mon,1) = true),
  V : endcons(1,m2grd(matrix([1,2,3],[2,3,1],[3,2,1]))),
  assert(f(V,1) = true),
  assert(f(V,2) = false),
  assert(f(V,3) = true),
  /* XXX */
  true)$

okltest_rightinvertible_el_ugrd(f) := block([V],
  assert(f(singleton_mon,1) = true),
  V : endcons(1,m2grd(matrix([1,2,3],[2,3,1],[3,2,1]))),
  assert(f(V,1) = true),
  assert(f(V,2) = true),
  assert(f(V,3) = true),
  /* XXX */
  true)$

okltest_invertible_el_ugrd(f) := block([V],
  assert(f(singleton_mon,1) = true),
  V : endcons(1,m2grd(matrix([1,2,3],[2,3,1],[3,2,1]))),
  assert(f(V,1) = true),
  assert(f(V,2) = false),
  assert(f(V,3) = true),
  /* XXX */
  true)$

okltest_leftinversion_ugrd(f) := block([V],
  assert(f(singleton_mon,identity) = true),
  V : endcons(1,m2grd(matrix([1,2,3],[2,2,2],[3,1,1]))),
  assert(f(V, lambda([x], if x=1 then 1 else 3)) = true),
  assert(f(V, identity) = false),
  /* XXX */
  true)$

okltest_rightinversion_ugrd(f) := (
  assert(f(singleton_mon,identity) = true),
  okltest_leftinversion_ugrd(buildq([f], lambda([V,h], f(transposed_ugrd(V),h)))),
  /* XXX */
  true)$

okltest_inversion_ugrd(f) := (
  assert(f(singleton_mon,identity) = true),
  for n : 1 thru cokltl(5,20) do block([G : cyclic_ugrp(n)],
    assert(f(G,"-") = true)),
  /* XXX */
  true)$


/* ***************
   * Involutions *
   ***************
*/

okltest_involutions_ugrd(f) := (
  for n : 1 thru cokltl(5,20) do
    assert(f(cyclic_ugrp(n)) = if evenp(n) then {n/2} else {}),
  /* XXX */
  true)$


/*!
\endhtmlonly
*/
