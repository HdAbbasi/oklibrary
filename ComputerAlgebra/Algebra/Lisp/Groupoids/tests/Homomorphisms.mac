/* Oliver Kullmann, 12.1.2009 (Swansea) */
/* Copyright 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Algebra/Lisp/Groupoids/tests/Homomorphisms.mac
  \brief Tests for the basic homomorphism functionality

Use by

oklib_load("Transitional/ComputerAlgebra/Algebra/Lisp/Groupoids/tests/Homomorphisms.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("Transitional/ComputerAlgebra/Algebra/Lisp/Groupoids/Semigroups/BasicExamples.mac")$
oklib_include("Transitional/ComputerAlgebra/Algebra/Lisp/Groupoids/Groups/CyclicGroups.mac")$
oklib_include("Transitional/ComputerAlgebra/Algebra/Lisp/Groupoids/BasicNotions.mac")$

kill(f)$


/* ***********************
   * Fundamental notions *
   ***********************
*/

okltest_homomorphism_bydef_grd(f) := block([h, compo],
  assert(f(h,empty_sgr,compo) = true),
  assert(f(identity,singleton_sgr,singleton_sgr[2]) = true),
  assert(f(identity,singleton_sgr,null_sgr({0,1},0)[2]) = false),
  /* XXX */
  true)$

okltest_homomorphism_bydef_ugrd(f) := (
  assert(f(identity,singleton_mon,singleton_mon[2],singleton_mon[3]) = true),
  assert(f(identity,singleton_mon,cyclic_ugrp(2)[2],cyclic_ugrp(2)[3]) = false),
  assert(f(lambda([x],0),singleton_mon,cyclic_ugrp(2)[2],cyclic_ugrp(2)[3]) = true),
  /* XXX */
  true)$

okltest_induced_congruence_grd(f) := (
  /* XXX */
  true)$


/* ***********************
   * Isomorphism testing *
   ***********************
*/

okltest_is_isomorphic_bydef_grd(f) := (
  assert(f(empty_sgr,empty_sgr) = true),
  assert(f(empty_sgr,singleton_sgr) = false),
  assert(f(null_sgr({1,2,3},1),null_sgr({1,2,3},2)) = true),
  /* XXX */
  true)$

okltest_transport_grd(f) := block([h],
  assert(grd_equalp(f(empty_sgr,h),empty_sgr) = true),
  assert(grd_equalp(f(null_sgr({1,2,3},1),lambda([x],x+1)), null_sgr({2,3,4},2)) = true),
  /* XXX */
  true)$

okltest_transport3_grd(f) := block([h1,h2,h3],
  assert(grd_equalp(f(empty_sgr,h1,h2,h3),empty_sgr) = true),
  /* XXX */
  true)$


/* *************************
   * Enumerating groupoids *
   *************************
*/

/* Generic test function whether f(n) computes all isomorphism classes of
   groupoids (represented as matrices) of order n:
*/
okltest_all_isomorphisms_classes_grd(f) := (
  assert(f(0) = {{matrix()}}),
  assert(f(1) = {{matrix([1])}}),
  assert(f(2) = {
 {matrix([1,1],[1,1]),matrix([2,2],[2,2])},
 {matrix([1,1],[1,2]),matrix([1,2],[2,2])},
 {matrix([1,1],[2,1]),matrix([2,1],[2,2])},
 {matrix([1,1],[2,2])},
 {matrix([1,2],[1,1]),matrix([2,2],[1,2])},
 {matrix([1,2],[1,2])},
 {matrix([1,2],[2,1]),matrix([2,1],[1,2])},
 {matrix([2,1],[1,1]),matrix([2,2],[2,1])},
 {matrix([2,1],[2,1])},
 {matrix([2,2],[1,1])}}),
  true)$

okltest_all_isomorphisms_classes_actively_sm_grd(f) := (
  /* XXX */
  true)$

/* Generic test function whether f(n) computes all isotopism classes of
   groupoids (represented as matrices) of order n:
*/
okltest_all_isotopism_classes_grd(f) := (
  assert(f(0) = {{matrix()}}),
  assert(f(1) = {{matrix([1])}}),
  assert(f(2) = {
 {matrix([1,1],[1,1]),matrix([2,2],[2,2])},
 {matrix([1,1],[1,2]),matrix([1,1],[2,1]),matrix([1,2],[1,1]),
    matrix([1,2],[2,2]),matrix([2,1],[1,1]),matrix([2,1],[2,2]),
    matrix([2,2],[1,2]),matrix([2,2],[2,1])},
 {matrix([1,1],[2,2]),matrix([2,2],[1,1])},
 {matrix([1,2],[1,2]),matrix([2,1],[2,1])},
 {matrix([1,2],[2,1]),matrix([2,1],[1,2])}}),
  true)$

okltest_all_isotopismisomorphism_classes_grd(f) := (
  assert(f(0) = {{{matrix()}}}),
  assert(f(1) = {{{matrix([1])}}}),
  assert(f(2) = {
 { {matrix([1,1],[1,1]),matrix([2,2],[2,2])} },
 { {matrix([1,1],[1,2]),matrix([1,2],[2,2])},
   {matrix([1,1],[2,1]),matrix([2,1],[2,2])},
   {matrix([1,2],[1,1]),matrix([2,2],[1,2])},
   {matrix([2,1],[1,1]),matrix([2,2],[2,1])}},
 { {matrix([1,1],[2,2])},
   {matrix([2,2],[1,1])} },
 { {matrix([1,2],[1,2])},
   {matrix([2,1],[2,1])} },
 { {matrix([1,2],[2,1]),matrix([2,1],[1,2])} }}),
  true)$


/*!
\endhtmlonly
*/
