/* Oliver Kullmann, 6.7.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Algebra/Lisp/Groupoids/Constructions.mac
  \brief Basic constructions of groupoids

Use by

oklib_load("Transitional/ComputerAlgebra/Algebra/Lisp/Groupoids/Constructions.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac")$

/* ***********************
   * Complex composition *
   ***********************
*/

/* For a given composition, derive the "complex composition", which
   for subsets X, Y computes the composition of all combinations. */
complex_compo(compo) := buildq([compo], lambda([X,Y], 
  apply(union,map(setify,outermap(compo,listify(X),listify(Y))))))$

complex_grd(V) := [powerset(V[1]), complex_compo(V[2])]$


/* *********************
   * Product groupoids *
   *********************
*/

/* For two compositions, derive the "product composition": */
product_compo(compo1,compo2) := buildq([compo1,compo2], lambda([x,y],
  [compo1(x[1],y[1]), compo2(x[2],y[2])]))$

product_grd(V1,V2) := [cartesian_product(V1[1],V2[1]), 
  product_compo(V1[2],V2[2])]$


/* *****************
   * Transposition *
   *****************
*/

/* Transpose a composition: */
transposed_compo(compo) := buildq([compo], lambda([x,y],
  compo(y,x)))$

transposed_grd(V) := [V[1], transposed_compo(V[2])]$


/* *****************************
   * Conversions with matrices *
   *****************************
*/

/* For a given square combinatorial matrix M, whose values are
   indices, the corresponding groupoid: */
scom2grd(M) := M$
/* Conversely, a groupoid as a square combinatorial matrix: */
grd2scom(V) := V$


/* ******************
   * Basic examples *
   ******************
*/

/* A smallest non-associated groupoid: */
non_assoc_2_grd : scom2grd(sm2scom(matrix([2,2],[1,2])))$

/*!
\endhtmlonly
*/
