/* Matthew Gwynne, 22.3.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Algebra/Lisp/FiniteFields.mac
  \brief Finite field functions

Use by

oklib_load("Transitional/ComputerAlgebra/Algebra/Lisp/FiniteFields.mac");

*/

/*!
\htmlonly
*/


load(gf)$

/* ***************************************
   * Finite Field Wrapper Functions      *
   ***************************************
*/

/* The gf_* functions are prefixed with an 'e' for 
   extended. These functions perform the same duty as their gf_*,
   counterparts, but require additionally an argument, that specifies
   which field the operation is being performed over, in the form [p,n,ip]
   where "p" is the prime characteristic of the field, "n" is the power to
   which "p" is raised, and "ip" the irreducible polynomial over GF(p).
   Or, alternatively, just [p,ip]; or even [p].
 */

/*
   This function provides a generic wrapper function, taking a function
   "func" and a list of arguments "args", with the field structure (defined 
   above) as the first element in "args", and the arguments to f as the 
   remaining elements.
*/
egf_func(func,args) := (
    apply(gf_set, first(args)),
    apply(func,rest(args)))$

egf_add([args]) := egf_func(gf_add, args)$
egf_sub([args]) := egf_func(gf_sub, args)$
egf_mul([args]) := egf_func(gf_mul, args)$
egf_div([args]) := egf_func(gf_div, args)$
egf_inv([args]) := egf_func(gf_inv, args)$
egf_matmul([args]) := egf_func(gf_matmul, args)$
egf_matinv([args]) := egf_func(gf_matinv, args)$
egf_exp([args]) := egf_func('gf_exp, args)$
egf_rand([args]) := egf_func(gf_rand, args)$
egf_findprim([args]) := egf_func(gf_findprim, args)$
egf_ind([args]) := egf_func(gf_ind, args)$
egf_log([args]) := egf_func(gf_log, args)$
egf_primep([args]) := egf_func(gf_primep, args)$
egf_ord([args]) := egf_func(gf_ord, args)$
egf_minpoly([args]) := egf_func(gf_minpoly, args)$
egf_findnorm([args]) := egf_func(gf_findnorm, args)$
egf_sfindnorm([args]) := egf_func(gf_sfindnorm, args)$
egf_normbasis([args]) := egf_func(gf_normbasis, args)$
egf_nbrep([args]) := egf_func(gf_nbrep, args)$
egf_poly2num([args]) := egf_func(poly2num, args)$
egf_num2poly([args]) := egf_func(num2poly, args)$
egf_coeffs([args]) := egf_func(coeffs, args)$


/* ****************************
   * Standard representations *
   ****************************
*/

/* Computing the standard polynomial representation in
   the field f for a given integer polynomial p. */
gf_stand(p) := gf_add(0,p)$
egf_stand(f,p) := egf_func(gf_stand, [f,p])$

/* Deciding whether two integer polynomials p,q represent the
   same element in the field f. */
gf_equalp(p,q) := is(gf_stand(p) = gf_stand(q))$
egf_equalp(f,p,q) := egf_func(gf_equalp, [f,p,q])$

/*!
\endhtmlonly
*/
