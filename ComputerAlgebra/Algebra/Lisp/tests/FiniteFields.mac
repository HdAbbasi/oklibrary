/* Matthew Gwynne, 4.6.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Algebra/Lisp/tests/FiniteFields.mac
  \brief Tests for Finite Field functions

Use by

oklib_load("OKlib/ComputerAlgebra/Algebra/Lisp/tests/FiniteFields.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/FiniteFields.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/Conversions.mac")$

kill(f)$


/* ***************************************
   * Finite Field Wrapper Functions      *
   ***************************************
*/

okltest_egf_add(f) := block([field, element, elemSet],
  field : [2,1,x],
  assert(f(field, 0,0) = 0),
  assert(f(field, 1,0) = 1),
  assert(f(field, 0,1) = 1),
  assert(f(field, 1,1) = 0),
  field : [2,2,x^2+x+1],
  for i : 0 thru 3 do block([iPoly : int2poly(i,2)],
    assert(f(field, iPoly,0) = iPoly),
    assert(f(field, iPoly, iPoly) = 0),
    for j : 0 thru 3 do block([jPoly : int2poly(j,2)],
      assert(f(field,iPoly,jPoly) = f(field,jPoly,iPoly))
    )
  ),
  if oklib_test_level = 0 then return(true),
  field : [3,3,x^3+x^2+x+2],
  for i : 0 thru 26 do block([iPoly : int2poly(i,3)],
    assert(f(field,f(field,iPoly,iPoly),iPoly) = 0),
    for j : 0 thru 26 do block([jPoly : int2poly(j,3)],
      assert(f(field,iPoly,jPoly) = f(field,jPoly,iPoly))
    )
  ),
  if oklib_test_level = 1 then return(true),
  field : [2,8,x^8+x^4+x^3+x+1],
  for i : 0 thru 255 do block([iPoly : int2poly(i,2)],
    assert(f(field,iPoly,0) = iPoly),
    assert(f(field,iPoly,iPoly) = 0)
  ),
  assert(f(field,x^5+x^3+x+1,x^7+x^3+x^2) = x^7+x^5+x^2+x+1),
  assert(f(field,x^7+x^2,x^4+x^3+x^2+x+1) = x^7+x^4+x^3+x+1),
  assert(f(field,x^5+x^3+x+1, 1) = x^5+x^3+x),
  true)$

okltest_egf_sub(f) := block([field, element, elemSet],
  field : [2,1,x],
  assert(f(field, 0,0) = 0),
  assert(f(field, 1,0) = 1),
  assert(f(field, 0,1) = 1),
  assert(f(field, 1,1) = 0),
  field : [2,2,x^2+x+1],
  for i : 0 thru 3 do block([iPoly : int2poly(i,2)],
    assert(f(field, iPoly,0) = iPoly),
    assert(f(field, iPoly, iPoly) = 0),
    for j : 0 thru 3 do block([jPoly : int2poly(j,2)],
      assert(f(field,iPoly,jPoly) = f(field,jPoly,iPoly))
    )
  ),
  if oklib_test_level = 0 then return(true),
  field : [3,3,x^3+x^2+x+2],
  for i : 0 thru 26 do block([iPoly : int2poly(i,3)],
    assert(f(field,iPoly,iPoly) = 0),
    assert(f(field,f(field,f(field,0,iPoly),iPoly),iPoly) = 0)
  ),
  if oklib_test_level = 1 then return(true),
  field : [2,8,x^8+x^4+x^3+x+1],
  for i : 0 thru 255 do block([iPoly : int2poly(i,2)],
    assert(f(field,iPoly,0) = iPoly),
    assert(f(field,iPoly,iPoly) = 0)
  ),
  assert(f(field,x^5+x^3+x+1,x^7+x^3+x^2) = x^7+x^5+x^2+x+1),
  assert(f(field,x^7+x^2,x^4+x^3+x^2+x+1) = x^7+x^4+x^3+x+1),
  assert(f(field,x^5+x^3+x+1, 1) = x^5+x^3+x),
  true)$

okltest_egf_mul(f) := block([field, element, elemSet, elemGenerator],
  field : [2,1,x],
  assert(f(field, 0,0) = 0),
  assert(f(field, 1,0) = 0),
  assert(f(field, 0,1) = 0),
  assert(f(field, 1,1) = 1),
  field : [2,2,x^2+x+1],
  for i : 0 thru 3 do block([iPoly : int2poly(i,2)],
    assert(f(field, iPoly,0) = 0),
    assert(f(field, iPoly, 1) = iPoly),
    for j : 0 thru 3 do block([jPoly : int2poly(j,2)],
      assert(f(field,iPoly,jPoly) = f(field,jPoly,iPoly))
    )
  ),
  if oklib_test_level = 0 then return(true),
  field : [3,3,x^3+x^2+x+2],
  for i : 0 thru 26 do block([iPoly : int2poly(i,3)],
    assert(f(field, iPoly,0) = 0),
    for j : 0 thru 26 do block([jPoly : int2poly(j,3)],
      assert(f(field,iPoly,jPoly) = f(field,jPoly,iPoly))
    )
  ),
  if oklib_test_level = 1 then return(true),
  field : [2,8,x^8+x^4+x^3+x+1],
  assert(f(field,0,0) = 0),
  for i : 1 thru 255 do block([iPoly : int2poly(i,2)],
    assert(f(field,iPoly,0) = 0),
    assert(f(field,iPoly,1) = iPoly)
  ),
  assert(f(field,x^5+x^3+x+1, x^7+x^3+x^2) = x^7+x^5+x^4+x+1),
  assert(f(field,x^7+x^2, x^4+x^3+x^2+x+1) = x^6+x^5+x^2+1),
  assert(f(field,x^5+x^3+x+1, 1) = x^5+x^3+x+1),
  elemGenerator : x+1,
  element : 1,
  elemSet : {0},
  for i : 1 thru 255 do block(
    element : f(field,element,elemGenerator),
    elemSet : adjoin(element, elemSet)
  ),
  assert(length(elemSet) = 256),
  true)$

okltest_egf_div(f) := block([field, element, elemSet, elemGenerator],
  field : [2,1,x],
  assert(f(field, 0,1) = 0),
  assert(f(field, 1,1) = 1),
  field : [2,2,x^2+x+1],
  for i : 1 thru 3 do block([iPoly : int2poly(i,2)],
    assert(f(field, 0, iPoly) = 0),
    assert(f(field, iPoly, 1) = iPoly),
    assert(f(field, iPoly, iPoly) = 1),
    assert(f(field, 1, f(field, 1, iPoly)) = iPoly)
  ),
  if oklib_test_level = 0 then return(true),
  field : [3,3,x^3+x^2+x+2],
  for i : 1 thru 26 do block([iPoly : int2poly(i,3)],
    assert(f(field, 0, iPoly) = 0),
    assert(f(field, iPoly, iPoly) = 1),
    assert(f(field, 1, f(field, 1, iPoly)) = egf_stand(field,iPoly))
  ),
  if oklib_test_level = 1 then return(true),
  field : [2,8,x^8+x^4+x^3+x+1],
  for i : 1 thru 255 do block([iPoly : int2poly(i,2)],
    assert(f(field, 0, iPoly) = 0),
    assert(f(field, iPoly, 1) = iPoly),
    assert(f(field, 1, f(field, 1, iPoly)) = egf_stand(field,iPoly))
  ),
  assert(f(field,x^5+x^3+x+1, x^7+x^3+x^2) = x^5+x^4+x),
  assert(f(field,x^7+x^2, x^4+x^3+x^2+x+1) = x^3+x^2),
  assert(f(field,x^5+x^3+x+1, 1) = x^5+x^3+x+1),
  elemGeneratorInv : x^7+x^6+x^5+x^4+x^2+x,
  element : 1,
  elemSet : {0},
  for i : 1 thru 255 do block(
    element : f(field,element,elemGeneratorInv),
    elemSet : adjoin(element, elemSet)
  ),
  assert(length(elemSet) = 256),
  true)$

okltest_egf_inv(f) := block([field],
  field : [2,1,x],
  assert(f(field,1) = 1),
  field : [2,2,x^2+x+1],
  for i : 1 thru 3 do block([iPoly : int2poly(i,2)],
    assert(egf_mul(field,f(field,iPoly),iPoly) = 1)
  ),
  if oklib_test_level = 0 then return(true),
  field : [3,3,x^3+x^2+x+2],
  assert(f(field,1) = 1),
  for i : 1 thru 26 do block([iPoly : int2poly(i,3)],
    assert(egf_mul(field,f(field,iPoly),iPoly) = 1)
  ),
  if oklib_test_level = 1 then return(true),
  field : [2,8,x^8+x^4+x^3+x+1],
  assert(f(field,1) = 1),
  for i : 1 thru 255 do block([iPoly : int2poly(i,2)],
    assert(egf_mul(field,f(field,iPoly),iPoly) = 1)
  ),
  assert(f(field,x^6+x^5+x+1) = x^7+x^6+x^4+x+1),
  assert(f(field,x^7+x^5+x^4+x+1) = x^7+x^6+x^5+x^3+x^2+x+1),
  true)$

okltest_egf_matmul(f) := block([field],
  field : [2,1,x],
  for n : 2 thru 4 do block([nMatrixIdentity, nMatrixZero],
    nMatrixIdentity : ident(n),
    nMatrixZero : zeromatrix(n,n),
    for m : 2 thru 4 do block([matrixElement],
      matrixElement : genmatrix(lambda([i,j],mod((i-1)*n+j,2)),n,m),
      /* MG : totaldisrep seems necessary as the matrices returned are in CRE
         form */
      assert(totaldisrep(f(field,matrixElement,ident(m))) = matrixElement),
      assert(totaldisrep(f(field,nMatrixIdentity,matrixElement)) = 
        matrixElement),
      assert(totaldisrep(f(field,matrixElement,zeromatrix(m,m))) = 
        zeromatrix(n,m)),
      assert(totaldisrep(f(field,nMatrixZero,matrixElement)) = zeromatrix(n,m))
    )
  ),
  field : [3,3,x^3+x^2+x+2],
  assert(totaldisrep(f(field,matrix([2*x^2+x,2,x^2+1,2*x+1,x^2+2*x+1],[x^2+2,
    x^2+x,2*x^2+x+2,x^2+x+2,x^2+2*x],[x^2,x,2*x^2+2*x+1,2*x+2,2*x^2+2*x],
    [2*x^2+2*x,x^2,x^2+x+2,x^2+2*x,2*x+2],[2*x^2+x,x^2+2*x,x^2+x,x^2+x+2,
    x^2+2*x]),matrix([2*x^2+1,x^2+x+1,1,x^2+x,0],[x^2+2*x+1,2*x^2+x,x^2+1,x^2+2,
    2*x^2+2*x],[2*x^2+x,x^2+x,x^2,2*x^2,2*x^2+x+1],[2*x^2+x+2,2,2*x^2+x+1,x+1,
    x+1],[x^2+1,2*x+1,0,x^2+1,2*x^2+x]))) = matrix([1,x^2,-x^2-x,x^2+x,x^2-x+1],
    [-x-1,-x^2+1,-x^2+1,x^2+x-1,-x^2-x+1],[-x^2+x,-x,x^2-x+1,x^2-x,x^2],
    [x^2,-x+1,-x^2-1,x^2-x,-x^2-x-1],[-x^2-1,x^2-1,-x+1,-x^2-x,x^2+x-1])),
  if oklib_test_level = 0 then return(true),
  for n : 2 thru 10 do block([nMatrixIdentity, nMatrixZero],
    nMatrixIdentity : ident(n),
    nMatrixZero : zeromatrix(n,n),
    for m : 2 thru 10 do block(
     [matrixElement : genmatrix(lambda([i,j],
        int2poly(mod((i-1)*n+j,27),3)),n,m)],
      assert(totaldisrep(f(field,matrixElement,zeromatrix(m,m))) = 
        zeromatrix(n,m)),
      assert(totaldisrep(f(field,nMatrixZero,matrixElement)) = zeromatrix(n,m))
    )
  ),
  true)$

okltest_egf_matinv(f) := block([field],
  field : [2,1,x],
  for n : 2 thru 5 do block([nMatrixIdentity],
    nMatrixIdentity : ident(n),
    matrixElement : genmatrix(lambda([i,j],if (n-j+1) = i then 1 else 0),n,n),
    /* MG : totaldisrep seems necessary as the matrices returned are in CRE
       form */
    assert(totaldisrep(f(field,nMatrixIdentity)) = nMatrixIdentity),
    assert(totaldisrep(egf_matmul(field,f(field,matrixElement),matrixElement)) 
      = nMatrixIdentity),
    assert(totaldisrep(egf_matmul(field,matrixElement,f(field,matrixElement))) 
      = nMatrixIdentity)
  ),
  if oklib_test_level = 0 then return(true),
  field : [3,3,x^3+x^2+x+2],
  for n : 2 thru 10 do block([nMatrixIdentity],
    nMatrixIdentity : ident(n),
    matrixElement : genmatrix(lambda([i,j],
      if (n-j+1) = i then int2poly(mod(i*j,27),3) else 0),n,n),
    /* MG : totaldisrep seems necessary as the matrices returned are in CRE
       form */
    assert(totaldisrep(f(field,nMatrixIdentity)) = nMatrixIdentity),
    assert(totaldisrep(egf_matmul(field,f(field,matrixElement),matrixElement)) 
      = nMatrixIdentity),
    assert(totaldisrep(egf_matmul(field,matrixElement,f(field,matrixElement))) 
      = nMatrixIdentity)
  ),
  true)$

okltest_egf_exp(f) := block([field, elemSet],
  field : [2,1,x],
  assert(f(field, 0,0) = 1),
  assert(f(field, 1,0) = 1),
  assert(f(field, 0,1) = 0),
  assert(f(field, 1,1) = 1),
  assert(f(field, 1,-1) = 1),
  field : [2,2,x^2+x+1],
  for i : 1 thru 3 do block([iPoly : int2poly(i,2)],
    assert(f(field, iPoly,0) = 1),
    assert(f(field, iPoly, 1) = iPoly),
    /* egf_exp is incorrect for negative exponents  */
    /*assert(f(field, iPoly, -1) = f(field,iPoly,2)),*/
    assert(f(field, iPoly, 3) = 1)
  ),
  if oklib_test_level = 0 then return(true),
  field : [3,3,x^3+x^2+x+2],
  for i : 1 thru 26 do block([iPoly : int2poly(i,3)],
    assert(f(field, iPoly,0) = 1),
    assert(f(field, iPoly, 1) = egf_stand(field,iPoly)),
    /*assert(f(field, iPoly, -1) = f(field,iPoly,25)),*/
    assert(f(field, iPoly, 26) = 1)
  ),
  if oklib_test_level = 1 then return(true),
  field : [2,8,x^8+x^4+x^3+x+1],
  assert(f(field,0,0) = 1),
  for i : 1 thru 255 do block([iPoly : int2poly(i,2)],
    assert(f(field,iPoly,0) = 1),
    assert(f(field,iPoly,1) = iPoly),
    /*assert(f(field, iPoly, -1) = f(field,iPoly,254)),*/
    assert(f(field, iPoly, 255) = 1)
  ),
  assert(f(field,x^5+x^3+x+1, 23) = x^6+x^5+x),
  assert(f(field,x^7+x^2, 5) = x^4+x^3+x+1),
  assert(f(field,x^5+x^3+x+1, 204) = x^3+x^2),
  elemSet : map(lambda([a], f(field,x+1,a)), setify(makelist(i,i,0,255))),
  elemSet : adjoin(0, elemSet),
  assert(length(elemSet) = 256),
  true)$


okltest_egf_findprim(f) := block([field],
  /*field : [2,1,x],
  assert(egf_primep(field,f(field))),*/
  field : [2,2,x^2+x+1],
  assert(egf_primep(field,f(field))),
  field : [3,3,x^3+x^2+x+2],
  assert(egf_primep(field, f(field))),
  field : [2,8,x^8+x^4+x^3+x+1], 
  assert(egf_primep(field, f(field))),
  true)$

okltest_egf_coeffs(f) := block([field],
  field : [2,1,x],
  for i : 0 thru 10 do block(
    assert(f(field, num2poly(i),-1) = []),
    assert(length(f(field, num2poly(i), 0)) = 1),
    assert(length(f(field, num2poly(i), i)) = i+1)
  ),
  field : [2,2,x^2+x+1],
  for i : 0 thru 10 do block(
    assert(f(field, num2poly(i),-1) = []),
    assert(length(f(field, num2poly(i), 0)) = 1),
    assert(length(f(field, num2poly(i), i)) = i+1)
  ),
  field : [3,3,x^3+x^2+x+2],
  for i : 0 thru 10 do block(
    assert(f(field, num2poly(i),-1) = []),
    assert(length(f(field, num2poly(i), 0)) = 1),
    assert(length(f(field, num2poly(i), i)) = i+1)
  ),
  assert(f(field,2*x^2 -x + 1,7) = [0,0,0,0,0,2,2,1]),
  field : [2,8,x^8+x^4+x^3+x+1], 
  for i : 0 thru 10 do block(
    assert(f(field, num2poly(i),-1) = []),
    assert(length(f(field, num2poly(i), 0)) = 1),
    assert(length(f(field, num2poly(i), i)) = i+1)
  ),
  assert(f(field, x^4+x+1,7) = [0,0,0,1,0,0,1,1]),
  assert(f(field, x^5+x^3+x,7) = [0,0,1,0,1,0,1,0]),
  true)$

/* ****************************
   * Standard representations *
   ****************************
*/

okltest_gf_stand(f) := block(
  gf_set(3),
  assert(f(0) = 0),
  assert(f(1) = 1),
  assert(f(2) = -1),
  assert(f(3) = 0),
  assert(f(5 * x) = 0), /* this is a kind of a gf-bug */
  true)$

okltest_egf_stand(f) := block([gf],
  gf : [3],
  assert(f(gf,0) = 0),
  assert(f(gf,1) = 1),
  assert(f(gf,2) = -1),
  gf : [5],
  assert(f(gf,2) = 2),
  true)$


okltest_gf_equalp(f) := block(
  gf_set(3),
  assert(f(0,0) = true),
  assert(f(0,1) = false),
  assert(f(5,8) = true),
  assert(f(5,9) = false),
  assert(f(4*x - 7, 2) = true), /* this is a kind of a gf-bug */
  assert(f(x^2,0) = true), /* this is a kind of a gf-bug */
  true)$

okltest_egf_equalp(f) := block([gf],
  gf : [3],
  assert(f(gf,5,8) = true),
  gf : [5],
  assert(f(gf,5,8) = false),
  true)$


/*!
\endhtmlonly
*/
