/* Oliver Kullmann, 8.5.2010 (Swansea) */
/* Copyright 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/RamseyTheory/Lisp/GreenTao/Asymptotics.mac
  \brief Asymptotic computations in the context of Green-Tao numbers

Use by

oklib_load("OKlib/ComputerAlgebra/RamseyTheory/Lisp/GreenTao/Asymptotics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/PrimeNumbers.mac")$

/* *********************************************
   * The formula from [Grosswald. Hagis, 1979] *
   *********************************************
*/

/* The task is to approximation nhyp_arithprog_primes_hg(k,n), the number
   of arithmetic progressions of length k in the first n prime numbers.
*/

/* First computing the coefficients C_k = C_gh(k,inf), defined as
     C_k = (prod_{p <= k} 1/p * (p/(p-1))^(k-1)) *
           (prod_{p > k} (p/(p-1))^(k-1) * (p-k+1)/p)
   where p ranges over the prime numbers.

   The first factor is computed by C_gh_fin(k), the second by
   C_gh_inf(k,max_p), where only p <= max_p is considered.
 */

factor_C_gh_fin(k) := buildq([k],lambda([p], p^(k-2)/(p-1)^(k-1)))$

C_gh_fin(k) := prod_l(map(factor_C_gh_fin(k), primes_first(count_primes(k))))$

factor_C_gh_inf(k) := buildq([k],lambda([p], p^(k-2)*(p-k+1)/(p-1)^(k-1)))$
factorbf_C_gh_inf(k) := buildq([k],lambda([p], bfloat(p^(k-2)*(p-k+1)/(p-1)^(k-1))))$

/* Prerequisite: max_p >= k, k >= 2. */
C_gh_inf(k,max_p) := block(
 [L : rest(primes_first(count_primes(max_p)), count_primes(k))],
  prod_l(map(factor_C_gh_inf(k), L)))$
/* Using floating-point arithmetic: */
C_gh_inf_hp(k,max_p) := block(
 [L : rest(primes_first(count_primes(max_p)), count_primes(k))],
  prod_l(map(factorbf_C_gh_inf(k), L)))$

C_gh(k,max_p) := C_gh_fin(k) * C_gh_inf(k,max_p)$
/* Using floating-point arithmetic: */
C_gh_hp(k,max_p,decimal_digits) := block([fpprec : decimal_digits],
  C_gh_fin(k) * C_gh_inf_hp(k,max_p))$

/* The current approximations of the C_k for k >= 2: */
C_gh_values : [
 1,1.3203236317546366339,2.8582485961147147258,4.1511808643862090045,
 10.131794954669182916,17.298612323552886198,53.971948352406135059,148.55162885563210856,336.034327307194497,
 511.42228230839231811,1312.3197120808120353,2364.5989649971453789,7820.6000368550459882,22938.908654946451496,
 55651.4626168225131,91555.111345203124141,256474.86023216558505,510992.01115644361769,1900972.5883968371188
]$

/* The resulting estimation of the number of arithmetic progressions of
   length k in the first n prime numbers:
*/
gh_nhyp_arithprog_primes_hg(k,n) := if k-1 > length(C_gh_values) then unknown
 else float(C_gh_values[k-1]/2/(k-1) * n^2/log(n)^(k-2))$


/* ********************************************
   * The approximation from [Granville, 2006] *
   ********************************************
*/

/* The approximation of unrank_primes(greentao([k]) from
   [Granville, 2006] ("ur" stands for "unranked"): */
approxgv_grt1ur(k) := (k/2*exp(1-%gamma))^(k/2)$
/* The derived approximation of greentao([k]), using the approximation
   of count_primes via the logarithmic integral:
*/
approxgv_grt1Li_hp(k,decimal_digits) := block([fpprec : decimal_digits],
 expand(bfloat(Li(approxgv_grt1ur(k)))))$


/*!
\endhtmlonly
*/
