/* Oliver Kullmann, 6.5.2009 (Swansea) */
/* Copyright 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/RamseyTheory/Lisp/GreenTao/Numbers.mac
  \brief Handling of Green-Tao numbers

Use by

oklib_load("OKlib/ComputerAlgebra/RamseyTheory/Lisp/GreenTao/Numbers.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/Numbers.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/Generators.mac")$


/* *********************
   * Green-Tao numbers *
   *********************
*/

/* The main function, which handles all parameter-values (gathering all
   knowledge from all our sources). */
/* Prerequisites: L ascendingly sorted list of natural numbers >= 1 */
greentao(L) := if emptyp(L) then 1
 elseif first(L) = 1 then greentao(rest(L))
 elseif greentaod_a(L)#[] then apply(greentaod,greentaod_a(L))
 elseif greentaot_a(L)#[] then apply(greentaot,greentaot_a(L))
 elseif greentao3k_a(L)#[] then apply(greentao3k,greentao3k_a(L))
 elseif greentao4k_a(L)#[] then apply(greentao4k,greentao4k_a(L))
 /* elseif greentaots_a(L)#[] then apply(greentaots,greentaots_a(L)) */
 elseif greentao33k_a(L)#[] then apply(greentao33k,greentao33k_a(L))
 /* elseif greentao34k_a(L)#[] then apply(greentao34k,greentao34k_a(L)) */
 else unknown$
/* Remark: If L is not sorted, use greentao(sort(L)). */

/* Checking whether L is a valid input: */
greentao_p(L) := vanderwaerden_p(L)$


/* ****************
   * Binary cases *
   ****************
*/

greentao3k(k) := 
 if k <= 5 then 
   [4,7,23,79,528][k]
 else unknown$
greentao3k_a(L) := vanderwaerden3k_a(L)$

greentao4k(k) := 
 if k <= 4 then 
   [9,14,79,512][k]
 else unknown$
greentao4k_a(L) := vanderwaerden4k_a(L)$


/* *****************
   * Ternary cases *
   *****************
*/

greentao33k(k) :=
 if k <= 3 then
   [23,31,137][k]
 else unknown$
greentao33k_a(L) := vanderwaerden33k_a(L)$


/* *********************
   * The diagonal case *
   *********************
*/

/* The "diagonal case", i.e., m parts, arithmetic progressions of length k: */
greentaod(m,k) := if m=0 then 1 
 elseif k=1 then 1
 elseif k=2 then m+1
 elseif m=1 then greentaod1(k)
 elseif m=2 then greentaod2(k)
 elseif m=3 then greentaod3(k)
 elseif k=3 then greentaodap3(m)
 elseif k=4 then greentaodap4(m)
 else unknown$
/* The corresponding argument check for a GT parameter-list L, 
   checking whether a parameter tuple applies, returning [m,k] 
   in the positive case and [] otherwise: */
greentaod_a(L) := vanderwaerdend_a(L)$

greentaod1(k) :=
 if k <= 21 then [
  1,2,4,9,10,37,155,263,289,316,
  21966,23060,58464,2253121,9686320,11015837,227225515,755752809,3466256932,22009064470,
  220525414079
 ][k]
 else unknown$
greentaod1_a(L) := if length(L)=1 then L else []$
/* For k >= 12 these numbers are obtained by ranking from A005115. */
/* greentaod1(k) is the smallest n such that
   arithprog_primes_ohg(k,n)[2] is not empty, i.e., such that
   {p_1, ..., p_n} contains an arithmetic progression of length k:
*/
compute_greentaod1(k) := block(
 [primes_rev_init_seg : [], p : 1],
  while emptyp(arithprog_primes_finish_nm(k)) do (
    p : next_prime(p),
    primes_rev_init_seg : cons(p,primes_rev_init_seg)
  ),
  return(length(primes_rev_init_seg)))$
/*
  With memoisation this is computed by first_arithprog_primes(k).
*/

greentaod2(k) :=
  if k <= 5 then [1,3,23,79,528][k]
  else unknown$
/* Remark: These numbers have been verified/computed by SAT solving
   methods.
*/
greentaod2_a(L) := vanderwaerdend2_a(L)$


greentaod3(k) :=
  if k <= 3 then [1,4,137][k]
  else unknown$
/* Remark: These numbers have been verified/computed by SAT solving
   methods.
*/
greentaod3_a(L) := vanderwaerdend3_a(L)$



/* ************************
   * The transversal case *
   ************************
*/

/* Prerequisites: m >= 0, k >= 1: */
greentaot(m,k) := if m=0 then greentaod1(k)
 elseif k=1 then m+1
 elseif k=2 then m+2
 else block([res : greentaottau(m,k)],
  if res#unknown then return(res)
  else return(unknown))$
greentaot_a(L) := vanderwaerdent_a(L)$

/* Only using the list of transversal numbers: */
greentaottau(m,k) := block([n : 1, t],
  t : tau_arithprog_primes(k,n),
  while not listp(t) and t <= m do (
    n : n+1, t : tau_arithprog_primes(k,n)
  ),
  if listp(t) then return(unknown) else return(n))$


/* ******************************************************************
   * Transversal numbers of hypergraphs of arithmetic progresssions *
   ******************************************************************
*/

/* For 3 <= k <= exactk_tau_arithprog_primes we provide initial sequences: */
define_variable(
  exactk_tau_arithprog_primes,
  9,
  fixnum)$
/* Note that these sequences (for tau_arithprog_primes(k,n)) start with n=1. */

/* The following data has been computed by
   "GTTransversalsInc 3 1 0 OutputFile" (i.e.,
   using SAT solvers):
*/
tau_arithprog_primes_seq[3] : [
0,0,0,1,1,1,2,2,3,3,
3,3,4,5,5,6,6,7,7,7,
8,9,10,10,10,10,10,11,12,13,
13,14,15,15,15,16,16,17,18,19,
19,20,21,21,21,21,22,23,24,25,
25,26,26,26,27,28,29,29,30,30,
31,32,32,32,33,33,33,34,35,36,
37,38,39,39,40,41,41,42,42,43,
44
]$
/* The following data has been computed by
   "GTTransversalsInc 4 1 0 OutputFile":
*/
tau_arithprog_primes_seq[4] : [
0,0,0,0,0,0,0,0,1,1,
1,1,1,2,2,2,3,3,3,3,
3,4,4,4,4,5,5,5,5,5,
5,6,6,6,7,8,9,9,9,9,
9,9,9,9,10,11,11,11,11,11,
12,12,12,12,12,13,13,14,14,14,
15,16,16,16,16,16,16,16,16,16,
17,18,19,19,19,19,19,20,21,21,
21,21,22
]$
/* The following data has been computed by
   "MinimumTransversals_GreenTao-O3-DNDEBUG 180 5":
*/
tau_arithprog_primes_seq[5] : [
0,0,0,0,0,0,0,0,0,1,
1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,
2,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,4,4,
4,4,4,4,4,4,4,5,5,5,
6,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,8,8,8,
8,8,8,8,8,8,9,9,9,9,
9,9,9,9,9,9,9,10,10,10,
10,10,10,10,10,10,11,11,11,11,
11,12,12,12,12,12,12,12,12,12,
13,13,14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,14,14,
14,15,16,16,16,16,16,16
]$
/* The following data has been computed by
   "GTTransversalsInc 6 1 0 OutputFile":
*/
tau_arithprog_primes_seq[6] : [
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,
1,1,1,1,2,2,2,2,2,2,
2,2,2,3,3,3,3,3,3,3,
4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,5,
5,5,5,5,5,5,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,
6,6,6,6,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,
7,8,8,8,8,8,8,8,8,8,
8,9,9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,10,10,
10,10,10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,10,10,
11,11,11,12,12,12,12,12,12,12,
13,14,14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,14,15,
15,15,15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15
]$

/* Alternative representations using tau-skiplists
   (the list contains the last entry where tau=0, 1, ...).
*/
/* The following data has been computed by
   "GTTransversalsInc 7 1 0 GT_7 GT_7_SAT", and then using
   transform_steps_l(map(third,rest(read_nested_list("GT_7"))))
*/
tau_steplist_arithprog_primes_seq[7] : [
154,213,227,231,322,395,569,640,714,795,
826,871,874,1047,1124,1157,1179
]$
tau_arithprog_primes_seq[7] : transform_threshold_l(tau_steplist_arithprog_primes_seq[7])$
/* The following data has been computed by
   "GTTransversalsInc 8 1 0 GT_8 GT_8_SAT", and then using
   transform_steps_l(map(third,rest(read_nested_list("GT_8"))))
*/
tau_steplist_arithprog_primes_seq[8] : [
262,348,664,788,1322,1427,1446,1472,1554,1800,
1880,1934,1978,2116,2260,2405
]$
tau_arithprog_primes_seq[8] : transform_threshold_l(tau_steplist_arithprog_primes_seq[8])$
/* The following data has been computed by
   "GTTransversalsInc 9 1 0 GT_9 GT_9_SAT", and then using
   transform_steps_l(map(third,rest(read_nested_list("GT_9"))))
*/
tau_steplist_arithprog_primes_seq[9] : [
288,689,1452,1496,1522,2021,2498,2822,2914,3314,
3601,3774,4136,4550
]$
tau_arithprog_primes_seq[9] : transform_threshold_l(tau_steplist_arithprog_primes_seq[9])$


/* For n <= exactv_tau_arithprog_primes(k) we have stored exact values
   in tau_arithprog_primes_seq[k]: */
exactv_tau_arithprog_primes(k) := 
 if k<=2 or k > exactk_tau_arithprog_primes then 0
 else length(tau_arithprog_primes_seq[k])$

/* Exact (trivial) formulas (returns unknown if no exact formula applies;
   for natural numbers k, n): */
exactf_tau_arithprog_primes(k,n) :=
 if n < k then 0
 elseif k=1 then n
 elseif k=2 then n-1
 else unknown$
/* The following inclusion enables simplification of for example
    exactf_tau_arithprog_primes(k,n):
*/
oklib_plain_include(boolsimp)$

/* The pair of nearest n-value downward and its transversal-value where we have
   exact values stored (using only stored *transversal-values* besides the
   trivial formulas).
   Prerequisite: The exact formulas don't apply (directly).
*/
nearest_tau_arithprog_primes(k,n) := block(
 [maxn : exactv_tau_arithprog_primes(k)],
  if n <= maxn then return([n, tau_arithprog_primes_seq[k][n]])
  elseif maxn > 0 then return([maxn, tau_arithprog_primes_seq[k][maxn]])
  else return([k-1,0]))$

/* The best known values (using only stored transversal-values): */
/* Prerequisites: k, n natural numbers >= 1 */
tau_arithprog_primes(k,n) := block([e : exactf_tau_arithprog_primes(k,n)],
 if e#unknown then return(e),
 block([nn,v],
   [nn,v] : nearest_tau_arithprog_primes(k,n),
   if nn=n then return(v)
   else return([v, (n - nn) + v])))$


/* *********************************
   * Analysing transversal numbers *
   *********************************
*/

/* The initial sequence of transversal GT-numbers for progression-length k
   (as far as there are stored tau-values; the number m of 2's starts with 0).
   k natural number >= 0.
*/
initial_sequence_GTt(k) :=
  if k > exactk_tau_arithprog_primes then [greentaod1(k)]
  else create_list(greentaot(m,k),m,0,last(tau_arithprog_primes_seq[k])-1)$


/*!
\endhtmlonly
*/
