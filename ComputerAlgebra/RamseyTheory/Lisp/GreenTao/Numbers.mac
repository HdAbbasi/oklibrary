/* Oliver Kullmann, 6.5.2009 (Swansea) */
/* Copyright 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/RamseyTheory/Lisp/GreenTao/Numbers.mac
  \brief Handling of Green-Tao numbers

Use by

oklib_load("OKlib/ComputerAlgebra/RamseyTheory/Lisp/GreenTao/Numbers.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/Numbers.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators.mac")$


/* *********************
   * Green-Tao numbers *
   *********************
*/

/* The main function, which handles all parameter-values. */
/* Prerequisites: L ascendingly sorted list of natural numbers >= 1 */
greentao(L) := if emptyp(L) then 1
 elseif first(L) = 1 then greentao(rest(L))
 elseif greentaod_a(L)#[] then apply(greentaod,greentaod_a(L))
 elseif greentaot_a(L)#[] then apply(greentaot,greentaot_a(L))
 elseif greentao3k_a(L)#[] then apply(greentao3k,greentao3k_a(L))
 elseif greentao4k_a(L)#[] then apply(greentao4k,greentao4k_a(L))
 elseif greentaots_a(L)#[] then apply(greentaots,greentaots_a(L))
 elseif greentao33k_a(L)#[] then apply(greentao33k,greentao33k_a(L))
 elseif greentao34k_a(L)#[] then apply(greentao34k,greentao34k_a(L))
 else unknown$
/* Remark: If L is not sorted, use greentao(sort(L)). */

/* Checking whether L is a valid input: */
greentao_p(L) := vanderwaerden_p(L)$


/* ****************
   * Binary cases *
   ****************
*/

greentao3k(k) := 
 if k <= 5 then 
   [4,7,23,79,528][k]
 else unknown$
greentao3k_a(L) := vanderwaerden3k_a(L)$

greentao4k(k) := 
 if k <= 4 then 
   [9,14,79,512][k]
 else unknown$
greentao4k_a(L) := vanderwaerden4k_a(L)$


/* *****************
   * Ternary cases *
   *****************
*/

greentao33k(k) :=
 if k <= 3 then
   [23,31,137][k]
 else unknown$
greentao33k_a(L) := vanderwaerden33k_a(L)$


/* *********************
   * The diagonal case *
   *********************
*/

/* The "diagonal case", i.e., m parts, arithmetic progressions of length k: */
greentaod(m,k) := if m=0 then 1 
 elseif k=1 then 1
 elseif k=2 then m+1
 elseif m=1 then greentaod1(k)
 elseif m=2 then greentaod2(k)
 elseif m=3 then greentaod3(k)
 elseif k=3 then greentaodap3(m)
 elseif k=4 then greentaodap4(m)
 else unknown$
/* The corresponding argument check for a GT parameter-list L, 
   checking whether a parameter tuple applies, returning [m,k] 
   in the positive case and [] otherwise: */
greentaod_a(L) := vanderwaerdend_a(L)$

greentaod1(k) :=
 if k <= 17 then [
  1,2,4,9,10,37,155,263,289,316,
  21966,23060,58464,2253121,9686320,11015837,227225515
 ][k]
 else unknown$
greentaod1_a(L) := if length(L)=1 then L else []$
/* For k >= 12 these numbers are obtained by ranking from A005115. */
/* greentaod1(k) is the smallest n such that
   arithprog_primes_ohg(k,n)[2] is not empty, i.e., such that
   {p_1, ..., p_n} contains an arithmetic progression of length k:
*/
compute_greentaod1(k) := block(
 [primes_rev_init_seg : [], p : 1],
  while emptyp(arithprog_primes_finish_nm(k)) do (
    p : next_prime(p),
    primes_rev_init_seg : cons(p,primes_rev_init_seg)
  ),
  return(length(primes_rev_init_seg)))$
/*
  With memoisation this is computed by first_arithprog_primes(k).
*/

greentaod2(k) :=
  if k <= 5 then [1,3,23,79,528][k]
  else unknown$
/* Remark: These numbers have been verified/computed by SAT solving
   methods.
*/
greentaod2_a(L) := vanderwaerdend2_a(L)$


/* ************************
   * The transversal case *
   ************************
*/

greentaot(m,k) := 0$
greentaot_a(L) := vanderwaerdent_a(L)$

/*!
\endhtmlonly
*/
