/* Oliver Kullmann, 15.7.2012 (Swansea) */
/* Copyright 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/RamseyTheory/Lisp/Schur/Certificates.mac
  \brief Functions for investigating certificates of Schur-lower-bounds

Use by

oklib_load("OKlib/ComputerAlgebra/RamseyTheory/Lisp/Schur/Certificates.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/Schur.mac")$
oklib_include("OKlib/ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/Certificates.mac")$
oklib_include("OKlib/ComputerAlgebra/RamseyTheory/Lisp/Schur/Numbers.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lambda.mac")$


/* *****************
   * Basic notions *
   *****************
*/

/*
   A "Schur-certificate" P for a natural number r corresponds to a solution of
   schur_nbfclud(r,n), that is, certifies that schur(r) > n.

   P is a block partition of {1,...,n} into r blocks, that is, a list of
   r disjoint subsets of {1,...,n} whose union is the whole set.
*/
certificate_schur_p(r,n,P) := is(r = length(P)) and
 blockpartitionp(P,setn(n)) and
 every_s(lambda([b], not has_schurtriple(b)), P)$

certificate_wschur_p(r,n,P) := is(r = length(P)) and
 blockpartitionp(P,setn(n)) and
 every_s(lambda([b], not has_wschurtriple(b)), P)$


/* For a list of subsets of {1,...,n} check whether P is "palindromic",
   that is, whether for every element (subset) p of P it is true that
   v is in p iff n+1-v is in p, except that in case 3 divides n+1 the
   elements (n+1)/3 and 2(n+1)/3 are exempted:
*/
schurpalindromic_subsets_p(n,P) :=
 if mod(n+1,3)#0 then palindromic_subsets_p(n,P) else
  block([palin : true],
   for p in P while palin do
     for x in setdifference(p,{(n+1)/3,2*(n+1)/3}) while palin do
       if not elementp(n+1-x,p) then palin : false,
   palin)$
wschurpalindromic_subsets_p(n,P) := palindromic_subsets_p(n,P)$


/* Check whether P is a palindromic Schur-certificate for r and n: */
certificate_pdschur_p(r,n,P) := schurpalindromic_subsets_p(n,P) and
 certificate_schur_p(r,n,P)$

certificate_pdwschur_p(r,n,P) := wschurpalindromic_subsets_p(n,P) and
 certificate_wschur_p(r,n,P)$


/* Checking the "full symmetry-breaking" condition: */

schurfsb_p(n,P) := block(
 [L : sublist(create_list(schur(i-1),i,1,length(P)), lelb(n))],
  if (
    for p in map("[",L,take_l(length(L),P)) do
      if not elementp(first(p),second(p)) then return(0)
  ) = done then true else false)$
wschurfsb_p(n,P) := block(
 [L : sublist(create_list(wschur(i-1),i,1,length(P)), lelb(n))],
  if (
    for p in map("[",L,take_l(length(L),P)) do
      if not elementp(first(p),second(p)) then return(0)
  ) = done then true else false)$
pdschurfsb_p(n,P) := block(
 [L : sublist(create_list(schur(i-1),i,1,length(P)), lelb(ceiling(n/2)))],
  if (
    for p in map("[",L,take_l(length(L),P)) do
      if not elementp(first(p),second(p)) then return(0)
  ) = done then true else false)$
pdwschurfsb_p(n,P) := block(
 [L : sublist(create_list(wschur(i-1),i,1,length(P)), lelb(ceiling(n/2)))],
  if (
    for p in map("[",L,take_l(length(L),P)) do
      if not elementp(first(p),second(p)) then return(0)
  ) = done then true else false)$


certificate_schurfsb_p(r,n,P) := schurfsb_p(n,P) and certificate_schur_p(r,n,P)$
certificate_wschurfsb_p(r,n,P) := wschurfsb_p(n,P) and certificate_wschur_p(r,n,P)$
certificate_pdschurfsb_p(r,n,P) := pdschurfsb_p(n,P) and certificate_pdschur_p(r,n,P)$
certificate_pdwschurfsb_p(r,n,P) := pdwschurfsb_p(n,P) and certificate_pdwschur_p(r,n,P)$


/* *******************
   * Transformations *
   *******************
*/

/* Unfolding a compressed palindromic partition (creating an ordinary
   (palindromic) partition, where "compressed" means working on the vertices
   of the palindromic hypergraph):
*/
uncompresss_schurpalindromic_subsets(n,P) :=
 if mod(n+1,3)#0 then uncompresss_palindromic_subsets(n,P) else
  block([excp : {(n+1)/3,2*(n+1)/3}, m],
   m : lambda([v], if elementp(v,excp) then {v} else {v,n+1-v}),
   map(lambda([p], lunion(map(m,listify(p)))), P))$

uncompresss_wschurpalindromic_subsets(n,P) :=
 uncompresss_palindromic_subsets(n,P)$

/*!
\endhtmlonly
*/
