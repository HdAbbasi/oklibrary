/* Oliver Kullmann, 12.4.2009 (Swansea) */
/* Copyright 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/tests/Numbers.mac
  \brief Tests for functions related to vdW-numbers

Use by

oklib_load("OKlib/ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/tests/Numbers.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/Numbers.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/RamseyTheory/Lisp/Sequences.mac")$


kill(f)$


/* ***************************
   * Van der Waerden numbers *
   ***************************
*/

okltest_vanderwaerden(f) := (
  assert(f([]) = 1),
  for k : 1 thru 5 do
    assert(f([k]) = k),
  for k : 1 thru 5 do
    assert(f([1,k]) = k),
  assert(f([2,2]) = 3),
  assert(f([3,3]) = 9),
  assert(f([4,4]) = 35),
  assert(f([5,5]) = 178),
  assert(f([6,6]) = 1132),
  for k : 1 thru 6 do
    assert(f(sort([2,k])) = if oddp(k) then 2*k else 2*k-1),
  assert(f([2,2,3]) = 7),
  assert(f([3,7]) = 46),
  assert(f([4,7]) = 109),
  assert(f([4,8]) = 146),
  assert(f([5,6]) = 206),
  assert(f([2,3,3]) = 14),
  assert(f([2,2,3,3]) = 17),
  assert(f([2,2,2,3,3]) = 20),
  assert(f([2,2,2,2,3,3]) = 21),
  assert(f([2,2,2,2,2,3,3]) = 24),
  assert(f([2,2,2,2,2,2,3,3]) = 25),
  assert(f([2,2,2,2,2,2,2,3,3]) = 28),
  assert(f([2,3,4]) = 21),
  assert(f([2,2,3,4]) = 25),
  assert(f([2,2,2,3,4]) = 29),
  assert(f([2,2,2,2,3,4]) = 33),
  assert(f([2,2,2,2,2,3,4]) = 36),
  assert(f([2,3,5]) = 32),
  assert(f([2,2,3,5]) = 43),
  assert(f([2,2,2,3,5]) = 44),
  assert(f([2,2,2,2,3,5]) = 50),
  assert(f([2,3,6]) = 40),
  assert(f([2,2,3,6]) = 48),
  assert(f([2,2,2,3,6]) = 56),
  assert(f([2,2,2,2,3,6]) = 60),
  assert(f([2,3,7]) = 55),
  assert(f([2,2,3,7]) = 65),
  assert(f([2,2,2,3,7]) = 72),
  assert(f([2,3,8]) = 72),
  assert(f([2,2,3,8]) = 83),
  assert(f([2,2,2,3,8]) = 88),
  assert(f([2,3,9]) = 90),
  assert(f([2,2,3,9]) = 99),
  assert(f([2,3,10]) = 108),
  assert(f([2,2,3,10]) = 119),
  assert(f([2,3,11]) = 129),
  assert(f([2,3,12]) = 150),
  assert(f([2,3,13]) = 171),
  assert(f([2,4,4]) = 40),
  assert(f([2,2,4,4]) = 53),
  assert(f([2,2,2,4,4]) = 54),
  assert(f([2,2,2,2,4,4]) = 56),
  assert(f([2,4,5]) = 71),
  assert(f([2,2,4,5]) = 75),
  assert(f([2,2,2,4,5]) = 79),
  assert(f([2,4,6]) = 83),
  assert(f([2,2,4,6]) = 93),
  assert(f([2,4,7]) = 119),
  assert(f([2,5,5]) = 180),
  assert(f([2,3,3,3]) = 40),
  assert(f([2,2,3,3,3]) = 41),
  assert(f([2,2,2,3,3,3]) = 42),
  assert(f([2,3,3,4]) = 60),
  assert(f([2,2,3,3,4]) = 63),
  assert(f([2,3,3,5]) = 86),
  assert(f([3,3,4]) = 51),
  assert(f([3,3,5]) = 80),
  assert(f([3,4,4]) = 89),
  true)$

okltest_vanderwaerden_p(f) := (
  assert(f([]) = true),
  assert(f(1) = false),
  assert(f({1}) = false),
  assert(f([0]) = false),
  assert(f([1/2]) = false),
  assert(f([1,1]) = true),
  assert(f([2,1]) = false),
  true)$


/* ************************
   * The transversal case *
   ************************
*/

okltest_vanderwaerdent_a(f) := (
  assert(f([]) = []),
  assert(f([1]) = [0,1]),
  assert(f([1,2]) = [1,1]),
  assert(f([1,2,2]) = [2,1]),
  assert(f([1,2,3]) = []),
  assert(f([1,2,2,4]) = []),
  assert(f([2]) = [0,2]),
  assert(f([2,2]) = [1,2]),
  assert(f([2,2,2]) = [2,2]),
  assert(f([3]) = [0,3]),
  assert(f([3,3]) = []),
  assert(f([2,3]) = [1,3]),
  assert(f([2,3,4]) = []),
  assert(f([2,2,3]) = [2,3]),
  assert(f([2,2,2,4]) = [3,4]),
  true)$


/* *******************************************************
   * The formula from [Landman, Robertson, Culver, 2005] *
   *******************************************************
*/

okltest_lrc_j(f) := (
  for k : 1 thru 5 do
    assert(f(1,k) = 0),
  for r : 1 thru 5 do
    assert(f(r,1) = 0),
  true)$

okltest_lrc_l0p(f) := (
  for k : 1 thru 5 do
    assert(f(1,k) = true),
  for r : 1 thru 5 do
    assert(f(r,1) = if r = 1 then true else false)
  )$

okltest_lrc_l1p(f) := (
  for k : 1 thru 5 do
    assert(f(1,k) = true),
  for r : 1 thru 5 do
    assert(f(r,1) = if r <= 2 then true else false)
  )$


/* ********************************
   * Generalised transversal case *
   ********************************
*/

okltest_vanderwaerdents_a(f) := block([a,b],
  assert(f([]) = []),
  assert(f([1]) = []),
  assert(f([2]) = []),
  assert(f([2,3]) = []),
  assert(f([a]) = []),
  assert(f([a,b]) = []),
  assert(f([2,2,2]) = []),
  assert(f([a,b,2]) = []),
  assert(f([2,2,3]) = []),
  assert(f([2,2,a]) = []),
  assert(f([3,3,3]) = []),
  assert(f([2,2,3]) = []),
  assert(f([2,3,3]) = [1,[3],3]),
  assert(f([2,2,3,3,3]) = [2,[3,3],3]),
  assert(f([2,2,2,3,4,5]) = [3,[3,4],5]),
  assert(f([2,2,3,4,4]) = [2,[3,4],4]),
  true)$


/* ******************************************************************
   * Transversal numbers of hypergraphs of arithmetic progresssions *
   ******************************************************************
*/

okltest_alpha_steplist_arithprog_seq(f) := (
  assert(prefix_p(rest(transform_threshold_l(f[3])), alphal_arithprog(3)) = true),
  true)$


/* *********************************
   * Analysing transversal numbers *
   *********************************
*/

okltest_alpha_arithprog(f) := (
  for n : 1 thru 6 do
    assert(f(1,n) = 0),
  for n : 1 thru 6 do
    assert(f(2,n) = 1),
  assert(f(3,1) = 1),
  assert(f(3,2) = 2),
  assert(f(3,3) = 2),
  assert(f(3,4) = 3),
  assert(f(3,5) = 4),
  assert(f(3,6) = 4),
  true)$

okltest_alphal_arithprog(f) := (
  assert(take_l(6,f(3)) = [1,2,2,3,4,4]),
  assert(take_l(51,f(4)) = [
   1,2,3,3,4,5,5,6,7,8,
   8,8,9,9,10,10,11,11,12,12,
   13,13,14,14,15,15,16,17,17,18,
   18,18,19,20,20,20,21,21,21,22,
   22,22,23,23,24,24,24,25,25,26,
   26]), /* A003003 */
  assert(take_l(50,f(5)) = [
   1,2,3,4,4,5,6,7,8,8,
   9,10,11,12,12,13,14,15,16,16,
   16,16,16,17,18,18,19,20,21,21,
   22,22,23,24,24,25,26,27,28,28,
   29,30,31,32,32,32,32,32,33,33]), /* A003004 */
  true)$

okltest_bestgamma_vdWt(f) := block([R],
  if oklib_test_level = 0 then return(true),
  R : f(),
  assert(first(R) = [3,15/7]),
  /* XXX */
  true)$

okltest_condition_kl_vdWt(f) := block([R],
  if oklib_test_level = 0 then return(true),
  R : f(),
  assert(take_elements(2,R) = [[3,false],[4,true]]),
  /* XXX */
  true)$


/* ****************************************
   * Checking the consistency of the data *
   ****************************************
*/

/* Checking whether from the initial sequence of vdW-transversal-numbers
   one obtains back the initial sequence of transversal numbers of
   vdW-hypergraphs.
*/
okltest_consistency_check_1() := (
  for k : 3 thru exactk_tau_arithprog do block(
   [T : tau_arithprog_seq[k], l],
    /* First cutting off final values where no increase occurs anymore: */
    l : last(T),
    T : take_l(find_first_l(lambda([x],is(x=l)),T),T),
    /* Adding the initial value for n=0: */
    T : cons(0,T),
    assert(transform_threshold_l(initial_sequence_vdWt(k)) = T)
  ),
  true)$

/*!
\endhtmlonly
*/
