/* Oliver Kullmann, 11.1.2011 (Swansea) */
/* Copyright 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/data/3k.mac
  \brief Certificates for vdw_2(3,k)

Use by

oklib_load("OKlib/ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/data/3k.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/Numbers.mac")$
oklib_include("OKlib/ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/Certificates.mac")$


/* For k >= 1 the list of lists of certificates for best lower bounds
   on vdw_2(3,k). Each certificate c is to be translated into a full
   certificate by create_certificate2_vdw(c,n), where n+1 is the current lower
   bound w.r.t. k.
 */

certificates_vdw_3k : [
[],[],[],[],[],[],[],[],[],[],
[],[],[],[],[],[],[],[],[],[],
/* k=21: */
[[9,27,29,36,38,48,61,62,82,101,
105,107,110,123,124,130,131,133,144,163,
167,169,170,179,192,213,232,236,238,246,
255,268,269,271,289,308,312,314,315,324,
330,337,338,351,358,374,376,381,383,395]],
/* k=22: */
[[3,22,23,33,46,61,77,80,91,96,
104,110,123,133,135,139,148,152,154,164,
177,183,191,196,207,210,226,239,241,254,
264,265,283,284,294,307,309,322,338,341,
352,357,365,371,384,394,396,400,409,415,
425,438,442,452]],
/* k=23: */
[[5,6,9,27,32,34,50,67,72,78,
99,101,104,113,114,116,121,137,140,145,
162,172,183,185,195,206,214,232,239,241,
261,278,300,301,321,328,331,344,346,347,
352,354,375,389,390,402,412,413,420,425,
439,441,445,454,464,485,491,510,514]],
/* k=24: */
[[22,41,58,63,71,78,80,95,99,100,
109,117,121,124,145,146,150,158,174,182,
186,187,208,211,215,223,233,252,254,261,
283,291,302,310,332,339,341,360,370,378,
382,385,406,407,411,419,435,443,447,448,
469,476,484,493,494,498,513,515,522,530,
535,552,571]],
/* k=25: */
[[17,20,40,49,57,77,86,91,93,99,
117,128,150,151,154,156,167,175,188,193,
197,204,212,224,228,242,247,265,267,271,
278,279,286,304,313,321,335,350,353,358,
372,373,382,390,410,419,424,426,434,450,
461,471,483,484,487,489,500,506,521,526,
530,537,545,557,561,575,580,598,600,604,
611,612,637,646]],
/* k=26: */
[[1,6,16,28,47,73,75,80,104,109,
110,112,117,126,141,146,163,176,186,191,
197,201,220,221,234,237,238,250,257,269,
274,295,308,312,326,334,339,343,345,349,
361,363,380,398,406,408,413,437,442,443,
445,450,459,474,496,509,516,519,524,530,
534,553,554,565,567,570,571,583,602,607,
628,641,645,659,676,678,696,701]],
/* k=27: */
[[25,29,35,54,72,74,77,99,103,111,
114,135,136,149,165,176,188,192,202,209,
223,246,250,251,260,266,287,294,296,313,
321,325,331,333,334,336,358,361,362,377,
387,405,407,410,414,432,436,442,444,447,
468,469,482,498,521,525,535,542,556,579,
583,584,593,599,620,629,646,654,658,664,
666,667,669,694,701,710,731,747,764]],
/* k=28: */
[[28,39,62,64,81,95,112,133,138,155,
157,169,170,173,175,179,186,187,206,210,
216,231,244,266,281,295,297,298,303,327,
332,334,360,379,391,395,397,401,406,414,
432,443,445,453,471,483,488,502,503,506,
508,512,520,539,543,549,564,577,594,599,
614,628,630,631,650,660,665,667,693,712,
724,734,739,741,765,776,786,799,816]],
/* k=29: */
[[16,38,57,75,94,116,119,127,153,155,
168,186,193,201,202,205,223,229,230,232,
243,250,264,266,269,287,304,312,317,338,
340,343,349,361,387,398,424,427,428,445,
449,460,465,486,488,491,498,519,534,535,
538,556,562,563,565,576,583,597,599,602,
612,620,630,637,645,650,671,673,676,694,
720,723,731,757,761,778,785,798,824,831,
859]],
/* k=30: */
[[23,40,63,90,98,100,109,111,134,147,
164,172,179,189,201,208,209,225,226,240,
248,257,259,283,290,319,327,331,336,359,
368,370,373,374,386,388,411,423,438,442,
462,467,484,485,497,499,505,534,541,542,
544,555,558,573,581,592,616,623,652,660,
666,669,670,689,692,701,703,707,719,721,
738,764,766,771,795,812,817,818,832,845,
849,877,888]],
/* k=31: */
[[13,33,50,61,71,75,80,95,108,123,
142,143,154,159,173,182,188,190,201,219,
235,252,261,267,276,278,283,292,312,329,
335,354,359,385,400,417,421,431,438,452,
464,467,479,493,500,510,514,531,546,572,
577,596,602,619,639,648,653,655,664,670,
679,696,712,730,741,743,749,758,772,777,
788,789,808,823,836,851,856,860,870,881,
898,918]],
/* k=32: */
[[16,43,49,61,66,81,86,103,132,155,
158,164,172,192,195,197,214,228,234,238,
246,251,265,275,290,319,327,343,354,356,
357,376,377,380,394,401,423,451,454,456,
465,473,488,502,505,530,541,547,549,567,
578,579,584,613,623,635,636,645,652,660,
672,676,687,689,690,719,734,752,756,769,
783,789,806,820,824,835,858,861,874,882,
911,932,935,941,946,969,978]],
/* k=33: */
[[30,37,52,64,86,101,104,123,125,141,
154,180,197,199,211,212,217,228,234,248,
265,286,289,303,326,332,337,339,359,369,
374,384,400,402,421,433,434,439,443,448,
451,480,487,495,525,530,550,561,562,581,
596,598,604,619,636,665,672,693,702,707,
715,730,735,754,766,776,781,784,789,807,
809,813,828,858,877,878,881,892,895,915,
918,929,957,976,989,994,1015,1025,1050]],
/* k=34: */
[[33,41,43,52,82,106,110,111,122,126,
144,147,157,163,180,196,217,218,221,230,
231,233,265,284,291,304,311,329,333,341,
342,369,376,379,381,406,407,415,418,422,
444,469,480,492,513,524,543,550,551,580,
588,592,607,635,637,638,659,661,666,674,
677,698,699,728,736,755,765,776,785,814,
820,822,823,825,829,857,860,866,899,924,
931,957,968,971,995,998,1000,1010,1024,1035,
1047,1068,1081,1098,1106,1110]],
/* k=35: */
[[35,60,69,92,96,97,108,138,146,151,
166,182,190,212,219,225,239,262,264,277,
280,293,301,313,314,319,323,331,350,356,
360,365,368,375,410,430,439,441,447,465,
476,479,498,502,521,523,553,572,576,609,
610,613,619,647,664,689,693,706,708,726,
735,737,758,772,795,804,811,819,841,854,
874,886,909,911,920,922,928,942,957,967,
983,985,996,1004,1020,1034,1039,1053,1078,1091,
1113,1137,1144,1145,1170]],
/* k=36: */
[[11,45,62,75,82,94,120,122,127,133,
136,149,156,186,188,193,211,238,260,262,
275,279,281,284,285,299,305,322,355,358,
378,379,381,386,390,416,427,460,466,469,
484,492,503,521,538,543,564,581,595,601,
614,618,630,632,667,677,688,719,723,729,
756,766,778,785,788,822,825,836,839,860,
867,871,896,913,933,934,936,941,945,963,
971,988,1010,1037,1039,1045,1062,1089,1093,1098,
1099,1113,1118,1121,1130,1132,1155,1172,1193,1222,
1224]],
/* k=37: */
[[6,40,63,66,79,80,99,114,124,137,
153,178,198,216,224,225,233,235,248,251,
262,285,294,327,331,338,358,373,395,396,
399,412,420,447,470,473,475,479,512,516,
531,543,561,580,581,584,586,590,598,621,
654,677,679,708,709,714,746,753,771,775,
790,812,817,825,840,876,882,899,919,923,
928,930,954,965,997,1010,1012,1024,1028,1041,
1047,1062,1065,1076,1104,1135,1136,1139,1141,1150,
1153,1158,1186,1188,1189,1197,1227,1232,1247,1264,
1283,1298,1320,1321,1333]],
/* k=38: */
[[35,50,58,72,95,97,110,134,147,161,
163,164,193,198,201,226,237,245,275,280,
300,309,312,331,332,354,369,383,391,409,
410,415,442,446,448,459,480,497,516,526,
539,541,563,570,608,615,631,645,652,665,
674,707,712,718,738,742,753,775,776,781,
800,829,867,874,886,890,901,909,923,924,
929,964,970,975,1001,1007,1008,1012,1040,1051,
1057,1081,1086,1109,1118,1131,1148,1162,1163,1168,
1189,1200,1234,1242,1244,1259,1265,1293,1301,1303,
1310,1311,1331,1348]],
/* k=39: */
[[3,8,22,57,59,80,102,122,130,133,
170,191,194,195,204,229,242,248,276,295,
307,315,322,353,359,376,381,408,413,414,
443,446,451,454,461,480,507,525,529,537,
554,566,572,575,598,602,609,614,651,676,
685,702,709,723,725,760,787,824,831,834,
840,857,873,877,887,895,907,910,935,951,
979,981,984,988,998,1016,1018,1019,1056,1079,
1080,1092,1117,1146,1153,1183,1184,1190,1191,1195,
1228,1231,1232,1238,1241,1257,1262,1270,1275,1305,
1314,1337,1342,1375,1388]]
]$

/* The "full certificates" (as partitions) for vdw_2(3,k): */
full_certificate_vdw_3k(k) := block([lb : vanderwaerden3k(k)],
 if listp(lb) then lb : first(lb),
 map(lambda([S], create_certificate2_vdw(S,lb)), certificates_vdw_3k[k]))$

/* The certificates as bit-string: */
full_certificate_string_vdw_3k(k) :=
  map(certificatevdw2string, full_certificate_vdw_3k(k))$

/* Checking whether certificates_vdw_3k[k] are actually vdW-certificates
   for the corresponding lower bound (returning tree resp. false for
   every alleged certificate):
*/
check_certificates_vdw_3k(k) := block([C : certificates_vdw_3k[k]],
  if emptyp(C) then return([]),
  block([n : vanderwaerden3k(k)],
    if listp(n) then n : first(n),
    n : n-1,
    create_list(check_certificate_vdw([3,k],n,create_certificate2_vdw(c,n)),
                c, C)))$

/*!
\endhtmlonly
*/
