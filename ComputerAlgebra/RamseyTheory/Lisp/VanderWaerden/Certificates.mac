/* Oliver Kullmann, 12.11.2010 (Swansea) */
/* Copyright 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/Certificates.mac
  \brief Functions for investigating certificates of vdW-lower-bounds

Use by

oklib_load("OKlib/ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/Certificates.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/VanderWaerden.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$


/* *****************
   * Basic notions *
   *****************
*/

/*
   A "certificate" P for a pair [L,n], where L is a parameter tuple of
   length m and n is a natural number, corresponds to a solution of
   vanderwaerden_nbfclud(L,n), that is, certifies that vanderwaerden(L) > n.

   P is a block partition P of {1,...,n} in m blocks, that is, a list of
   m disjoint subsets of {1,...,n} whose union is the whole set.
*/

/* Tests whether P is a vdW-certificate for parameter tuple L and n vertices.
   It is assumed that L is an extended vdW-parameter-tuple, n a natural
   number, and P a list of sets. A valid certificate can have empty parts, but
   overlaps between the parts and additional elements are not allowed.
*/
certificate_vdw_p(L,n,P) := block([N : setn(n)],
  length(L) = length(P) and lunion(P) = N and
    sum_l(map(length,P)) = n and
    every(lambda([k,b], not has_arithprog(b,k)), L, P))$
/* See "The notion of a certificate" in 
   ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/plans/Certificates.hpp.
*/

/* For a list of subsets of {1,...,n} check whether P is "palindromic",
   that is, whether for every element (subset) p of P it is true that
   v is in p iff n+1-v is in p:
*/
palindromic_subsets_p(n,P) := if n <= 1 then true else
 block([palin : true],
  for p in P while palin do
    for x in p while palin do
      if not elementp(n+1-x,p) then palin : false,
  return(palin))$

/* Check whether P is a palindromic vdW-certificate for L and n: */
certificate_pdvdw_p(L,n,P) := palindromic_subsets_p(n,P) and
 certificate_vdw_p(L,n,P)$


/* *******************
   * Transformations *
   *******************
*/

/* Creates a certificate from a list of elements constituting one part
   of a binary partitioning:
*/
create_certificate2_vdw(S,n) := block([s : setify(S)],
  [s, setdifference(setn(n),s)])$


/* Certificates as partitions versus certificates as lists */

/* The "list-presentation" of a certificate represents the partition
   as a list of pairs [i,p], where 0 <= i < m represents the block,
   and p >= 1 says how many consecutive elements are there;
   The whole list-representation has to be read from left to right.
   Accordingly we have "list-certificates".
*/

/* First the "uncompressed list", here denoted as "sequence":
   Translates a vdw-certificate P (as a block-partitioning of {1,...,n})
   into a sequence of i elements of 0,...,length(P)-1 representing
   the colour:
*/
certificatevdw2seq(P) := block([N : lunion(P)],
 if emptyp(N) then return([]),
 create_list(
  block([j:0], for b in P do if elementp(i,b) then return(j) else j:j+1),
  i,1,lmax(N)))$

/* Now the "compressed list":
   Translates a vdw-certificate P (as a block-partitioning of {1,...,n})
   into a sequence "i^k", where i = 0,...,length(P)-1 is the colour,
   and k is the occurrence numbers, representing "i^k" as [i,k] for the
   list-form, while using "i" for "i^1" in the string-form:
*/
certificatevdw2list(P) := block([seq : certificatevdw2seq(P)],
 if emptyp(seq) then return(seq),
 block([current:first(seq), compressed:[], count:1],
   for x in rest(seq) do
     if x=current then count:count+1
     else (compressed:cons([current,count],compressed), count:1, current:x),
   if count>0 then compressed:cons([current,count],compressed),
   return(reverse(compressed))))$
certificatevdw2string(P) := block([distribute_over:false, x,y], 
  ssubst("1","y",ssubst("0","x", apply(sconcat,
    map(lambda([p], block([a,b], [a,b]:p, if a=0 then a:x elseif a=1 then a:y, 
                          if b=1 then a else a^{b})),
        certificatevdw2list(P))))))$

/* The reverse direction, translates a (compressed) list-representation of a
   partition into a partition:
*/
list2certificatevdw(L) := if emptyp(L) then [] else
 block([m : lmax(map(first,L))+1, i : 1, res],
  res : create_list({},i,1,m),
  for p in L do (
    res[first(p)+1] : union(res[first(p)+1], setmn(i, i+second(p)-1)),
    i : i + second(p)
  ),
  res)$
/* And translating an "uncompressed list-representation" into a partition: */
seq2certificatevdw(L) := if emptyp(L) then [] else
 block([m : lmax(L)+1, i : 1, res],
  res : create_list({},i,1,m),
  for p in L do (
    res[p+1] : adjoin(i,res[p+1]),
    i : i + 1
  ),
  res)$



/* Palindromic certificates */

/* The compression of a palindromic partition of {1,...,n}, restricting to
   the elements <= (n+1)/2:
*/
compress_palindromic_subsets(P) := 
block([n : lmax(map(lmax,P)), H],
  if n = minf then return(P),
  H : setn(ceiling(n/2)),
  map(lambda([p], intersection(p,H)), P))$

/* Unfolding a compressed palindromic partition: */
uncompresss_palindromic_subsets(n,P) := block([m : lambda([v], {v,n+1-v})],
  map(lambda([p], lunion(map(m,listify(p)))), P))$

/* For a "half compressed palindromic certificate" S, that is, a sublist of
   {1,...,m} with m = ceiling(n/2), which specifies the elements of the
   first part of the partition, create a full palindromic certificate:
*/
create_certificate2c_pdvdw(S,n) := block([m : ceiling(n/2), P],
  P : create_certificate2_vdw(S,m),
  uncompresss_palindromic_subsets(n,P))$


/* Output */

/* Output a certificate with two blocks in simple partial-assignment-format,
   i.e., first the elements of the first block, then negated the element
   of the second block, space-separated:
*/
output_certificate2_vdw(C,filename) := with_stdout(filename,
 print_nlb(apply(sconcat, map(dimacs_c_string,[C[1],comp_sl(C[2])]))))$


/* **************************
   * Analysing certificates *
   **************************
*/

/* For a block partition P of {1,...,n} with m blocks compute for each block:
 - the size
 - the count of (maximal) intervals
 - the count of (maxima) non-trivial (more than one element) intervals
 - the number of extremal plateaus for the list representation
 - the maximal number of equal consecutive elements in the list representation.
   Returned is a 5-tuple of tuples of natural numbers (of size m).
*/
analyse_certificate(P) := block(
 [m : length(P), L : certificatevdw2list(P), N, ci, cnti, ce, mi],
  N : map(length, P),
  ci : create_list(
        countpred_l(lambda([p], is(first(p)=i)), L),
        i,0,m-1),
  cnti : create_list(
          countpred_l(lambda([p], is(first(p)=i and second(p)#1)), L),
          i,0,m-1),
  ce : create_list(
        count_extremals_l(map(second, sublist(L, lambda([p], is(first(p)=i))))),
        i,0,m-1),
  mi : create_list(
        lmax(size_constintervals_l(map(second, sublist(L, lambda([p], is(first(p)=i)))))),
        i,0,m-1),
  [N,ci,cnti,ce,mi])$


/*!
\endhtmlonly
*/
