/* Oliver Kullmann, 12.11.2010 (Swansea) */
/* Copyright 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/Certificates.mac
  \brief Basic functions for investigating Van der Waerden hypergraphs

Use by

oklib_load("OKlib/ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/Certificates.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/VanderWaerden.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* *****************
   * Basic notions *
   *****************
*/

/* L is a vdW-parameter-tuple, n a natural number, P a list of subsets of
   {1,...,n}, yielding a partition of this set (with possibly empty subsets).
*/
check_certificate_vdw(L,n,P) := block([N : setn(n)],
  is(length(L) = length(P)) and is(apply(union,P) = N) and
    sum_l(map(length,P)) = n and
    every(lambda([k,b], not has_arithprog(b,k)), L, P))$
/* See "The notion of a certificate" in 
   ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/plans/Certificates.hpp.
*/


/* *******************
   * Transformations *
   *******************
*/

/* Creates a certificate from a list of elements constituting one part
   of a binary partitioning:
*/
create_certificate2_vdw(S,n) := block([s : setify(S)],
  [s, setdifference(setn(n),s)])$

/* Translates a vdw-certificate P (as a block-partitioning of {1,...,n})
   into a sequence "i^k", where i = 0,...,length(P)-1 is the colour,
   and k is the occurrence numbers, representing "i^k" as [i,k] for the
   list-form, while using "i" for "i^1" in the string-form:
*/
certificatevdw2list(P) := block([N : lunion(P), n, seq],
 if emptyp(N) then return([]),
 n : lmax(N),
 seq : create_list(
        block([j:0], for b in P do if elementp(i,b) then return(j) else j:j+1),
        i,1,n),
 block([current:first(seq), compressed:[], count:1],
   for x in rest(seq) do
     if x=current then count:count+1
     else (compressed:cons([current,count],compressed), count:1, current:x),
   if count>0 then compressed:cons([current,count],compressed),
   return(reverse(compressed))))$
certificatevdw2string(P) := block([distribute_over:false, x,y], 
  ssubst("1","y",ssubst("0","x", apply(sconcat,
    map(lambda([p], block([a,b], [a,b]:p, if a=0 then a:x elseif a=1 then a:y, 
                          if b=1 then a else a^{b})),
        certificatevdw2list(P))))))$

/*!
\endhtmlonly
*/
