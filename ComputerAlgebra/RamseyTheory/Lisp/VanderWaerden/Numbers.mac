/* Oliver Kullmann, 3.4.2009 (Swansea) */
/* Copyright 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/Numbers.mac
  \brief Handling of van der Waerden numbers

Use by

oklib_load("OKlib/ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/Numbers.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/PrimeNumbers.mac")$


/* ***************************
   * Van der Waerden numbers *
   ***************************
*/

/* The main function, which handles all parameter-values. */
/* Prerequisites: L ascendingly sorted list of natural numbers >= 1 */
vanderwaerden(L) := if emptyp(L) then 1
 elseif first(L) = 1 then vanderwaerden(rest(L))
 elseif vanderwaerdend_a(L)#[] then apply(vanderwaerdend,vanderwaerdend_a(L))
 elseif vanderwaerdent_a(L)#[] then apply(vanderwaerdent,vanderwaerdent_a(L))
 elseif vanderwaerden3k_a(L)#[] then apply(vanderwaerden3k,vanderwaerden3k_a(L))
 elseif vanderwaerden4k_a(L)#[] then apply(vanderwaerden4k,vanderwaerden4k_a(L))
 elseif vanderwaerden5k_a(L)#[] then apply(vanderwaerden5k,vanderwaerden5k_a(L))
 elseif vanderwaerdents_a(L)#[] then apply(vanderwaerdents,vanderwaerdents_a(L))
 elseif vanderwaerden33k_a(L)#[] then apply(vanderwaerden33k,vanderwaerden33k_a(L))
 elseif vanderwaerden34k_a(L)#[] then apply(vanderwaerden34k,vanderwaerden34k_a(L))
 else unknown$
/* Remark: If L is not sorted, use vanderwaerden(sort(L)). */

/* Checking whether L is a valid input: */
vanderwaerden_p(L) := listp(L) and 
 every_s(integerp,L) and every_s(lambda([x],is(x >= 1)),L) and
 ascending_p(L)$


/* ****************
   * Binary cases *
   ****************
*/

vanderwaerden3k(k) := 
 if k <= 16 then
   [3,6,9,18,22,32,46,58,77,97,114,135,160,186,218,238][k]
 else unknown$
vanderwaerden3k_a(L) := if length(L)#2 then [] else
 block([S : setify(L)],
  if elementp(3,S) then
    if length(S)=1 then [3] else [first(listify(disjoin(3,S)))]
  else [])$

vanderwaerden4k(k) := 
 if k <= 8 then
   [4,7,18,35,55,73,109,146][k]
 else unknown$
vanderwaerden4k_a(L) := if length(L)#2 then [] else
 block([S : setify(L)],
  if elementp(4,S) then
    if length(S)=1 then [4] else [first(listify(disjoin(4,S)))]
  else [])$

vanderwaerden5k(k) := 
 if k <= 6 then
   [5,10,22,55,178,206][k]
 else unknown$
vanderwaerden5k_a(L) := if length(L)#2 then [] else
 block([S : setify(L)],
  if elementp(5,S) then
    if length(S)=1 then [5] else [first(listify(disjoin(5,S)))]
  else [])$


/* *****************
   * Ternary cases *
   *****************
*/

vanderwaerden33k(k) :=
 if k <= 5 then
   [9,14,27,51,80][k]
 else unknown$
vanderwaerden33k_a(L) := if length(L)#3 then [] else
 if L=[1,3,3] then [1]
 elseif L=[2,3,3] then [2]
 elseif rest(L,-1)#[3,3] then []
 else [last(L)]$

vanderwaerden34k(k) :=
 if k <= 4 then
   [18,21,51,89][k]
 else unknown$
vanderwaerden34k_a(L) := if length(L)#3 then [] else
 if L=[1,3,4] then [1]
 elseif L=[2,3,4] then [2]
 elseif L=[3,3,4] then [3]
 elseif rest(L,-1)#[3,4] then []
 else [last(L)]$


/* *********************
   * The diagonal case *
   *********************
*/

/* The "diagonal case", i.e., m parts, arithmetic progressions of length k: */
vanderwaerdend(m,k) := if m=0 then 1 
 elseif m=1 then k
 elseif k=1 then 1
 elseif k=2 then m+1
 elseif m=2 then vanderwaerdend2(k)
 elseif m=3 then vanderwaerdend3(k)
 elseif k=3 then vanderwaerdendap3(m)
 elseif k=4 then vanderwaerdendap4(m)
 else unknown$
/* vanderwaerdend(m,k) = vanderwaerden(create_list(k,i,1,m)) */

/* The corresponding argument check for a vdW parameter-list L, 
   checking whether a parameter tuple applies, returning [m,k] 
   in the positive case and [] otherwise: */
vanderwaerdend_a(L) := if emptyp(L) then [0,unknown] 
 elseif not lconstant_p(L) then [] else [length(L),first(L)]$
/* Remark: So a vdW-tuple L falls into the range of vanderwaerdend iff
   vanderwaerdend_a(L) # [], and in the positive case we have
   vanderwaerden(L) = apply(vanderwaerdend,vanderwaerdend_a(L)).
   This principle is also applied for all other such special cases.
*/

/* The diagonal cases with two parts: */
vanderwaerdend2(k) :=
 if k <= 6 then [1,3,9,35,178,1132][k]
 else unknown$
/* Remark: These numbers have been verified/computed by SAT solving
   methods.
*/
vanderwaerdend2_a(L) := if length(L)=2 and lconstant_p(L) then first(L)
 else []$

/* The diagonal cases with three parts: */
vanderwaerdend3(k) :=
 if k <= 3 then [1,4,27][k]
 else unknown$
/* Remark: These numbers have been verified/computed by SAT solving
   methods.
*/
vanderwaerdend3_a(L) := if length(L)=3 and lconstant_p(L) then first(L)
 else []$

/* The diagonal cases with ap's of size 3: */
vanderwaerdendap3(m) := 
 if m=0 then 1
 elseif m <= 4 then [3,9,27,76][m]
 else unknown$
vanderwaerdendap3_a(L) := if every_s(lambda([x],is(x=3)),L) then length(L) 
 else []$

/* The diagonal cases with ap's of size 4: */
vanderwaerdendap4(m) := 
 if m=0 then 1
 elseif m <= 2 then [35][m]
 else unknown$
vanderwaerdendap4_a(L) := if every_s(lambda([x],is(x=4)),L) then length(L) 
 else []$


/* ************************
   * The transversal case *
   ************************
*/

/* The "transversal case", i.e., m parts with arithmetic progressions of 
   length 2, one part with length k.
   Prerequisites: m >= 0, k >= 1: */
vanderwaerdent(m,k) := if m=0 then k
 elseif k=1 then m+1
 elseif m=1 then if evenp(k) then 2*k-1 else 2*k
 elseif k=2 then m+2
 else block([res : vanderwaerdenttau(m,k)],
  if res#unknown then return(res)
  else if k >= m+2 then return(vanderwaerdent_lrc(m,k))
  else return(unknown))$
/* vanderwaerdent(m,k) = vanderwaerden(endcons(k,create_list(2,i,1,m))) */
/* The corresponding applicability check (and conversion into an argument
   list): */
vanderwaerdent_a(L) := block([l : length(L)],
 if l=0 then [] 
 elseif l=1 then [0,first(L)]
 elseif first(L)=1 then
   if second(L)#2 or last(L)#2 then [] else [l-1,1]
 elseif first(L)#2 or L[l-1]#2 then []
 else [l-1,last(L)])$
/* Remark: Note that for vanderwaerdent(m,k) we have altogether m+1 parts. */

/* Using the list of transversal numbers: */
vanderwaerdenttau(m,k) := block([n : 1, t],
  t : tau_arithprog(k,n),
  while not listp(t) and t <= m do (
    n : n+1, t : tau_arithprog(k,n)
  ),
  if listp(t) then return(unknown) else return(n))$


/* *******************************************************
   * The formula from [Landman, Robertson, Culver, 2005] *
   *******************************************************
*/

/* The minimal natural number j>=0 which needs to be subtracted from k
   to yield a number coprime to the product of the primes at most r.
   k,r natural numbers, r, k >= 1; the meaning of r: r = m+1 (where
   m is the number of 2's as above).
*/
lrc_j(r,k) := block([j : 0, pr : product_primes(r)],
  while gcd(k-j, pr) # 1 do j : j+1,
  return(j))$
/* The tests which are expressed in the paper by the
   function "l_{k,r}"; r, k >= 1 natural numbers.
*/
lrc_l0p(r,k) := is(gcd(k, product_primes(r)) = r)$
lrc_l1p(r,k) := is(gcd(k-1, product_primes(r)) = r)$
/* The minimum with j: */
lrc_lmin(r,k,j) := block([l : 0, pr : product_primes(r)],
  while l < j and gcd(k-l, pr) # r do l : l+1,
  return(l))$

/* The formula according to the paper. */
/* m >= 1, k >= m+2 */
vanderwaerdent_lrc(m,k) := block([r : m+1, j],
 j : lrc_j(r,k),
 if j=0 then return(r*k),
 if j=1 then return(r*k-r+1),
 if primep(r) then
   if lrc_l0p(r,k) then return(r*k-r+1) else
   block([m : lrc_lmin(r,k,j), res],
    res : r*k-m*(r-2),
    if lrc_l1p(r,k) 
      or (m=2 and k>=2*r-3) 
      or (m>=3 and k >= count_primes(r)^3*(r-2))
    then return(res)
    else return([res,inf]))
 else
   block([res : r*k-j*(r-2)],
    if (j=2 and k>=2*r-3) 
      or (j>=3 and k>= count_primes(r)^3*(r-2))
    then return(res)
    else return([res,inf]))
 )$


/* ********************************
   * Generalised transversal case *
   ********************************
*/

/* The generalised transversal case with suffix S, that is
   (m,S,k) -> L = append(create_list(2,i,1,m),S,[k]).
   Non-degeneracy conditions:
    S non-empty vdW-tuple, m >= 1, min(S) >= 3, max(S) <= k.
*/
vanderwaerdents(m,S,k) :=
 if S=[3] and k=3 then
   if m <= 7 then [14,17,20,21,24,25,28][m] else unknown
 elseif S=[3] and k=4 then
   if m <= 5 then [21,25,29,33,36][m] else unknown
 elseif S=[3] and k=5 then
   if m <= 4 then [32,43,44,50][m] else unknown
 elseif S=[3] and k=6 then
   if m <= 4 then [40,48,56,60][m] else unknown
 elseif S=[3] and k=7 then
   if m <= 3 then [55,65,72][m] else unknown
 elseif S=[3] and k=8 then
   if m <= 3 then [72,83,88][m] else unknown
 elseif S=[3] and k=9 then
   if m <= 2 then [90,99][m] else unknown
 elseif S=[3] and k=10 then
   if m <= 2 then [108,119][m] else unknown
 elseif S=[3] and k=11 then
   if m <= 1 then [129][m] else unknown
 elseif S=[3] and k=12 then
   if m <= 1 then [150][m] else unknown
 elseif S=[3] and k=13 then
   if m <= 1 then [171][m] else unknown
  elseif S=[4] and k=4 then
   if m <= 4 then [40,53,54,56][m] else unknown
  elseif S=[4] and k=5 then
   if m <= 3 then [71,75,79][m] else unknown
  elseif S=[4] and k=6 then
   if m <= 2 then [83,93][m] else unknown
  elseif S=[4] and k=7 then
   if m <= 1 then [119][m] else unknown
  elseif S=[5] and k=5 then
   if m <= 1 then [180][m] else unknown
  elseif S=[3,3] and k=3 then
   if m <= 3 then [40,41,42][m] else unknown
  elseif S=[3,3] and k=4 then
   if m <= 2 then [60,63][m] else unknown
  elseif S=[3,3] and k=5 then
   if m <= 1 then [86][m] else unknown
 else unknown$
vanderwaerdents_a(L) := 
 if length(L) <= 2 or first(L)#2 or last(L)=2 then [] else
 block([m : 1],
  while L[m]=2 do m:m+1,
  m : m-1,
  S : rest(L,m), if length(S)=1 then return([]),
  S : rest(S,-1),
  return([m,S,last(L)]))$


/* ******************************************************************
   * Transversal numbers of hypergraphs of arithmetic progresssions *
   ******************************************************************
*/

/* For 3 <= k <= exactk_tau_arithprog we provide initial sequences: */
define_variable(
  exactk_tau_arithprog,
  12,
  fixnum)$
/* Note that these sequences start with n=1. */

/* The following data has been computed by
   "VdWTransversalsInc 3 1 0 OutputFile" (i.e.,
   using SAT solvers):
*/
tau_arithprog_seq[3] : [
0,0,1,1,1,2,3,4,4,5,
5,6,6,6,7,8,9,10,11,11,
12,13,14,14,15,15,16,17,18,18,
19,19,20,21,22,22,23,24,25,25,
25,26,27,28,29,30,31,32,33,34,
34,35,36,36,37,38,39,39,40,41,
42,43,43,44,45,46,47,48,49,50,
50,51,52,52,53,54,55,56,57,58,
59,59,60,60,61,62,63,64,65,66,
67,67,68,69,69,70,71,72,73,73,
74,75
]$
/* The following data has been computed by
   "VdWTransversalsInc 4 1 0 OutputFile":
*/
tau_arithprog_seq[4] : [
0,0,0,1,1,1,2,2,2,2,
3,4,4,5,5,6,6,7,7,8,
8,9,9,10,10,11,11,11,12,12,
13,14,14,14,15,16,16,17,18,18,
19,20,20,21,21,22,23,23,24,24,
25,26,26,26,27,28,29,29,30,30,
31,32,33,33,34,34,35,35,36,36,
37,38,39,39,40,41,41,42,42,43
]$
/* The following data has been computed by
   "VdWTransversalsInc 5 1 0 OutputFile":
*/
tau_arithprog_seq[5] : [
0,0,0,0,1,1,1,1,1,2,
2,2,2,2,3,3,3,3,3,4,
5,6,7,7,7,8,8,8,8,9,
9,10,10,10,11,11,11,11,11,12,
12,12,12,12,13,14,15,16,16,17,
17,17,18,18,19,19,19,19,19,20,
20,20,20,20,21,21,21,21,21,22,
23,24,25,26,27,27,27,27,27,28,
28,28,28,28,29,29,29,29,29,30,
30,30,30,30,31,32,33,34,35,36,
37,38,39
]$
/* The following data has been computed by
   "VdWTransversalsInc 6 1 0 OutputFile":
*/
tau_arithprog_seq[6] : [
0,0,0,0,0,1,1,1,1,1,
2,2,2,2,2,3,3,3,3,3,
4,4,4,4,4,4,5,6,6,7,
8,8,8,9,9,9,9,10,10,10,
10,11,12,12,12,12,13,13,13,13,
13,14,15,15,16,16,17,17,17,18,
18,18,19,19,19,19,20,20,21,21,
21,22,22,22,22,22,23,24,25,25,
26,26,26,27,27,27
]$
/* The following data has been computed by
   "VdWTransversalsInc 7 1 0 OutputFile":
*/
tau_arithprog_seq[7] : [
0,0,0,0,0,0,1,1,1,1,
1,1,1,2,2,2,2,2,2,2,
3,3,3,3,3,3,3,4,4,4,
4,4,4,4,5,5,5,5,5,5,
5,6,7,8,9,9,10,10,11,11,
11,11,11,12,12,12,12,13,13,13,
13,14,14,14,14,15,15,15,15,16,
16,16,16,16,16,16,17,17,17,17,
17,17,17,18,18,18,18,18,18,18,
19,20,21,22,22,23,24,24,25,25,
25,25,25,25,26,26,26,27,27,27,
27
]$
/* The following data has been computed by
   "VdWTransversalsInc 8 1 0 OutputFile":
*/
tau_arithprog_seq[8] : [
0,0,0,0,0,0,0,1,1,1,
1,1,1,1,2,2,2,2,2,2,
2,3,3,3,3,3,3,3,4,4,
4,4,4,4,4,5,5,5,5,5,
5,5,6,6,6,6,6,6,6,6,
7,8,9,9,10,10,11,11,11,12,
12,12,12,13,13,13,13,13,13,14,
14,14,15,15,15,15,15,15,16,16,
17,17,17,17,17,18,18,18,18,18,
18,18,19,19,19,19,19,19,19,20,
21,22,23,23
]$
/* The following data has been computed by
   "VdWTransversalsInc 9 1 0 OutputFile":
*/
tau_arithprog_seq[9] : [
0,0,0,0,0,0,0,0,1,1,
1,1,1,1,1,1,1,2,2,2,
2,2,2,2,3,3,3,3,3,3,
3,4,4,4,4,4,4,4,5,5,
5,5,5,5,5,6,6,6,6,6,
6,6,7,7,7,7,7,8,9,9,
9,10,10,10,10,11,11,11,11,11,
11,12,12,13,13,13,14,14,14,14,
15,15,15,15,15,15,16,16,16,16,
17,17,17,17,17,17,18,18,18,18,
18,19,19,19,19,20,20,20,20,21,
21,21,21,21,21
]$
/* The following data has been computed by
   "VdWTransversalsInc 10 1 0 OutputFile":
*/
tau_arithprog_seq[10] : [
0,0,0,0,0,0,0,0,0,1,
1,1,1,1,1,1,1,1,2,2,
2,2,2,2,2,2,2,2,3,3,
3,3,3,4,4,4,4,4,4,4,
5,5,5,5,5,5,5,6,6,6,
6,6,6,6,7,7,7,7,7,7,
7,8,8,8,9,9,9,9,10,10,
10,10,10,11,11,11,11,11,12,12,
12,12,12,12,13,13,13,13,14,14,
14,15,15,15,15,16,16,16,16,16,
17,17,17,17,17,18,18,18,18,19,
19,19,19,19,19
]$
/* The following data has been computed by
   "VdWTransversalsInc 11 1 0 OutputFile":
*/
tau_arithprog_seq[11] : [
0,0,0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,1,1,
1,2,2,2,2,2,2,2,2,2,
2,2,3,3,3,3,3,3,3,3,
3,3,3,4,4,4,4,4,4,4,
4,4,4,4,5,5,5,5,5,5,
5,5,5,5,5,6,6,6,6,6,
6,6,6,6,6,6,7,7,7,7,
7,7,7,7,7,7,7,8,8,8,
8,8,8,8,8,8,8,8,9,9,
9,9,9,9,9,9,9,9,9,10,
11,12,13,14,14,15,15,16,17,17,
18,18,18,18,18,18,18,18,19,19,
19
]$
/* The following data has been computed by
   "VdWTransversalsInc 12 1 0 OutputFile":
*/
tau_arithprog_seq[12] : [
0,0,0,0,0,0,0,0,0,0,
0,1,1,1,1,1,1,1,1,1,
1,1,2,2,2,2,2,2,2,2,
2,2,2,3,3,3,3,3,3,3,
3,3,3,3,4,4,4,4,4,4,
4,4,4,4,4,5,5,5,5,5,
5,5,5,5,5,5,6,6,6,6,
6,6,6,6,6,6,6,7,7,7,
7,7,7,7,7,7,7,7
]$

/* For n <= exactv_tau_arithprog(k) we have stored exact values
   in tau_arithprog_seq[k]: */
exactv_tau_arithprog(k) := 
 if k<=2 or k > exactk_tau_arithprog then 0
 else length(tau_arithprog_seq[k])$


/* Exact formulas (returns unknown if no exact formula applies): */
exactf_tau_arithprog(k,n) :=
 if n < k then 0
 elseif k=1 then n
 elseif k=2 then n-1
 elseif n <= 2*k-1 and evenp(k) then
   if n = 2*k-1 then 2 else 1
 elseif n <= 2*k and oddp(k) then
   if n = 2*k then 2 else 1
 else unknown$

/* The nearest n-value downward and its transversal-value where we have
   exact values stored.
   Prerequisite: The exact formulas don't apply.
*/
nearest_tau_arithprog(k,n) := block([maxn : exactv_tau_arithprog(k)],
  if n <= maxn then return([n, tau_arithprog_seq[k][n]])
  elseif maxn > 0 then return([maxn, tau_arithprog_seq[k][maxn]])
  elseif evenp(k) then return([2*k-1,2])
  else return([2*k,2]))$

/* The best known values: */
/* Prerequisites: k, n natural numbers >= 1 */
tau_arithprog(k,n) := block([e : exactf_tau_arithprog(k,n)],
 if e#unknown then return(e),
 block([nn,v],
   [nn,v] : nearest_tau_arithprog(k,n),
   if nn=n then return(v)
   else return([v, (n - nn) + v])))$


/* *********************************
   * Analysing transversal numbers *
   *********************************
*/

alpha_arithprog(k,n) := block([t : tau_arithprog(k,n)],
 if listp(t) then return(reverse(n-t)) else return(n-t))$
rtau_arithprog(k,n) := tau_arithprog(k,n) / n$
ralpha_arithprog(k,n) := alpha_arithprog(k,n) / n$
/* The list of all known values (from n=1 not allowing gaps) for k >= 3: */
ralphal_arithprog(k) := if k > exactk_tau_arithprog then []
 else block([L : tau_arithprog_seq[k], N],
  N : create_list(i,i,1,length(L)),
  return((N - L) / N))$

/* Analysing the list of ratios of alpha-values */

/* Plotting the alpha-ratios (k >= 3): */
plot_ralpha_arithprog(k) := block([L : ralphal_arithprog(k)],
  if not emptyp(L) then
    plot2d([discrete, create_list(i,i,1,length(L)), L]))$

/* "Approximating" the index n such that for all n' >= n we have
   alpha(arithprog_hg(k,n))/n < 1/q by considering ralphal_arithprog.
   Prerequisites: k, q natural numbers, k, q >= 1.
   "cr" stands for "convergence ratio".
*/
approx_cralpha_arithprog(k,q) := 
 if k=1 then 1
 elseif k=2 then q+1 else block([L, i],
  L : ralphal_arithprog(k),
  i : find_last_l(lambda([x],is(x >= 1/q)), L),
  if i=minf then return(inf) else (
    i : i+1,
    if i>length(L) then return(inf) else return(i)))$

/* The "approximated" upper bound on vanderwaerdend(m,k) given by
   approx_cralpha_arithprog (if this value is exact, then the upper
   bounds holds true).
   Prerequisites: m, k natural numbers >= 1.
*/
upper_vanderwaerdend_approxcralpha(m,k) :=
 approx_cralpha_arithprog(k,m)$


/* Transformations between the various forms of (gapless, initial)
   sequences of numbers
*/

/* The initial sequence of transversal vdW-numbers (as far as it is
   stored).
   If no sequence is stored, then m <= k-1 is considered.
   k natural number >= 0.
*/
initial_sequence_vdWt(k) :=
  create_list(vanderwaerdent(m,k),m,0,last(tau_arithprog_seq[k])-1);

/* 
  From a list T of transversal numbers of vdW-hypergraphs
  to transversal vdw-numbers.
  If T contains non-integer values, then the list is cutoff at
  the first such occurrence.
  The list of transversal vdw-numbers starts with n=0.

  Given the sequence T for fixed k (where m=0, ...), one obtains
  tau_arithprog(k,n) for n=0, ... by running through m=0,1,..., and observing
  when first the value x=T[m+1] is strictly greater than n --- for this m we
  have tau_arithprog(k,n) = m.

  So transform_threshold_l(T) is the list [t_0,t_1, ..., t_p]
  of non-decreasing natural numbers t_i >= 0 where t_i is the smallest
  0 <= m <= length(T) such that T'[m+1] > i, where T' is obtained from
  T by adding an element to the end which is bigger by one than the last
  element of T (this yields one more correct value in the result list, since
  the numbers of T are strictly increasing).
  So p = -1 if T is empty, while otherwise p = last(T).
  And we have t_i <= t_{i+1} <= t_i + 1.
  Prerequisite: L is a sequence of strictly increasing natural numbers >= 0,
  with a possible suffix of non-integers.
*/
transform_threshold_l(T) :=  block(
 block([noti : find_first_l(lambda([x], not integerp(x)), T)],
  if noti#inf then T : take_l(noti-1,T)),
 if emptyp(T) then return([]),
 block([n : 0, m : 0, R : []],
  for x in endcons(last(T)+1,T) do (
    if x > n then (
      R : append(R,create_list(m,i,1,x-n)), 
      n : x
    ),
    m : m+1
  ),
  return(R)))$

/*!
\endhtmlonly
*/
