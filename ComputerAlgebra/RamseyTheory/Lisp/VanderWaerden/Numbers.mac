/* Oliver Kullmann, 3.4.2009 (Swansea) */
/* Copyright 2009, 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/Numbers.mac
  \brief Handling of van der Waerden numbers

Use by

oklib_load("OKlib/ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/Numbers.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/PrimeNumbers.mac")$
oklib_include("OKlib/ComputerAlgebra/RamseyTheory/Lisp/Sequences.mac")$


/* ***************************
   * Van der Waerden numbers *
   ***************************
*/

/* The main function, which handles all parameter-values (gathering all
   knowledge from all our sources). */
/* Prerequisites: L ascendingly sorted list of natural numbers >= 1 */
vanderwaerden(L) := if emptyp(L) then 1
 elseif first(L) = 1 then vanderwaerden(rest(L))
 elseif vanderwaerdend_a(L)#[] then apply(vanderwaerdend,vanderwaerdend_a(L))
 elseif vanderwaerdent_a(L)#[] then apply(vanderwaerdent,vanderwaerdent_a(L))
 elseif vanderwaerden3k_a(L)#[] then apply(vanderwaerden3k,vanderwaerden3k_a(L))
 elseif vanderwaerden4k_a(L)#[] then apply(vanderwaerden4k,vanderwaerden4k_a(L))
 elseif vanderwaerden5k_a(L)#[] then apply(vanderwaerden5k,vanderwaerden5k_a(L))
 elseif vanderwaerden6k_a(L)#[] then apply(vanderwaerden6k,vanderwaerden6k_a(L))
 elseif vanderwaerdents_a(L)#[] then apply(vanderwaerdents,vanderwaerdents_a(L))
 elseif vanderwaerden33k_a(L)#[] then apply(vanderwaerden33k,vanderwaerden33k_a(L))
 elseif vanderwaerden34k_a(L)#[] then apply(vanderwaerden34k,vanderwaerden34k_a(L))
 elseif vanderwaerden44k_a(L)#[] then apply(vanderwaerden44k,vanderwaerden44k_a(L))
/* For the above special solutions the palindromic solutions must have been taken into account. */
 else block([palsol : pdvanderwaerden(L)],
 if palsol#unknown then (
   palsol : second(palsol),
   if listp(palsol) then palsol : first(palsol),
   palsol : [palsol, inf-1]
 ),
 return(palsol))$

/* Remark: If L is not sorted, use vanderwaerden(sort(L)). */

/* Checking whether L is a valid input: */
vanderwaerden_p(L) := listp(L) and 
 every_s(integerp,L) and every_s(lambda([x],is(x >= 1)),L) and
 ascending_p(L)$
/* Extended parameter tuples also allow 0: */
extvanderwaerden_p(L) := listp(L) and 
 every_s(integerp,L) and every_s(lambda([x],is(x >= 0)),L) and
 ascending_p(L)$


/* ****************
   * Binary cases *
   ****************
*/

vanderwaerden3k(k) := 
 if k <= 39 then [
  3,6,9,18,22,32,46,58,77,97,
  114,135,160,186,218,238,279,312,349,[389,inf-1],
  [416,inf-1],[464,inf-1],[516,inf-1],[593,inf-1],[656,inf-1],[727,inf-1],[770,inf-1],[827,inf-1],[868,inf-1],[902+1,inf-1],
  [930+1,inf-1],[1006+1,inf-1],[1063+1,inf-1],[1143+1,inf-1],[1204+1,inf-1],[1257+1,inf-1],[1338+1,inf-1],[1378+1,inf-1],[1418+1,inf-1]
 ][k]
 else unknown$
vanderwaerden3k_a(L) := if length(L)#2 then [] else
 block([S : setify(L)],
  if elementp(3,S) then
    if length(S)=1 then [3] else [first(listify(disjoin(3,S)))]
  else [])$
/* For the precise values see [Ahmed 2009, 2010], and for the lower bounds see
   Investigations/RamseyTheory/VanderWaerdenProblems/plans/3-k/.
*/

vanderwaerden4k(k) := 
 if k <= 17 then [
  4,7,18,35,55,73,109,146,[309,inf-1],[328+1,inf-1],
  [358+1,inf-1],[401+1,inf-1],[569+1,inf-1],[681+1,inf-1],[726+1,inf-1],[812+1,inf-1],[1075+1,inf-1]
 ][k]
 else unknown$
vanderwaerden4k_a(L) := if length(L)#2 then [] else
 block([S : setify(L)],
  if elementp(4,S) then
    if length(S)=1 then [4] else [first(listify(disjoin(4,S)))]
  else [])$
/* For the precise values see [Ahmed 2009], and for the lower bounds see
   Investigations/RamseyTheory/VanderWaerdenProblems/plans/4-k/.
*/

vanderwaerden5k(k) := 
 if k <= 13 then [
  5,10,22,55,178,206,[260,inf-1],[331,inf-1],[472+1,inf-1],[611+1,inf-1],
  [756+1,inf-1],[949+1,inf-1],[1204+1,inf-1]
 ][k]
 else unknown$
vanderwaerden5k_a(L) := if length(L)#2 then [] else
 block([S : setify(L)],
  if elementp(5,S) then
    if length(S)=1 then [5] else [first(listify(disjoin(5,S)))]
  else [])$

vanderwaerden6k(k) :=
 if k <= 9 then [
 6,11,32,73,206,1132,[1155+1,inf-1],[1167+1,inf-1],[1381+1,inf-1]
 ][k]
 else unknown$
vanderwaerden6k_a(L) := if length(L)#2 then [] else
 block([S : setify(L)],
  if elementp(6,S) then
    if length(S)=1 then [6] else [first(listify(disjoin(6,S)))]
  else [])$

vanderwaerden7k_a(L) := if length(L)#2 then [] else
 block([S : setify(L)],
  if elementp(7,S) then
    if length(S)=1 then [7] else [first(listify(disjoin(7,S)))]
  else [])$


/* *****************
   * Ternary cases *
   *****************
*/

vanderwaerden33k(k) :=
 if k <= 5 then [
  9,14,27,51,80
 ][k]
 else unknown$
vanderwaerden33k_a(L) := if length(L)#3 then [] else
 if L=[1,3,3] then [1]
 elseif L=[2,3,3] then [2]
 elseif rest(L,-1)#[3,3] then []
 else [last(L)]$

vanderwaerden34k(k) :=
 if k <= 4 then [
  18,21,51,89
 ][k]
 else unknown$
vanderwaerden34k_a(L) := if length(L)#3 then [] else
 if L=[1,3,4] then [1]
 elseif L=[2,3,4] then [2]
 elseif L=[3,3,4] then [3]
 elseif rest(L,-1)#[3,4] then []
 else [last(L)]$

vanderwaerden44k(k) :=
 if k <= 4 then [
  35,40,89,[292+1,inf-1]
 ][k]
 else unknown$
vanderwaerden44k_a(L) := if length(L)#3 then [] else
 if L=[1,4,4] then [1]
 elseif L=[2,4,4] then [2]
 elseif L=[3,4,4] then [3]
 elseif rest(L,-1)#[4,4] then []
 else [last(L)]$


/* *********************
   * The diagonal case *
   *********************
*/

/* The "diagonal case", i.e., m parts, arithmetic progressions of length k
   (as usual, k >= 1):
*/
vanderwaerdend(m,k) := if m=0 then 1 
 elseif m=1 then k
 elseif k=1 then 1
 elseif k=2 then m+1
 elseif m=2 then vanderwaerdend2(k)
 elseif m=3 then vanderwaerdend3(k)
 elseif m=4 then vanderwaerdend4(k)
 elseif m=5 then vanderwaerdend5(k)
 elseif m=6 then vanderwaerdend6(k)
 else [ceiling(m^(k-1)/(4*k)),inf-1]$
/* vanderwaerdend(m,k) = vanderwaerden(create_list(k,i,1,m)) */
/* Remarks: The general lower bound is from [Rabung, 1979]. */

/* The corresponding argument check for a vdW parameter-list L, 
   checking whether a parameter tuple applies, returning [m,k] 
   in the positive case and [] otherwise: */
vanderwaerdend_a(L) := if emptyp(L) then [0,unknown] 
 elseif not lconstant_p(L) then [] else [length(L),first(L)]$
/* Remark: So a vdW-tuple L falls into the range of vanderwaerdend iff
   vanderwaerdend_a(L) # [], and in the positive case we have
   vanderwaerden(L) = apply(vanderwaerdend,vanderwaerdend_a(L)).
   This principle is also applied for all other such special cases.
*/

/* The diagonal cases with two parts: */
vanderwaerdend2(k) :=
 if k <= 12 then [
  1,3,9,35,178,1132,[3703+1,inf-1],[11495+1,inf-1],[41265+1,inf-1],[103474+1,inf-1],
  [178631+1,inf-1],[638144+1,inf-1]
 ][k]
 else [max(638144+1,(k-1)*2^(k-1)+1),inf-1]$
/* Remarks:
 - The precise numbers have been verified/computed by SAT solving
   methods; especially k=6 is from [Kouril, Paul, 2008].
 - The lower bounds for k=7,10,11,12 are computed by the method of
   [Rabung, 1979] (where the number for k=12 has been improved due to
   recomputation with greater computational power, while the number for k=11
   is false in the paper (what can be computed by the method is less)).
   See the function rabung_search in the Maxima-system.
 - The other bounds are in [Herwig, Heule, Lambalgen, Maaren, 2005].
 - The general lower bound is in [Berlekamp, 1968].
*/
vanderwaerdend2_a(L) := if length(L)=2 and lconstant_p(L) then first(L)
 else []$

/* The diagonal cases with three parts: */
vanderwaerdend3(k) :=
 if k <= 9 then [
  1,4,27,[292+1,inf-1],[2173+1,inf-1],[11191+1,inf-1],[48811+1,inf-1],[238400+1,inf-1],[932745+1,inf-1]
 ][k]
 else [max(932745+1,ceiling(3^(k-1)/(4*k))),inf-1]$
/* Remark: The precise numbers have been verified/computed by SAT solving
   methods. The bounds for k=5,6 are in [Herwig, Heule, Lambalgen, Maaren,
   2007], for k=7 in [Heule, Walsh, 2010], and for k=4,8,9 using the method of
   [Rabung, 1979] (improving the numerical values of the paper for k=8,9; see
   rabung_search).
   See also http://www.st.ewi.tudelft.nl/sat/waerden.php.
   The general lower bound is from [Rabung, 1979].
*/
vanderwaerdend3_a(L) := if length(L)=3 and lconstant_p(L) then first(L)
 else []$

/* The diagonal cases with four parts: */
vanderwaerdend4(k) :=
 if k <= 7 then [
  1,5,76,[1048+1,inf-1],[17705+1,inf-1],[91331+1,inf-1],[420217+1,inf-1]
 ][k]
 else [max(420217,ceiling(4^(k-1)/(4*k))),inf-1]$
/* Remark: The precise numbers have been verified/computed by SAT solving
   methods. The bounds are in [Herwig, Heule, Lambalgen, Maaren, 2005],
   except for k=7, which is in [Heule, Walsh, 2010], and for k=4 in
   [Rabung, 1979].
   See also http://www.st.ewi.tudelft.nl/sat/waerden.php.
   The general lower bound is from [Rabung, 1979].
*/
vanderwaerdend4_a(L) := if length(L)=4 and lconstant_p(L) then first(L)
 else []$

/* The diagonal cases with five parts: */
vanderwaerdend5(k) :=
 if k <= 7 then [
  1,6,[170+1,inf-1],[2254+1,inf-1],[98740+1,inf-1],[540025+1,inf-1],[1381687+1,inf-1]
 ][k]
 else [max(1381687+1,ceiling(5^(k-1)/(4*k))),inf-1]$
/* Remark: The bounds are in [Herwig, Heule, Lambalgen, Maaren, 2007],
   except for k=4,7 using the method of [Rabung, 1979] (improving the
   numerical values of the paper for k=7; see rabung_search).
   See also http://www.st.ewi.tudelft.nl/sat/waerden.php.
   The general lower bound is from [Rabung, 1979].
*/
vanderwaerdend5_a(L) := if length(L)=5 and lconstant_p(L) then first(L)
 else []$

/* The diagonal cases with six parts: */
vanderwaerdend6(k) :=
 if k <= 6 then [
  1,7,[223+1,inf-1],[9778+1,inf-1],[98748+1,inf-1],[816981+1,inf-1]
 ][k]
 else [max(816981+1,ceiling(6^(k-1)/(4*k))),inf-1]$
/* Remark: The bounds are in [Herwig, Heule, Lambalgen, Maaren, 2007],
   except for k=4, which is from [Rabung, 1979].
   See also http://www.st.ewi.tudelft.nl/sat/waerden.php.
*/
vanderwaerdend6_a(L) := if length(L)=6 and lconstant_p(L) then first(L)
 else []$


/* ************************
   * The transversal case *
   ************************
*/

/* The "transversal case", i.e., m parts with arithmetic progressions of 
   length 2, one part with length k (gathering all our knowledge regarding
   transversal vdW-numbers).
   Prerequisites: m >= 0, k >= 1: */
vanderwaerdent(m,k) := if m=0 then k
 elseif k=1 then m+1
 elseif m=1 then if evenp(k) then 2*k-1 else 2*k
 elseif k=2 then m+2
 else block([res : vanderwaerdenttau(m,k)],
  if res#unknown then return(res)
  else if k >= m+2 then return(vanderwaerdent_lrc(m,k))
  else return(unknown))$
/* vanderwaerdent(m,k) = vanderwaerden(endcons(k,create_list(2,i,1,m))) */
/* The corresponding applicability check (and conversion into an argument
   list): */
vanderwaerdent_a(L) := block([l : length(L)],
 if l=0 then [] 
 elseif l=1 then [0,first(L)]
 elseif first(L)=1 then
   if second(L)#2 or last(L)#2 then [] else [l-1,1]
 elseif first(L)#2 or L[l-1]#2 then []
 else [l-1,last(L)])$
/* Remark: Note that for vanderwaerdent(m,k) we have altogether m+1 parts. */

/* Only using the list of transversal numbers: */
vanderwaerdenttau(m,k) := block([n : 1, t],
  t : tau_arithprog(k,n),
  while not listp(t) and t <= m do (
    n : n+1, t : tau_arithprog(k,n)
  ),
  if listp(t) then return(unknown) else return(n))$


/* *******************************************************
   * The formula from [Landman, Robertson, Culver, 2005] *
   *******************************************************
*/

/* The minimal natural number j>=0 which needs to be subtracted from k
   to yield a number coprime to the product of the primes at most r.
   k,r natural numbers, r, k >= 1; the meaning of r: r = m+1 (where
   m is the number of 2's as above).
*/
lrc_j(r,k) := block([j : 0, pr : product_primes(r)],
  while gcd(k-j, pr) # 1 do j : j+1,
  return(j))$
/* The tests which are expressed in the paper by the
   function "l_{k,r}"; r, k >= 1 natural numbers.
*/
lrc_l0p(r,k) := is(gcd(k, product_primes(r)) = r)$
lrc_l1p(r,k) := is(gcd(k-1, product_primes(r)) = r)$
/* The minimum with j: */
lrc_lmin(r,k,j) := block([l : 0, pr : product_primes(r)],
  while l < j and gcd(k-l, pr) # r do l : l+1,
  return(l))$

/* The formula according to the paper. */
/* m >= 1, k >= m+2 */
vanderwaerdent_lrc(m,k) := block([r : m+1, j],
 j : lrc_j(r,k),
 if j=0 then return(r*k),
 if j=1 then return(r*k-r+1),
 if primep(r) then
   if lrc_l0p(r,k) then return(r*k-r+1) else
   block([m : lrc_lmin(r,k,j), res],
    res : r*k-m*(r-2),
    if lrc_l1p(r,k) 
      or (m=2 and k>=2*r-3) 
      or (m>=3 and k >= count_primes(r)^3*(r-2))
    then return(res)
    else return([res,inf-1]))
 else
   block([res : r*k-j*(r-2)],
    if (j=2 and k>=2*r-3) 
      or (j>=3 and k>= count_primes(r)^3*(r-2))
    then return(res)
    else return([res,inf-1]))
 )$


/* ********************************
   * Generalised transversal case *
   ********************************
*/

/* The generalised transversal case with suffix S, that is
   (m,S,k) -> L = append(create_list(2,i,1,m),S,[k]).
   Non-degeneracy conditions:
    S non-empty vdW-tuple, m >= 1, min(S) >= 3, max(S) <= k.
*/
vanderwaerdents(m,S,k) :=
 if S=[3] and k=3 then
   if m <= 7 then [
    14,17,20,21,24,25,28
   ][m] else unknown
 elseif S=[3] and k=4 then
   if m <= 5 then [
    21,25,29,33,36
   ][m] else unknown
 elseif S=[3] and k=5 then
   if m <= 4 then [
    32,43,44,50
   ][m] else unknown
 elseif S=[3] and k=6 then
   if m <= 4 then [
    40,48,56,60
   ][m] else unknown
 elseif S=[3] and k=7 then
   if m <= 3 then [
    55,65,72
   ][m] else unknown
 elseif S=[3] and k=8 then
   if m <= 3 then [
    72,83,88
   ][m] else unknown
 elseif S=[3] and k=9 then
   if m <= 2 then [
    90,99
   ][m] else unknown
 elseif S=[3] and k=10 then
   if m <= 2 then [
    108,119
   ][m] else unknown
 elseif S=[3] and k=11 then
   if m <= 1 then [
    129
   ][m] else unknown
 elseif S=[3] and k=12 then
   if m <= 1 then [
    150
   ][m] else unknown
 elseif S=[3] and k=13 then
   if m <= 1 then [
    171
   ][m] else unknown
  elseif S=[4] and k=4 then
   if m <= 4 then [
    40,53,54,56
   ][m] else unknown
  elseif S=[4] and k=5 then
   if m <= 3 then [
    71,75,79
   ][m] else unknown
  elseif S=[4] and k=6 then
   if m <= 2 then [
    83,93
   ][m] else unknown
  elseif S=[4] and k=7 then
   if m <= 1 then [
    119
   ][m] else unknown
  elseif S=[5] and k=5 then
   if m <= 1 then [
    180
   ][m] else unknown
  elseif S=[3,3] and k=3 then
   if m <= 3 then [
    40,41,42
   ][m] else unknown
  elseif S=[3,3] and k=4 then
   if m <= 2 then [
    60,63
  ][m] else unknown
  elseif S=[3,3] and k=5 then
   if m <= 1 then [
    86
   ][m] else unknown
 else unknown$
vanderwaerdents_a(L) := 
 if length(L) <= 2 or first(L)#2 or last(L)=2 then [] else
 block([m : 1],
  while L[m]=2 do m:m+1,
  m : m-1,
  S : rest(L,m), if length(S)=1 then return([]),
  S : rest(S,-1),
  return([m,S,last(L)]))$


/* ******************************************************************
   * Transversal numbers of hypergraphs of arithmetic progresssions *
   ******************************************************************
*/

/* For 3 <= k <= exactk_tau_arithprog we provide initial sequences: */
define_variable(
  exactk_tau_arithprog,
  22,
  fixnum)$
/* Note that these sequences (for tau_arithprog(k,n)) start with n=1. */

/* The following data has been computed by
   "VdWTransversalsInc 3 1 0 OutputFile" (i.e.,
   using SAT solvers):
*/
tau_arithprog_seq[3] : [
0,0,1,1,1,2,3,4,4,5,
5,6,6,6,7,8,9,10,11,11,
12,13,14,14,15,15,16,17,18,18,
19,19,20,21,22,22,23,24,25,25,
25,26,27,28,29,30,31,32,33,34,
34,35,36,36,37,38,39,39,40,41,
42,43,43,44,45,46,47,48,49,50,
50,51,52,52,53,54,55,56,57,58,
59,59,60,60,61,62,63,64,65,66,
67,67,68,69,69,70,71,72,73,73,
74,75
]$
/* The following data has been computed by
   "VdWTransversalsInc 4 1 0 OutputFile":
*/
tau_arithprog_seq[4] : [
0,0,0,1,1,1,2,2,2,2,
3,4,4,5,5,6,6,7,7,8,
8,9,9,10,10,11,11,11,12,12,
13,14,14,14,15,16,16,17,18,18,
19,20,20,21,21,22,23,23,24,24,
25,26,26,26,27,28,29,29,30,30,
31,32,33,33,34,34,35,35,36,36,
37,38,39,39,40,41,41,42,42,43
]$
/* The following data has been computed by
   "VdWTransversalsInc 5 1 0 OutputFile":
*/
tau_arithprog_seq[5] : [
0,0,0,0,1,1,1,1,1,2,
2,2,2,2,3,3,3,3,3,4,
5,6,7,7,7,8,8,8,8,9,
9,10,10,10,11,11,11,11,11,12,
12,12,12,12,13,14,15,16,16,17,
17,17,18,18,19,19,19,19,19,20,
20,20,20,20,21,21,21,21,21,22,
23,24,25,26,27,27,27,27,27,28,
28,28,28,28,29,29,29,29,29,30,
30,30,30,30,31,32,33,34,35,36,
37,38,39
]$
/* The following data has been computed by
   "VdWTransversalsInc 6 1 0 OutputFile":
*/
tau_arithprog_seq[6] : [
0,0,0,0,0,1,1,1,1,1,
2,2,2,2,2,3,3,3,3,3,
4,4,4,4,4,4,5,6,6,7,
8,8,8,9,9,9,9,10,10,10,
10,11,12,12,12,12,13,13,13,13,
13,14,15,15,16,16,17,17,17,18,
18,18,19,19,19,19,20,20,21,21,
21,22,22,22,22,22,23,24,25,25,
26,26,26,27,27,27
]$
/* The following data has been computed by
   "VdWTransversalsInc 7 1 0 OutputFile":
*/
tau_arithprog_seq[7] : [
0,0,0,0,0,0,1,1,1,1,
1,1,1,2,2,2,2,2,2,2,
3,3,3,3,3,3,3,4,4,4,
4,4,4,4,5,5,5,5,5,5,
5,6,7,8,9,9,10,10,11,11,
11,11,11,12,12,12,12,13,13,13,
13,14,14,14,14,15,15,15,15,16,
16,16,16,16,16,16,17,17,17,17,
17,17,17,18,18,18,18,18,18,18,
19,20,21,22,22,23,24,24,25,25,
25,25,25,25,26,26,26,27,27,27,
27
]$
/* The following data has been computed by
   "VdWTransversalsInc 8 1 0 OutputFile":
*/
tau_arithprog_seq[8] : [
0,0,0,0,0,0,0,1,1,1,
1,1,1,1,2,2,2,2,2,2,
2,3,3,3,3,3,3,3,4,4,
4,4,4,4,4,5,5,5,5,5,
5,5,6,6,6,6,6,6,6,6,
7,8,9,9,10,10,11,11,11,12,
12,12,12,13,13,13,13,13,13,14,
14,14,15,15,15,15,15,15,16,16,
17,17,17,17,17,18,18,18,18,18,
18,18,19,19,19,19,19,19,19,20,
21,22,23,23
]$
/* The following data has been computed by
   "VdWTransversalsInc 9 1 0 OutputFile":
*/
tau_arithprog_seq[9] : [
0,0,0,0,0,0,0,0,1,1,
1,1,1,1,1,1,1,2,2,2,
2,2,2,2,3,3,3,3,3,3,
3,4,4,4,4,4,4,4,5,5,
5,5,5,5,5,6,6,6,6,6,
6,6,7,7,7,7,7,8,9,9,
9,10,10,10,10,11,11,11,11,11,
11,12,12,13,13,13,14,14,14,14,
15,15,15,15,15,15,16,16,16,16,
17,17,17,17,17,17,18,18,18,18,
18,19,19,19,19,20,20,20,20,21,
21,21,21,21,21
]$
/* The following data has been computed by
   "VdWTransversalsInc 10 1 0 OutputFile":
*/
tau_arithprog_seq[10] : [
0,0,0,0,0,0,0,0,0,1,
1,1,1,1,1,1,1,1,2,2,
2,2,2,2,2,2,2,2,3,3,
3,3,3,4,4,4,4,4,4,4,
5,5,5,5,5,5,5,6,6,6,
6,6,6,6,7,7,7,7,7,7,
7,8,8,8,9,9,9,9,10,10,
10,10,10,11,11,11,11,11,12,12,
12,12,12,12,13,13,13,13,14,14,
14,15,15,15,15,16,16,16,16,16,
17,17,17,17,17,18,18,18,18,19,
19,19,19,19,19
]$
/* The following data has been computed by
   "VdWTransversalsInc 11 1 0 OutputFile":
*/
tau_arithprog_seq[11] : [
0,0,0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,1,1,
1,2,2,2,2,2,2,2,2,2,
2,2,3,3,3,3,3,3,3,3,
3,3,3,4,4,4,4,4,4,4,
4,4,4,4,5,5,5,5,5,5,
5,5,5,5,5,6,6,6,6,6,
6,6,6,6,6,6,7,7,7,7,
7,7,7,7,7,7,7,8,8,8,
8,8,8,8,8,8,8,8,9,9,
9,9,9,9,9,9,9,9,9,10,
11,12,13,14,14,15,15,16,17,17,
18,18,18,18,18,18,18,18,19,19,
19
]$
/* The following data has been computed by
   "VdWTransversalsInc 12 1 0 OutputFile":
*/
tau_arithprog_seq[12] : [
0,0,0,0,0,0,0,0,0,0,
0,1,1,1,1,1,1,1,1,1,
1,1,2,2,2,2,2,2,2,2,
2,2,2,3,3,3,3,3,3,3,
3,3,3,3,4,4,4,4,4,4,
4,4,4,4,4,5,5,5,5,5,
5,5,5,5,5,5,6,6,6,6,
6,6,6,6,6,6,6,7,7,7,
7,7,7,7,7,7,7,7,8,8,
8,8,8,8,8,8,8,8,8,9,
9,9,9,9,9,9,9,9,9,9,
10,10,10,10,10,10,10,10,10,10,
10,10,11,12,13,14,15,15,16,17,
17,17,18,18
]$
/* The following data has been computed by
   "VdWTransversalsInc 13 1 0 OutputFile":
*/
tau_arithprog_seq[13] : [
0,0,0,0,0,0,0,0,0,0,
0,0,1,1,1,1,1,1,1,1,
1,1,1,1,1,2,2,2,2,2,
2,2,2,2,2,2,2,2,3,3,
3,3,3,3,3,3,3,3,3,3,
3,4,4,4,4,4,4,4,4,4,
4,4,4,4,5,5,5,5,5,5,
5,5,5,5,5,5,5,6,6,6,
6,6,6,6,6,6,6,6,6,6,
7,7,7,7,7,7,7,7,7,7,
7,7,7,8,8,8,8,8,8,8,
8,8,8,8,8,8,9,9,9,9,
9,9,9,9,9,9,9,9,9,10,
10,10,10,10,10,10,10,10,10,10,
10,10,11,11,11,11,11,11,11,11,
11,11,11,11,11,12,13,14,15,16,
16,17,18
]$
/* The following data has been computed by
   "VdWTransversalsInc 14 1 0 OutputFile":
*/
tau_arithprog_seq[14] : [
0,0,0,0,0,0,0,0,0,0,
0,0,0,1,1,1,1,1,1,1,
1,1,1,1,1,1,2,2,2,2,
2,2,2,2,2,2,2,2,2,3,
3,3,3,3,3,3,3,3,3,3,
3,3,4,4,4,4,4,4,4,4,
4,4,4,4,4,5,5,5,5,5,
5,5,5,5,5,5,5,5,6,6,
6,6,6,6,6,6,6,6,6,6,
6,7,7,7,7,7,7,7,7,7,
7,7,7,7,8,8,8,8,8,8,
8,8,8,8,8,8,8,9,9,9,
9,9,9,9,9,9,9,9,9,9,
10,10,10,10,10,10,10,10,10,10,
10,10,10,11,11,11,11,11,11,11,
11,11,11,11,11,11,12,12,12,12,
12,12,12,12,12,12,12,12,12,12,
13,14,15,16,17,18,18
]$
/* The following data has been computed by
   "VdWTransversalsInc 15 1 0 OutputFile":
*/
tau_arithprog_seq[15] : [
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,2,
2,2,2,2,2,2,2,2,2,2,
2,2,3,3,3,3,3,3,3,3,
3,3,3,3,3,4,4,4,4,4,
4,4,4,4,4,4,4,4,5,5,
5,5,5,5,5,5,5,5,5,5,
5,6,6,6,6,6,6,6,6,6,
6,6,6,6,7,7,7,7,7,7,
7,7,7,7,7,7,7,8,8,8,
8,8,8,8,8,8,8,8,8,8,
9,9,9,9,9,9,9,9,9,9,
9,9,9,10,10,10,10,10,10,10,
10,10,10,10,10,10,11,11,11,11,
11,11,11,11,11,11,11,11,11,12,
12,12,12,12,12,12,12,12,12,12,
12,12,13,13,13,13,13,13,13,13,
13,13,13,14,15,16,16,17,18
]$

/* Alternative representations using tau-skiplists
   (the list contains the last entry where tau=0, 1, ...).
*/
/* The following data has been computed by
   "VdWTransversalsInc 16 1 0 VDW_16 VDW_16_SAT", and then using
   transform_steps_l(map(third,rest(read_nested_list("VDW_16"))))
*/
tau_steplist_arithprog_seq[16] : [
 15,30,46,57,70,83,96,109,122,135,
 148,161,174,187,196,198,199,201
]$
tau_arithprog_seq[16] : transform_threshold_l(tau_steplist_arithprog_seq[16])$
/* The following data has been computed by
   "VdWTransversalsInc 17 1 0 VDW_17 VDW_17_SAT", and then using
   transform_steps_l(map(third,rest(read_nested_list("VDW_17"))))
*/
tau_steplist_arithprog_seq[17] : [
 16,33,50,67,84,101,118,135,152,169,
 186,203,220,237,254,271,272,273,274,275,
 276
]$
tau_arithprog_seq[17] : transform_threshold_l(tau_steplist_arithprog_seq[17])$
/* The following data has been computed by
   "VdWTransversalsInc 18 1 0 VDW_18 VDW_18_SAT", and then using
   transform_steps_l(map(third,rest(read_nested_list("VDW_18"))))
*/
tau_steplist_arithprog_seq[18] : [
 17,34,51,68,85,102,119,136,153,170,
 187,204,221,238,255,272,290,291,292,293,
 294
]$
tau_arithprog_seq[18] : transform_threshold_l(tau_steplist_arithprog_seq[18])$
/* The following data has been computed by
   "VdWTransversalsInc 19 1 0 VDW_19 VDW_19_SAT", and then using
   transform_steps_l(map(third,rest(read_nested_list("VDW_19"))))
*/
tau_steplist_arithprog_seq[19] : [
 18,37,56,75,94,113,132,151,170,189,
 208,227,246,265,284,303,322,341,342,343,
 344,345,346
]$
tau_arithprog_seq[19] : transform_threshold_l(tau_steplist_arithprog_seq[19])$
/* The following data has been computed by
   "VdWTransversalsInc 20 1 0 VDW_20 VDW_20_SAT", and then using
   transform_steps_l(map(third,rest(read_nested_list("VDW_20"))))
*/
tau_steplist_arithprog_seq[20] : [
 19,38,57,76,95,114,133,152,171,190,
 209,228,247,266,285,304,323,342,362,363,
 364,365,366
]$
tau_arithprog_seq[20] : transform_threshold_l(tau_steplist_arithprog_seq[20])$
/* The following data has been computed by
   "VdWTransversalsInc 21 1 0 VDW_21 VDW_21_SAT", and then using
   transform_steps_l(map(third,rest(read_nested_list("VDW_21"))))
*/
tau_steplist_arithprog_seq[21] : [
 20,41,60,79,98,117,136,155,174,193,
 212,231,250,269,288,307,326,345,364,381,
 382,383,384
]$
tau_arithprog_seq[21] : transform_threshold_l(tau_steplist_arithprog_seq[21])$
/* The following data has been computed by
   "VdWTransversalsInc 22 1 0 VDW_22 VDW_22_SAT", and then using
   transform_steps_l(map(third,rest(read_nested_list("VDW_22"))))
*/
tau_steplist_arithprog_seq[22] : [
 21,42,64,81,100,119,138,157,176,195,
 214,233,252,271,290,309,328,347,366,385,
 400,401,403
]$
tau_arithprog_seq[22] : transform_threshold_l(tau_steplist_arithprog_seq[22])$


/* Alternative data for transversal numbers, given as "steplists" of 
   independence numbers, that is, the entry for index i (starting with 1)
   is the first n such that the independence number is i.
   From such a steplist L one obtains the initial list of independence numbers,
   starting with n=0, via transform_threshold_l(L).
*/

/* Data from Bestk3.txt, taken from 
   http://www.math.uni.wroc.pl/~jwr/non-ave.htm:
*/
alpha_steplist_arithprog_seq[3] : [
1,2,4,5,9,11,13,14,20,24,
26,30,32,36,40,41,51,54,58,63,
71,74,82,84,92,95,100,104,111,114,
121,122,137,145,150,157,163,165,169,174,
194
]$

/* Letting tau_arithprog_seq[k] be the larger of the two alternatives: */
block([A : alphastep2tau(alpha_steplist_arithprog_seq[3])],
 if length(A) > length(tau_arithprog_seq[3]) then
   tau_arithprog_seq[3] : A)$


/* For n <= exactv_tau_arithprog(k) we have stored exact values
   in tau_arithprog_seq[k]: */
exactv_tau_arithprog(k) := 
 if k<=2 or k > exactk_tau_arithprog then 0
 else length(tau_arithprog_seq[k])$


/* Exact (trivial) formulas (returns unknown if no exact formula applies;
   for natural numbers k, n): */
exactf_tau_arithprog(k,n) :=
 if n < k then 0
 elseif k=1 then n
 elseif k=2 then n-1
 elseif n <= 2*k-1 and evenp(k) then
   if n = 2*k-1 then 2 else 1
 elseif n <= 2*k and oddp(k) then
   if n = 2*k then 2 else 1
 else unknown$
/* The following inclusion enables simplification of for example
    exactf_tau_arithprog(k,n):
*/
oklib_plain_include(boolsimp)$


/* The pair of nearest n-value downward and its transversal-value where we have
   exact values stored (using only stored *transversal-values* besides the
   trivial formulas).
   Prerequisite: The exact formulas don't apply (directly).
*/
nearest_tau_arithprog(k,n) := block([maxn : exactv_tau_arithprog(k)],
  if n <= maxn then return([n, tau_arithprog_seq[k][n]])
  elseif maxn > 0 then return([maxn, tau_arithprog_seq[k][maxn]])
  elseif evenp(k) then return([2*k-1,2])
  else return([2*k,2]))$

/* The best known values (using only stored transversal-values): */
/* Prerequisites: k, n natural numbers >= 1 */
tau_arithprog(k,n) := block([e : exactf_tau_arithprog(k,n)],
 if e#unknown then return(e),
 block([nn,v],
   [nn,v] : nearest_tau_arithprog(k,n),
   if nn=n then return(v)
   else return([v, (n - nn) + v])))$


/* *********************************
   * Analysing transversal numbers *
   *********************************
*/

/* The independence numbers (for natural numbers k, n; also known as r_k(n)):
*/
alpha_arithprog(k,n) := block([t : tau_arithprog(k,n)],
 if listp(t) then return(reverse(n-t)) else return(n-t))$
/* The list of all known values (from n=1, as long as there are no gaps, and
   using only the stored transversal-numbers) for k >= 3: */
alphal_arithprog(k) := if k > exactk_tau_arithprog then []
 else alphatau_l(tau_arithprog_seq[k])$

/* The relative transversal number (for natural numbers k, n): */
rtau_arithprog(k,n) := tau_arithprog(k,n) / n$
/* The relative independence number (for natural numbers k, n): */
ralpha_arithprog(k,n) := alpha_arithprog(k,n) / n$
/* The list of all known values (from n=1, as long as there are no gaps, and
   using only the stored transversal-numbers) for k >= 3: */
ralphal_arithprog(k) := if k > exactk_tau_arithprog then []
 else block([L : tau_arithprog_seq[k], N],
  N : create_list(i,i,1,length(L)),
  return((N - L) / N))$

/* Analysing the list of ratios of alpha-values */

/* Plotting the alpha-ratios (k >= 3): */
plot_ralpha_arithprog(k) := block([L : ralphal_arithprog(k)],
  if not emptyp(L) then
    plot2d([discrete, create_list(i,i,1,length(L)), L]))$

/* "Approximating" the index n such that for all n' >= n we have
   alpha(arithprog_hg(k,n))/n < 1/q by considering ralphal_arithprog.
   Prerequisites: k, q natural numbers, k, q >= 1.
   "cr" stands for "convergence ratio".
*/
approx_cralpha_arithprog(k,q) := 
 if k=1 then 1
 elseif k=2 then q+1 else block([L, i],
  L : ralphal_arithprog(k),
  i : find_last_l(lambda([x],is(x >= 1/q)), L),
  if i=minf then return(inf-1) else (
    i : i+1,
    if i>length(L) then return(inf-1) else return(i)))$

/* The "approximated" upper bound on vanderwaerdend(m,k) given by
   approx_cralpha_arithprog (if this value is exact, then the upper
   bounds holds true).
   Prerequisites: m, k natural numbers >= 1.
*/
upper_vanderwaerdend_approxcralpha(m,k) :=
 approx_cralpha_arithprog(k,m)$


/* Transformations between the various forms of (gapless, initial)
   sequences of numbers
*/

/* The initial sequence of transversal vdW-numbers for progression-length k
   (as far as there are stored tau-values; the number m of 2's starts with 0).
   If no sequence is stored, then m <= k-1 is considered.
   k natural number >= 0.
*/
initial_sequence_vdWt(k) :=
  create_list(vanderwaerdent(m,k),m,0,last(tau_arithprog_seq[k])-1);

/* The subsequence of initial_sequence_vdWt(k) given by the precise
   LRC-formula, extended as far as possibly correct results seem to
   be produced, plus one more entry (while the guaranteed entries are
   those with m <= k-2, where in case of a pair-value this means (as
   usual) a pair of bounds):
*/
initial_sequence_vdWt_lrc(k) :=
  create_list(vanderwaerdent_lrc(m,k),m,0,if k=3 then 3+1 elseif evenp(k) then k-2+1 else k-1+1);


/* Considering the question, how small the coefficient gamma in
   vdW_{m+1}(2,...,2,k) <= gamma * (m+1)
   can be if m is big enough (we know by Szemeredi that gamma can be
   arbitrarily close to 1 if m is big enough, and the question is about
   precise numerical knowledge).
*/
/* Motivated by [Khodkar, Landman, INTEGERS, 2007], evaluating for each k the
   best possible gamma given the data we have, when considering only m >= k
   (returning the list of pairs [k,gamma]):
*/
bestgamma_vdWt() := block([res : []],
 for k : 3 thru exactk_tau_arithprog do block(
  [L : initial_sequence_vdWt(k)],
   if length(L) <= k then res : cons([k,unknown], res)
   else res : cons([k,lmax(rest(L,k)/create_list(m+1,m,k,length(L)-1))], res)
 ),
 reverse(res))$
/* For a list A as returned by bestgamma_vdWt(), plot the values k-1 minus
   these gamma-values (where pairs with unknown gamma-values are removed):
*/
show_bestgamma_vdWt(A) := block(
 [B : sublist(A,lambda([p],is(second(p)#unknown)))],
  plot2d(
   [discrete,
    map(lambda([p], [first(p), (first(p)-1)-second(p)]), B)],
   [x,first(first(B))-1,first(last(B))+1],
   [style,[linespoints,1,5]],
   [xlabel, "k"],
   [ylabel, "gamma"]))$
/* By [Khodkar, Landman, INTEGERS, 2007] it is known that if for
   3/2*k - 5/2 <= m <= 2*k we have vdw_{m+1}(2,...,2,k) <= (k-1)*(m+1),
   then this upper bounds actually holds for all m >= k.
   For all k for which we might have values this condition is now
   checked, and the list of pairs [k, evaluation_result] is retured:
*/
condition_kl_vdWt() := block([res : []],
 for k : 3 thru exactk_tau_arithprog do block(
  [begin : ceiling(3/2*(k-1))-1, end : 2*k, eval_res : true],
   for m : begin thru end unless eval_res#true do block(
    [t : vanderwaerdent(m,k)],
     if t=unknown then eval_res : unknown
     else if t > (k-1)*(m+1) then eval_res : false
   ),
   res : cons([k,eval_res],res)
 ),
 reverse(res))$ 


/*!
\endhtmlonly
*/
