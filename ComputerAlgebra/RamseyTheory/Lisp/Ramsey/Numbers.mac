/* Oliver Kullmann, 27.7.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/RamseyTheory/Lisp/Ramsey/Numbers.mac
  \brief Providing access to all known information on Ramsey numbers

Use by

oklib_load("OKlib/ComputerAlgebra/RamseyTheory/Lisp/Ramsey/Numbers.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$

/* A "Ramsey parameter tuple" is a pair [L,k], where k is the length of the
   hyperedges considered, the length of L is the number of colours, and each
   entry of L specifies the size of the complete k-graph as (subgraph) the
   Ramsey numbers shall guarantee.
*/

/* Bounds for Ramsey numbers are given as pairs [lower bounds, upper bounds]
   (which must be correct).
*/

/* Concrete bounds, which are assumed to be the best known ones: */
ramsey_hm : sm2hm({})$
set_hm(ramsey_hm, [2,[2,2]], 2)$
set_hm(ramsey_hm, [2,[3,3]], 6)$
set_hm(ramsey_hm, [2,[4,4]], 18)$
set_hm(ramsey_hm, [2,[5,5]], [43,49])$
set_hm(ramsey_hm, [2,[3,3,3]], 17)$

/* Returns the current bounds known for the given Ramsey parameters, 
   as a pair [lower bound, upper bound]. Returns an integer if the 
   exact number is known. In the case nothing is known,
   the trivial lower and upper bounds [0,inf] are returned. */
ramsey(r,col_tuple) := block([col_tuple_sort : sort(col_tuple)],
  if first(col_tuple_sort) = 1 and r > 1 then return(1)
  else if length(col_tuple) = 2 and first(col_tuple_sort) = 1 and r = 2 then
    return(first(kl)) 
  else block([bounds : ev_hm(ramsey_hm, [r,col_tuple_sort])],
    if bounds = false then return([0,inf]) else bounds))$


/* Returns the upper bound given the result of a call to "ramsey" */
ramsey_ub(n) := if listp(n) then last(n) else n$

/* Returns the lower bound given the result of a call to "ramsey" */
ramsey_lb(n) := if listp(n) then first(n) else n$

/*!
\endhtmlonly
*/
