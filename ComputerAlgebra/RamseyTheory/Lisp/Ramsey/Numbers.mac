/* Oliver Kullmann, 27.7.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/RamseyTheory/Lisp/Ramsey/Numbers.mac
  \brief Providing access to all known information on Ramsey numbers

Use by

oklib_load("OKlib/ComputerAlgebra/RamseyTheory/Lisp/Ramsey/Numbers.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$

/* ******************
   * Ramsey numbers *
   ******************
*/

/* A "Ramsey parameter tuple" is a pair [r,L], where r is the length of the
   hyperedges considered, the length of L is the number of colours, and each
   entry of L specifies the size of the complete r-hypergraph, whose existence
   as (subgraph) the Ramsey numbers shall guarantee.
*/

/* Bounds for Ramsey numbers are given as integers if the exact bound is known.
 * and pairs otherwise [lower bounds, upper bounds] (which must be correct).
*/

/* Returns the current bounds known for the given Ramsey parameter tuple.
   In the case nothing is known, unknown is returned. */
ramsey(param_tuple) := 
  if ramseytrivle_a(param_tuple)#[] then 
    apply(ramseytrivle,ramseytrivle_a(param_tuple))
  elseif ramseytriveq_a(param_tuple)#[] then 
    apply(ramseytriveq,ramseytriveq_a(param_tuple))
  elseif ramseytrivk_a(param_tuple)#[] then 
    apply(ramseytrivk,ramseytrivk_a(param_tuple))
  elseif ramseyg2_3_a(param_tuple)#[] then 
    apply(ramseyg2_3,ramseyg2_3_a(param_tuple))
  elseif ramseyg2_4_a(param_tuple)#[] then 
    apply(ramseyg2_4,ramseyg2_4_a(param_tuple))
  elseif ramseyg2_5_a(param_tuple)#[] then 
    apply(ramseyg2_5,ramseyg2_5_a(param_tuple))
  elseif ramseyg2_6_a(param_tuple)#[] then 
    apply(ramseyg2_6,ramseyg2_6_a(param_tuple))
  elseif ramseyg2_7_a(param_tuple)#[] then 
    apply(ramseyg2_7,ramseyg2_7_a(param_tuple))
  elseif ramseyg2_8_a(param_tuple)#[] then 
    apply(ramseyg2_8,ramseyg2_8_a(param_tuple))
  elseif ramseyg2_9_a(param_tuple)#[] then 
    apply(ramseyg2_9,ramseyg2_9_a(param_tuple))
  elseif ramseyg2_10_a(param_tuple)#[] then 
    apply(ramseyg2_10,ramseyg2_10_a(param_tuple))
  elseif ramseyg3_3_3_a(param_tuple)#[] then 
    apply(ramseyg3_3_3,ramseyg3_3_3_a(param_tuple))
  elseif ramseyhg3_2_4_a(param_tuple)#[] then 
    apply(ramseyhg3_2_4,ramseyhg3_2_4_a(param_tuple))
  else unknown$

/* Checking whether L is a valid Ramsey parameter tuple: */
ramsey_p(L) := listp(L) and 
  if length(L) > 1 then
    integerp(L[1]) and L[1] >= 0 and listp(L[2]) and every_s(integerp,L[2]) and
    every_s(lambda([a], is(a >= 0)), L[2])
  else false$

/* *****************
   * Trivial cases *
   *****************
*/

/* If min(q_i) < r then the set of all r-subsets of {1,..,min(q_i)} is empty,
   and the Ramsey number is simply min(q_i).  */
ramseytrivle_a(L) := 
  if L[2] = [] then []
  elseif first(L[2]) < L[1] then [first(L[2])] else []$
ramseytrivle(min_qi) := min_qi$


/* If min(q_i) = r then that part can not be used without making an r-clique,
   so there is simply the remaining Ramsey problem without that part. */
ramseytriveq_a(L) := 
  if L[2] = [] then []
  elseif first(L[2]) = L[1] then [[L[1],rest(L[2])]] else []$
ramseytriveq(L) := ramsey(L)$


/* If k < 2 then the Ramsey number is simply the first time there are enough
   vertices for a q-clique. */
ramseytrivk_a(L) := 
  if L[2] = [] then []
  elseif length(L[2]) < 2 then [first(L[2])] else []$
ramseytrivk(q) := q$


/* *********************
   * Two-colour graphs *
   *********************
*/

ramseyg2_3_a(L) := 
  if L[2] = [] then []
  elseif L[1] = 2 and length(L[2]) = 2 and first(L[2]) = 3 then [last(L[2])] else []$
ramseyg2_3(q) := 
  if q <= 15 then
    [1,3,6,9,14,18,23,28,36,
     [40,43],[46,51],[52,59],[59,59],[66,78],[73,88]][q]
  else unknown$


ramseyg2_4_a(L) := 
  if L[2] = [] then []
  elseif L[1] = 2 and length(L[2]) = 2 and first(L[2]) = 4 then [last(L[2])] else []$
ramseyg2_4(q) := 
  if q <= 15 then
    [1,4,9,18,25,
     [35,41],[49,61],[56,84],[73,115],[92,149],[97,191],[128,238],[133,291],
     [141,349],[153,417]][q]
  else unknown$


ramseyg2_5_a(L) := 
  if L[2] = [] then []
  elseif L[1] = 2 and length(L[2]) = 2 and first(L[2]) = 5 then [last(L[2])] else []$
ramseyg2_5(q) := 
  if q <= 15 then
    [1,5,14,25,[43,49],
     [58,87],[80,143],[101,216],[125,316],[143,442],[159,inf],[185,848],[209,inf],
     [235,1461],[265,inf]][q]
  else unknown$

ramseyg2_6_a(L) := 
  if L[2] = [] then []
  elseif L[1] = 2 and length(L[2]) = 2 and first(L[2]) = 6 then [last(L[2])] else []$
ramseyg2_6(q) := 
  if q <= 15 then
    [1,6,18,[35,41],[58,87],
     [102,165],[113,298],[127,495],[169,780],[179,1171],[253,inf],[262,2566],[317,inf],
     [0,5033],[401,inf]][q]
  else unknown$

ramseyg2_7_a(L) := 
  if L[2] = [] then []
  elseif L[1] = 2 and length(L[2]) = 2 and first(L[2]) = 7 then [last(L[2])] else []$
ramseyg2_7(q) := 
  if q <= 15 then
    [1,7,23,[49,61],[80,143],
     [113,298],[205,540],[216,1031],[233,1713],[289,2826],[405,4553],[416,6954],[511,10581],
     [0,15263],[0,22116]][q]
  else unknown$


ramseyg2_8_a(L) := 
  if L[2] = [] then []
  elseif L[1] = 2 and length(L[2]) = 2 and first(L[2]) = 8 then [last(L[2])] else []$
ramseyg2_8(q) := 
  if q <= 15 then
    [1,8,28,[56,84],[101,216],
     [127,495],[216,1031],[282,1870],[317,3583],[0,6090],[0,10630],[0,16944],[817,27490],
     [0,41525],[861,63620]][q]
  else unknown$


ramseyg2_9_a(L) := 
  if L[2] = [] then []
  elseif L[1] = 2 and length(L[2]) = 2 and first(L[2]) = 9 then [last(L[2])] else []$
ramseyg2_9(q) := 
  if q <= 14 then
    [1,9,36,[73,115],[125,316],
     [169,780],[233,1713],[317,3583],[565,6588],[580,12677],[0,22325],[0,39025],[0,64871],
     [0,89203]][q]
  else unknown$


ramseyg2_10_a(L) := 
  if L[2] = [] then []
  elseif L[1] = 2 and length(L[2]) = 2 and first(L[2]) = 10 then [last(L[2])] else []$
ramseyg2_10(q) := 
  if q <= 15 then
    [1,10,[40,43],[92,149],[143,442],
     [179,1171],[289,2826],[0,6090],[580,12677],[798,23556],unknown,[0,81200],unknown,
     unknown,[1265,inf]][q]
  else unknown$


ramseyg3_3_3_a(L) := 
  if L[2] = [] then []
  elseif L[1] = 2 and length(L[2]) = 3 and first(L[2]) = 3 and second(L[2]) = 3 then 
    [last(L[2])]
  else []$
ramseyg3_3_3(q) := 
  if q <= 3 then 
    [1,6,17][q] 
  else unknown$


/* ***************
   * Hypergraphs *
   ***************
*/

ramseyhg3_2_4_a(L) := 
  if L[2] = [] then []
  elseif L[1] = 3 and length(L[2]) = 2 and first(L[2]) = 4 then [last(L[2])] else []$
ramseyhg3_2_4(q) := 
  if q = 4 then 13 else unknown$


/* ***********
   * Bounds  *
   ***********
*/

/* Returns the upper bound given the result of a call to "ramsey": */
ramsey_ub(n) := if listp(n) then last(n) else n$
/* Returns the upper bound given the result of a call to "ramsey" safely,
   i.e. if the value is unknown, then infinity is returned (so this can be
   used without checking the return value). */
ramsey_ub_s(n) := block([ret],
  ret : if listp(n) then last(n) else n,
  return(if ret = unknown then inf else ret))$


/* Returns the lower bound given the result of a call to "ramsey": */
ramsey_lb(n) := if listp(n) then first(n) else n$
/* Returns the lower bound given the result of a call to "ramsey" safely,
   i.e. if the value is unknown, then 0 is returned (so this can be
   used without checking the return value). */
ramsey_lb_s(n) := block([ret],
  ret : if listp(n) then first(n) else n,
  return(if ret = unknown then 0 else ret))$

/*!
\endhtmlonly
*/
