/* Oliver Kullmann, 27.7.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/RamseyTheory/Lisp/Ramsey/Numbers.mac
  \brief Providing access to all known information on Ramsey numbers

Use by

oklib_load("OKlib/ComputerAlgebra/RamseyTheory/Lisp/Ramsey/Numbers.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$

/* ******************
   * Ramsey numbers *
   ******************
*/

/* A "Ramsey parameter tuple" is a pair [L,k], where k is the length of the
   hyperedges considered, the length of L is the number of colours, and each
   entry of L specifies the size of the complete k-graph as (subgraph) the
   Ramsey numbers shall guarantee.
*/

/* Bounds for Ramsey numbers are given as integers if the exact bound is known
 * and pairs otherwise [lower bounds, upper bounds] (which must be correct).
*/

/* Returns the current bounds known for the given Ramsey parameter tuple.
   In the case nothing is known, unknown is returned. */
ramsey(r,col_tuple) := 
  if ramseytrivle_a(r,col_tuple)#[] then 
    apply(ramseytrivle,ramseytrivle_a(r,col_tuple))
  elseif ramseytriveq_a(r,col_tuple)#[] then 
    apply(ramseytriveq,ramseytriveq_a(r,col_tuple))
  elseif ramseytrivk_a(r,col_tuple)#[] then 
    apply(ramseytrivk,ramseytrivk_a(r,col_tuple))
  elseif ramseyg2_3_a(r,col_tuple)#[] then 
    apply(ramseyg2_3,ramseyg2_3_a(r,col_tuple))
  elseif ramseyg2_4_a(r,col_tuple)#[] then 
    apply(ramseyg2_4,ramseyg2_4_a(r,col_tuple))
  elseif ramseyg3_3_3_a(r,col_tuple)#[] then 
    apply(ramseyg3_3_3,ramseyg3_3_3_a(r,col_tuple))
  elseif ramseyhg3_2_4_a(r,col_tuple)#[] then 
    apply(ramseyhg3_2_4,ramseyhg3_2_4_a(r,col_tuple))
  else unknown$
/* Remark: If L is not sorted, use vanderwaerden(sort(L)). */


/* Checking whether L is a valid input: */
ramsey_p(L) := listp(L) and 
 every_s(integerp,L) and every_s(lambda([x],is(x >= 1)),L) and
 ascending_p(L)$

/* *****************
   * Trivial Cases *
   *****************
*/

/* If min(q_i) < r then the set of all r subsets of {1,..,min(q_i)} is empty,
   and the Ramsey number is simply min(q_i).  */
ramseytrivle_a(r,L) := 
  if L = [] then []
  elseif first(L) < r then [first(L)] else []$
ramseytrivle(min_qi) := min_qi$


/* If min(q_i) = r then that part can not be used without making an r-clique,
   so there is simply the remaining Ramsey problem without that part. */
ramseytriveq_a(r,L) := 
  if L = [] then []
  elseif first(L) = r then [r,rest(L)] else []$
ramseytriveq(r,L) := ramsey(r,L)$


/* If k < 2 then the Ramsey number is simply the first time there are enough
   vertices for a q-clique. */
ramseytrivk_a(r,L) := 
  if L = [] then []
  elseif length(L) < 2 then [first(L)] else []$
ramseytrivk(q) := q$


/* ********************
   * Two-color Graphs *
   ********************
*/

ramseyg2_3_a(r,L) := 
  if L = [] then []
  elseif r = 2 and length(L) = 2 and first(L) = 3 then [last(L)] else []$
ramseyg2_3(q) := 
  if q <= 15 then
    [1,3,6,9,14,18,23,28,36,
     [40,43],[46,51],[52,59],[59,59],[66,78],[73,88]][q]
  else unknown$


ramseyg2_4_a(r,L) := 
  if L = [] then []
  elseif r = 2 and length(L) = 2 and first(L) = 4 then [last(L)] else []$
ramseyg2_4(q) := 
  if q <= 15 then
    [1,4,9,18,25,
     [35,41],[49,61],[56,84],[73,115],[92,149],[97,191],[128,238],[133,291],
     [141,349],[153,417]][q]
  else unknown$


ramseyg3_3_3_a(r,L) := 
  if L = [] then []
  elseif r = 2 and length(L) = 3 and first(L) = 3 and second(L) = 3 then 
    [last(L)]
  else []$
ramseyg3_3_3(q) := 
  if q <= 3 then 
    [1,6,17][q] 
  else unknown$

/* ***************
   * Hypergraphs *
   ***************
*/

ramseyhg3_2_4_a(r,L) := 
  if L = [] then []
  elseif r = 3 and length(L) = 2 and first(L) = 4 then [last(L)] else []$
ramseyhg3_2_4(q) := 
  if q = 4 then 13 else unknown$

/* ***********
   * Bounds  *
   ***********
*/

/* Returns the upper bound given the result of a call to "ramsey" */
ramsey_ub(n) := if listp(n) then last(n) else n$


/* Returns the lower bound given the result of a call to "ramsey" */
ramsey_lb(n) := if listp(n) then first(n) else n$

/*!
\endhtmlonly
*/
