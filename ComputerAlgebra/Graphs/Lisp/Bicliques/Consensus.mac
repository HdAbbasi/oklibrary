/* Matthew Lewsey, 9.2.2009 (Swansea) */
/* Copyright 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Graphs/Lisp/Bicliques/Consensus.mac
  \brief Consensus method functions regarding generating maximal bicliques in multigraphs

Use by

oklib_load("OKlib/ComputerAlgebra/Graphs/Lisp/Bicliques/Consensus.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Bicliques/BasicNotions.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$


/* Checking whether B2 is a sub-biclique of B1: */
/* G is not needed, since we must assume that B1,B2 are vertex bicliques. */
bc_absorbs_bc_gl_p(B1,B2) := (subsetp(B2[1],B1[1]) and subsetp(B2[2],B1[2])) or (subsetp(B2[1],B1[2]) and subsetp(B2[2],B1[1]))$

/* Checking whether one of the four consensus-adjunction possibilities can be 
   performed: */
con_adj_gl_b1_1_b2_1_p(B1,B2,C) := (not disjointp(B1[1],B2[1])) and every_s(lambda([c],not bc_absorbs_bc_gl_p(c,[intersect(B1[1],B2[1]),union(B1[2],B2[2])])),C)$
con_adj_gl_b1_1_b2_2_p(B1,B2,C) := (not disjointp(B1[1],B2[2])) and every_s(lambda([c],not bc_absorbs_bc_gl_p(c,[intersect(B1[1],B2[2]),union(B1[2],B2[1])])),C)$
con_adj_gl_b1_2_b2_1_p(B1,B2,C) := (not disjointp(B1[2],B2[1])) and every_s(lambda([c],not bc_absorbs_bc_gl_p(c,[intersect(B1[2],B2[1]),union(B1[1],B2[2])])),C)$
con_adj_gl_b1_2_b2_2_p(B1,B2,C) := (not disjointp(B1[2],B2[2])) and every_s(lambda([c],not bc_absorbs_bc_gl_p(c,[intersect(B1[2],B2[2]),union(B1[1],B2[1])])),C)$

/* Checking whether the consensus on vertex bicliques B1, B2 can be performed
   and whether the obtained new biclique is not contained in one from S:
*/
con_adj_gl_p(B1,B2,C) := con_adj_gl_b1_1_b2_1_p(B1,B2,C) or con_adj_gl_b1_1_b2_1_p(B1,B2,C) or con_adj_gl_b1_1_b2_1_p(B1,B2,C) or con_adj_gl_b1_1_b2_1_p(B1,B2,C)$

/* Given a vertex biclique B in G, extend it (somehow) to a maximal biclique:
*/
/* Belongs to somewhere else. */
maximal_bc_gl(B,G) := if emptyp(G[2]) then B else
block(
  if B = [{},{}] then 
    B : [{first_element(first_element(G[2]))},
         {second_element(first_element(G[2]))}]
  elseif (not emptyp(B[1]) and emptyp(B[2])) then block(
   [restv : listify(setdifference(G[1],B[1]))],
    for i : 1 thru length(restv) do
      if subsetp(map(setify,cartesian_product(B[1],{restv[i]})),G[2]) then 
        B[2] : {restv[i]})
  elseif(emptyp(B[1]) and not emptyp(B[2])) then block(
   [restv2 : listify(setdifference(G[1],B[2]))],
    for i : 1 thru length(restv2) do
      if subsetp(map(setify,cartesian_product(B[2],{restv2[i]})),G[2]) then 
        B[1] : {restv2[i]}),
  /* Now established: B[1] and B[2] are not empty. */
  for v in setdifference(G[1],union(B[1],B[2])) do 
    if vbc_gl_p([adjoin(v,B[1]),B[2]],G) then
      B[1] : adjoin(v,B[1])
    else if vbc_gl_p([B[1],adjoin(v,B[2])],G) then
      B[2] : adjoin(v,B[2]),
  return(B))$



/* Performing the four variations of consensus-adjunction: */
con_adj_gl_b1_1_b2_1(B1,B2) := [intersect(B1[1],B2[1]),union(B1[2],B2[2])]$
con_adj_gl_b1_1_b2_2(B1,B2) := [intersect(B1[1],B2[2]),union(B1[2],B2[1])]$
con_adj_gl_b1_2_b2_1(B1,B2) := [intersect(B1[2],B2[1]),union(B1[1],B2[2])]$
con_adj_gl_b1_2_b2_2(B1,B2) := [intersect(B1[2],B2[2]),union(B1[1],B2[1])]$

/* Add 0-4 consensus adjunctions of bicliques B1,B2 to the list C of
   maximal bicliques: */
con_adj_gl_bc(B1,B2,C) := block([C2 : C],
  if con_adj_gl_b1_1_b2_1_p(B1,B2,C) = true then C2 : cons(con_adj_gl_b1_1_b2_1(B1,B2),C2),
  if C2 # C then return(C2),
  if con_adj_gl_b1_1_b2_2_p(B1,B2,C) = true then C2 : cons(con_adj_gl_b1_1_b2_2(B1,B2),C2),
  if C2 # C then return(C2),
  if con_adj_gl_b1_2_b2_1_p(B1,B2,C) = true then C2 : cons(con_adj_gl_b1_2_b2_1(B1,B2),C2),
  if C2 # C then return(C2),
  if con_adj_gl_b1_2_b2_2_p(B1,B2,C) = true then C2 : cons(con_adj_gl_b1_2_b2_2(B1,B2),C2),
  return(C2))$


/* Prerequisites: B1, B2 are bicliques of G, C is a list of maximal bicliques
   of G, G is a graph with loops.
   Output is C extended by the first consensus adjunction of B1, B2 possible,
   maximised w.r.t. G.
   Similar to con_adj_gl_bc, but maximises the consensus adjunctions before 
   adding it to the list.
*/
con_ext_gl_bc(B1,B2,C,G) :=  block([C2 : C],
  if con_adj_gl_b1_1_b2_1_p(B1,B2,C) then block([b11 : con_adj_gl_b1_1_b2_1(B1,B2)], C2 : cons(maximal_bc_gl(b11,G),C2)),
  if C2 # C then return(C2),
  if con_adj_gl_b1_1_b2_2_p(B1,B2,C) then block([b12 : con_adj_gl_b1_1_b2_2(B1,B2)], C2 : cons(maximal_bc_gl(b12,G),C2)),
  if C2 # C then return(C2),
  if con_adj_gl_b1_2_b2_1_p(B1,B2,C) then block([b21 : con_adj_gl_b1_2_b2_1(B1,B2)], C2 : cons(maximal_bc_gl(b21,G),C2)),
  if C2 # C then return(C2),
  if con_adj_gl_b1_2_b2_2_p(B1,B2,C) then block([b22 : con_adj_gl_b1_2_b2_2(B1,B2)], C2 : cons(maximal_bc_gl(b22,G),C2)),
  return(C2))$

/* G is a graph with loops, C a list of vertex bicliques, 
   removes vertex bicliques which are contained in others:
*/
/* Belongs to somewhere else */
aux_con_alg1_abs(C) := block([anyabs : false, absi],
  for i : 1 thru length(C) do
    for j : 1 thru i-1 do block(
      if bc_absorbs_bc_gl_p(C[j],C[i]) then block(anyabs : true, absn : i),
      if anyabs then return,
      if bc_absorbs_bc_gl_p(C[i],C[j]) then block(anyabs : true, absn : j), 
      if anyabs then return),
    if anyabs then return(delete(C[absn],C,1)),
  return(C))$


/* G is a graph with loops, C a list of vertex bicliques,
   extends C by one consensus adjunction if possible:
*/
aux_con_alg1_con(C) := block([C2 : C, C2eqC : false],
  for i : 1 while (i <=  length(C) and C2eqC = false) do 
    for j : 1 while (j <= i-1 and C2eqC = false) do block(
      C2 : con_adj_gl_bc(C[i],C[j],C),
      C2eqC : is(C2 # C)),
  return(C2))$

/* Variation of aux_con_alg1_con XXX */
aux_con_alg2_ext(C,G) := block([C2 : C, C2eqC : false],
  for i : 1 while (i <= length(C) and C2eqC = false) do
    for j : 1 while (j <= i-1 and C2eqC = false) do block(
      C2 : con_ext_gl_bc(C[i],C[j],C,G),
      C2eqC : is(C2 # C)),
  return(C2))$

/* G is a graph with loops, C a list of vertex bicliques covering all edges;
   returning the list of all maximal vertex bicliques, using "algorithm 1"
   from the underlying paper:
*/
con_alg1(C,G) := block([C1 : C, C2 : C, reiterate : true],
  for i : 1 while (reiterate = true) do block(
    reiterate : false,
    C1 : C2,
    C2 : aux_con_alg1_abs(C1),
    if C2 # C1 then reiterate : true else block(
      C2 : aux_con_alg1_con(C1),
      if C2 # C1 then reiterate : true)
  ), 
  return(C2))$

/* G is a graph with loops, C a list of maximal vertex bicliques covering all
   edges; returning the list of all maximal vertex bicliques, using
   "algorithm 2" from the underlying paper:
*/
con_alg2(C,G) := block([C1 : C, C2 : C, reiterate : true],
  for i : 1 while reiterate do block(
    C1 : C2, 
    C2 : aux_con_alg2_ext(C1,G),
    reiterate : is(C1 # C2)
  ), 
  return(C2))$	

/*!
\endhtmlonly
*/

	
