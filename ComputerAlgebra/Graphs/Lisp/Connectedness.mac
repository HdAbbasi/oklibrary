/* Oliver Kullmann, 27.11.2011 (Swansea) */
/* Copyright 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Graphs/Lisp/Connectedness.mac
  \brief Functions regarding connectness in graphs

Use by

oklib_load("OKlib/ComputerAlgebra/Graphs/Lisp/Connectedness.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Basic.mac")$

/*
  For tests regarding connectedness see connected_g_p and sconnected_dg_p
  (plus variations) in ComputerAlgebra/Graphs/Lisp/Basic.mac.
*/

/* Connected components of a graph: */
concom_g(G) := block([mg : g2mg(G)], setify(map(setify,
 map(lambda([C], map(lambda([v], get_vertex_label(v,mg)), C)), 
     connected_components(mg)))))$

/* The set of all paths from a to b in digraph G, representing the paths
   as arc-sets (without repetated vertices):
*/
allpaths_dg(G,a,b) := if a=b then {{}} else
 block([N : subset(second(G), lambda([e], is(first(e)=a))), NG],
  NG : [disjoin(a, first(G)), setdifference(second(G), N)],
  lunion(create_list([a,x]+allpaths_dg(NG,x,b), x,listify(map(second,N)))))$

/* The set of all cycles in digraph G, as arc-sets: */
allcycles_dg(G) := 0$

/*!
\endhtmlonly
*/
