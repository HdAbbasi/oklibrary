/* Matthew Gwynne, 21.7.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Graphs/Lisp/Statistics.mac
  \brief Graph Statistics

Use by

oklib_load("Transitional/ComputerAlgebra/Graphs/Lisp/Statistics.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$

/* ******************
   * Vertex degrees *
   ******************
*/

/* The vertex-degrees of a graph, as hash-map, considering
   all vertices. */
vertex_degrees_g(G) := block([h : sm2hm({})],
 for E in G[2] do
  for v in E do enter_new_occurrence(h,v),
 for v in G[1] do if ev_hm(h,v) = false then set_hm(h,v,0),
 return(h))$

/* The vertex-degrees of an ordered-graph, as hash-map, considering
   all vertices. */
vertex_degrees_og(G) := block([h : sm2hm({})],
 for E in G[2] do
  for v in E do enter_new_occurrence(h,v),
 for v in G[1] do if ev_hm(h,v) = false then set_hm(h,v,0),
 return(h))$

/* The hashmap of vertex degree, frequency pairs for a graph */
vertex_degree_frequencies_g(G) := block(
  [degrees : hm2sm(vertex_degrees_g(G)), deg_freq : sm2hm({})],
  for vd in degrees do
    enter_new_occurrence(deg_freq, vd[2]),
  return(deg_freq))$

/* Returns the vertex of minimum degree, occurring earliest in the ordered
   vertex list, of the given ordered graph. +inf is returned given the graph
   with empty vertex set. */
min_degree_vertex_og(G) := block([vd : vertex_degrees_og(G)],
  if G[1] = [] then +inf else 
    xreduce(lambda([a,b], 
      if ev_hm(vd,a) <= ev_hm(vd,b) then a else b), G[1]))$

/*!
\endhtmlonly
*/
