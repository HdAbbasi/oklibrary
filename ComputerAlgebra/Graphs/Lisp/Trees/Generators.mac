/* Oliver Kullmann, 15.7.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Graphs/Lisp/Trees/Generators.mac
  \brief Tree generators

Use by

oklib_load("OKlib/ComputerAlgebra/Graphs/Lisp/Trees/Generators.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Trees/Representations.mac")$


/* **********************
   * Some special trees *
   **********************
*/

/* pathgraph_og(n) creates a path of length n
   (in ComputerAlgebra/Graphs/Lisp/Generators.mac).
*/
/* For a list-permutation of length n the corresponding path graph
   (with standardised vertex-set {1,...,n}: */
path_p_og(P) := block([n : length(P)],
 [create_list(i,i,1,n), 
  create_list({P[i],P[i+1]},i,1,n-1)])$
/* pathgraph_og(n) = path_p_og(create_list(i,i,1,n)) */

/* The star with vertex set V and centre r: */
star_V_g(V,r) := map(lambda([v],{r,v}), disjoin(r,V))$
/* The special case with standardised vertex set {1,...,n}: */
star_g(n,r) := star_V_g(setn(n),r)$


/* ****************
   * Random trees *
   ****************
*/

/* Creating a random (rooted) tree according to "process 1":
 - Choose a random vertex u from the vertices not yet in the
   tree.
 - Choose a random vertex v in the current tree.
 - Add edge {u,v}.

   The vertex set is standardised, and the root is vertex 1.
*/
/* Replaces the Maxima/graphs function random_tree (which does
   not use random(), and thus is not reproducible for us). */
/* Prerequisite: n >= 1. */
randomtree_pr1_og(n) := block(
 [V : create_list(i,i,2,n), R],
  R : random_permutation(V),
  V : cons(1,V), R : cons(1,R),
  [V, map(lambda([u,i],block([v:random_element_ab(1,i,R)],{u,v})),
          rest(R), rest(V,-1))])$

/* Creating a standardised random tree, drawn from the uniform distribution.
   Remark: As with randomtree_pr1_og, the output is ordered, but w.r.t.
   randomness (unordered) trees have to be considered.
*/
/* Prerequisite: n >= 1. */
uniform_randomtree_og(n) := 
  pruefercode2tree_og(create_list(i,i,1,n), create_list(random(n)+1,i,1,n-2))$

/*!
\endhtmlonly
*/
