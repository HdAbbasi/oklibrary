/* Matthew Gwynne, 21.7.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Graphs/Lisp/Trees/Representations.mac
  \brief Creating and using tree representations

Use by

oklib_load("Transitional/ComputerAlgebra/Graphs/Lisp/Trees/Representations.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Graphs/Lisp/Statistics.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$


/* *****************
   * Pruefer Codes *
   *****************
*/

/* For a given vertex set V of size n >= 1, the "Pruefer code" establishes a
   bijection from the set of all trees with vertex set V to the set of
   all lists of length max(0,n-2) over V.
*/

/* The Pruefer code for a tree (as an ordered graph): */
tree2pruefercode_og(T) := if length(T[1]) <= 2 then [] else
 block([x : min_vertex_degree_v_og(T)[2], y],
   y : single_element(disjoin(x, 
      for e in T[2] do if elementp(x,e) then return(e))),
   return(cons(y, 
      tree2pruefercode_og([delete(x,T[1]),delete({x,y},T[2])]) )))$

/* Given a vertex list and a Pruefer code (as a list of elements from the
   vertex set), compute the tree (as an ordered graph) represented by
   the given Pruefer code: */
pruefercode2tree_og(V,pc) := 
  if pc = [] then (if length(V) = 2 then [V,[setify(V)]] else [V,[]])
  else block([x : for v in V do if not member(v,pc) then return(v)],
    return([V,cons({x,first(pc)}, 
                pruefercode2tree_og(delete(x,V),rest(pc))[2])]))$

/* Remark: For a tree T (given as og) let 
   T' : pruefercode2tree_og(T[1],tree2pruefercode_og(T)).
   Then T[1] = T'[1], and setify(T[2]) = setify(T'[2]).
*/


/*!
\endhtmlonly
*/
