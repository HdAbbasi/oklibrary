/* Matthew Gwynne, 21.7.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Graphs/Lisp/Trees/Representations.mac
  \brief Tree representations

Use by

oklib_load("Transitional/ComputerAlgebra/Graphs/Lisp/Trees/Representations.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Graphs/Lisp/Statistics.mac")$

/* ****************
   * Prufer Codes *
   ****************
*/

/* The prufer code for a tree, given as an ordered graph, where
   the ordering on the vertices (used to determine the code) is given by the
   ordering of the vertex list. */
tree2prufer_code_og(t) := if length(t[2]) < 2 then [] else
  block([x_n : min_degree_vertex_og(t),y_n, e],
      y_n : first(disjoin(x_n, 
      for e in t[2] do if elementp(x_n,e) then return(e))),
    return(cons(y_n, 
      tree2prufer_code_og([delete(x_n,t[1]),delete({x_n,y_n},t[2])]) )))$

/* Given the vertex list, and the prufer code (as a list of elements from the
   vertex set), reconstructs the tree (as an ordered graph) represented by
   the given prufer code. */
/* MG : The ordering of the edge list may not be the same as the tree used to
   generate the prufer code as the prufer code only stores the order it removes
   the edges, not that they occurred originally in the ordered edge list. 
   Is this an issue? */
prufer_code2tree_og(v,p) := 
  if p = [] then (if length(v) = 2 then [v,[setify(v)]] else [v,[]])
  /*else block([x_n : first(setdifference(v,setify(p)))],*/
  else block([x_n : for x in v do if not member(x,p) then return(x)],
    return([v,cons({x_n,first(p)}, 
      prufer_code2tree_og(delete(x_n,v),rest(p))[2])])
  )$


/*!
\endhtmlonly
*/
