/* Oliver Kullmann, 23.5.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Graphs/Lisp/BicliquePartitions/BasicNotions.mac
  \brief Functions regarding biclique partitions in multigraphs

Use by

oklib_load("OKlib/ComputerAlgebra/Graphs/Lisp/BicliquePartitions/BasicNotions.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Basic.mac")$
oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Bicliques/BasicNotions.mac")$


/* ***********************
   * Fundamental notions *
   ***********************
*/

ebcp_gg_p(B,G) := setp(B) and partitionp(B,G[2]) and every(lambda([b],ebc_gg_p(b,G)),B)$

/* To be completed:
vbcp_gg_p := 
*/

/* G is a graph with loops, and returned is a biclique partition composed purely of maximal bicliques 
*/

greedy_bcp_gl(G) := block([B, newMB, listB : [], restE : G[2], restG : G],
  while not(emptyp(restE)) do block(
    B : [{first_element(first_element(restG[2]))},{second_element(first_element(restG[2]))}],
    newMB : maximal_bc_gl(B,restG),
    listB : endcons(newMB,listB),
    restE : setdifference(restE,map(setify,cartesian_product(newMB[1],newMB[2]))),
    restG : [flatten(restE),restE]
  ),
  return(listB))$

/*!
\endhtmlonly
*/
