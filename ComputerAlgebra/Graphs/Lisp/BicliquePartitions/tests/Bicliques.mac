/* Oliver Kullmann, 11.7.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Graphs/Lisp/BicliquePartitions/tests/Bicliques.mac
  \brief Tests for biclique-notions

Use by

oklib_load("Transitional/ComputerAlgebra/Graphs/Lisp/BicliquePartitions/tests/Bicliques.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("Transitional/ComputerAlgebra/Graphs/Lisp/Basic.mac")$

kill(f)$


/* ***********************
   * Fundamental notions *
   ***********************
*/

okltest_vbc_gl_p(f) := block([G],
  assert(f(0,G) = false),
  assert(f([],G) = false),
  assert(f([0,0],G) = false),
  assert(f([{1},{1}], G) = false),
  assert(f([{},{}], [{},{}]) = true),
  assert(f([{1},{}], [{},{}]) = false),
  assert(f([{1},{}], [{1},{}]) = true),
  assert(f([{},{1,2}], [{1,2,3},{{1,2}}]) = true),
  assert(f([{1,2},{3,4}], [{1,2,3,4},{{1,3},{1,4},{2,3},{2,4}}]) = true),
  assert(f([{1,2},{3,4}], [{1,2,3,4},{{1,3},{1,4},{2,3},{2,4},{1}}]) = true),
  assert(f([{1,2},{3,4}], [{1,2,3,4},{{1,3},{1,4},{2,3},{3,4}}]) = false),
  true)$

okltest_vbc_mugl_p(f) := block([G],
  assert(f(0,G) = false),
  assert(f([],G) = false),
  assert(f([0,0],G) = false),
  assert(f([{1},{1}], G) = false),
  assert(f([{},{}], [{},{},lambda([e],2)]) = true),
  assert(f([{1},{}], [{},{},lambda([e],2)]) = false),
  assert(f([{1},{}], [{1},{},lambda([e],2)]) = true),
  assert(f([{},{1,2}], [{1,2,3},{{1,2}},lambda([e],2)]) = true),
  assert(f([{1,2},{3,4}], [{1,2,3,4},{{1,3},{1,4},{2,3},{2,4}},lambda([e],2)]) = true),
  assert(f([{1,2},{3,4}], [{1,2,3,4},{{1,3},{1,4},{2,3},{2,4},{1}},lambda([e],2)]) = true),
  assert(f([{1,2},{3,4}], [{1,2,3,4},{{1,3},{1,4},{2,3},{3,4}},lambda([e],2)]) = false),
  assert(okltest_vbc_gl_p(buildq([f],lambda([B,G],gl_p(G) and f(B,gl2mugl(G)))))),
  true)$

okltest_vbc_gg_p(f) := block([G,edgef],
  assert(f(0,G) = false),
  assert(f([],G) = false),
  assert(f([0,0],G) = false),
  assert(f([{1},{1}], G) = false),
  assert(f([{},{}], [{},{},edgef]) = true),
  assert(f([{1},{}], [{},{},edgef]) = false),
  assert(f([{1},{}], [{1},{},edgef]) = true),
  assert(f([{},{1,2}], [{1,2,3},{1},lambda([e],{1,2})]) = true),
  assert(f([{1,2},{3}], [{1,2,3,4},{1,2,3},lambda([e],if e=1 then {1,2} elseif e=2 then {1,3} else {2,3})]) = true),
  assert(f([{1},{3,4}], [{1,2,3,4},{[1,3],[1,4],[1,1],[3,3]},lambda([e],setify(e))]) = true),
  assert(f([{1,2},{3}], [{1,2,3},{{1,2},{1,3},{3}},identity]) = false),
  assert(okltest_vbc_gl_p(buildq([f],lambda([B,G],gl_p(G) and f(B,gl2gg(G)))))),
  true)$

okltest_vbc_dgl_p(f) := block([G],
  assert(f(0,G) = false),
  assert(f([],G) = false),
  assert(f([0,0],G) = false),
  assert(f([{1},{1}], G) = false),
  assert(f([{},{}], [{},{}]) = true),
  assert(f([{1},{}], [{},{}]) = false),
  assert(f([{1},{}], [{1},{}]) = true),
  assert(f([{},{1,2}], [{1,2,3},{[2,1]}]) = true),
  assert(f([{1,2},{3,4}], [{1,2,3,4},{[1,3],[1,4],[2,3],[2,4]}]) = true),
  assert(f([{1,2},{3,4}], [{1,2,3,4},{[3,1],[4,1],[3,2],[4,2],[1,1]}]) = false),
  assert(f([{3,4},{1,2}], [{1,2,3,4},{[3,1],[4,1],[3,2],[4,2],[1,1]}]) = true),
  assert(f([{1,2},{3,4}], [{1,2,3,4},{[1,3],[1,4],[2,3],[3,4]}]) = false),
  assert(okltest_vbc_gl_p(buildq([f],lambda([B,G],gl_p(G) and f(B,gl2dgl(G)))))),
  true)$

okltest_ebc_gg_p(f) := (

  true)$

/*!
\endhtmlonly
*/
