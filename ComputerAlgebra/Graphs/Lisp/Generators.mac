/* Oliver Kullmann, 24.11.2007 (Swansea) */
/* Copyright 2007 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Graphs/Lisp/Generators.mac
  \brief Maxima graph generators

Use by

load("$OKPLATFORM/OKsystem/Transitional/ComputerAlgebra/Graphs/Lisp/Generators.mac");

where $OKPLATFORM has to be replaced by the path to the OKplatform directory.

Needs

 - ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac.

*/

/*!
\htmlonly
*/

/* ********************************
   * Connections to Maxima-graphs *
   ********************************
*/

load(graphs)$

/* Graphs to Maxima-graphs (vertex names yield vertex labels) */
g2mg(G) := block(
 [V : listify(G[1]), E : listify(G[2]), h : hash_table(), n : length(G[1])],
 for i : 1 thru n do set_hash(V[i], h, i),
 create_graph(makelist([i,V[i]],i,1,length(V)), 
   makelist([get_hash(listify(e)[1],h), get_hash(listify(e)[2],h)], e, E)
 )
)$

/* Maxima-graphs to graphs (ignoring the vertex labels) */
mg2g(g) := [setify(vertices(g)), fullsetify(edges(g))]$


/* ***************************************
   * Kneser graphs                       *
   ***************************************
*/

/* Kneser-graphs: Vertices are the m-element subets of {1,..,n}, joined by an
   edge if disjoint. */
Kneser_graph(n,m) := block([sn : setn(n)],
 [powerset(sn, m), 
    map(setify, 
      xreduce(union, 
        makelist(cartesian_product({A}, powerset(setdifference(sn, A), m)), 
                 A, listify(powerset(sn, m))
      )
     )   
    )
 ]
)$

/*!
\endhtmlonly
*/
