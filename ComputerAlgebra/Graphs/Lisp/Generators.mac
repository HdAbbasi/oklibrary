/* Oliver Kullmann, 24.11.2007 (Swansea) */
/* Copyright 2007, 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Graphs/Lisp/Generators.mac
  \brief Maxima graph generators

Use by

oklib_load("OKlib/ComputerAlgebra/Graphs/Lisp/Generators.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$

/* *******************
   * Complete graphs *
   *******************
*/

/* The complete graph for vertex set V: */
complete_g(V) := [V, powerset(V,2)]$
complete_stdg(n) := complete_g(setn(n))$


/* ********************
   * Paths and cycles *
   ********************
*/

/* The (standardised, ordered) path graph with n vertices: */
/* Prerequisite: n >= 1: */
pathgraph_og(n) := [create_list(i,i,1,n), create_list({i,i+1},i,1,n-1)]$
pathgraph_g(n) := og2g(pathgraph_og(n))$
/* The (standardised, ordered) cycle graph with loops with n vertices: */
/* Prerequisite: n <> 0, 2: */
cyclegraph_ogl(n) := [create_list(i,i,1,n),endcons({n,1},
  create_list({i,i+1},i,1,n-1))]$
/* Remark: cyclegraph_ogl is irreflexiv iff n >= 3. */
/* Now allowing also the case n = 2: */
/* Prerequisite: n >= 1: */
cyclegraph_ogg(n) := [create_list(i,i,1,n), create_list(i,i,1,n),
  buildq([n],lambda([e],if e=n then {n,1} else {e,e+1}))]$
cyclegraph_gg(n) := ogg2gg(cyclegraph_ogg(n))$


/* **********
   * Dipols *
   **********
*/

/* The (standardised) general graph with two vertices and n parallel edges 
   between them: */
dipole_ogg(n) := [[1,2], create_list(i,i,1,n), lambda([e],{1,2})]$
dipole_gg(n) := ogg2gg(dipole_ogg(n))$

/* With directed edges, directed from 1 to 2: */
dipole_ogdg(n) := [[1,2], create_list(i,i,1,n), lambda([e],[1,2])]$
dipole_gdg(n) := ogdg2gdg(dipole_ogdg(n))$

/* ************
   * Bouquets *
   ************
*/

/* The (standardised) general graph with one vertex and n edges: */
bouquet_ogg(n) := [[1], create_list(i,i,1,n), lambda([e],{1})]$
bouquet_gg(n) := ogg2gg(bouquet_ogg(n))$


/* *****************
   * Kneser graphs *
   *****************
*/

/* Kneser-graphs: Vertices are the m-element subsets of {1,..,n}, joined by an
   edge if disjoint. Prerequisites: n >= m >= 1 */
kneser_g(n,m) := block([sn : setn(n)],
 [powerset(sn, m), 
    map(setify, 
      lunion( 
        create_list(cartesian_product({A}, powerset(setdifference(sn, A), m)), 
                 A, listify(powerset(sn, m)))))])$

/*!
\endhtmlonly
*/
