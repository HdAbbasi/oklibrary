/* Oliver Kullmann, 30.4.2008 (Guangzhou) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Graphs/Lisp/tests/Basic.mac
  \brief Tests for basic graph functionality

Use by

oklib_load("Transitional/ComputerAlgebra/Graphs/Lisp/tests/Basic.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("Transitional/ComputerAlgebra/Graphs/Lisp/Basic.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac")$

kill(f)$

/* ********************************
   * Connections to Maxima-graphs *
   ********************************
*/

okltest_g2mg(f) := block(
  block([G : f([{},{}])],
    assert(is_graph(G) = true),
    assert(setify(vertices(G)) = {}),
    assert(setify(edges(G)) = {})
  ),
  block([G : f([{1},{}])],
    assert(is_graph(G) = true),
    assert(setify(vertices(G)) = {1}),
    assert(setify(edges(G)) = {}),
    assert(get_vertex_label(1,G) = 1)
  ),
  block([G : f([{2},{}])],
    assert(is_graph(G) = true),
    assert(setify(vertices(G)) = {1}),
    assert(setify(edges(G)) = {}),
    assert(get_vertex_label(1,G) = 2)
  ),
  block([G : f([{1,2},{{1,2}}])],
    assert(is_graph(G) = true),
    assert(setify(vertices(G)) = {1,2}),
    assert(setify(edges(G)) = {[1,2]}),
    assert(get_vertex_label(1,G) = 1),
    assert(get_vertex_label(2,G) = 2)
  ),
  block([G : f([{2,4},{{2,4}}])],
    assert(is_graph(G) = true),
    assert(setify(vertices(G)) = {1,2}),
    assert(setify(edges(G)) = {[1,2]}),
    assert(get_vertex_label(1,G) = 2),
    assert(get_vertex_label(2,G) = 4)
  ),
  block([G : f([{1,2,3},{{1,2},{2,3},{3,1}}])],
    assert(is_graph(G) = true),
    assert(setify(vertices(G)) = {1,2,3}),
    assert(setify(edges(G)) = {[1,2],[2,3],[1,3]}),
    assert(get_vertex_label(1,G) = 1),
    assert(get_vertex_label(2,G) = 2),
    assert(get_vertex_label(3,G) = 3)
  ),
  block([G : f([{1,[1,-1],[1,1]},{{1,[1,-1]},{1,[1,1]}}])],
    assert(is_graph(G) = true),
    assert(setify(vertices(G)) = {1,2,3}),
    assert(setify(edges(G)) = {[1,2],[1,3]}),
    assert(get_vertex_label(1,G) = 1),
    assert(get_vertex_label(2,G) = [1,-1]),
    assert(get_vertex_label(3,G) = [1,1])
  ),
  true)$

okltest_dg2mdg(f) := block(
  block([G : f([{},{}])],
    assert(is_digraph(G) = true),
    assert(setify(vertices(G)) = {}),
    assert(setify(edges(G)) = {})
  ),
  block([G : f([{1},{}])],
    assert(is_digraph(G) = true),
    assert(setify(vertices(G)) = {1}),
    assert(setify(edges(G)) = {}),
    assert(get_vertex_label(1,G) = 1)
  ),
  block([G : f([{2},{}])],
    assert(is_digraph(G) = true),
    assert(setify(vertices(G)) = {1}),
    assert(setify(edges(G)) = {}),
    assert(get_vertex_label(1,G) = 2)
  ),
  block([G : f([{1,2},{[1,2]}])],
    assert(is_digraph(G) = true),
    assert(setify(vertices(G)) = {1,2}),
    assert(setify(edges(G)) = {[1,2]}),
    assert(get_vertex_label(1,G) = 1),
    assert(get_vertex_label(2,G) = 2)
  ),
  block([G : f([{2,4},{[2,4]}])],
    assert(is_digraph(G) = true),
    assert(setify(vertices(G)) = {1,2}),
    assert(setify(edges(G)) = {[1,2]}),
    assert(get_vertex_label(1,G) = 2),
    assert(get_vertex_label(2,G) = 4)
  ),
  block([G : f([{1,2},{[1,2],[2,1]}])],
    assert(is_digraph(G) = true),
    assert(setify(vertices(G)) = {1,2}),
    assert(setify(edges(G)) = {[1,2],[2,1]}),
    assert(get_vertex_label(1,G) = 1),
    assert(get_vertex_label(2,G) = 2)
  ),
  block([G : f([{1,2,3},{[1,2],[2,3],[3,1]}])],
    assert(is_digraph(G) = true),
    assert(setify(vertices(G)) = {1,2,3}),
    assert(setify(edges(G)) = {[1,2],[2,3],[3,1]}),
    assert(get_vertex_label(1,G) = 1),
    assert(get_vertex_label(2,G) = 2),
    assert(get_vertex_label(3,G) = 3)
  ),
  block([G : f([{1,[1,-1],[1,1]},{[1,[1,-1]],[1,[1,1]]}])],
    assert(is_digraph(G) = true),
    assert(setify(vertices(G)) = {1,2,3}),
    assert(setify(edges(G)) = {[1,2],[1,3]}),
    assert(get_vertex_label(1,G) = 1),
    assert(get_vertex_label(2,G) = [1,-1]),
    assert(get_vertex_label(3,G) = [1,1])
  ),
  block([G : f(var_lit_clause_digraph([{1},{}]))],
    assert(is_digraph(G) = true)
  ),
  true);



/*!
\endhtmlonly
*/
