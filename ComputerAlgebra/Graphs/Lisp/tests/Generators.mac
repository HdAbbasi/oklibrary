/* Oliver Kullmann, 24.6.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Graphs/Lisp/tests/Generators.mac
  \brief Tests for basic graph functionality

Use by

oklib_load("OKlib/ComputerAlgebra/Graphs/Lisp/tests/Generators.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Basic.mac")$
oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$

kill(f)$

/* *******************
   * Complete graphs *
   *******************
*/

okltest_complete_g(f) := (
  assert(f({}) = [{},{}]),
  assert(f({1}) = [{1},{}]),
  assert(f({3}) = [{3},{}]),
  assert(f({1,2}) = [{1,2},{{1,2}}]),
  for n : 0 thru 5 do block([G : f(setn(n))],
    assert(g_p(G)=true),
    assert(G[1] = setn(n)),
    assert(length(G[2]) = binom(n,2))),
  assert(okltest_complete_stdg(buildq([f],lambda([n],f(setn(n)))))),
  true)$

okltest_complete_stdg(f) := (
  assert(f(0) = [{},{}]),
  assert(f(1) = [{1},{}]),
  assert(f(2) = [{1,2},{{1,2}}]),
  assert(f(3) = [{1,2,3},{{1,2},{1,3},{2,3}}]),
  true)$


/* ********************
   * Paths and cycles *
   ********************
*/

okltest_pathgraph_og(f) := (
  assert(f(1) = [[1],[]]),
  assert(f(2) = [[1,2],[{1,2}]]),
  assert(f(3) = [[1,2,3],[{1,2},{2,3}]]),
  true)$

okltest_cyclegraph_ogl(f) := (
  assert(f(1) = [[1],[{1}]]),
  assert(f(3) = [[1,2,3],[{1,2},{2,3},{3,1}]]),
  true)$

okltest_cyclegraph_ogg(f) := (
  for n in cons(1,create_list(i,i,3,6)) do block([G : f(n)],
    assert(ogg_p(G) = true),
    assert(ogg2ogl(G) = cyclegraph_ogl(n))),
  assert(gr_equalp(f(2), [[1,2],[1,2],lambda([e],{1,2})]) = true),
  true)$


/* **********
   * Dipols *
   **********
*/

okltest_dipole_ogg(f) := (
  for n : 0 thru 3 do block([G : f(n)],
    assert(ogg_p(G) = true),
    assert(length(G[1]) = 2),
    assert(length(G[2]) = n),
    for e in G[2] do
      assert(G[3](e) = {1,2})
  ),
  true)$

/* ************
   * Bouquets *
   ************
*/

okltest_bouquet_ogg(f) := (
  for n : 0 thru 3 do block([G : f(n)],
    assert(ogg_p(G) = true),
    assert(length(G[1]) = 1),
    assert(length(G[2]) = n),
    for e in G[2] do
      assert(G[3](e) = {1})
  ),
  true)$


/* *****************
   * Kneser graphs *
   *****************
*/

okltest_kneser_g(f) := (
  assert(f(1,1) = [{{1}},{}]),
  assert(f(2,1) = [{{1},{2}},{{{1},{2}}}]),
  assert(f(2,2) = [{{1,2}},{}]),
  assert(f(3,1) = [{{1},{2},{3}}, {{{1},{2}},{{1},{3}},{{2},{3}}}]),
  assert(f(3,2) = [{{1,2},{1,3},{2,3}},{}]),
  assert(f(3,3) = [{{1,2,3}},{}]),
  assert(is_isomorphic(g2mg(f(5,2)), petersen_graph()) = true),
  true)$

/* ***************************
   * Ramsey counter examples *
   ***************************
*/

okltest_ramsey_counterex_graph(f) := block(
  for n : 0 thru 5 do
    assert(f(n,{}) = [setn(n),{}]),
  assert(f(2,{-1}) = [{1,2}, {{1,2}}]),
  assert(f(2,{1}) = [{1,2}, {}]),
  assert(f(3,{1,2,-3}) = [{1,2,3}, {{2,3}}]),
  assert(f(3,{1,-2,-3}) = [{1,2,3}, {{1,3},{2,3}}]),
  true)$


/*!
\endhtmlonly
*/
