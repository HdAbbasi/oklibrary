/* Oliver Kullmann, 5.1.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Graphs/Lisp/Basic.mac
  \brief Basic graph functionality

Use by

oklib_load("Transitional/ComputerAlgebra/Graphs/Lisp/Basic.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$


/* **************************
   * Basic graph operations *
   **************************
*/

/* A "graph" is just a 2-element list, consisting of the set of
   vertices, and a set of 2-element vertex sets.
   A "graph with loops" also allows 1-element vertex sets.
*/

/* A "digraph" is a 2-element list, consisting of the set of vertices,
   and a set of 2-element vertex lists with different elements.
   A "digrap with loops" also allows the elements to be identical.
*/

/* The set of neighbours of vertex v in graph G */
neighbours(v,G) := disjoin(v, list_sets_union(
 subset(G[2], lambda([e],elementp(v,e)))))$

/* Removes vertex set V from graph G (with loops) */
remove_vertices_graph(V,G) := [setdifference(G[1],V),
 subset(G[2], lambda([e], disjointp(e,V)))]$


/* *****************************
   * Basic graph constructions *
   *****************************
*/

/* The complement graph of a graph */
comp_graph(G) := [G[1], setdifference(powerset(G[1],2),G[2])]$


/* **********
   * Tests  *
   **********
*/

/* Tests whether a graph is complete */
completegrp(G) := block([n : length(G[1]), m : length(G[2])],
  is(binom(n,2) = m))$


/* ********************************
   * Connections to Maxima-graphs *
   ********************************
*/

load(graphs)$

/* Graphs to Maxima-graphs (vertex names yield vertex labels).
   The vertices in the Maxima-graph are numbered starting with 1.
   Edges in the Maxima-graph, which are ordered, are ordered according
   to orderlessp (this is the order imposed on the vertex set).
*/
g2mg(G) := block(
 [V : listify(G[1]), E : listify(G[2]), h : sm2hm({}), n : length(G[1])],
 for i : 1 thru n do set_hm(h, V[i], i),
 create_graph(makelist([i,V[i]],i,1,n), 
   makelist([ev_hm(h,listify(e)[1]), ev_hm(h,listify(e)[2])], e, E)
 )
)$

/* Maxima-graphs to graphs (ignoring the vertex labels) */
mg2g(g) := [setify(vertices(g)), fullsetify(edges(g))]$


/* Digraphs to Maxima-digraphs (vertex names yield vertex labels).
   The vertices in the Maxima-digraph are numbered starting with 1. */
dg2mdg(G) := block(
 [V : listify(G[1]), E : listify(G[2]), h : sm2hm({}), n : length(G[1])],
 for i : 1 thru n do set_hm(h, V[i], i),
 return(
   create_graph(
     makelist([i,V[i]],i,1,n), 
     makelist([ev_hm(h,e[1]), ev_hm(h,e[2])], e, E),
     true
 ))
)$



/*!
\endhtmlonly
*/
