/* Oliver Kullmann, 5.1.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Graphs/Lisp/Basic.mac
  \brief Basic graph functionality

Use by

oklib_load("Transitional/ComputerAlgebra/Graphs/Lisp/Basic.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$

/* A "graph" is just a 2-element list, consisting of the set of
   vertices, and a set of 2-element vertex sets.
   A "graph with loops" also allows 1-element vertex sets.
*/

/* The set of neighbours of vertex v in graph G */
neighbours(v,G) := disjoin(v, list_sets_union(
 subset(G[2], lambda([e],elementp(v,e)))))$

/* Removes vertex set V from graph G (with loops) */
remove_vertices_graph(V,G) := [setdifference(G[1],V),
 subset(G[2], lambda([e], disjointp(e,V)))]$


/* **********
   * Tests  *
   **********
*/

/* Tests whether a graph is complete */
completegrp(G) := block([n : length(G[1]), m : length(G[2])],
  is(binom(n,2) = m))$


/* ********************************
   * Connections to Maxima-graphs *
   ********************************
*/

load(graphs)$

/* Graphs to Maxima-graphs (vertex names yield vertex labels) */
g2mg(G) := block(
 [V : listify(G[1]), E : listify(G[2]), h : hash_table(), n : length(G[1])],
 for i : 1 thru n do set_hash(V[i], h, i),
 create_graph(makelist([i,V[i]],i,1,length(V)), 
   makelist([get_hash(listify(e)[1],h), get_hash(listify(e)[2],h)], e, E)
 )
)$

/* Maxima-graphs to graphs (ignoring the vertex labels) */
mg2g(g) := [setify(vertices(g)), fullsetify(edges(g))]$

/*!
\endhtmlonly
*/
