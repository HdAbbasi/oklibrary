/* Matthew Gwynne, 6.9.2007 (Swansea) */
/* Copyright 2007, 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/AdvancedEncryptionStandard.mac
  \brief Implementing AES (Rijndael) and generalisations

Use by

oklib_load("Transitional/ComputerAlgebra/Cryptology/Lisp/AdvancedEncryptionStandard.mac");

*/

/*!
\htmlonly
*/

load(gf)$

/* ***************************************
   * Constants                           *
   ***************************************
*/

/*
   3-tuple used to represent a field with the egf functions representing the 
   bit field or field of integers modulo 2. Of the form [p, n, ip] where "p"
   is the prime characteristic of the field, "n" is the power to which "p" is 
   raised, and "ip" the polynomial irreducible over GF(p) such that a field
   GF(p^n) is defined with operations being performed on polynomials over 
   GF(p) modulo ip.
*/
rijndael_bit_field : [2,1,[x]]$

/*
   Polynomial irreducible over GF(2) used as the modulus in Rijndael to define 
   a GF(2^8) field (all operations are performed on polynomials over GF(2) 
   modulo this irreducible polynomial.
*/
rijndael_polynomial : x^8+x^4+x^3+x+1$

/*
   3-tuple used to represent a field with the egf functions representing the 
   Rijndael byte field. Of the form [p, n, ip] where "p"
   is the prime characteristic of the field, "n" is the power to which "p" is 
   raised, and "ip" the polynomial irreducible over GF(p) such that a field
   GF(p^n) is defined with operations being performed on polynomials over 
   GF(p) modulo ip.
*/
rijndael_byte_field : [2,8,rijndael_polynomial]$


/* ***************************************
   * Helper Functions                    *
   ***************************************
*/
/* REMARK : We shouldn't have a section with "useless stuff":
Auxiliary functions either directly accompany their main user, or are
not just "helper functions". */

/* 
   Returns a vector (column matrix) of size n of the coefficients of the given
   polynomial, with the top value in the vector being the coefficient for the
   highest order term (with order < n).
*/ 
polynomial2vector(poly, n) := 
    apply(matrix, reverse(makelist([coeff(poly, x, i)],i,0,n-1)))$

/* Returns a polynomial given the vector v, such that the polynomial is of 
   order n where n is the size of the vector, and the values of the vector 
   form the coefficients of the polynomial, with the first value in the 
   vector becoming the coefficient of the highest order polynomial (order n-1).
*/
vector2polynomial(v) := block([n : length(v)],
    sum(v[i][1] * x^(n - i), i, 1, n))$

/* List Processing */
/* REMARK : Should go elsewhere (module Lists). */

/* Returns a list of n (or less if len(l) < n) elements from the beginning of l */
take(l,n) := rest(l,-max(length(l)-n,0))$

/* Partitions a given list l into a list of lists of size n,
   or less (in the case of the last element list)
*/
partition(l,n) := if emptyp(l) then [] else 
  cons(take(l,n), partition(rest(l,min(length(l),n)),n))$

/* Rotates a list n elements to the right. Negative n rotates to the left. */
rotate(l,n) := 
  if n = 0 or l = [] then l
  else if sign(n) = pos then  rotate(append([last(l)],rest(l,-1)), n-1)
  else rotate(append(rest(l), [first(l)]), n+1)$

/* Flattens a matrix or list into a list of the elements, row by row */
matrix2list(m) := apply(append, makelist(m[i],i,1,length(m)))$

/* Returns a list of the given matrix's columns (as lists) */
matrixcolumns(m) := partition(matrix2list(transpose(m)),length(m))$

/* Builds a matrix from a list of it's columns (as lists) */
columns2matrix(mc) := transpose(apply(matrix, mc))$


/* ***************************************
   * Finite Field Wrapper Functions      *
   ***************************************
*/

/* REMARK : This should go to module Algebra. */

/* It appears you can not overload functions with different arities
   and so the gf_* functions have been prefixed with an 'e' for 
   extended. These functions perform the same duty as their gf_*
   counterparts but require additionally an argument that specifies
   which field the operation is being performed over in the form [p,n,ip] where
   "p" is the prime characteristic of the field, "n" is the power to which "p" 
   is raised, and "ip" the polynomial irreducible over GF(p) such that a field
   GF(p^n) is defined with operations being performed on polynomials over
   GF(p) modulo ip.
 */
/* REMARK : Such remarks should not stay in implementation files, but
should go to plans-files. */

/* REMARK : We need documentation (as docus) on gf and these functions. */

/* 
   Global field variable used to keep a record of the default field to be used
   when a field is not provided as an argument to egf_add etc. 
*/
define_variable(egf_field, 'egf_field, any_check);
egf_field : [2,1,[x]]$ /* Default to GF(2) */

/* 
   Allows the default field that all operations (egf_*) will be performed in to
   be set if a field argument is not specified. If a field argument is specified
   to any of the given commands, then that field is used only for the given
   function call and from then on the default field (set with this function) 
   is used again.
*/
egf_set(field) := (
  apply(gf_set,field),
  egf_field : field)$

/*
   Maps any given gf_* function (func) to a egf_* function by allowing it to 
   take a field or use the default field otherwise.
*/
egf_func(func,numargs,args) := (
  if length(args) > numargs then block(
    apply(gf_set, first(args)),
    result : apply(func,rest(args)),
    apply(gf_set,egf_field),
    return(result))
  else
    apply(func, args))$

/* 
   Analogue of gf_add, which optionally takes an additional field argument (as
   the first argument) to specify that this operation should be performed in the
   given field.
*/
egf_add([args]) := egf_func(gf_add, 2, args)$

/* 
   Analogue of gf_mul, which optionally takes an additional field argument (as
   the first argument) to specify that this operation should be performed in the
   given field.
*/
egf_mul([args]) := egf_func(gf_mul, 2, args)$

/* 
   Analogue of gf_matmul, which optionally takes an additional field argument (as
   the first argument) to specify that this operation should be performed in the
   given field.
*/
egf_matmul([args]) := egf_func(gf_matmul, 2, args)$

/* 
   Analogue of gf_matmul, which optionally takes an additional field argument (as
   the first argument) to specify that this operation should be performed in the
   given field.
*/
egf_matinv([args]) := egf_func(gf_matinv, 1, args);

/* 
   Analogue of gf_inv, which optionally takes an additional field argument (as
   the first argument) to specify that this operation should be performed in the
   given field.
*/
egf_inv([args]) := egf_func(gf_inv, 1, args)$


/* ***************************************
   * Main Round Functions                *
   ***************************************
*/

/* 
   First of all set the default field. All operations will be performed in the
   byte field unless otherwise specified.
*/
egf_set(rijndael_byte_field);

/* REMARK : SPECIFICATION NEEDED! */

kill(x)$
rijndael_affine_constant : x^6 + x^5 + x + 1$
rijndael_inv_affine_constant : x^2 + 1$ 
/* REMARK : document "x"; something else??? */

rijndael_sbox_matrix : apply(matrix,
    makelist(rotate([1,1,1,1,1,0,0,0],i),i,0,7))$
rijndael_inv_sbox_matrix : egf_matinv(rijndael_bit_field,rijndael_sbox_matrix)$ 
/* REMARK : Explain! Likely best also accompanied by its use! */

sbox(byte) := 
  block([invbyte,result],
  if byte = 0 then 
    rijndael_affine_constant
  else block([invbyte,result],
    invbyte : egf_inv(byte),
    result : egf_matmul(rijndael_bit_field,rijndael_sbox_matrix,
      polynomial2vector(invbyte,8)),
    return(egf_add(vector2polynomial(result),
      rijndael_affine_constant))))$

inv_sbox(byte) :=
  block([final_result, result],
    result : egf_matmul(rijndael_bit_field,rijndael_inv_sbox_matrix,
      polynomial2vector(byte,8)),
    final_result : egf_add(vector2polynomial(result),
      rijndael_inv_affine_constant),
    if (final_result = 0) then 0
    else egf_inv(final_result)
)$

/* 
   Takes the input block as a list of 16 bytes and applies
   the sbox operation to each byte, returning the list of 
   result bytes.
*/
subbytes(inputblock) := map(sbox, inputblock)$

/* 
   Takes the input block as a list of 16 bytes and applies
   the inverse sbox operation to each byte, returning the list of 
   result bytes.
*/
inv_subbytes(inputblock) := map(inv_sbox, inputblock)$

/*
   List of shifts left for each row in the block in the  shiftrows
   operation.
*/
rijndael_shiftrows_shifts : [0,1,2,3]$

/*
   Takes a list of GF(2^8) elements (the block), and
   performs the shiftrows operation, returning the resulting
   block as a list of GF(2^8) elements.
*/
shiftrows(inputblock) := block([list_rows : partition(inputblock,4)],
  matrix2list (
    makelist(rotate(list_rows[abs(r)+1],-r), r, rijndael_shiftrows_shifts)))$

/*
   Takes a list of GF(2^8) elements (the block), and
   performs the inverse shiftrows operation, returning the resulting
   block as a list of GF(2^8) elements.
*/
inv_shiftrows(inputblock) := 
  block([rijndael_shiftrows_shifts : -rijndael_shiftrows_shifts],
  shiftrows(inputblock))$

/*
   Matrix used in the mixcolumns step to model the 
   multiplication of each 4-byte column by a constant
   in a polynomial ring of at most order 4 with coefficients in
   GF(2^8).
*/
rijndael_mixcolumns_matrix : apply(matrix, 
    makelist(rotate([x, x + 1, 1, 1], i),i,0,3))$
rijndael_inv_mixcolumns_matrix : egf_matinv(rijndael_mixcolumns_matrix)$

/*
   Takes a list of GF(2^8) elements (the block), and
   performs the mixcolumns operation, returning the resulting
   block as a list of GF(2^8) elements.
*/
mixcolumns(inputblock) :=
  matrix2list(
    egf_matmul(rijndael_mixcolumns_matrix, 
      apply(matrix, partition(inputblock,4))))$

/*
   Takes a list of GF(2^8) elements (the block), and
   performs the inverse mixcolumns operation, returning the resulting
   block as a list of GF(2^8) elements.
*/
inv_mixcolumns(inputblock) := 
  block([rijndael_mixcolumns_matrix : rijndael_inv_mixcolumns_matrix],
    mixcolumns(inputblock))$

/*
  Takes the initial key as a list of GF(2^8) elements, the size (in 32 bit words) 
  of the plaintext block, and the number of rounds and returns the expanded key
  (all of the round keys as one large block) as a list of GF(2^8) elements.
*/
key_expansion(kl, n_b ,n_r) := block(
  [n_k : length(kl) / 4, 
  cols : matrixcolumns(apply(matrix,partition(kl, 4))) ],
  for j : n_k thru (n_b * (n_r +1)) - 1 do block([column : [0,0,0,0]],
    if mod(j, n_k) = 0 then block (
      column[1] : egf_add(cols[j-n_k+1][1], 
        egf_add(sbox(cols[j][2]), x^(floor(j/n_k) -1))),
      for i : 1 thru 3 do 
        column[i+1] : egf_add(cols[j-n_k+1][i+1], sbox(cols[j][mod(i+1,4)+1]))
    ) else for i : 1 thru 4 do 
      column[i] : egf_add(cols[j][i], cols[j-n_k+1][i]),
    cols : append(cols, [column])
  ),
  return(apply(append,map(lambda([ma],matrix2list(columns2matrix(ma))),
    partition(cols,n_b))))
)$

/* 
   Takes the plaintext list of GF(2^8) elements and the 
   round key for this round as a list of GF(2^8) elements, and
   returns a list of the same size of GF(2^8) elements as the plaintext
   as the result of the round operation. 
 */
aes_round(pl, rkl) := map(egf_add,mixcolumns(shiftrows(subbytes(pl))), rkl)$
inv_aes_round(pl,rkl) := 
  inv_subbytes(inv_shiftrows(inv_mixcolumns(map(egf_add,pl,rkl))))$

/* 
   Takes the plaintext list of 16 GF(2^8) elements, the key list of 16
   GF(2^8) elements and returns the result of applying the 128 bit AES 
   encryption algorithm (hence number of rounds is assumed to be 10).
*/
aes_encrypt(pl, kl) := block(
  [n_b : length(pl)/4, num_rounds : 10], 
  /* Initial Rounds */
  ekl : partition(key_expansion(kl,n_b,num_rounds),n_b*4),
  initial_rk : first(ekl), final_rk : last(ekl),
  initial_result : lreduce(aes_round, rest(rest(ekl), -1), 
    map(egf_add,pl,initial_rk)),
  /* Final Round */
  map(egf_add,shiftrows(subbytes(initial_result)), final_rk)
)$

/* 
   Takes the ciphertext list of 16 GF(2^8) elements, the key list of 16
   GF(2^8) elements and returns the result of applying the 128 bit AES 
   decryption algorithm (hence number of rounds is assumed to be 10).
*/
aes_decrypt(pl, kl) := block(
  [n_b : length(pl)/4, num_rounds : 10], 
  /* Initial Rounds */
  ekl : partition(key_expansion(kl,n_b,num_rounds),n_b*4),
  initial_rk : first(ekl), final_rk : last(ekl),
  /* Final Round */
  initial_result : 
    inv_subbytes(inv_shiftrows(map(egf_add,pl,final_rk))),
  map(egf_add, rreduce(inv_aes_round, rest(rest(ekl), -1), initial_result), initial_rk)
)$


/*!
\endhtmlonly
*/
