/* Matthew Gwynne, 19.8.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/tests/Translations.mac
  \brief Tests for the AES translation functions

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/tests/Translations.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/UnitClausePropagation.mac")$

kill(f)$

okltest_aes_mul2_ts_gen(f) := block([FF],
  if oklib_test_level = 0 then return(true),
  FF : f(),
  assert(length(FF[1]) = 16+256),
  assert(elementp(setify(create_list(dts_var(i),i,1,256)),setify(FF[2]))),
  assert(elementp({11,-dts_var(256)}, setify(FF[2]))),
  assert(elementp({-12,-9,-5,-2,1,3,4,6,7,8,10,11,13,14,15,16,dts_var(10)},
    setify(FF[2]))),
  true)$

okltest_aes_mul3_ts_gen(f) := block([FF],
  if oklib_test_level = 0 then return(true),
  FF : f(),
  assert(length(FF[1]) = 16+256),
  assert(elementp(setify(create_list(dts_var(i),i,1,256)),setify(FF[2]))),
  assert(elementp({11,-dts_var(256)}, setify(FF[2]))),
  assert(elementp({-12,-9,-4,-3,-2,1,5,6,7,8,10,11,13,14,15,16,dts_var(10)},
    setify(FF[2]))),
  true)$

okltest_aes_sbox_ts_gen(f) := block([FF],
  if oklib_test_level = 0 then return(true),
  FF : f(),
  assert(length(FF[1]) = 16+256),
  assert(elementp(setify(create_list(dts_var(i),i,1,256)),setify(FF[2]))),
  assert(elementp({-11,-dts_var(90)}, setify(FF[2]))),
  assert(elementp({-12,-9,-7,-6,-4,-1,2,3,5,8,10,11,13,14,15,16,dts_var(10)},
    setify(FF[2]))),
  true)$

okltest_aes_final_round_cp(f) := block([F],
  if (oklib_test_level < 3) then return(true),
  F : block([aes_make_vars : aes_make_vars_int], rewrite_all(apply(f, listify(setn(3*128))))),
  iVars : take_elements(128,listify(var_cs(F))),
  kVars : take_elements(128,rest(listify(var_cs(F)),128)),
  oVars : take_elements(128,rest(listify(var_cs(F)),256)),
  /* Satisfying total assignments */
  pa : union(aes_hex2pa("00000000000000000000000000000000",iVars),
    aes_hex2pa("00000000000000000000000000000000",kVars),
    aes_hex2pa("63636363636363636363636363636363",oVars)),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  if (oklib_monitoring) then print("Done first"),
  pa : union(aes_hex2pa("00000000000000000000000000000000",iVars),
    aes_hex2pa("63636363636363636363636363636363",kVars),
    aes_hex2pa("00000000000000000000000000000000",oVars)),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  if (oklib_monitoring) then print("Done second"),
  pa : union(aes_hex2pa("74F4F79EC8DFCE16CD6E2FA40DC10A48",iVars),
    aes_hex2pa("92BF680BE89E8B47BD9F1549D7786752",kVars),
    aes_hex2pa("00217D590001EC4C00E77D0E00C7EC1B",oVars)),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  if (oklib_monitoring) then print("Done third"),
  true)$

okltest_rewrite_all(f) := block(
  assert(f({}) = {}),
  assert(f({aes_eq_c(1,2)}) = {{-1,2},{1,-2}}),
  assert(f({aes_eq_c(1,2),aes_eq_c(2,3)}) = {{-1,2},{1,-2},{-2,3},{2,-3}}),
  assert(f({aes_eq_c(1,2),test(2,3,4,5)}) = {{-1,2},{1,-2},test(2,3,4,5)}),
  assert(f({aes_eq_c(1,2),{1,-2}}) = {{-1,2},{1,-2}}),
  assert(f({aes_eq_c(1,2),aes_add_c(1,2,3)}) =
    {{-1,2},{1,-2},{-1,-2,-3},{-1,2,3},{1,-2,3},{1,2,-3}}),
  true)$

okltest_rewrite_condition(f) := block(
  assert(f({},"",lambda([a],{a})) = {}),
  assert(f({test(5)}, test, 
    lambda([a],{cheese(a)})) = {cheese(5)}),
  assert(f({test(5),test(7)}, test, 
    lambda([a],{cheese(a)})) = {cheese(5),cheese(7)}),
  assert(f({test(5),test(7), test2(3)}, test, 
    lambda([a],{cheese(a)})) = {cheese(5),cheese(7), test2(3)}),
  true)$

okltest_aes_make_vars_int(f) := block(
  aes_reset_vars(),
  assert(f("p",1,128) = create_list(i,i,1,128)),
  assert(f("k",1,128) = create_list(i,i,128 + 1,2*128)),
  assert(f("c",1,128) = create_list(i,i,2*128 + 1,3*128)),
  for j : 1 thru 10 do 
    assert(f("x",1,128) = create_list(i,i,(j+2)*128 + 1,(j+3)*128)),
  true)$

okltest_aes_make_vars_named(f) := block(
  aes_reset_vars(),
  assert(f("p",1,1) = ['p1]),
  assert(f("p",1,2) = ['p2,'p3]),
  assert(f("c",10,15) = ['c10,'c11,'c12,'c13,'c14, 'c15]),
  assert(f("p",1,0) = []),
  /*assert(f("p",1,-1) = []),*/
  true)$

okltest_aes_round_constant(f) := block(
  for j : 1 thru 8 do
    assert(f([1,2,3,4,5,6,7,8],j) = 
      setify(create_list(if i = (9 - j) then {i} else {-i},i, 1, 8))),
  assert(f([1,2,3,4,5,6,7,8], 10) = {{-8},{-5},{-2},{-1},{3},{4},{6},{7}}),
  for j : 1 thru 8 do
    assert(f([32,31,30,29,28,27,26,25],j) = 
      setify(create_list(if i = 24 + j then {i} else {-i},i, 25, 32))),
  true)$

okltest_aes_mul2_cp(f) := block([pa,F,aes_make_vars : aes_make_vars_int],
  if oklib_test_level = 0 then return(true),
  F : apply(f,listify(setn(16))),
  /* Satisfying total assignments */
  pa : aes_hex2pa("0000",take_elements(16,listify(var_cs(F)))),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  pa : aes_hex2pa("0204",take_elements(16,listify(var_cs(F)))),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  pa : aes_hex2pa("1020",take_elements(16,listify(var_cs(F)))),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  true)$

okltest_aes_mul3_cp(f) := block([pa,F,aes_make_vars : aes_make_vars_int],
  if oklib_test_level = 0 then return(true),
  F : apply(f,listify(setn(16))),
  /* Satisfying total assignments */
  pa : aes_hex2pa("0000",take_elements(16,listify(var_cs(F)))),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  pa : aes_hex2pa("0305",take_elements(16,listify(var_cs(F)))),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  pa : aes_hex2pa("050F",take_elements(16,listify(var_cs(F)))),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  true)$

okltest_aes_add_cp(f) := block([pa,F],
  if oklib_test_level = 0 then return(true),
  F : apply(f, listify(setn(24))),
  /* Satisfying total assignments */
  pa :aes_hex2pa("000000",take_elements(24,listify(var_cs(F)))),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  pa : aes_hex2pa("FFFF00",take_elements(24,listify(var_cs(F)))),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  pa : aes_hex2pa("00FFFF",take_elements(24,listify(var_cs(F)))),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  pa : aes_hex2pa("100111",take_elements(24,listify(var_cs(F)))),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  true)$

okltest_aes_mixcolumn_cp(f) := block([pa, iVars, oVars,F],
  if oklib_test_level = 0 then return(true),
  F : block([aes_make_vars : aes_make_vars_int], rewrite_all(apply(f, listify(setn(64))))),
  iVars : take_elements(32,listify(var_cs(F))),
  oVars : take_elements(32,rest(listify(var_cs(F)),32)),
  /* Satisfying total assignments */
  pa : union(aes_hex2pa("00000000",iVars), aes_hex2pa("00000000",oVars)),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  pa : union(aes_hex2pa("FFFFFFFF",iVars),aes_hex2pa("FFFFFFFF",oVars)),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  pa : union(aes_hex2pa("00112233",iVars),aes_hex2pa("22770055",oVars)),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  /* UNSAT total assignments */
  true)$

okltest_aes_mixcolumns_cp(f) := block([pa,iVars,oVars,F],
  if oklib_test_level = 0 then return(true),
  F : block([aes_make_vars : aes_make_vars_int], rewrite_all(apply(f, listify(setn(256))))),
  iVars : take_elements(128,listify(var_cs(F))),
  oVars : take_elements(128,rest(listify(var_cs(F)),128)),
  /* Satisfying total assignments */
  pa : aes_hex2pa(
    "0000000000000000000000000000000000000000000000000000000000000000",
    take_elements(256,listify(var_cs(F)))),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  pa : union(aes_hex2pa("B5A1FF0213199055469AF40000CC0042",iVars),
    aes_hex2pa("74F4F79EC8DFCE16CD6E2FA40DC10A48",oVars)),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  pa : union(aes_hex2pa("74F4F79EC8DFCE16CD6E2FA40DC10A48",iVars),
    aes_hex2pa("861BCCB82932AA7EB8C40A5E00C2004C",oVars)),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  /* UNSAT total assignments */
  true)$

okltest_aes_shiftrows_cp(f) := block([pa,iVars,oVarsi,F],
  if oklib_test_level = 0 then return(true),
  F : block([aes_make_vars : aes_make_vars_int], rewrite_all(apply(f, listify(setn(256))))),
  iVars : take_elements(128,listify(var_cs(F))),
  oVars : take_elements(128,rest(listify(var_cs(F)),128)),
  /* Satisfying total assignments */
  pa : aes_hex2pa(
    "0000000000000000000000000000000000000000000000000000000000000000",
    take_elements(256,listify(var_cs(F)))),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  pa : union(aes_hex2pa("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",iVars),
    aes_hex2pa("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",oVars)),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  pa : union(aes_hex2pa("B5A1FF0213199055469AF40000CC0042",iVars),
    aes_hex2pa("B519F442139A000246CCFF5500A19000",oVars)),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  pa : union(aes_hex2pa("74F4F79EC8DFCE16CD6E2FA40DC10A48",iVars),
    aes_hex2pa("74DF2F48C86E0A9ECDC1F7160DF4CEA4",oVars)),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  /* UNSAT total assignments */
  true)$

okltest_aes_subbytes_cp(f) := block([pa,iVars,oVars,F],
  if oklib_test_level = 0 then return(true),
  F : block([aes_make_vars : aes_make_vars_int], rewrite_all(apply(f, listify(setn(256))))),
  iVars : take_elements(128,listify(var_cs(F))),
  oVars : take_elements(128,rest(listify(var_cs(F)),128)),
  /* Satisfying total assignments */
  pa : union(aes_hex2pa("00000000000000000000000000000000",iVars),
    aes_hex2pa("63636363636363636363636363636363",oVars)),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  pa : union(aes_hex2pa("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",iVars),
    aes_hex2pa("16161616161616161616161616161616",oVars)),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  pa : union(aes_hex2pa("B5A1FF0213199055469AF40000CC0042",iVars),
    aes_hex2pa("D53216777DD460FC5AB8BF63634B632C",oVars)),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  pa : union(aes_hex2pa("74F4F79EC8DFCE16CD6E2FA40DC10A48",iVars),
    aes_hex2pa("92BF680BE89E8B47BD9F1549D7786752",oVars)),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  /* UNSAT total assignments */
  true)$

okltest_aes_round_cp(f) := block([pa,iVars,oVars,kVars,F],
  F : block([aes_make_vars : aes_make_vars_int], rewrite_all(apply(f, listify(setn(3*128))))),
  iVars : take_elements(128,listify(var_cs(F))),
  kVars : take_elements(128,rest(listify(var_cs(F)),128)),
  oVars : take_elements(128,rest(listify(var_cs(F)),256)),
  /* Satisfying total assignments */
  pa : union(aes_hex2pa("00000000000000000000000000000000",iVars),
    aes_hex2pa("00000000000000000000000000000000",kVars),
    aes_hex2pa("63636363636363636363636363636363",oVars)),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  pa : union(aes_hex2pa("00000000000000000000000000000000",iVars),
    aes_hex2pa("63636363636363636363636363636363",kVars),
    aes_hex2pa("00000000000000000000000000000000",oVars)),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  pa : union(aes_hex2pa("74F4F79EC8DFCE16CD6E2FA40DC10A48",iVars),
    aes_hex2pa("92BF680BE89E8B47BD9F1549D7786752",kVars),
    aes_hex2pa("5367B889F5F12F8A7B2DC90B7A05D996",oVars)),
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  /* UNSAT total assignments */
  true)$

okltest_aes_key_expansion_cp(F) := block([pa,iVars,oVars,iVars,F],
  F : block([aes_make_vars : aes_make_vars_int], rewrite_all(apply(f, listify(setn(12*128))))),
  iVars : take_elements(128,listify(var_cs(F))),
  oVars : partition_elements(take_elements(128*11,rest(listify(var_cs(F)),128)),128),
  /* Satisfying total assignments */
  pa : union(aes_hex2pa("00000000000000000000000000000000",iVars),
          aes_hex2pa("00000000000000000000000000000000",oVars[1]), 
          aes_hex2pa("62636363626363636263636362636363",oVars[2]),
          aes_hex2pa("9B9898C9F9FBFBAA9B9898C9F9FBFBAA",oVars[3]),
          aes_hex2pa("90973450696CCFFAF2F457330B0FAC99",oVars[4]),
          aes_hex2pa("EE06DA7B876A1581759E42B27E91EE2B",oVars[5]),
          aes_hex2pa("7F2E2B88F8443E098DDA7CBBF34B9290",oVars[6]),
          aes_hex2pa("EC614B851425758C99FF09376AB49BA7",oVars[7]),
          aes_hex2pa("217517873550620BACAF6B3CC61BF09B",oVars[8]),
          aes_hex2pa("0EF903333BA9613897060A04511DFA9F",oVars[9]),
          aes_hex2pa("B1D4D8E28A7DB9DA1D7BB3DE4C664941",oVars[10]),
          aes_hex2pa("B4EF5BCB3E92E21123E951CF6F8F188E",oVars[11])), 
  assert(ucp_0_cs(apply_pa(pa,F)) = {}),
  /* UNSAT total assignments */
  true)$
/*!
\endhtmlonly
*/
