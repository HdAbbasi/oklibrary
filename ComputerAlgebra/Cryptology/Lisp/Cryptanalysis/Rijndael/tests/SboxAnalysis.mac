/* Matthew Gwynne, 2.4.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/tests/SboxAnalysis.mac
  \brief Tests for the analysis functions of the AES Sbox

Use by

oklib_load("Transitional/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/tests/SboxAnalysis.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac");

kill(f)$


okltest_generate_full_aes_sbox_dnf_fcs(f) := block([sboxFullDNF],
  sboxFullDNF : f(),
  assert(length(sboxFullDNF[2]) = 256),
  assert(length(sboxFullDNF[1]) = 16),
  assert(apply_pa(setify(create_list(i,i,1,8)), sboxFullDNF[2])=
    {{-14,-13,-12,-9,10,11,15,16}}),
  assert(apply_pa(setify(create_list(-i,i,1,8)), sboxFullDNF[2])=
    {{-16,-13,-11,-10,-9,12,14,15}}),
  true)$

okltest_generate_full_int_perm_dnf_fcs(f) := block(
  assert(f([]) = [{},{}]),
  assert(f([0]) = [{1,2}, {{-2,-1}}]),
  assert(f([1]) = [{1,2}, {{1,2}}]),
  assert(f([15]) = [{1,2,3,4,5,6,7,8},{{1,2,3,4,5,6,7,8}}]),
  assert(f([16]) = [{1,2,3,4,5,6,7,8,9,10},{{-10,-9,-8,-7,-5,-4,-3,-2,1,6}}]),
  assert(f([0,1,2]) = [{1,2,3,4},{{-4,-3,-2,-1},{-4,-2,1,3},{-3,-1,2,4}}]),
  assert(f([2,1,0]) = [{1,2,3,4},{{-4,-2,-1,3},{-3,-1,2,4},{-4,-3,-2,1}}]),
  assert(f([1,0,2]) = [{1,2,3,4},{{-4,-3,-1,2},{-4,-2,1,3},{-3,-2,-1,4}}]),
  if oklib_test_level = 0 then return(true),
  for i : 2 thru 4 do 
    for j in permutations(create_list(k,k,1,i)) do
      assert(length(clauses_f(f(j))) = i),
  true)$

okltest_generate_full_int_perm_cnf_fcs(f) := block(
  assert(f([]) = [{},{{}}]),
  assert(f([0]) = [{1,2},{{-2,-1},{-2,1},{-1,2}}]),
  assert(f([1]) = [{1,2},{{-2,1},{-1,2},{1,2}}]),
  assert(f([0,1,2]) = [{1,2,3,4}, {{-4,-3,-2,-1},{-4,-3,-2,1},{-4,-3,-1,2},
    {-4,-3,1,2},{-4,-2,-1,3},{-4,-1,2,3},{-4,1,2,3},{-3,-2,-1,4},{-3,-2,1,4},
    {-3,1,2,4},{-2,-1,3,4},{-2,1,3,4},{-1,2,3,4}}]),
  assert(f([2,1,0]) = [{1,2,3,4}, {{-4,-3,-2,-1},{-4,-3,-2,1},{-4,-3,-1,2},
    {-4,-3,1,2},{-4,-2,-1,3},{-4,-1,2,3},{-4,1,2,3},{-3,-2,-1,4},{-3,-2,1,4},
    {-3,-1,2,4},{-2,-1,3,4},{-2,1,3,4},{1,2,3,4}}]),
  assert(f([1,0,2]) = [{1,2,3,4}, {{-4,-3,-2,-1},{-4,-3,-2,1},{-4,-3,-1,2},
    {-4,-3,1,2},{-4,-2,-1,3},{-4,-2,1,3},{-4,-1,2,3},{-3,-2,-1,4},{-3,-2,1,4},
    {-3,1,2,4},{-2,-1,3,4},{-1,2,3,4},{1,2,3,4}}]),
  if oklib_test_level = 0 then return(true),
  for i : 2 thru 4 do 
    for j in permutations(create_list(k,k,1,i)) do block([permDNF : f(j)],
      assert(length(clauses_f(permDNF)) = 2^length(permDNF[1]) - i)
    ),
  true)$

okltest_int2binlist(f) := block(
  for i : 0 thru 5 do
    assert(f(i,0) = []),
  for i : 0 thru 10 do
    assert(f(i,1) = [mod(i,2)]),
  for i : 0 thru 10 do 
    assert(f(2^i,10) = create_list(if j = 10 - i then 1 else 0, j, 1, 10)),
  assert(f(123,8) = [0,1,1,1,1,0,1,1]),
  assert(f(123,2) = [1,1]),
  assert(f(123,15) = [0,0,0,0,0,0,0,0,1,1,1,1,0,1,1]),
  assert(f(5019,13) = [1,0,0,1,1,1,0,0,1,1,0,1,1]),
  true)$

okltest_test_CNF_int_perm(f) := block(
  assert(f([{},{{}}], [], dll_simplest_trivial1)),
  assert(not f([{},{{}}], [1], dll_simplest_trivial1)),
  assert(not f([{},{}], [1], dll_simplest_trivial1)),
  assert(not f([{},{}], [1,2,3], dll_simplest_trivial1)),
  assert(f([{1,2,3,4},{{-4,-3,-2,-1},{-4,-3,-1,2},{-4,-3,1,2},
    {-4,-2,1,3},{-4,-1,2,3},{-4,1,2,3},{-3,-2,-1,4},
    {-3,-2,1,4},{-3,1,2,4},{-2,-1,3,4},{-2,1,3,4},
    {-1,2,3,4},{1,2,3,4}}], [3,2,1], dll_simplest_trivial1)),
  true)$

/*!
\endhtmlonly
*/
