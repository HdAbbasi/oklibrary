/* Matthew Gwynne, 2.4.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/tests/SboxAnalysis.mac
  \brief Tests for the analysis functions of the AES Sbox

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/tests/SboxAnalysis.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/PartialAssignments.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/SmallScaleWordFields")$

kill(f)$


/* ******************************************
   * Sbox Analysis                          *
   ******************************************
*/

okltest_rijnsbox_fulldnf_fcs(f) := block([FF],
  FF : f(),
  assert(length(FF[2]) = 256),
  assert(length(FF[1]) = 16),
  assert(apply_pa_cs(setify(create_list(i,i,1,8)), FF[2])=
    {{-14,-13,-12,-9,10,11,15,16}}),
  assert(elementp({-11,-9,-8,-7,-5,-4,-3,-2,1,6,10,12,13,14,15,16},
    FF[2])),
  assert(elementp({-15,-14,-10,-6,-3,1,2,4,5,7,8,9,11,12,13,16},
    FF[2])),
  assert(apply_pa_cs(setify(create_list(-i,i,1,8)), FF[2])=
    {{-16,-13,-11,-10,-9,12,14,15}}),
  true)$

okltest_rijnsbox_fullcnf_fcs(f) := block([FF],
  if oklib_test_level = 0 then return(true),
  FF : f(),
  assert(length(FF[2]) = 2^16 - 256),
  assert(length(FF[1]) = 16),
  assert(apply_pa_cs(union(setify(create_list(-i,i,1,8)),
    {-14,-13,-12,-9,10,11,15,16}), FF[2])= {}),
  assert(apply_pa_cs(union(setify(create_list(-i,i,1,8)),
    {-14,-13,-12,-9,10,-11,15,16}), FF[2])= {{}}),
  assert(apply_pa_cs(union(setify(create_list(i,i,1,8)),
    {-16,-13,-11,-10,-9,12,14,15}), FF[2]) = {}),
  assert(apply_pa_cs(union(setify(create_list(i,i,1,8)),
    {-16,-13,-11,-10,-9,12,14,-15}), FF[2]) = {{}}),
  true)$

okltest_rijnsbox_cnfp(f) := block(
  if oklib_test_level = 0 then return(true),
  assert(f([{},{}]) = false),
  assert(f([{},{{}}]) = false),
  assert(f([{1},{{}}]) = false),
  assert(f([{1},{{1}}]) = false),
  assert(f([{1,2},{{1}}]) = false),
  assert(f([{1,2},{{1,2},{-1,2},{-2,1}}]) = false),
  assert(f(rijnsbox_fullcnf_fcs())),
  true)$

/* ******************************************************
   * Small Scale Sbox Analysis                          *
   ******************************************************
*/

okltest_ss_sbox_fulldnf_gen_fcl(f) := block(
  assert(f(2,4,ss_polynomial_2_4,ss_sbox_matrix(2,4),ss_affine_constant(2,4)) =
    [[1,2,3,4,5,6,7,8],
    [{-8,-5,-4,-3,-2,-1,6,7},{-6,-3,-2,-1,4,5,7,8},{-7,-5,-4,-2,-1,3,6,8},
    {-8,-7,-5,-2,-1,3,4,6},{-8,-6,-5,-4,-3,-1,2,7},{-8,-3,-1,2,4,5,6,7},
    {-5,-4,-1,2,3,6,7,8},{-8,-6,-1,2,3,4,5,7},{-7,-6,-4,-3,-2,1,5,8},
    {-7,-3,-2,1,4,5,6,8},{-4,-2,1,3,5,6,7,8},{-8,-7,-2,1,3,4,5,6},
    {-6,-5,-4,-3,1,2,7,8},{-7,-6,-5,-3,1,2,4,8},{-8,-7,-6,-5,-4,1,2,3},
    {-8,-7,-6,1,2,3,4,5}]]),
  if oklib_test_level = 0 then return(true),
  assert(f(2,8,ss_polynomial_2_8,ss_sbox_matrix(2,8),ss_affine_constant(2,8)) =
      rijnsbox_fulldnf_fcl()),
  true)$

okltest_ss_sbox_fullcnf_gen_fcs(f) := block(
  assert(f(2,4,ss_polynomial_2_4,ss_sbox_matrix(2,4),ss_affine_constant(2,4))=
    [{1,2,3,4,5,6,7,8},
        {{-8,-7,-6,-5,-4,-3,-2,-1},{-8,-7,-6,-5,-4,-3,-2,1},
        {-8,-7,-6,-5,-4,-3,-1,2},{-8,-7,-6,-5,-4,-3,1,2},
        {-8,-7,-6,-5,-4,-2,-1,3},{-8,-7,-6,-5,-4,-2,1,3},
        {-8,-7,-6,-5,-4,-1,2,3},{-8,-7,-6,-5,-4,1,2,3},
        {-8,-7,-6,-5,-3,-2,-1,4},{-8,-7,-6,-5,-3,-2,1,4},
        {-8,-7,-6,-5,-3,1,2,4},{-8,-7,-6,-5,-2,-1,3,4},
        {-8,-7,-6,-5,-2,1,3,4},{-8,-7,-6,-5,-1,2,3,4},{-8,-7,-6,-5,1,2,3,4},
        {-8,-7,-6,-4,-3,-2,-1,5},{-8,-7,-6,-4,-3,-2,1,5},
        {-8,-7,-6,-4,-3,-1,2,5},{-8,-7,-6,-4,-3,1,2,5},{-8,-7,-6,-4,-2,-1,3,5},
        {-8,-7,-6,-4,-2,1,3,5},{-8,-7,-6,-4,-1,2,3,5},{-8,-7,-6,-4,1,2,3,5},
        {-8,-7,-6,-3,-2,-1,4,5},{-8,-7,-6,-3,-1,2,4,5},{-8,-7,-6,-3,1,2,4,5},
        {-8,-7,-6,-2,-1,3,4,5},{-8,-7,-6,-2,1,3,4,5},{-8,-7,-6,-1,2,3,4,5},
        {-8,-7,-6,1,2,3,4,5},{-8,-7,-5,-4,-3,-2,-1,6},{-8,-7,-5,-4,-3,-2,1,6},
        {-8,-7,-5,-4,-3,-1,2,6},{-8,-7,-5,-4,-3,1,2,6},{-8,-7,-5,-4,-2,-1,3,6},
        {-8,-7,-5,-4,-2,1,3,6},{-8,-7,-5,-4,-1,2,3,6},{-8,-7,-5,-3,-2,-1,4,6},
        {-8,-7,-5,-3,-2,1,4,6},{-8,-7,-5,-3,-1,2,4,6},{-8,-7,-5,-3,1,2,4,6},
        {-8,-7,-5,-2,-1,3,4,6},{-8,-7,-5,-2,1,3,4,6},{-8,-7,-5,-1,2,3,4,6},
        {-8,-7,-5,1,2,3,4,6},{-8,-7,-4,-3,-2,-1,5,6},{-8,-7,-4,-3,-2,1,5,6},
        {-8,-7,-4,-3,-1,2,5,6},{-8,-7,-4,-3,1,2,5,6},{-8,-7,-4,-2,-1,3,5,6},
        {-8,-7,-4,-2,1,3,5,6},{-8,-7,-4,-1,2,3,5,6},{-8,-7,-4,1,2,3,5,6},
        {-8,-7,-3,-2,-1,4,5,6},{-8,-7,-3,-2,1,4,5,6},{-8,-7,-3,-1,2,4,5,6},
        {-8,-7,-3,1,2,4,5,6},{-8,-7,-2,1,3,4,5,6},{-8,-7,-1,2,3,4,5,6},
        {-8,-7,1,2,3,4,5,6},{-8,-6,-5,-4,-3,-2,-1,7},{-8,-6,-5,-4,-3,-2,1,7},
        {-8,-6,-5,-4,-3,-1,2,7},{-8,-6,-5,-4,-3,1,2,7},{-8,-6,-5,-4,-2,-1,3,7},
        {-8,-6,-5,-4,-2,1,3,7},{-8,-6,-5,-4,1,2,3,7},{-8,-6,-5,-3,-2,-1,4,7},
        {-8,-6,-5,-3,-2,1,4,7},{-8,-6,-5,-3,-1,2,4,7},{-8,-6,-5,-3,1,2,4,7},
        {-8,-6,-5,-2,-1,3,4,7},{-8,-6,-5,-2,1,3,4,7},{-8,-6,-5,-1,2,3,4,7},
        {-8,-6,-5,1,2,3,4,7},{-8,-6,-4,-3,-2,-1,5,7},{-8,-6,-4,-3,-2,1,5,7},
        {-8,-6,-4,-3,-1,2,5,7},{-8,-6,-4,-3,1,2,5,7},{-8,-6,-4,-2,-1,3,5,7},
        {-8,-6,-4,-2,1,3,5,7},{-8,-6,-4,-1,2,3,5,7},{-8,-6,-4,1,2,3,5,7},
        {-8,-6,-3,-2,-1,4,5,7},{-8,-6,-3,-2,1,4,5,7},{-8,-6,-3,-1,2,4,5,7},
        {-8,-6,-2,-1,3,4,5,7},{-8,-6,-2,1,3,4,5,7},{-8,-6,-1,2,3,4,5,7},
        {-8,-6,1,2,3,4,5,7},{-8,-5,-4,-3,-2,-1,6,7},{-8,-5,-4,-3,-2,1,6,7},
        {-8,-5,-4,-3,-1,2,6,7},{-8,-5,-4,-3,1,2,6,7},{-8,-5,-4,-2,-1,3,6,7},
        {-8,-5,-4,-2,1,3,6,7},{-8,-5,-4,-1,2,3,6,7},{-8,-5,-4,1,2,3,6,7},
        {-8,-5,-3,-2,-1,4,6,7},{-8,-5,-3,-2,1,4,6,7},{-8,-5,-3,-1,2,4,6,7},
        {-8,-5,-3,1,2,4,6,7},{-8,-5,-2,-1,3,4,6,7},{-8,-5,-2,1,3,4,6,7},
        {-8,-5,1,2,3,4,6,7},{-8,-4,-3,-2,-1,5,6,7},{-8,-4,-3,-2,1,5,6,7},
        {-8,-4,-3,-1,2,5,6,7},{-8,-4,-3,1,2,5,6,7},{-8,-4,-2,1,3,5,6,7},
        {-8,-4,-1,2,3,5,6,7},{-8,-4,1,2,3,5,6,7},{-8,-3,-2,-1,4,5,6,7},
        {-8,-3,-2,1,4,5,6,7},{-8,-3,-1,2,4,5,6,7},{-8,-3,1,2,4,5,6,7},
        {-8,-2,-1,3,4,5,6,7},{-8,-2,1,3,4,5,6,7},{-8,-1,2,3,4,5,6,7},
        {-8,1,2,3,4,5,6,7},{-7,-6,-5,-4,-3,-2,-1,8},
        {-7,-6,-5,-4,-3,-2,1,8},{-7,-6,-5,-4,-3,-1,2,8},{-7,-6,-5,-4,-3,1,2,8},
        {-7,-6,-5,-4,-2,-1,3,8},{-7,-6,-5,-4,-1,2,3,8},{-7,-6,-5,-4,1,2,3,8},
        {-7,-6,-5,-3,-2,-1,4,8},{-7,-6,-5,-3,-2,1,4,8},{-7,-6,-5,-3,-1,2,4,8},
        {-7,-6,-5,-3,1,2,4,8},{-7,-6,-5,-2,-1,3,4,8},{-7,-6,-5,-2,1,3,4,8},
        {-7,-6,-5,-1,2,3,4,8},{-7,-6,-5,1,2,3,4,8},{-7,-6,-4,-3,-2,-1,5,8},
        {-7,-6,-4,-3,-2,1,5,8},{-7,-6,-4,-3,-1,2,5,8},{-7,-6,-4,-3,1,2,5,8},
        {-7,-6,-4,-2,-1,3,5,8},{-7,-6,-4,-2,1,3,5,8},{-7,-6,-4,-1,2,3,5,8},
        {-7,-6,-4,1,2,3,5,8},{-7,-6,-3,-2,-1,4,5,8},{-7,-6,-3,-2,1,4,5,8},
        {-7,-6,-3,-1,2,4,5,8},{-7,-6,-3,1,2,4,5,8},{-7,-6,-2,-1,3,4,5,8},
        {-7,-6,-2,1,3,4,5,8},{-7,-6,-1,2,3,4,5,8},{-7,-5,-4,-3,-2,-1,6,8},
        {-7,-5,-4,-3,-1,2,6,8},{-7,-5,-4,-3,1,2,6,8},{-7,-5,-4,-2,-1,3,6,8},
        {-7,-5,-4,-2,1,3,6,8},{-7,-5,-4,-1,2,3,6,8},{-7,-5,-4,1,2,3,6,8},
        {-7,-5,-3,-2,-1,4,6,8},{-7,-5,-3,-2,1,4,6,8},{-7,-5,-3,-1,2,4,6,8},
        {-7,-5,-3,1,2,4,6,8},{-7,-5,-2,-1,3,4,6,8},{-7,-5,-2,1,3,4,6,8},
        {-7,-5,-1,2,3,4,6,8},{-7,-5,1,2,3,4,6,8},{-7,-4,-3,-2,-1,5,6,8},
        {-7,-4,-3,-2,1,5,6,8},{-7,-4,-3,-1,2,5,6,8},{-7,-4,-3,1,2,5,6,8},
        {-7,-4,-2,-1,3,5,6,8},{-7,-4,-2,1,3,5,6,8},{-7,-4,-1,2,3,5,6,8},
        {-7,-4,1,2,3,5,6,8},{-7,-3,-2,-1,4,5,6,8},{-7,-3,-2,1,4,5,6,8},
        {-7,-3,-1,2,4,5,6,8},{-7,-3,1,2,4,5,6,8},{-7,-2,-1,3,4,5,6,8},
        {-7,-1,2,3,4,5,6,8},{-7,1,2,3,4,5,6,8},{-6,-5,-4,-3,-2,-1,7,8},
        {-6,-5,-4,-3,-2,1,7,8},{-6,-5,-4,-3,1,2,7,8},{-6,-5,-4,-2,-1,3,7,8},
        {-6,-5,-4,-2,1,3,7,8},{-6,-5,-4,-1,2,3,7,8},{-6,-5,-4,1,2,3,7,8},
        {-6,-5,-3,-2,-1,4,7,8},{-6,-5,-3,-2,1,4,7,8},{-6,-5,-3,-1,2,4,7,8},
        {-6,-5,-3,1,2,4,7,8},{-6,-5,-2,-1,3,4,7,8},{-6,-5,-2,1,3,4,7,8},
        {-6,-5,-1,2,3,4,7,8},{-6,-5,1,2,3,4,7,8},{-6,-4,-3,-2,-1,5,7,8},
        {-6,-4,-3,-2,1,5,7,8},{-6,-4,-3,-1,2,5,7,8},{-6,-4,-2,-1,3,5,7,8},
        {-6,-4,-2,1,3,5,7,8},{-6,-4,-1,2,3,5,7,8},{-6,-4,1,2,3,5,7,8},
        {-6,-3,-2,-1,4,5,7,8},{-6,-3,-2,1,4,5,7,8},{-6,-3,-1,2,4,5,7,8},
        {-6,-3,1,2,4,5,7,8},{-6,-2,-1,3,4,5,7,8},{-6,-2,1,3,4,5,7,8},
        {-6,-1,2,3,4,5,7,8},{-6,1,2,3,4,5,7,8},{-5,-4,-3,-2,1,6,7,8},
        {-5,-4,-3,-1,2,6,7,8},{-5,-4,-3,1,2,6,7,8},{-5,-4,-2,-1,3,6,7,8},
        {-5,-4,-2,1,3,6,7,8},{-5,-4,-1,2,3,6,7,8},{-5,-4,1,2,3,6,7,8},
        {-5,-3,-2,-1,4,6,7,8},{-5,-3,-2,1,4,6,7,8},{-5,-3,-1,2,4,6,7,8},
        {-5,-3,1,2,4,6,7,8},{-5,-2,-1,3,4,6,7,8},{-5,-2,1,3,4,6,7,8},
        {-5,-1,2,3,4,6,7,8},{-5,1,2,3,4,6,7,8},{-4,-3,-2,-1,5,6,7,8},
        {-4,-3,-2,1,5,6,7,8},{-4,-3,-1,2,5,6,7,8},{-4,-3,1,2,5,6,7,8},
        {-4,-2,-1,3,5,6,7,8},{-4,-2,1,3,5,6,7,8},{-4,-1,2,3,5,6,7,8},
        {-4,1,2,3,5,6,7,8},{-3,-2,1,4,5,6,7,8},{-3,-1,2,4,5,6,7,8},
        {-3,1,2,4,5,6,7,8},{-2,-1,3,4,5,6,7,8}, {-2,1,3,4,5,6,7,8},
        {-1,2,3,4,5,6,7,8},{1,2,3,4,5,6,7,8}}]),
  if oklib_test_level = 0 then return(true),
  assert(f(2,8,ss_polynomial_2_8,ss_sbox_matrix(2,8),ss_affine_constant(2,8)) =
      rijnsbox_fullcnf_fcs()),      
  true)$


okltest_ss_sbox_gen_cnfp(f) := block(
  if oklib_test_level = 0 then return(true),
  assert(f(rijnsbox_fullcnf_fcs(),2,8,ss_polynomial_2_8,
      ss_sbox_matrix(2,8),ss_affine_constant(2,8))),
  true)$


/* *****************************************************************
   * Small Scale Sbox linear map Analysis                          *
   *****************************************************************
*/

okltest_ss_sbox_linmap_fulldnf_fcl(f) := block(
  assert(f(2,1,ss_polynomial_2_1) = [[1,2],[{-2,-1},{1,2}]]),
  assert(f(2,4,ss_polynomial_2_4) =
    [[1,2,3,4,5,6,7,8],
     [{-8,-7,-6,-5,-4,-3,-2,-1},{-7,-3,-2,-1,4,5,6,8},{-6,-4,-2,-1,3,5,7,8},
      {-8,-5,-2,-1,3,4,6,7},{-5,-4,-3,-1,2,6,7,8},{-8,-6,-3,-1,2,4,5,7},
      {-8,-7,-4,-1,2,3,5,6},{-7,-6,-5,-1,2,3,4,8},{-8,-4,-3,-2,1,5,6,7},
      {-6,-5,-3,-2,1,4,7,8},{-7,-5,-4,-2,1,3,6,8},{-8,-7,-6,-2,1,3,4,5},
      {-7,-6,-4,-3,1,2,5,8},{-8,-7,-5,-3,1,2,4,6},{-8,-6,-5,-4,1,2,3,7},
      {1,2,3,4,5,6,7,8}]]),
  true)$

okltest_ss_sbox_linmap_fullcnf_fcs(f) := block(
  assert(f(2,1) = [{1,2},{{-2,1},{-1,2}}]),
  assert(elementp({-8,-7,-6,5,-4,-3,-2,-1}, f(2,4)[2])),
  true)$

okltest_ss_matrix2str(f) := block(
  assert(f(ss_sbox_matrix_2_1) = "1"),
  assert(f(ss_sbox_matrix_2_4) = "1_0_1_1_1_1_0_1_1_1_1_0_0_1_1_1"),
  true)$

okltest_ss_sbox_linmap_cnfp(f) := block(
  assert(f([{1,2},{{-2,1},{-1,2}}],2,1)),
  assert(not(f([{1,2},{{-2,1},{1,2}}],2,1))),
  true)$


/* *****************************************************************
   * Small scale multiplication then Sbox linear map analysis      *
   *****************************************************************
*/

okltest_ss_mul_w_sbox_linmap_fulldnf_fcl(f) := block(
  assert(f(1,2,1,ss_polynomial_2_1) = [[1,2],[{-2,-1},{1,2}]]),
  assert(f(1,2,4,ss_polynomial_2_4) =
    [[1,2,3,4,5,6,7,8],
     [{-8,-7,-6,-5,-4,-3,-2,-1},{-7,-3,-2,-1,4,5,6,8},{-6,-4,-2,-1,3,5,7,8},
      {-8,-5,-2,-1,3,4,6,7},{-5,-4,-3,-1,2,6,7,8},{-8,-6,-3,-1,2,4,5,7},
      {-8,-7,-4,-1,2,3,5,6},{-7,-6,-5,-1,2,3,4,8},{-8,-4,-3,-2,1,5,6,7},
      {-6,-5,-3,-2,1,4,7,8},{-7,-5,-4,-2,1,3,6,8},{-8,-7,-6,-2,1,3,4,5},
      {-7,-6,-4,-3,1,2,5,8},{-8,-7,-5,-3,1,2,4,6},{-8,-6,-5,-4,1,2,3,7},
      {1,2,3,4,5,6,7,8}]]),
  assert(f(3,2,4,ss_polynomial_2_4) =
    [[1,2,3,4,5,6,7,8],
       [{-8,-7,-6,-5,-4,-3,-2,-1},{-7,-3,-2,-1,4,5,6,8},{-6,-4,-2,-1,3,5,7,8},
        {-8,-5,-2,-1,3,4,6,7},{-5,-4,-3,-1,2,6,7,8},{-8,-6,-3,-1,2,4,5,7},
        {-8,-7,-4,-1,2,3,5,6},{-7,-6,-5,-1,2,3,4,8},{-8,-4,-3,-2,1,5,6,7},
        {-6,-5,-3,-2,1,4,7,8},{-7,-5,-4,-2,1,3,6,8},{-8,-7,-6,-2,1,3,4,5},
        {-7,-6,-4,-3,1,2,5,8},{-8,-7,-5,-3,1,2,4,6},{-8,-6,-5,-4,1,2,3,7},
        {1,2,3,4,5,6,7,8}]]),
  true)$

okltest_ss_mul_w_sbox_linmap_fullcnf_fcs(f) := block(
  assert(f(1,2,1) = [{1,2},{{-2,1},{-1,2}}]),
  assert(elementp({-8,-7,-6,5,-4,-3,-2,-1}, f(1,2,4)[2])),
  true)$

okltest_ss_mul_w_sbox_linmap_cnfp(f) := block(
  assert(f([{1,2},{{-2,1},{-1,2}}],1,2,1)),
  assert(not(f([{1,2},{{-2,1},{1,2}}],1,2,1))),
  true)$


/* ******************************************
   * Representations by hitting clause-sets *
   ******************************************
*/

okltest_rijnsbox2hittingcnf_fcs(f) := block(
 [sbox_cnf,sbox_cnf_real, sbox_cnf_max],
  if oklib_test_level = 0 then return(true),
  if oklib_test_level = 1 then return(true),
  sbox_cnf : f(dll_heuristics_first_formal),
  assert(length(sbox_cnf) > 1),
  assert(rijnsbox_cnfp(cs2fcs(sbox_cnf))),
  sbox_cnf_real : f(dll_heuristics_first_real),
  assert(rijnsbox_cnfp(cs2fcs(sbox_cnf_real))),
  sbox_cnf_max : f(dll_heuristics_max_var),
  assert(rijnsbox_cnfp(cs2fcs(sbox_cnf_max))),
  assert(hittingcsp(sbox_cnf)),
  assert(hittingcsp(sbox_cnf_real)),
  assert(hittingcsp(sbox_cnf_max)),
  true)$


/*!
\endhtmlonly
*/
