/* Matthew Gwynne, 2.4.2008 (Swansea) */
/* Copyright 2008, 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/tests/SboxAnalysis.mac
  \brief Tests for the analysis functions of the AES Sbox

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/tests/SboxAnalysis.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac");

kill(f)$


/* ******************************************
   * Sbox Analysis                          *
   ******************************************
*/


okltest_rijnsbox_fulldnf_fcs(f) := block([F],
  F : f(),
  assert(length(F[2]) = 256),
  assert(length(F[1]) = 16),
  assert(apply_pa(setify(create_list(i,i,1,8)), F[2])=
    {{-14,-13,-12,-9,10,11,15,16}}),
  assert(elementp({-11,-9,-8,-7,-5,-4,-3,-2,1,6,10,12,13,14,15,16},
    F[2])),
  assert(elementp({-15,-14,-10,-6,-3,1,2,4,5,7,8,9,11,12,13,16},
    F[2])),
  assert(apply_pa(setify(create_list(-i,i,1,8)), F[2])=
    {{-16,-13,-11,-10,-9,12,14,15}}),
  true)$

okltest_rijnsbox_fullcnf_fcs(f) := block([F],
  if oklib_test_level = 0 then return(true),
  F : f(),
  assert(length(F[2]) = 2^16 - 256),
  assert(length(F[1]) = 16),
  assert(apply_pa(union(setify(create_list(-i,i,1,8)),
    {-14,-13,-12,-9,10,11,15,16}), F[2])= {}),
  assert(apply_pa(union(setify(create_list(-i,i,1,8)),
    {-14,-13,-12,-9,10,-11,15,16}), F[2])= {{}}),
  assert(apply_pa(union(setify(create_list(i,i,1,8)),
    {-16,-13,-11,-10,-9,12,14,15}), F[2]) = {}),
  assert(apply_pa(union(setify(create_list(i,i,1,8)),
    {-16,-13,-11,-10,-9,12,14,-15}), F[2]) = {{}}),
  true)$

okltest_rijnsbox_cnfp(f) := block(
  if oklib_test_level = 0 then return(true),
  assert(f([{},{}]) = false),
  assert(f([{},{{}}]) = false),
  assert(f([{1},{{}}]) = false),
  assert(f([{1},{{1}}]) = false),
  assert(f([{1,2},{{1}}]) = false),
  assert(f([{1,2},{{1,2},{-1,2},{-2,1}}]) = false),
  assert(f(rijnsbox_fullcnf_fcs())),
  true)$


/* ******************************************
   * Representations by hitting clause-sets *
   ******************************************
*/

okltest_rijnsbox2hittingcnf_fcs(f) := block(
 [sbox_cnf,sbox_cnf_real, sbox_cnf_max],
  if oklib_test_level = 0 then return(true),
  if oklib_test_level = 1 then return(true),
  sbox_cnf : f(dll_heuristics_first_formal),
  assert(length(sbox_cnf) > 1),
  assert(rijnsbox_cnfp(cs_to_fcs(sbox_cnf))),
  sbox_cnf_real : f(dll_heuristics_first_real),
  assert(rijnsbox_cnfp(cs_to_fcs(sbox_cnf_real))),
  sbox_cnf_max : f(dll_heuristics_max_var),
  assert(rijnsbox_cnfp(cs_to_fcs(sbox_cnf_max))),
  assert(hittingcsp(sbox_cnf)),
  assert(hittingcsp(sbox_cnf_real)),
  assert(hittingcsp(sbox_cnf_max)),
  true)$


/*!
\endhtmlonly
*/
