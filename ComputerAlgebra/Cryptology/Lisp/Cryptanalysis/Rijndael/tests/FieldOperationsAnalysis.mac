/* Matthew Gwynne, 26.4.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/tests/FieldOperationsAnalysis.mac
  \brief Tests for the analysis functions of the AES Field Operations

  Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/tests/FieldOperationsAnalysis.mac");

  \bug What is the meaning of the part commented out?
  <ul>
   <li>
   \verbatim
    inputList : makelist(-i,i,1,8),
      for i : 1 thru 7 do block(
        inputList = rotate(inputList,-1),
        assert(totaldisrep(apply_pa(setify(inputList), mulFullDNF[2])) =
          {setify(map(lambda([a], (a / abs(a)) * (8 + abs(a))),
            rotate(inputList,-1)))})
    \endverbatim
    </li>
    <li> MG : A very confused attempt at implementing the section of the tests
    now implemented and labelled "Test 2 * 2^i = 2^(i+1)". It was commented out
    as it wasn't working but I wanted to come back to it (should have gone to
    plans). </li>
   </ul>



  \bug DONE Tests take too much time for level basic.
  <ul>
   <li> It seems this can be avoided, since oklib_test_level is yet
   not queried in the tests. </li>
   <li> ok_test_level introduced, although no tests will be possible at
   oklib_test_level = 0, due to the time the function to be tested takes. </li>
  </ul>

  \bug (DONE Tests now need expanding OK: what does this mean???)
  Test functions only take ONE argument.
  <ul>
   <li> The above functions is only a HELPER function. </li>
  </ul>

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac");

kill(f)$

/* Tests for AES GF(2^8) constant field multiplication dnf generator.
    
   The function to be tested takes a Rijndael GF(2^8) element as an integer
   and produces the DNF clause set representing multiplication by that element 
   in said finite field.
*/
/* OK: What does this mean?? */
okltest_generate_full_aes_field_mul_dnf_fcs(f) := block(
  [mulFullDNF,inputList,outputList],
  if oklib_test_level = 0 then return(true),
  mulFullDNF : f(2),
  assert(length(mulFullDNF[2]) = 256),
  assert(length(mulFullDNF[1]) = 16),
  /* Test 2 * 0 = 0, noting that apply_pa assumes a CNF formula */
  /* MG : Are there functions + SAT solvers for DNF clause sets? */
  assert(totaldisrep(apply_pa(setify(create_list(i,i,1,8)), mulFullDNF[2])) =
    {setify(create_list(-i,i,9,16))}),
  /* Test 2 * 2^i = 2^(i+1) */
  inputList : create_list(i,i,1,8),
  outputList : create_list(-i,i,9,16),
  for i : 0 thru 6 do block(
    inputList[8-i] : -(8-i),
    outputList[8-(i+1)] : 16-(i+1),
    assert(totaldisrep(apply_pa(setify(inputList),mulFullDNF[2]))={setify(outputList)}),
    inputList[8-i] : 8-i,
    outputList[8-(i+1)] : -(16-(i+1))),
  true)$


okltest_generate_full_aes_field_mul_cnf_fcs(f) := block([FF],
  if oklib_test_level = 0 then return(true),
  FF : f(2),
  assert(length(FF[2]) = 2^16 - 256),
  assert(elementp({-6,-5,-3,-1,2,4,7,8,9,10,11,12,13,14,15,16},
    FF[2])),
  assert(elementp({-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-2,-1,3},
    FF[2])),
  assert(elementp({-16,-15,-14,-12,-11,-7,-6,-3,1,2,4,5,8,9,10,13},
    FF[2])),
  true)$

okltest_test_CNF_aes_field_mul(f) := block(
  if oklib_test_level = 0 then return(true),
  assert(f(2,[{},{}]) = false),
  assert(f(3,[{},{}]) = false),
  assert(f(2,[setn(16),{{1,2},{4,-5,6},{-16}}]) = false),
  assert(f(3,[setn(16),{{1,2},{4,-5,6},{-16}}]) = false),
  if oklib_test_level = 1 then return(true),
  assert(f(2,generate_full_aes_field_mul_cnf_fcs(2))),
  true)$

okltest_hitting_cnf_aes_field_mul(f) := block([FF],
  if oklib_test_level = 0 then return(true),
  FF : f(2,dll_heuristics_first_formal),
  assert(hittingcsp(FF[2])),
  if oklib_test_level = 1 then return(true),
  assert(test_CNF_aes_field_mul(2,cs_to_fcs(FF))),
  true)$

/*!
\endhtmlonly
*/
