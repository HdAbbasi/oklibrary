/* Matthew Gwynne, 26.4.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/tests/FieldOperationsAnalysis.mac
  \brief Tests for the analysis functions of the AES Field Operations

Use by

oklib_load("Transitional/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/tests/FieldOperationsAnalysis.mac");
        
  \bug Tests take too much time for level basic.
  <ul>
   <li> It seems this can be avoided, since oklib_test_level is yet
   not queried in the tests. </li>
  </ul>

  \bug Test functions only take ONE argument.
  <ul>
   <li> The above functions is only a HELPER function. </li>
  </ul>

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac");

kill(f)$

/* Tests for any particular AES field multiplication */
okltest_generate_full_aes_field_mul_dnf_fcs(f,constant_field_element) := block([mulFullDNF],
  mulFullDNF : f(constant_field_element),
  assert(length(mulFullDNF[2]) = 256),
  assert(length(mulFullDNF[1]) = 16),
  assert(totaldisrep(apply_pa(setify(makelist(i,i,1,8)), mulFullDNF[2])) =
    {setify(map(lambda([a], (a / abs(a)) * (8 + abs(a))),makelist(-i,i,1,8)))}),
  /*if (constant_field_element = 2) then block([inputList, res],
    inputList : makelist(-i,i,1,8),
    for i : 1 thru 7 do block(
      inputList = rotate(inputList,-1),
      assert(totaldisrep(apply_pa(setify(inputList), mulFullDNF[2])) =
        {setify(map(lambda([a], (a / abs(a)) * (8 + abs(a))),
          rotate(inputList,-1)))})
    )
  ) else if (constant_field_element = 3) then true,*/
true)$


/*!
\endhtmlonly
*/
