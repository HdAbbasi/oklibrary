/* Matthew Gwynne, 9.4.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/FieldOperationsAnalysis.mac
  \brief Cryptanalysis functions and tools regarding AES/Rijndael field operations.

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/FieldOperationsAnalysis.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/Conversions.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/AdvancedEncryptionStandard.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac")$


/* ******************************************
   * Field Multiplication Analysis          *
   ******************************************
*/

/* Generation of the full DNF clause-set representing the 
   multiplication with the given field element (as an integer) in the 
   Rijndael GF(2^8) field.
   Prerequisite: 1 <= field_element <= 255.
*/
/* RENAME: aesmult_fulldnf_fcs */
generate_full_aes_field_mul_dnf_fcs(field_element) :=  
  [setify(create_list(i,i,1,16)),
   map(lambda([ce],setify(binl2dnf_l_std(
    append(egf_coeffs(rijn_bit_field,int2poly(ce,2),7),
      egf_coeffs(rijn_bit_field,int2poly(
        aes_field_mul_data[field_element,ce+1],
        2),7))))),
    setify(create_list(i,i,0,255)))]$

/* Generation of the full CNF clause-set representing the 
   multiplication with the given field element (as an integer) in the
   Rijndael GF(2^8) field.
   Prerequisite: 1 <= field_element <= 255.
*/
/* RENAME: aesmult_fullcnf_fcs */
generate_full_aes_field_mul_cnf_fcs(field_element) := block(
  [full16cs : clauses_f(full_fcs(16)), aes_fieldmul_cs :
  clauses_f(generate_full_aes_field_mul_dnf_fcs(field_element))],
  cs_to_fcs(setdifference(full16cs, map(comp_sl,aes_fieldmul_cs))))$


/* Output the full CNF clause-set of the permutation given by multiplication
   with a field-element different from zero:
*/
/* RENAME: output_aesmult_fullcnf_stdname */
output_full_aes_field_mul_cnf(field_element) :=
  output_fcs(
    sconcat("Full CNF representation of the AES byte-field multiplication by ",field_element, "."),
    generate_full_aes_field_mul_cnf_fcs(field_element),
    sconcat("AES_byte_field_mul_full_",field_element,".cnf"))$
          

/* Tests whether a full CNF clause-set represents the AES field
   multiplication: */
test_CNF_aes_field_mul(field_element,FF) := 
 is(cs_to_fcs(dualtreehittingcls_fcs(FF,dll_heuristics_first_real)) =
   generate_full_aes_field_mul_dnf_fcs(field_element))$


/* ******************************************
   * Representations by hitting clause-sets *
   ******************************************
*/

/* Generation of a CNF hitting clause-set, given a heuristics h for
   a backtracking solver (without reduction) */
/* RENAME: aesmult2hittingcnf_fcs */
hitting_cnf_aes_field_mul(field_element,h) := 
  dualtreehittingcls_condensed_fcs(generate_full_aes_field_mul_dnf_fcs(field_element),h)$

/*!
\endhtmlonly
*/
