/* Matthew Gwynne, 9.4.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/FieldOperationsAnalysis.mac
  \brief Cryptanalysis functions and tools regarding AES/Rijndael field operations.

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/FieldOperationsAnalysis.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/ByteField.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/Permutations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$


/* *********************************
   * Field multiplication analysis *
   *********************************
*/

/* Generation of the (unique, full) DNF clause-set representing the 
   multiplication with the field element a (as an integer) in the 
   Rijndael GF(2^8) field.
   Prerequisite: 1 <= a <= 255.
*/
rijnmult_fulldnf_fcl(a) :=
  perm2dnffcl(1+map(lambda([b], rijn_natmul(a,b)), create_list(i,i,0,255)))$
rijnmult_fulldnf_fcs(a) := fcl2fcs(rijnmult_fulldnf_fcl(a))$

/* Generation of the full CNF clause-set representing the 
   multiplication with the given field element (as an integer) in the
   Rijndael GF(2^8) field.
   Prerequisite: 1 <= field_element <= 255.
*/
rijnmult_fullcnf_fcs(field_element) := block(
  [full16cs : fcs2cs(full_fcs(16)), 
   aes_fieldmul_cs : fcs2cs(rijnmult_fulldnf_fcs(field_element))],
  cs2fcs(setdifference(full16cs, map(comp_sl,aes_fieldmul_cs))))$


/* Output the full CNF clause-set of the permutation given by multiplication
   with a field-element different from zero:
*/
output_rijnmult_fullcnf_stdname(field_element) :=
  output_fcs(
    sconcat("Full CNF representation of the AES byte-field multiplication by ",field_element, "."),
    rijnmult_fullcnf_fcs(field_element),
    sconcat("AES_byte_field_mul_full_",field_element,".cnf"))$
          

/* Tests whether a formal CNF clause-set FF represents an AES field
   multiplication: */
rijnmult_cnfp(field_element,FF) := 
 is(cs2fcs(dualtreehittingcls_fcs(FF,dll_heuristics_first_real)) =
   rijnmult_fulldnf_fcs(field_element))$


/* ******************************************
   * Representations by hitting clause-sets *
   ******************************************
*/

/* Generation of a CNF hitting clause-set, given a heuristics h for
   a backtracking solver (without reduction): */
rijnmult2hittingcnf_fcs(field_element,h) := 
  dualtreehittingcls_condensed_fcs(rijnmult_fulldnf_fcs(field_element),h)$

/*!
\endhtmlonly
*/
