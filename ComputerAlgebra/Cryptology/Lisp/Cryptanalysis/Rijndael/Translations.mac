/* Matthew Gwynne, 26.3.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/Translations.mac
  \brief Cryptanalysis functions for translations of Rijndael into active clauses etc

Use by

oklib_load("Transitional/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/Translations.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("Transitional/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/AdvancedEncryptionStandard.mac")$


/* ***************************************
   * Sets of Conditions                  *
   ***************************************
*/

/* Generates a list of variables of the form name_i where
   name is given and i ranges between n and m */
make_vars(name, n,m) := 
  makelist(eval_string(concat(name,string(i))),i,n,m)$

/* Returns a set of conditions representing AES given
   128 plaintext variables, 128 key variables and 128
   variables. */
aes_cp([bits]) := block([pBits, kBits, cBits, ekBits,ib,ob, rs : {}],
  pBits : take_elements(128,bits),
  kBits : take_elements(128,rest(bits,128)),
  cBits : rest(bits,256),
  ekBits : make_vars("ek",1, 11*128),
  /* Key Expansion */
  rs : adjoin(apply(key_expansion_cd,append(kBits, ekBits)),rs),
  ib : pBits,
  all_ob : make_vars("o",1,11*128),
  ob : take_elements(128,all_ob),
  /* Initial Round Key Addition */
  rs : adjoin(apply(aes_add_key_c,append(ib,take_elements(128,ekBits),ob)),rs),
  ib : ob,
  /* Rounds */
  for j : 1 thru 9 do block(
    ob : take_elements(128,rest(all_ob,j*128)),
    rs : adjoin(apply(aes_round_c,append(ib,take_elements(128,rest(ekBits,j*128)),
      ob)),rs),
    ib : ob
  ),
  /* Final Round */
  ob : rest(all_ob,10*128),
  rs : adjoin(apply(aes_final_round_c,append(ib,take_elements(128,
    rest(ekBits,10*128)),ob)),rs),
  return(rs)
)$
/* NB : the round number, block and key size seem trivially parameterisable */

/* NB : This needs to be changed as a method is needed to change
   the name of the auxillary variables based on the call */
/*aes_round_cp([bits]) := block([iBits, rkBits, oBits,tBits,rs:{}],
  iBits : take_elements(128,bits),
  rkBits : take_elements(128,rest(bits,128)),
  oBits : rest(bits,256),
  tBits : make_vars("so", 1,128),
  rs : adjoin(apply(aes_sbox_c,append(iBits, tBits)),rs),
  iBits : tBits,
  tBits : make_vars("ro", 1,128),
  rs : cons(apply(aes_shiftrows_c,append(iBits, tBits)),rs),
  iBits : tBits,
  tBits : make_vars("mo", 1,128),
  rs : cons(apply(aes_mixcolumns_c,append(iBits, tBits)),rs),
  iBits : tBits,
  tBits : make_vars("ko", 1,128),
  rs : cons(apply(aes_add_key_c,append(iBits, tBits)),rs),
  return(rs)
)$*/

/* NB : This needs to be changed as a method is needed to change
   the name of the auxillary variables based on the call */
/*aes_shiftrows_cp([bits]) := block([iBits, oBits],
  iBits : take_elements(128,bits),
  oBits : take_elements(128,rest(bits,128)),
  setify(map(lambda([a,b],a = b), iBits, 
    apply(append,(shiftrows(partition_elements(oBits,8))))))
)$*/

/* NB : This needs to be changed as a method is needed to change
   the name of the auxillary variables based on the call */
/*aes_mixcolumns_cp([bits]) := block([iBits, oBits, nc],
  iBits : take_elements(128,bits),
  oBits : rest(bits,128),
  nc : length(iBits)/32,
  setify(map(lambda([a,b], 
    apply(aes_mixcolumn_cd,append(apply(append,a),apply(append,b)))),
    matrixcolumns(apply(matrix,partition_elements(
      partition_elements(iBits,8),nc))),
    matrixcolumns(apply(matrix,partition_elements(
      partition_elements(oBits,8),nc)))))
)$*/

/*!
\endhtmlonly
*/
