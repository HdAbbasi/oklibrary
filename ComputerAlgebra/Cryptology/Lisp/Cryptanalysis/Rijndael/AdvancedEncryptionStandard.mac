/* Matthew Gwynne, 11.9.2007 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/AdvancedEncryptionStandard.mac
  \brief Cryptanalysis functions and tools for AES/Rijndael

Use by

oklib_load("Transitional/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/AdvancedEncryptionStandard.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/AdvancedEncryptionStandard.mac");

/* ******************************************
   * Sbox Analysis                          *
   ******************************************
*/

/* Function for generation of a full DNF clause set representing the AES sbox */
generate_full_aes_sbox_dnf_fcs() :=  
  cs_to_fcs(map(lambda([ce],binary_list_to_dnf_c(
    append(polynomial2list(ce,8),polynomial2list(lookup_sbox(ce),8)))),
    map(lambda([se], xreduce(lambda([a,b],a+b),se,0)), 
      powerset(setify(makelist(x^i,i,0,7))))))$

/* Function for generation of a full CNF clause set representing the AES sbox */
generate_full_aes_sbox_cnf_fcs() := block(
  [full16cs : clauses_f(full_fcs(16)), aes_sbox_cs :
  clauses_f(generate_full_aes_sbox_dnf_fcs())],
  cs_to_fcs(setdifference(full16cs, map(comp_sl,aes_sbox_cs))))$

/* Function to convert a given polynomial to a list of coefficients of 
   length n */
polynomial2list(poly,n) := makelist(coeff(poly, x, n-i),i,1,n)$

/* Function to generate a DNF clause from a list of values in {0,1} */
binary_list_to_dnf_c(bv) := 
  setify(map(lambda([b,j],(-1 + b * 2) * j),
    bv,makelist(i,i,1,length(bv))))$

/* ***************************************
   * Sets of Conditions                  *
   ***************************************
*/

/* Generates a list of variables of the form name_i where
   name is given and i ranges between n and m */
make_vars(name, n,m) := 
  makelist(eval_string(concat(name,string(i))),i,n,m)$

/* Returns a set of conditions representing AES given
   128 plaintext variables, 128 key variables and 128
   variables. */
aes_cp([bits]) := block([pBits, kBits, cBits, ekBits,ib,ob, rl : []],
  pBits : take_elements(128,bits),
  kBits : take_elements(128,rest(bits,128)),
  cBits : rest(bits,256),
  ekBits : make_vars("ek",1, 11*128),
  /* Key Expansion */
  rl : cons(apply(key_expansion_cd,append(kBits, ekBits)),rl),
  ib : pBits,
  all_ob : make_vars("o",1,11*128),
  ob : take_elements(128,all_ob),
  /* Initial Round Key Addition */
  rl : cons(apply(aes_add_key_c,append(ib,take_elements(128,ekBits),ob)),rl),
  ib : ob,
  /* Rounds */
  for j : 1 thru 9 do block(
    ob : take_elements(128,rest(all_ob,j*128)),
    rl : cons(apply(aes_round_c,append(ib,take_elements(128,rest(ekBits,j*128)),
      ob)),rl),
    ib : ob
  ),
  /* Final Round */
  ob : rest(all_ob,10*128),
  rl : cons(apply(aes_final_round_c,append(ib,take_elements(128,
    rest(ekBits,10*128)),ob)),rl),
  return(apply(nounify(union),rl))
)$
/* NB : the round number, block and key size seem trivially parameterisable */

/* NB : This needs to be changed as a method is needed to change
   the name of the auxillary variables based on the call */
/*aes_round_cp([bits]) := block([iBits, rkBits, oBits,rl:[]],
  iBits : take_elements(128,bits),
  rkBits : take_elements(128,rest(bits,128)),
  oBits : rest(bits,256),
  tBits : make_vars("so", 1,128),
  rl : cons(apply(aes_sbox_c,append(iBits, tBits)),rl),
  iBits : tBits,
  tBits : make_vars("ro", 1,128),
  rl : cons(apply(aes_shiftrows_c,append(iBits, tBits)),rl),
  iBits : tBits,
  tBits : make_vars("mo", 1,128),
  rl : cons(apply(aes_mixcolumns_c,append(iBits, tBits)),rl),
  iBits : tBits,
  tBits : make_vars("ko", 1,128),
  rl : cons(apply(aes_add_key_c,append(iBits, tBits)),rl),
  return(apply(nounify(union),rl))
)$*/

/*!
\endhtmlonly
*/
