/* Matthew Gwynne, 11.9.2007 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/AdvancedEncryptionStandard.mac
  \brief Cryptanalysis functions and tools for AES/Rijndael

Use by

oklib_load("Transitional/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/AdvancedEncryptionStandard.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/AdvancedEncryptionStandard.mac");


/* Function for generation of a full DNF clause set representing the AES sbox */
generate_full_aes_sbox_dnf_fcs() :=  
  cs_to_fcs(map(lambda([ce],binary_list_to_dnf_c(
    append(polynomial2list(ce,8),polynomial2list(lookup_sbox(ce),8)))),
    map(lambda([se], xreduce(lambda([a,b],a+b),se,0)), 
      powerset(setify(makelist(x^i,i,0,7))))))$

/* Function for generation of a full CNF clause set representing the AES sbox */
generate_full_aes_sbox_cnf_fcs() := block(
  [full16cs : clauses_f(full_fcs(16)), aes_sbox_cs :
  clauses_f(generate_full_aes_sbox_dnf_fcs())],
  cs_to_fcs(setdifference(full16cs, map(comp_sl,aes_sbox_cs))))$

/* Function to convert a given polynomial to a list of coefficients of 
   length n */
polynomial2list(poly,n) := makelist(coeff(poly, x, n-i),i,1,n)$

/* Function to generate a DNF clause from a list of values in {0,1} */
binary_list_to_dnf_c(bv) := 
  setify(map(lambda([b,j],(-1 + b * 2) * j),
    bv,makelist(i,i,1,length(bv))))$


/*!
\endhtmlonly
*/
