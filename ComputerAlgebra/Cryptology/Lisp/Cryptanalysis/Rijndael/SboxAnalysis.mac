/* Matthew Gwynne, 26.3.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/SboxAnalysis.mac
  \brief Cryptanalysis functions and tools regarding AES/Rijndael Sbox.

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/SboxAnalysis.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/Conversions.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/AdvancedEncryptionStandard.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac")$


/* ******************************************
   * Sbox Analysis                          *
   ******************************************
*/

/* Transforms an integer into a big endian binary list representation
   padded with 0s to the left up to length "n" */
int2binlist(int,n) := block([result_list : []],
  while int >= 2^n do int : int - 2^n,
  for i : n-1 thru 0 step -1 do block(
    if int >= 2^i then block(
      result_list : endcons(1,result_list),
      int : int- 2^i
    ) else result_list : endcons(0,result_list)),
  return(result_list))$

/* Generation of the full DNF clause-set representing the AES sbox */
generate_full_aes_sbox_dnf_fcs() :=  
  cs_to_fcs(map(
    lambda([ce],setify(binl2dnf_l_std(
      append(int2binlist(ce,8),
        int2binlist(rijn_lookup_sbox(ce),8)))
    )),setmn(0,255)))$

/* Generation of the full CNF clause-set representing the AES sbox */
generate_full_aes_sbox_cnf_fcs() := block(
  [full16cs : clauses_f(full_fcs(16)), aes_sbox_cs :
  clauses_f(generate_full_aes_sbox_dnf_fcs())],
  cs_to_fcs(setdifference(full16cs, map(comp_sl,aes_sbox_cs))))$
output_full_aes_sbox_cnf() :=
  output_fcs(
    sconcat("AES Sbox function given the full CNF representation."),
    generate_full_aes_sbox_cnf_fcs(),
    sconcat("AES_Sbox_full.cnf"))$

/* Tests whether a full CNF clause-set represents the AES sbox */
test_CNF_aes_sbox(FF) := 
 is(cs_to_fcs(dualtreehittingcls_fcs(FF,dll_heuristics_first_real)) = generate_full_aes_sbox_dnf_fcs())$

/* Generation of a CNF hitting clause-set, given a heuristics h for
   a backtracking solver (without reduction) */
hitting_cnf_aes_sbox(h) := dualtreehittingcls_condensed_fcs(generate_full_aes_sbox_dnf_fcs(),h)$

/* Generate the full DNF form of a given permutation of an integer set. The 
   permutation (mapping) is given as a list "perm", where it is assumed the 
   mapping is from elements of the list "perm" after sorting, given the 
   natural order, to the corresponding elements in "perm" */
generate_full_int_perm_dnf_fcs(perm) := block(
  elements : sort(perm),
  /* MG : Is there already a library function for this (binary length of an
     integer)? */
  binLength : apply(max,map(
    lambda([a],if abs(a) = 0 then 1 else ceiling(log(a+1)/log(2))),perm)),
  cs_to_fcs(setify(map(
    lambda([a,b], setify(binl2dnf_l_std(
      append(int2binlist(a,binLength),int2binlist(b,binLength))))),elements,
      perm)))
)$

/* Generate the full CNF form of a given permutation of an integer set. The 
   permutation (mapping) is given as a list "perm", where it is assumed the 
   mapping is from elements of the list "perm" after sorting, given the 
   natural order, to the corresponding elements in "perm" */
generate_full_int_perm_cnf_fcs(perm) := block(
  [fullncs, int_perm_dnf : generate_full_int_perm_dnf_fcs(perm)],
  fullncs : full_fcs(length(int_perm_dnf[1])),
  [int_perm_dnf[1],setdifference(clauses_f(fullncs),
    map(comp_sl,clauses_f(int_perm_dnf)))]
)$

/* Tests whether a CNF clause-set represents the given permutation. The 
   permutation (mapping) is given as a list "perm", where it is assumed the 
   mapping is from elements of the list "perm" after sorting, given the 
   natural order, to the corresponding elements in "perm". S determines
   the SAT solver used for testing. */
test_CNF_int_perm(FF,perm,S) := 
  every_s(lambda([a],S(apply_pa_f(a,FF))),
    generate_full_int_perm_dnf_fcs(perm)[2]) and
  every_s(lambda([a],not S(apply_pa_f(a,FF))),
    map(comp_sl,generate_full_int_perm_cnf_fcs(perm)[2]))$

/*!
\endhtmlonly
*/
