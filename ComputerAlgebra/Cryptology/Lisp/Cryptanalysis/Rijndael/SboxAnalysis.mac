/* Matthew Gwynne, 26.3.2008 (Swansea) */
/* Copyright 2008, 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/SboxAnalysis.mac
  \brief Cryptanalysis functions and tools regarding AES/Rijndael Sbox.

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/SboxAnalysis.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/Conversions.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/AdvancedEncryptionStandard.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/Permutations.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/data/Sbox.mac")$


/* ******************************************
   * Sbox Analysis                          *
   ******************************************
*/


/* Generation of the full DNF clause-set representing the AES sbox: */
rijnsbox_fulldnf_fcl() := perm2dnffcl(1+aes_sbox_l)$
rijnsbox_fulldnf_fcs() := fcl2fcs(rijnsbox_fulldnf_fcl())$

/* Generation of the full CNF clause-set representing the AES sbox: */
rijnsbox_fullcnf_fcs() := block(
  [full16cs : clauses_f(full_fcs(16)), aes_sbox_cs :
  clauses_f(rijnsbox_fulldnf_fcs())],
  cs2fcs(setdifference(full16cs, map(comp_sl,aes_sbox_cs))))$

/* Output the full CNF clause-set of the permutation given by the AES
   S-box:
*/
output_rijnsbox_fullcnf_stdname() :=
  output_fcs(
    sconcat("AES Sbox function given the full CNF representation."),
    rijnsbox_fullcnf_fcs(),
    sconcat("AES_Sbox_full.cnf"))$

/* Tests whether a formal CNF clause-set represents the AES sbox:

   This function is useful when generating Sbox representations as
   one can then test whether such representations are equivalent
   to the Sbox. See plans/SboxAnalysis.hpp .
*/
rijnsbox_cnfp(FF) := 
 is(cs2fcs(dualtreehittingcls_fcs(FF,dll_heuristics_first_real)) = rijnsbox_fulldnf_fcs())$


/* ******************************************
   * Representations by hitting clause-sets *
   ******************************************
*/

/* Generation of a CNF hitting clause-set, given a heuristics h for
   a backtracking solver (without reduction): */
rijnsbox2hittingcnf_fcs(h) := dualtreehittingcls_condensed_fcs(rijnsbox_fulldnf_fcs(),h)$


/*!
\endhtmlonly
*/
