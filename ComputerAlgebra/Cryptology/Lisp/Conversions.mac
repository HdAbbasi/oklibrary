/* Matthew Gwynne, 2.3.2007 (Swansea) */
/* Copyright 2008, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Conversions.mac
  \brief Conversion functions for use in Cryptology.
  \deprecated Functions to be moved elsewhere.

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/Conversions.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac")$

/* Pads a string s to the left with Maxima-character c until it is at least
   n characters in length (n is an arbitrary integer): */
lpad(st, c, n) := simplode([smake(max(n-slength(st),0),c), st])$
/* Pad a list of numbers with leading zeros to reach the
   full block-length 16:
*/
pad_block_16(L) := append(create_list(0,i,1,16-length(L)), L)$

/* Converts an integer to a polynomial with coefficients in the given base by
   converting the integer to a number in that base and taking each digit as a
   coefficient of increasing powers of "x". */
/* MG: Should this handle coeff_base = 0? */
/* MG: Should this take the variable the polynomial should be in? */
int2poly(n,coeff_base) := 
  expand(lreduce(lambda([a,b], a * x + b),
      map(digit2int,str2chrl(int2polyadicstr(n,coeff_base))),0))$ 

/* Converts the given polynomial to an integer, assuming that the polynomial
   in "poly_x" represents an integer in the given base "poly_b". */
/* MG : Should this return an error expression if "poly" isn't univariate? */
poly2int(poly, poly_b, poly_x) := subst(poly_b,poly_x,poly)$

/* Converts a hexidecimal string to a list of GF(2^8) elements:

   Note in particular that it is assumed in this function that the hexidecimal
   string amounts to a representation of a matrix of bytes, which is given
   column by column and is transformed into a list of polynomials over GF(2^8)
   which represents the matrix column by column. */
hex2gf2t8l(hex) :=
  map(lambda([a],int2poly(polyadicstr2int(simplode(a),16),2)),
    partition_elements(str2chrl(hex),2))$
  
/* Converts a list of GF(2^8) elements to a hexidecimal string:

   Note in particular that it is assumed in this function that list of 
   polynomials over GF(2^8) represents the matrix of polynomials given 
   column by column in the list and the returned hex string is a hexidecimal
   representation of the matrix given column by column. */
gf2t8l2hex(lst) :=
    simplode(flatten(map(lambda([a], lpad(simplode([int2polyadicstr(a,16)]),"0",2)),  
      subst(2,x,lst))))$

/* Converts a hexidecimal string in the typical notation associated with
   Rijndael to a list of GF(2^8) elements represented by use of integers. 
   The result list is used in the CryptoSystems AES implementation. */
hex2il(h) := 
  map(lambda([b], hex2int(simplode(b))), partition_elements(charlist(h),2))$

/* Converts a list of GF(2^8) elements represented by use of integers to a 
   hexidecimal string in the typical notation associated with Rijndael . 
   The input list is used in the CryptoSystems AES implementation. */
il2hex(lst) := uaapply(sconcat, map(lambda([s],lpad(int2hex(s),"0",2)),lst))$


/*!
\endhtmlonly
*/
