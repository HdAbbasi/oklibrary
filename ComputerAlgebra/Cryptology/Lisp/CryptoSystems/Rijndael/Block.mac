/* Matthew Gwynne, 21.01.2010 (Swansea) */
/* Copyright 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/Block.mac
  \brief Components for the Rijndael key and message blocks

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/Block.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/*
   There are 3 main representations of the AES message and key blocks
   (which are treated in the same way).

TODO: "n_b = 4xn" ???

   The main representation is a n_b = 4xn matrix where the block size
   n_b is one of {128,164,192,224,256}, and this matrix corresponds
   exactly to the matrices as described in the AES standard.

TODO: And, what does this mean?

   The elements
   of the matrix are polynomials.

   Another representation is that of a list of polynomials which lists
   the elements of the AES block column by column.

   The final representation is that of a list of integers which lists
   the elements of the AES block column by column where each element is
   an integer representing the polynomials as used in the above
   representations, where the exact details of the correspondence are given in
   polybin2nat etc. in ByteField.mac.
*/

/* Converting polynomial matrices to polynomial lists and back: */
rijn_m2l(M) := m2l_r(transpose(M))$
rijn_l2m(L) := transpose(apply(matrix,partition_elements(L,4)))$

/* Converting polynomial matrices to polynomial lists and back for
   matrices over arbitrary small scale fields and arbitrary matrices */
ss_m2l(M) := m2l_r(transpose(M))$
ss_l2m(L,n_R) := transpose(apply(matrix,partition_elements(L,n_R)))$

/* Converting integer lists to polynomial matrices and back: */
rijn_natl2m(L) := rijn_l2m(map(nat2polybin,L))$
rijn_m2natl(M) := rijn_m2l(matrixmap(polybin2nat,M))$

ss_natl2m(L,b,n_R) := 
  ss_l2m(map(lambda([n],nat2poly(n,b)),L),n_R)$
ss_m2natl(M,b) := 
  ss_m2l(matrixmap(lambda([p],poly2nat(p,b)),M))$

/* Converting small scale matrices of polynomials to the standard hexidecimal
   notation based on [Design of Rijndael] and used in [Small Scale Advanced
   Encryption Standard]. */
ss_matrix2hex(m, b,e,mod_poly) := block([nl],
  nl : ss_m2natl(m,b),
  return(
    apply(sconcat,map(
        lambda([a],lpad(int2polyadicstr(a,16),"0", ceiling(fld(b^e)/fld(16)))),
        nl))
    ))$

ss_hex2matrix(hex_str,b,e,mod_poly, num_rows) := block([hex_bits, hexl, nl],
  hex_bits : ceiling(fld(b^e)/fld(16)),
  hexl : map(lambda([a],apply(sconcat,a)),
    partition_elements(str2chrl(hex_str),hex_bits)),
  nl : map(lambda([a], polyadicstr2int(a,16)), hexl),
  return(ss_natl2m(nl, b, num_rows))
  )$

/*!
\endhtmlonly
*/
