/* Matthew Gwynne, 6.9.2007 (Swansea) */
/* Copyright 2007, 2008, 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/AdvancedEncryptionStandard.mac
  \brief Implementing AES (Rijndael) and generalisations

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/AdvancedEncryptionStandard.mac");

*/

/*!
\htmlonly
*/

/* The following two files are guaranteed to be included: */
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/BitField.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/ByteField.mac")$

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/Conversions.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/FiniteFields.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/data/Sbox.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/data/InvSbox.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/data/FieldMultiplications.mac")$
oklib_include("OKlib/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac")$

oklib_plain_include(eigen)$ /* (for function columnvector) */


/* *************
   * Constants *
   *************
*/

/* Default number of rounds to be used in the AES functions. */
aes_num_rounds : 10$


/* *********
   * S box *
   *********
*/

/* Constant used in the affine transformation within sbox: */
rijn_affine_constant : '(x^6 + x^5 + x + 1)$
/* Constant used in the affine transformation within inv_sbox: */
rijn_inv_affine_constant : '(x^2 + 1)$ 

/* Matrix used in the affine transformation within rijn_sbox: */
rijn_sbox_matrix : apply(matrix,
  create_list(rotate([1,1,1,1,1,0,0,0],i),i,0,7))$
/* Matrix used in the affine transformation within inv_sbox: */
rijn_inv_sbox_matrix : apply(matrix,
  create_list(rotate([0,1,0,1,0,0,1,0],i),i,0,7))$

/* The AES sbox */

/* Takes a value from the byte field as vector and returns the result
   of applying the Rijndael Sbox operation (as vector): */
rijn_sbox_vec(v) := rijn_stand_vec(column_m(
   rijn_sbox_matrix . columnvector(rijn_vecinv(v)) +
   columnvector(polybin2vecbin_rijn(rijn_affine_constant)), 1))$
/* Now representing bytes as natural numbers: */
rijn_sbox(bytei) := vecbin2nat(rijn_sbox_vec(nat2vecbin_rijn(bytei)))$

/* Inverse of Sbox: */
rijn_inv_sbox_vec(v) := rijn_vecinv(rijn_stand_vec(column_m(
  rijn_inv_sbox_matrix . columnvector(v) + 
  columnvector(polybin2vecbin_rijn(rijn_inv_affine_constant)),1)))$
rijn_inv_sbox(bytei) := vecbin2nat(rijn_inv_sbox_vec(nat2vecbin_rijn(bytei)))$

/* Sbox implementation that utilises a lookup array to provide fast operation:
*/
rijn_lookup_sbox(bytei) := sbox_data[bytei+1];

/* Inverse Sbox implementation that utilises a lookup array to provide 
   fast operation: */
rijn_lookup_inv_sbox(bytei) := inv_sbox_data[bytei+1];


/* *************
   * Sub-bytes *
   *************
*/

/* 
   Takes the input block as a list of 16 bytes and applies
   the sbox operation to each byte, returning the list of 
   result bytes:
*/
rijn_subbytes(inputblock, sbox_f) := map(sbox_f, inputblock)$

/* 
   Takes the input block as a list of 16 bytes and applies
   the inverse sbox operation to each byte, returning the list of 
   result bytes:
*/
rijn_inv_subbytes(inputblock,inv_sbox_f) := map(inv_sbox_f, inputblock)$


/* **************
   * Shift rows *
   **************
*/

/*
   List of shifts left for each row in the block in the  shiftrows
   operation:
*/
aes_shiftrows_shifts : [0,1,2,3]$

/*
   Takes a list of GF(2^8) elements (the block), and
   performs the shiftrows operation, returning the resulting
   block as a list of GF(2^8) elements:
*/
aes_shiftrows(inputblock) := block(
[list_rows : partition_elements(transpose_l(inputblock,4),4)],
  transpose_l(m2l_r (
      create_list(rotate(list_rows[abs(r)+1],-r), r, aes_shiftrows_shifts)
  ),length(inputblock)/4))$

/*
   Takes a list of GF(2^8) elements (the block), and
   performs the inverse shiftrows operation, returning the resulting
   block as a list of GF(2^8) elements:
*/
aes_inv_shiftrows(inputblock) := 
  block([aes_shiftrows_shifts : -aes_shiftrows_shifts],
  aes_shiftrows(inputblock))$


/* ***************
   * Mix columns *
   ***************
*/

/*
   Matrix used in the mixcolumns step to model the 
   multiplication of each 4-byte column by a constant
   in a polynomial ring of at most order 4 with coefficients in
   GF(2^8):
*/
rijn_mixcolumns_matrix : block([x], apply(matrix, 
  create_list(rotate([x, x + 1, 1, 1], i),i,0,3)))$
/* Inverse of the rijn_mix_columns_matrix: */
rijn_inv_mixcolumns_matrix : block([x], apply(matrix,
  create_list(rotate([x^3+x^2+x,x^3+x+1,x^3+x^2+1,x^3+1], i),i,0,3)))$

/* Mixcolumn operation applied to the elements of a single
   column in the AES/Rijndael block: */
rijn_mixcolumn(inputblocki) :=
  transpose_l(
    map(lambda([y],egf_poly2num(rijn_byte_field,y)),matrixcolumns(
      rijn_matmul(rijn_mixcolumns_matrix,
        columns2matrix([
          map(lambda([y],egf_num2poly(rijn_byte_field,y)),
            transpose_l(inputblocki,4))])))[1]),4)$

/* Mixcolumn operation applied to the elements of a single
   column in the AES/Rijndael block using lookups for
   multiplications: */
rijn_lookup_mixcolumn(inputblocki) := block([lookup_field_mul],
  lookup_field_mul : lambda([d,e],aes_field_mul_data[d,e+1]),
  map(lambda([a], xreduce(logxor,a,0)),
    create_list(
      map(lookup_field_mul,rotate([2, 3, 1, 1], i),inputblocki),i,0,3)))$

/*
   Takes a list of GF(2^8) elements (the block), and
   performs the mixcolumns operation, returning the resulting
   block as a list of GF(2^8) elements. A function specifying
   the actual operation done on a particular column must be
   provided as the second argument.
*/
rijn_mixcolumns(inputblock,mixcolumn_f) :=
  transpose_l(m2l_r(columns2matrix(
    map(mixcolumn_f,matrixcolumns(
      apply(matrix,partition_elements(transpose_l(inputblock,4),4)))))),4)$

/* Mixcolumn operation applied to the elements of a single
   column in the AES/Rijndael block: */
rijn_inv_mixcolumn(inputblock) :=
  block([rijn_mixcolumns_matrix : rijn_inv_mixcolumns_matrix],
    rijn_mixcolumn(inputblock))$

/* Mixcolumn operation applied to the elements of a single
   column in the AES/Rijndael block using lookups for
   multiplications: */
rijn_lookup_inv_mixcolumn(inputblocki) := block([lookup_field_mul],
  lookup_field_mul : lambda([d,e],aes_field_mul_data[d,e+1]),
  map(lambda([a], xreduce(logxor,a,0)),
    create_list(
      map(lookup_field_mul,rotate([14,11,13,9], i),inputblocki),i,0,3)))$

/*
   Takes a list of GF(2^8) elements (the block), and
   performs the inverse mixcolumns operation, returning the resulting
   block as a list of GF(2^8) elements. A function specifying
   the actual operation done on a particular column must be
   provided as the second argument.
*/
rijn_inv_mixcolumns(inputblock,inv_mixcolumn_f) := 
  rijn_mixcolumns(inputblock,inv_mixcolumn_f)$


/* *****************
   * Key expansion *
   *****************
*/

/*
  Takes the initial key as a list of GF(2^8) elements, the size (in 32 bit 
  words) of the plaintext block, and the number of rounds, and returns the
  expanded key (all of the round keys as one large block) as a list of 
  GF(2^8) elements:
*/
aes_key_expansion(kl, n_b, sbox_f, aes_add) := block(
  [n_k : length(kl) / 4, 
  cols : partition_elements(kl,4)],
  for j : n_k thru (n_b*(aes_num_rounds +1)) - 1 do block([column : [0,0,0,0]],
    if mod(j, n_k) = 0 then block (
      column[1] : aes_add(cols[j-n_k+1][1], 
        aes_add(sbox_f(cols[j][2]), 
          xreduce(lambda([a,b],aes_field_mul_data[b,a+1]),
            create_list(2,i,1,(floor(j/n_k) -1)),1))),
      for i : 1 thru 3 do 
        column[i+1] : 
          aes_add(cols[j-n_k+1][i+1], sbox_f(cols[j][mod(i+1,4)+1])))
    else for i : 1 thru 4 do 
      column[i] : aes_add(cols[j][i], cols[j-n_k+1][i]),
    cols : append(cols, [column])),
  return(m2l_r(cols))
)$


/* *********************************
   * AES encryption and decryption *
   *********************************
*/

/* 
   Takes the plaintext list of GF(2^8) elements and the 
   round key for this round as a list of GF(2^8) elements, and
   returns a list of the same size of GF(2^8) elements as the plaintext
   as the result of the round operation:
 */
aes_round(pl, rkl, sbox_f, mixcolumn_f, aes_add) := 
  map(aes_add,
    rijn_mixcolumns(aes_shiftrows(rijn_subbytes(pl,sbox_f)),mixcolumn_f),rkl)$
inv_aes_round(pl,rkl,inv_sbox_f,inv_mixcolumn_f,aes_add) := 
  rijn_inv_subbytes(aes_inv_shiftrows(
    rijn_inv_mixcolumns(map(aes_add,pl,rkl),inv_mixcolumn_f)), inv_sbox_f)$

/* 
   Takes the plaintext list of 16 GF(2^8) elements, the key list of 16
   GF(2^8) elements and returns the result of applying the 128 bit AES 
   encryption algorithm (hence number of rounds is assumed to be 10):
*/
aes_encrypt(pl, kl, sbox_f, mixcolumn_f,aes_add) := block(
  [n_b : length(pl)/4], 
  /* Initial Rounds */
  ekl : partition_elements(
    aes_key_expansion(kl,n_b,sbox_f,aes_add),n_b*4),
  initial_rk : first(ekl), final_rk : last(ekl),
  initial_result : 
    lreduce(lambda([a,b],aes_round(a,b,sbox_f,mixcolumn_f,aes_add)),
    rest(rest(ekl), -1), map(aes_add,pl,initial_rk)),
  /* Final Round */
  if aes_num_rounds = 10 then
    map(aes_add,aes_shiftrows(rijn_subbytes(initial_result,sbox_f)), final_rk)
  else
    aes_round(initial_result,final_rk, sbox_f, mixcolumn_f,aes_add)
)$

/* 
   Takes the ciphertext list of 16 GF(2^8) elements, the key list of 16
   GF(2^8) elements and returns the result of applying the 128 bit AES 
   decryption algorithm (hence number of rounds is assumed to be 10):
*/
aes_decrypt(pl, kl, sbox_f, inv_sbox_f,inv_mixcolumn_f,aes_add) := block(
  [n_b : length(pl)/4], 
  /* Initial Rounds */
  ekl : partition_elements(
    aes_key_expansion(kl,n_b,sbox_f,aes_add),n_b*4),
  initial_rk : first(ekl), final_rk : last(ekl),
  /* Final Round */
  if aes_num_rounds = 10 then
    initial_result : 
      rijn_inv_subbytes(aes_inv_shiftrows(map(aes_add,pl,final_rk)),
        inv_sbox_f)
  else
    initial_result :
      inv_aes_round(pl,final_rk, inv_sbox_f,inv_mixcolumn_f,aes_add),
  map(aes_add, rreduce(lambda([a,b],
    inv_aes_round(a,b,inv_sbox_f,inv_mixcolumn_f,aes_add)), 
    rest(rest(ekl), -1), initial_result), initial_rk)
)$


/* *************************************
   * Convenience instantiations of AES *
   *************************************
*/


/* Different forms of computation */

/* AES Encryption using lookup tables: */
aes_encrypt_l(p,k) := 
  aes_encrypt(p,k,rijn_lookup_sbox,rijn_lookup_mixcolumn,rijn_nataddl)$

/* AES Encryption using field operations: */
aes_encrypt_f(p,k) := 
  aes_encrypt(p,k,rijn_sbox,rijn_mixcolumn,rijn_natadd)$

/* AES Decryption using lookup tables: */
aes_decrypt_l(c,k) := 
  aes_decrypt(c,k,rijn_lookup_sbox,rijn_lookup_inv_sbox,rijn_lookup_inv_mixcolumn,rijn_nataddl)$

/* AES Decryption using field operations: */
aes_decrypt_f(c,k) := 
  aes_decrypt(c,k,rijn_sbox,rijn_inv_sbox,rijn_inv_mixcolumn,rijn_natadd)$


/* Various representations of input/output */

/* Input and output as hexadecimal values (the input does not need
   leading zeros, but the output is always padded to 32 hexadecimal
   digits): */
aes_encrypt_hex(p,k) := 
  lpad(int2hex(polyadic2int(
    aes_encrypt_l(
      pad_block_16(pad_block_16(int2polyadic(hex2int(p),256))),
      pad_block_16(pad_block_16(int2polyadic(hex2int(k),256)))
    ),
    256)), "0", 32)$
aes_decrypt_hex(p,k) := 
  lpad(int2hex(polyadic2int(
    aes_decrypt_l(
      pad_block_16(pad_block_16(int2polyadic(hex2int(p),256))),
      pad_block_16(pad_block_16(int2polyadic(hex2int(k),256)))
    ),
    256)), "0", 32)$

/* The AES-chiffre as number-theoretical function: */
aes_int(p,k) :=
  polyadic2int(
    aes_encrypt_l(
      pad_block_16(int2polyadic(p,256)), 
      pad_block_16(int2polyadic(k,256))
    ),
    256)$


/*!
\endhtmlonly
*/
