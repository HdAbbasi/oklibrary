/* Oliver Kullmann, 23.12.2009 (Swansea) */
/* Copyright 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/ByteField.mac
  \brief Components for the Rijndael byte field (a field with 2^8 elements)

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/ByteField.mac");


  \bug rijn_vecinv([0,0,0,0,0,1,0,1]) # [0,1,0,1,0,0,1,0]
  <ul>
   <li> We have that
   \verbatim
> is(rijn_vecinv([0,0,0,0,0,1,0,1]) = [0,1,0,1,0,0,1,0]);
false
   \endverbatim
   but
   \verbatim
> is(totaldisrep(rijn_vecinv([0,0,0,0,0,1,0,1])) = [0,1,0,1,0,0,1,0]);
true
   \endverbatim
   </li>
   <li> This is not an issue with the computation itself as
   \verbatim
> rijn_vecinv([0,0,0,0,0,1,0,1]); 
[0,1,0,1,0,0,1,0]
   \endverbatim
   but the result of rijn_vecinv seems to be in CRE form (somehow?) which
   is not equivalent to the standard list and so totaldisrep must be used.
   </li>
   <li> This causes problems for instance in okltest_aes_decrypt_generic
   in CryptoSystems/Rijndael/tests/AdvancedEncryptionStandard.mac where
   rijn_vecinv is used by aes_decrypt_f and must be compared to
   output during the tests. </li>
  </ul>

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac")$


/* ******************
   * Representation *
   ******************
*/

/*
   The irreducible polynomial over ZZ_2 used as the modulus in Rijndael to
   define the field of order 2^8:
*/
rijn_polynomial : '(x^8 + x^4 + x^3 + x + 1)$
rijn_byte_field : [2,8,rijn_polynomial]$

/* The standard representation of an element of the Rijndael field uses
   univariate polynomials in x over the integers, which are treated as
   representative of their equivalence class.
*/

/* Standardising a univariate polynomial in x over ZZ as an element
   of the Rijndael field, consisting of all polynomial of degree at
   most 7 over ZZ_2 = {0,1}:
*/
rijn_stand(p) := polymod(divide(p,rijn_polynomial,x)[2],2)$

/* An alternative representation uses the elements of {0,...,255},
   interpreted as polynomial over the formal element "2".
   The general conversions are as follows, for integer 0 <= n and
   polynomials p over the nonnegative integers:
*/
nat2polybin(n) := vecbin2polybin(int2polyadic(n,2))$
polybin2nat(p) := polyadic2int(polybin2vecbin(p),2)$
/* Remark: Note that in the context of the byte-field these operations
   only make sense for 0 <= n <= 255 and standardised polynomials p.
*/

/* Finally, the byte-field is an 8-dimensional vector-space over the
   field ZZ_2 = {0,1}. Similar to consider the elements of the byte-field
   as (arbitrary) polynomials, we can consider here arbitrary integer-vectors,
   and standardisation just happens by computing the remainders modulo
   2 componentwise.
*/
rijn_stand_vec(v) := mod(v,2)$

/* Converting between the representation by natural numbers and the
   vector representation:
*/
nat2vecbin(n) := int2polyadic(n,2)$
nat2vecbin_rijn(n) := int2polyadic_padd(n,2,8)$

vecbin2nat(v) := polyadic2int(v,2)$

/* Converting between the representation by polynomials and the
   vector representation:
*/
polybin2vecbin(p) := block([h : hipow(p,'x)],
 reverse(create_list(coeff(p,'x,i),i,0,h)))$
polybin2vecbin_rijn(p) := block([L : polybin2vecbin(p)],
 append(create_list(0,i,1,8-length(L)),L))$

vecbin2polybin(v) := sum_l(reverse(v) * create_list(('x)^i,i,0,length(v)-1))$


/* **************
   * Operations *
   **************
*/

/* Addition and multiplication in the byte-field is just addition
   and multiplication of polynomials, however this does not yield
   standardised results; for standardised results use the following:
*/
rijn_add(a,b) := rijn_stand(a+b)$
rijn_mul(a,b) := rijn_stand(a*b)$
rijn_matmul(a,b) := matrixmap(rijn_stand, a.b)$

/* Inversion in the byte-field (yielding a standardised result): */
rijn_inv(a) := rijn_stand(gcdex(a,rijn_polynomial)[1])$
/* Extended inversion (with 0 -> 0): */
rijn_einv(a) := if a=0 then 0 else rijn_inv(a)$


/* The field operations with integers as input and output: */

rijn_natadd(a,b) := 
  polybin2nat(rijn_add(nat2polybin(a), nat2polybin(b)))$
oklib_plain_include(functs)$
/* The same operation as rijn_natadd, but now using the built-in
   logical operator (for xor on numbers): */
rijn_nataddl(a,b) := logxor(a,b)$

rijn_natmul(a,b) := 
  polybin2nat(rijn_mul(nat2polybin(a), nat2polybin(b)))$

rijn_natinv(a) := 
  polybin2nat(rijn_einv(nat2polybin(a)))$


/* The field operations with binary vectors (as lists) as input and output: */

rijn_vecadd(a,b) := rijn_stand_vec(a+b)$

rijn_vecmul(a,b) := 
 polybin2vecbin_rijn(rijn_mul(vecbin2polybin(a), vecbin2polybin(b)))$

rijn_vecinv(a) := polybin2vecbin_rijn(rijn_einv(vecbin2polybin(a)))$

/*!
\endhtmlonly
*/
