/* Matthew Gwynne, 27.1.2010 (Swansea) */
/* Copyright 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/SmallScaleAdvancedEncryptionStandard.mac
  \brief Implementing the small-scale variation of AES, and generalisations

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/AdvancedEncryptionStandard.mac");

*/

/*!
\htmlonly
*/

/* The following file is guaranteed to be included: */
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/SmallScaleWordFields.mac")$

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac")$
oklib_plain_include(eigen)$ /* (for function columnvector) */


/*
   The following implements the small scale AES as described in [Small Scale
   Variants of the AES] and
   [Algebraic Aspects of the Advanced Encryption Standard, section 3.3].

   The basic structure of the encryption and decryption is the same as AES
   (see AdvancedEncryptionStandard.mac). In particular matrices are used
   as input and output, and polynomials are used as the block elements.

   However, rather than simply being able to vary the number of rounds, this
   system allows one to additionally vary the following parameters (all
   non-negative integers):

   e - specifies that the size of the finite field used for individual
       block elements should be 2^e (i.e., the field is a GF(2^e) field)
       where the modulo polynomials for each of these fields is
       predefined.
   n_C - The number of columns in the block matrix.
   n_R - The number of rows in the block matrix.

   In addition to these parameters, we additionally (to [Small Scale Variants
   of the AES]) allow arbitrary finite fields rather than just fields of size
   2^e for the block elements and therefore we also introduce an integer
   parameter b for the base, and a parameter mod_poly for the
   modulo-polynomial to standardise the result of any operations in this field.

   Given this variety of parameters, functions are needed to define
   different Sbox and MixColumn operations based on the new dimensions of the
   fields and the block, which in turn use different vectors and matrices
   in their definition (as defined by [Small Scale Variants of the AES] or by
   the user in cases where this has not been defined there), therefore
   functions such as ss_mixcolumn_matrix, ss_sbox_matrix,
   ss_sbox_affine_constant etc. are defined which take their defining
   parameters (from b,e,n_C,n_R) and return the "standard" object to be used
   in each case.

   In [Small Scale Variants of the AES], there are two major variations, apart
   from the minor variations described above, those denoted by AES (the
   default variation in [Small Scale Variants of the AES]) and AES*, where AES
   is defined without a specialised final round (contrary to the standard AES
   definition), while AES* is defined in the same way as the standard AES with
   a specialised final round which does not contain MixColumns.

   For some functions two variants are provided, the standard version (without
   any special ending) and a generalised version (postfixed with "_gen").

   The standard versions take (in addition to any other arguments) the base b
   and exponent e for the field, and then all other parameters (mod_poly, the
   sbox function, mixcolumn function etc) are derived using functions such as
   ss_polynomial, ss_sbox etc which provide the default constants and
   implementations.

   The generalised version then take all parameters necessary for their
   function (from the list of parameters described above) without
   assuming any defaults.
   
*/

/*
   The following naming conventions have been used in this module:

   Functions ending in "_gen" provide a generalisation of their namesake
   function, where additional parameters are taken, rather than using the
   standard constants provided by functions such as ss_mixcolumn_matrix etc.

   The AES and AES* variations as described in [XXX] are called given by
   the functions ss_encrypt and ss_encrypt_wf respectively where "_wf"
   signifies "*w*ith *f*inal round".

OK: What is [XXX]??

*/

/* TODO: REWRITE documentation below */
/* TODO: TIDY code below to ensure readability. */

/* OK: I thought this file would have been completed? */

/* *********
   * S box *
   *********
*/

/* Constant used in the affine transformation within ss_sbox: */
ss_affine_constant_2_4 : '(x^2+x)$
ss_affine_constant_2_8 : '(x^6 + x^5 + x + 1)$
/* Returns the default affine constant for the default GF(b^e) field: */
ss_affine_constant(b,e) :=
  if b = 2 then
    if e = 4 then ss_affine_constant_2_4
    else if e = 8 then ss_affine_constant_2_8
    else und
  else und$
/* Constant used in the affine transformation within ss_inv_sbox: */
/* Generated by multiplying the corresponding Sbox matrix by the
   vector for the affine constant and converting back to polynomials. */
ss_inv_affine_constant_2_4 : '(x+1)$ 
ss_inv_affine_constant_2_8 : '(x^2 + 1)$
/* Returns the default inverse affine constant for the default GF(b^e) field. */
ss_inv_affine_constant(b,e) :=
  if b = 2 then
    if e = 4 then ss_inv_affine_constant_2_4
    else if e = 8 then ss_inv_affine_constant_2_8
    else und
  else und$



/* Matrix used in the affine transformation within ss_sbox: */
ss_sbox_matrix_2_4 : apply(matrix,
  create_list(rotate([1,0,1,1],i),i,0,3))$
ss_sbox_matrix_2_8 : apply(matrix,
  create_list(rotate([1,1,1,1,1,0,0,0],i),i,0,7))$
/* Returns the default sbox matrix for the default GF(b^e) field. */
ss_sbox_matrix(b,e) :=
  if b = 2 then
    if e = 4 then ss_sbox_matrix_2_4
    else if e = 8 then ss_sbox_matrix_2_8
    else und
  else und$
/* Matrix used in the affine transformation within ss_sbox: */
ss_inv_sbox_matrix_2_4 : apply(matrix,
  create_list(rotate([1,1,1,0],i),i,0,3))$
ss_inv_sbox_matrix_2_8 : apply(matrix,
  create_list(rotate([0,1,0,1,0,0,1,0],i),i,0,7))$
/* Returns the default inverse sbox matrix for the default GF(b^e) field. */
ss_inv_sbox_matrix(b,e) :=
  if b = 2 then
    if e = 4 then ss_inv_sbox_matrix_2_4
    else if e = 8 then ss_inv_sbox_matrix_2_8
    else und
  else und$

/* The small scale AES sbox takes an individual small scale
   field element (an element of the block) and returns
   the result of applying the small scale sbox operation
   defined for the given field parameters, sbox_matrix
   and affine_constant. Note here that sbox_matrix is a
   diagonal matrix of size e of elements in {1,...,b} and
   affine constant is a column vector size e with elements
   in {1,...,b}. */
/* OK: What is the *mathematical* definition? */
ss_sbox_gen(field_element,b,e,mod_poly, sbox_matrix,affine_constant) := block(
  [inv_elem : ss_einv(ss_stand(field_element,b,mod_poly),b,mod_poly)],
  ss_stand(mvec2poly(
    sbox_matrix . poly2mvec_ss(inv_elem,e) + poly2mvec_ss(affine_constant,e)
    ),b,mod_poly))$
ss_sbox(field_element, b,e) :=
  ss_sbox_gen(field_element,b,e,ss_polynomial(b,e),
    ss_sbox_matrix(b,e),ss_affine_constant(b,e))$
ss_inv_sbox_gen(field_element,b,e,mod_poly,
    inv_sbox_matrix,inv_affine_constant) := block(
  [affine_result : mvec2poly(
      inv_sbox_matrix . poly2mvec_ss(field_element,e) +
          poly2mvec_ss(inv_affine_constant,e))],
  ss_einv(ss_stand(affine_result,b,mod_poly),b,mod_poly))$
ss_inv_sbox(field_element, b,e) :=
  ss_inv_sbox_gen(field_element,b,e,ss_polynomial(b,e),
    ss_inv_sbox_matrix(b,e),ss_inv_affine_constant(b,e))$


/* *************
   * Sub-bytes *
   *************
*/

/* 
   Takes the input block as a matrix of polynomials in
   the range 0-nat2polybin(b^e -1) and applies the given sbox operation to
   each polynomial, returning the matrix of result polynomials:
OK: "range" ??
*/
ss_subbytes(inputmatrix, sbox_f) := matrixmap(sbox_f, inputmatrix)$

/* 
   Takes the input block as a matrix of polynomials in the range
   0-nat2polybin(b^e-1) and applies the given inverse sbox operation to each
   polynomial, returning the list of result polynomials:
OK: "range" ??
*/
ss_inv_subbytes(inputmatrix,inv_sbox_f) := matrixmap(inv_sbox_f, inputmatrix)$


/* **************
   * Shift rows *
   **************
*/


/*
   Takes a matrix and performs the shiftrows operation,
   returning a matrix where row i (1 indexed) has been shifted
   cyclically left by i-1.
OK: "1 indexed" ??
*/
ss_shiftrows(inputmatrix) :=
  apply(matrix,
    create_list(rotate(inputmatrix[abs(r)+1],-r), r, 0,length(inputmatrix)-1))$


/*
   Takes a matrix and performs the inverse shiftrows operation,
   returning a matrix where row i (1 indexed) has been shifted
   cyclically right by i -1.
OK: "1 indexed" ??
*/
ss_inv_shiftrows(inputmatrix) :=
  apply(matrix,
    create_list(rotate(inputmatrix[abs(r)+1],r), r, 0,length(inputmatrix)-1))$


/* ***************
   * Mix columns *
   ***************
*/

/*
   Matrices used in the mixcolumns step to model the 
   multiplication of each n_C-byte column by a constant
   in a polynomial ring of at most order n_C with coefficients in
   GF(b^e):
*/
ss_mixcolumns_matrix_2_4_1 : matrix([1])$
ss_mixcolumns_matrix_2_8_1 : matrix([1])$
ss_mixcolumns_matrix_2_4_2 : block([x], apply(matrix,
  create_list(rotate([x+1,x],i),i,0,1)))$
ss_mixcolumns_matrix_2_8_2 : block([x], apply(matrix,
  create_list(rotate([x+1,x],i),i,0,1)))$
ss_mixcolumns_matrix_2_4_4 : block([x], apply(matrix, 
  create_list(rotate([x, x + 1, 1, 1], i),i,0,3)))$
ss_mixcolumns_matrix_2_8_4 : block([x], apply(matrix, 
  create_list(rotate([x, x + 1, 1, 1], i),i,0,3)))$
ss_mixcolumns_matrix(b,e,n_R) :=
  if b = 2 then
    if n_R = 4 then
      if e = 4 then ss_mixcolumns_matrix_2_4_4
      else if e = 8 then ss_mixcolumns_matrix_2_8_4
      else und
    else if n_R = 2 then
      if e = 4 then ss_mixcolumns_matrix_2_4_2
      else if e = 8 then ss_mixcolumns_matrix_2_8_2
      else und
    else if n_R = 1 then
      if e = 4 then ss_mixcolumns_matrix_2_4_1
      else if e = 8 then ss_mixcolumns_matrix_2_8_1
      else und
    else und
  else und$
/* Inverse of the rijn_mix_columns_matrix: */
ss_inv_mixcolumns_matrix_2_4_1 : matrix([1])$
ss_inv_mixcolumns_matrix_2_8_1 : matrix([1])$
ss_inv_mixcolumns_matrix_2_4_2 : block([x], apply(matrix,
  create_list(rotate([x+1,x], i),i,0,1)))$
ss_inv_mixcolumns_matrix_2_8_2 : block([x], apply(matrix,
  create_list(rotate([x+1,x], i),i,0,1)))$
ss_inv_mixcolumns_matrix_2_4_4 : block([x], apply(matrix,
  create_list(rotate([x^3+x^2+x,x^3+x+1,x^3+x^2+1,x^3+1], i),i,0,3)))$
ss_inv_mixcolumns_matrix_2_8_4 : block([x], apply(matrix,
  create_list(rotate([x^3+x^2+x,x^3+x+1,x^3+x^2+1,x^3+1], i),i,0,3)))$
ss_inv_mixcolumns_matrix(b,e,n_R) :=
  if b = 2 then
    if n_R = 4 then
      if e = 4 then ss_inv_mixcolumns_matrix_2_4_4
      else if e = 8 then ss_inv_mixcolumns_matrix_2_8_4
      else und
    else if n_R = 2 then
      if e = 4 then ss_inv_mixcolumns_matrix_2_4_2
      else if e = 8 then ss_inv_mixcolumns_matrix_2_8_2
      else und
    else if n_R = 1 then
      if e = 4 then ss_inv_mixcolumns_matrix_2_4_1
      else if e = 8 then ss_inv_mixcolumns_matrix_2_8_1
      else und
    else und
  else und$


/* Takes a vector of polynomials and returns the result of
   multiplying the input matrix by the given mixcolumns_matrix
   in field specified by b, e and mod_poly:*/
/* OK: what is the *mathematical* definition? */
ss_mixcolumn_gen(inputmatrixi,b,e,mod_poly,mixcolumns_matrix) := block(
  matrixmap(lambda([p],ss_stand(p,b,mod_poly)),
      mixcolumns_matrix . inputmatrixi));
ss_mixcolumn(inputmatrix,b,e) := block(
  ss_mixcolumn_gen(inputmatrix,b,e,
    ss_polynomial(b,e),
    ss_mixcolumns_matrix(b,e,length(inputmatrix))))$

/* Takes a matrix of polynomials and returns the result of
   applying the transformation function mixcolumn_f
   to each column vector:*/
/* OK: what is the *mathematical* definition? */
ss_mixcolumns(inputmatrix,mixcolumn_f) := block([M : matrix()],
  for i : 1 thru length(matrixcolumns(inputmatrix)) do
    M : addcol(M,mixcolumn_f(col(inputmatrix,i))),
  return(M))$

/* Takes a vector of polynomials and returns the result of
   multiplying the input matrix by the given inv_mixcolumns_matrix
   in field specified by b, e and mod_poly:*/
/* OK: what is the *mathematical* definition? */
ss_inv_mixcolumn_gen(inputmatrix,b,e,mod_poly,inv_mixcolumns_matrix) :=
    ss_mixcolumn_gen(inputmatrix,b,e,mod_poly,inv_mixcolumns_matrix)$
ss_inv_mixcolumn(inputmatrix,b,e) :=
  ss_inv_mixcolumn_gen(inputmatrix,b,e,
    ss_polynomial(b,e),
    ss_inv_mixcolumns_matrix(b,e,length(inputmatrix)))$

/* Takes a matrix of polynomials and returns the result of
   applying the transformation function inv_mixcolumn_f
   to each column vector:*/
ss_inv_mixcolumns(inputmatrix,inv_mixcolumn_f) := 
  ss_mixcolumns(inputmatrix,inv_mixcolumn_f)$


/* *****************
   * Key expansion *
   *****************
*/

/*
   Takes a matrix of polynomials as the round key for
   round r-1, and returns the small scale AES round
   key for round r, given the small scale sbox function
   sbox_f.
*/
/* OK: what is the *mathematical* definition? */
ss_keyschedule(kl, r, b, mod_poly, sbox_f) := block(
  [newcols : matrix(), n_C : length(matrixcolumns(kl)),
   round_constant : x^(r-1), n_R : length(kl)],
  newcols : addcol(newcols,columnvector(
      create_list(
        (if n_C > 1 then kl[i,1] else 0) + sbox_f(kl[mod(i,n_R)+1,n_C]) + 
        if i = 1 then round_constant else 0,i,1,n_R))),
  for j : 2 thru n_C do
    newcols : addcol(newcols,columnvector(
      create_list(kl[i,j] + newcols[i,j-1],i,1,n_R))),
  return(matrixmap(lambda([p],ss_stand(p,b,mod_poly)),newcols)))$

/*
   Takes a matrix of polynomials as the input key and
   returns a matrix of size n_R * n_C * (num_rounds+1)
   where columns i * (n_R * n_C) to (i+1) * (n_R * N_C)
   are the round key matrix for round i, and where n_R and
   n_C are the number of rows and number of columns in
   the input key matrix (resp).
*/
ss_key_expansion_gen(kl, num_rounds, b, mod_poly, sbox_f) := block(
  [ks : lambda([kl,r],
    endcons(ss_keyschedule(last(kl),r,b,mod_poly,sbox_f),kl))],
  apply(addcol,lreduce(ks, create_list(i,i,1,num_rounds), [kl])))$
ss_key_expansion(kl,num_rounds,b,e) := 
  ss_key_expansion(kl,num_rounds,b,ss_polynomial(b,e), ss_sbox(b,e))$


/* *********************************************
   * Small scale AES encryption and decryption *
   *********************************************
*/

/* Takes a matrix of polynomials and another matrix
   of polynomials representing the round key and computes the result of
   applying the small scale AES round function on this matrix
   given the sbox and mixcolumn functions.

   Note ss_round_wa does not take the round key and does
   not perform the key addition, but remains otherwise
   the same.
OK: "remains the same"??
*/
ss_round_wa(pl,sbox_f,mixcolumn_f) := 
    ss_mixcolumns(ss_shiftrows(
        ss_subbytes(pl,sbox_f)),mixcolumn_f)$
ss_round(pl, rkl,b,mod_poly,sbox_f, mixcolumn_f) := 
  matrixmap(lambda([p], ss_stand(p,b,mod_poly)),
    ss_round_wa(pl,sbox_f,mixcolumn_f)+rkl)$
/* Takes a matrix of polynomials and another matrix
   of polynomials representing the round key and computes the result of
   applying the inverse of the small scale AES round function on this matrix
   given the sbox and mixcolumn functions.

   Note ss_inv_round_wa does not take the round key and does
   not perform the key addition, but remains otherwise
   the same.
OK: "remains the same"??
*/
ss_inv_round_wa(pl,inv_sbox_f,inv_mixcolumn_f) := 
    ss_inv_subbytes(ss_inv_shiftrows(
        ss_inv_mixcolumns(pl,inv_mixcolumn_f)), inv_sbox_f)$
ss_inv_round(pl,rkl,inv_sbox_f,inv_mixcolumn_f) := 
    ss_inv_round_wa(pl+rkl,inv_sbox_f, inv_mixcolumn_f)$


/* Takes a matrix of polynomials and another matrix
   of polynomials representing the round key and computes the result of
   applying the specialised final small scale AES round function on this
   matrix given the sbox and mixcolumn functions.

   Note ss_final_round_wa does not take the round key and does
   not perform the key addition, but remains otherwise
   the same.
OK: "remains the same"??
*/
ss_final_round_wa(pl,sbox_f) := /* Without round key addition */
    ss_shiftrows(
        ss_subbytes(pl,sbox_f))$
ss_final_round(pl,rkl,b,mod_poly, sbox_f) :=  /* With round key addition */
  matrixmap(lambda([p],ss_stand(p,b,mod_poly)),
    ss_final_round_wa(pl,sbox_f)+rkl)$
/* Takes a matrix of polynomials and another matrix
   of polynomials representing the round key and computes the result of
   applying the inverse of the specialised final small scale AES round
   function on this  matrix given the sbox and mixcolumn functions.

   Note ss_inv_final_round_wa does not take the round key and does
   not perform the key addition, but remains otherwise
   the same.
*/
ss_inv_final_round_wa(pl,inv_sbox_f) := 
    ss_inv_subbytes(ss_inv_shiftrows(pl), inv_sbox_f)$
ss_inv_final_round(pl,rkl,inv_sbox_f) := 
    ss_inv_final_round_wa(pl+rkl, inv_sbox_f)$


/* Takes a matrix of polynomials, another matrix
   of polynomials representing the round key, and the number of rounds and
   computes the result (as a matrix of polynomials) of applying the small
   scale AES on this  matrix given the sbox and mixcolumn functions.

   Note ss_encrypt_wf(,_gen) use the standard round function for the final
   round, not the specialised version.
*/
/* WITH final round (_wf) */
ss_encrypt_wf_gen(pl, kl, num_rounds,b,e,mod_poly, sbox_f, mixcolumn_f) := block(
  [n_C : length(pl),
   partition_m : lambda([M,n], 
     map(columns2matrix,partition_elements(matrixcolumns(M),n)))],
  /* Initial Rounds */
  ekl : partition_m(ss_key_expansion_gen(kl,num_rounds,b,mod_poly,sbox_f),n_C),
  initial_rk : first(ekl), final_rk : last(ekl),
  initial_result : 
    lreduce(lambda([m,n],
        ss_round(m,n,b,mod_poly,sbox_f,mixcolumn_f)),
    rest(rest(ekl), -1), pl + initial_rk),
  /* Final Round */
  matrixmap(lambda([p],ss_stand(p,b,mod_poly)),
    if num_rounds = 10 then
      ss_final_round(initial_result,final_rk, b,mod_poly, sbox_f)
    else
      ss_round(
          initial_result,final_rk,b,mod_poly, sbox_f, mixcolumn_f))
)$
/* WITH final round (_wf) */
ss_encrypt_wf(pl, kl, num_rounds,b,e) :=
   ss_encrypt_wf_gen(pl,kl,num_rounds,b,e,
     ss_polynomial(b,e), lambda([a], ss_sbox(a,b,e)),
     lambda([a], ss_mixcolumn(a,b,e)))$
ss_encrypt_gen(pl, kl, num_rounds,b,e,mod_poly, sbox_f, mixcolumn_f) := block(
  [n_C : length(pl),
   partition_m : lambda([M,n], 
     map(columns2matrix,partition_elements(matrixcolumns(M),n)))],
  /* Initial Rounds */
  ekl : partition_m(ss_key_expansion_gen(kl,num_rounds,b,mod_poly,sbox_f),n_C),
  initial_rk : first(ekl),
  matrixmap(lambda([p],ss_stand(p,b,mod_poly)),
    lreduce(lambda([m,n],
        ss_round(m,n,b,mod_poly,sbox_f,mixcolumn_f)),
    rest(ekl), pl + initial_rk))
)$
ss_encrypt(pl, kl, num_rounds,b,e) :=
  ss_encrypt_gen(pl,kl,num_rounds,b,e,
    ss_polynomial(b,e),
    buildq([b,e],lambda([a], ss_sbox(a,b,e))),
    buildq([b,e],lambda([a], ss_mixcolumn(a,b,e))))$

/* Takes a matrix of polynomials, another matrix
   of polynomials representing the round key, and the number of rounds and
   computes the result (as a matrix of polynomials) of applying the small
   scale AES decryption on this  matrix given the sbox, inverse sbox and
   inverse  mixcolumn functions.

   Note ss_decrypt_wf(,_gen) use the standard inverse round function for the
   final round, not the specialised version.
*/
/* WITH final round (_wf) */
ss_decrypt_wf_gen(pl, kl, num_rounds, b,e,mod_poly, sbox_f, inv_sbox_f,inv_mixcolumn_f) := block(
  [n_C : length(pl),
   partition_m : lambda([M,n], /* This should be moved somewhere suitable */
    map(columns2matrix,partition_elements(matrixcolumns(M),n)))],
  /* Initial Rounds */
  ekl : partition_m(ss_key_expansion_gen(kl,num_rounds,b,mod_poly,sbox_f),n_C),
  initial_rk : first(ekl), final_rk : last(ekl),
  /* Final Round */
  if num_rounds = 10 then
    initial_result : ss_inv_final_round(pl,final_rk,inv_sbox_f)
  else
    initial_result :
      ss_inv_round(pl,final_rk, inv_sbox_f,inv_mixcolumn_f),
  matrixmap(lambda([a],ss_stand(a,b,mod_poly)),
    rreduce(
      lambda([a,b],ss_inv_round(a,b,inv_sbox_f,inv_mixcolumn_f)), 
      rest(rest(ekl), -1), initial_result) + initial_rk)
)$
/* WITH final round (_wf) */
ss_decrypt_wf(pl, kl, num_rounds, b,e) := 
  ss_decrypt_wf_gen(pl,kl,num_rounds,b,e,ss_polynomial(b,e),
    lambda([a], ss_sbox(a,b,e)), lambda([a], ss_inv_sbox(a,b,e)),
    lambda([a], ss_inv_mixcolumn(a,b,e)))$
/* WITHOUT final round */
ss_decrypt_gen(pl, kl, num_rounds, b,e,mod_poly, sbox_f, inv_sbox_f,inv_mixcolumn_f) := block(
  [n_C : length(pl),
   partition_m : lambda([M,n], /* This should be moved somewhere suitable */
    map(columns2matrix,partition_elements(matrixcolumns(M),n)))],
  /* Initial Rounds */
  ekl : partition_m(ss_key_expansion_gen(kl,num_rounds,b,mod_poly,sbox_f),n_C),
  initial_rk : first(ekl), 
  matrixmap(lambda([a],ss_stand(a,b,mod_poly)),
    rreduce(
      lambda([a,b],ss_inv_round(a,b,inv_sbox_f,inv_mixcolumn_f)), 
      rest(ekl), pl) + initial_rk)
)$
/* WITHOUT final round */
ss_decrypt(pl, kl, num_rounds, b,e) :=
  ss_decrypt_gen(pl,kl,num_rounds,b,e,ss_polynomial(b,e),
    buildq([b,e],lambda([a], ss_sbox(a,b,e))),
    buildq([b,e],lambda([a], ss_inv_sbox(a,b,e))),
    buildq([b,e],lambda([a], ss_inv_mixcolumn(a,b,e))))$


/* **********************************************************
   * Small scale AES encryption as an iterated block cipher *
   **********************************************************
*/

/* Combined AES round: */
/* OK: what does this mean? */
ss_round_ibc_gen(plain_text, round, sbox_f,mixcolumn_f) :=
  if round = 0 then plain_text
  else
    ss_round_wa(plain_text, sbox_f, mixcolumn_f)$

/* Small scale AES encryption as ibc (see
   Cryptology/Lisp/CryptoSystems/IteratedBlockCipher.mac): */
/* OK: this should just be a helper-function */
ss_encrypt_ibc_gen(plaintext, key, num_rounds, b,e,mod_poly,
  sbox_f, mixcolumn_f) :=
    ibc_0(
      buildq([b,mod_poly,sbox_f],
        lambda([key,r], ss_keyschedule(key,r,b,mod_poly,sbox_f))),
      buildq([sbox_f,mixcolumn_f],
        lambda([p,r], ss_round_ibc_gen(p,r,sbox_f,mixcolumn_f))),
      buildq([b,mod_poly],
        lambda([m,n],
          matrixmap(lambda([p],ss_stand(p,b,mod_poly)),m+n)))
      )(plaintext,key,num_rounds+1)$

/* OK: Where is the instantiation yielding AES? */

/*!
\endhtmlonly
*/
