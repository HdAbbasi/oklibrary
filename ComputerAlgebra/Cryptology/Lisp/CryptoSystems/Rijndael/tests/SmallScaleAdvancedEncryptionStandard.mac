/* Matthew Gwynne, 28.1.2010 (Swansea) */
/* Copyright 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/tests/SmallScaleAdvancedEncryptionStandard.mac
  \brief Tests for Advanced Encryption Standard

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/tests/SmallScaleAdvancedEncryptionStandard.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/ByteField.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/Block.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/SmallScaleAdvancedEncryptionStandard.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/AdvancedEncryptionStandard.mac")$



kill(f)$

/* *********
   * S box *
   *********
*/

okltest_ss_sbox(f) := block(
  /* Test vector for b=2 e=4 generated using "Small Scale Variants of the AES
  (SR) Polynomial System Generator" in Sage */
  assert(create_list(poly2nat(
        f(nat2poly(i,2),2,4,ss_polynomial_2_4,
          ss_sbox_matrix_2_4,ss_affine_constant_2_4),2),i,0,15) =
    [6,11,5,4,2,14,7,10,9,13,15,12,3,1,0,8]),
  assert(f(0,2,8,ss_polynomial_2_8,
      ss_sbox_matrix_2_8,ss_affine_constant_2_8) = x^6+x^5+x+1),
  assert(f(x^6+x^4+x,2,8,ss_polynomial_2_8,
      ss_sbox_matrix_2_8,ss_affine_constant_2_8) = 0),
  assert(f(x^7+x^6+x^5+x^4+x^3+x^2+x+1,2,8,ss_polynomial_2_8,
      ss_sbox_matrix_2_8,ss_affine_constant_2_8) = x^4+x^2+x),
  if oklib_test_level=0 then return(true),
  for b : 0 thru 255 do
    assert(f(b,2,8,ss_polynomial_2_8,
      ss_sbox_matrix_2_8,ss_affine_constant_2_8) = rijn_lookup_sbox(b)),
  true)$

okltest_ss_inv_sbox(f) := block(
  assert(create_list(poly2nat(
        f(nat2poly(i,2),2,4,ss_polynomial_2_4,
          ss_inv_sbox_matrix_2_4,ss_inv_affine_constant_2_4),2),i,
      [6,11,5,4,2,14,7,10,9,13,15,12,3,1,0,8]) =
    [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]),
  assert(f(0,2,8,ss_polynomial_2_8,
      ss_inv_sbox_matrix_2_8,ss_inv_affine_constant_2_8) = x^6+x^4+x),
  assert(f(x^6+x^5+x+1,2,8,ss_polynomial_2_8,
      ss_inv_sbox_matrix_2_8,ss_inv_affine_constant_2_8) = 0),
  assert(f(x^4+x^2+x,2,8,ss_polynomial_2_8,
      ss_inv_sbox_matrix_2_8,ss_inv_affine_constant_2_8) =
    x^7+x^6+x^5+x^4+x^3+x^2+x+1),
  if oklib_test_level=0 then return(true),
  for b : 0 thru 255 do
    assert(f(b,2,8,ss_polynomial_2_8,
      ss_inv_sbox_matrix_2_8,ss_inv_affine_constant_2_8) =
    rijn_lookup_inv_sbox(b)),
  true)$


/* *************
   * Sub-bytes *
   *************
*/


okltest_ss_subbytes(f) := block([sbox_f],
  sbox_f : lambda([p],ss_sbox_std(p,2,8)),
  assert(f(diagmatrix(4,0),sbox_f) =
    genmatrix(lambda([a,b],x^6+x^5+x+1),4,4)),
  assert(f(diagmatrix(4,1),sbox_f) =
    genmatrix(lambda([a,b],
      if a = b then x^6+x^5+x^4+x^3+x^2 else x^6+x^5+x+1),4,4)),
  assert(f(rijn_l2m(
        map(nat2polybin,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])),sbox_f) =
    rijn_l2m(map(nat2polybin,
        [124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202]))),
  true)$

okltest_ss_inv_subbytes(f) := block([inv_sbox_f],
  inv_sbox_f : lambda([p], ss_inv_sbox_std(p,2,8)),
  assert(f(genmatrix(lambda([a,b],x^6+x^5+x+1),4,4),inv_sbox_f) =
    diagmatrix(4,0)),
  assert(f(
      genmatrix(lambda([a,b],
          if a = b then x^6+x^5+x^4+x^3+x^2
          else x^6+x^5+x+1),4,4),inv_sbox_f) = diagmatrix(4,1)),
  assert(totaldisrep(f(rijn_l2m(map(nat2polybin,[124,119,123,242,107,111,197,
            48,1,103,43,254,215,171,118,202])),inv_sbox_f)) =
    rijn_l2m(map(nat2polybin, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))),
  true)$

/* **************
   * Shift rows *
   **************
*/

okltest_ss_shiftrows(f) := block(
  assert(f(diagmatrix(4,0))=diagmatrix(4,0)),
  assert(f(apply(matrix,create_list([0,1,x,x+1],i,0,3))) =
      apply(matrix,create_list(rotate([0,1,x,x+1],-i),i,0,3))),
  true)$

okltest_ss_inv_shiftrows(f) := block(
  assert(f(diagmatrix(4,0))=diagmatrix(4,0)),
  assert(f(apply(matrix,create_list(rotate([0,1,x,x+1],-i),i,0,3))) =
      apply(matrix,create_list([0,1,x,x+1],i,0,3))),
  true)$

/* ***************
   * Mix columns *
   ***************
*/

okltest_ss_mixcolumn(f) := block(
  assert(f(ss_natl2m([0,0,0,0],2,4),2,8,
      ss_polynomial_2_8,ss_mixcolumns_matrix_2_8) = ss_natl2m([0,0,0,0],2,4)),
  assert(f(ss_natl2m([50,67,7,52],2,4),2,8,
      ss_polynomial_2_8,ss_mixcolumns_matrix_2_8) =
    ss_natl2m([146, 137, 35, 122],2,4)),
  true)$

okltest_ss_inv_mixcolumn(f) := block(
  assert(f(ss_natl2m([0,0,0,0],2,4),2,8,
      ss_polynomial_2_8,ss_inv_mixcolumns_matrix_2_8) =
    ss_natl2m([0,0,0,0],2,4)),
  assert(f(ss_natl2m([146, 137, 35, 122],2,4),2,8,
      ss_polynomial_2_8,ss_inv_mixcolumns_matrix_2_8)=
    ss_natl2m([50,67,7,52],2,4)),
  true)$

okltest_ss_mixcolumns(f) := block([mixcolumn_f],
  mixcolumn_f : lambda([M],
    ss_mixcolumn(M, 2,8,ss_polynomial_2_8,ss_mixcolumns_matrix_2_8)),
  assert(f(ss_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],2,4),
        mixcolumn_f) = ss_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],2,4)),
  assert(f(ss_natl2m(
          [50,136,49,224,67,90,49,55,246,48,152,7,168,141,162,52],2,4),
        mixcolumn_f)= ss_natl2m(
      [54,138,227,52,110,147,34,192,56,34,228,167,81,96,38,164],2,4)),
  true)$

okltest_ss_inv_mixcolumns(f) := block([inv_mixcolumn_f],
  inv_mixcolumn_f : lambda([M],
    ss_inv_mixcolumn(M, 2,8,ss_polynomial_2_8,ss_inv_mixcolumns_matrix_2_8)),
  assert(f(ss_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],2,4),
        inv_mixcolumn_f) = ss_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],2,4)),
  assert(f(ss_natl2m(
          [54,138,227,52,110,147,34,192,56,34,228,167,81,96,38,164],2,4)
      ,inv_mixcolumn_f)= ss_natl2m(
    [50,136,49,224,67,90,49,55,246,48,152,7,168,141,162,52],2,4)),
  true)$ 

/*!
\endhtmlonly
*/