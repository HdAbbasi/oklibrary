/* Matthew Gwynne, 4.2.2010 (Swansea) */
/* Copyright 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/tests/SmallScaleWordFields.mac
  \brief Tests for small scale Advanced Encryption Standard word fields

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/tests/SmallScaleWordFields.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/SmallScaleWordFields.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/FiniteFields.mac")$
oklib_include("OKlib/ComputerAlgebra/MaximaInternals/Auxiliary.mac")$

kill(f)$

/* ******************
   * Representation *
   ******************
*/


okltest_ss_stand(f) := block([x],
  assert(f(0,2,ss_polynomial_2_1) = 0),
  assert(f(1,2,ss_polynomial_2_1) = 1),
  assert(f(x,2,ss_polynomial_2_1) = 0),
  assert(f(0,2,ss_polynomial_2_4) = 0),
  assert(f(1,2,ss_polynomial_2_4) = 1),
  assert(f(x^4,2,ss_polynomial_2_4) = x+1),
  assert(f(ss_polynomial_2_4,2,ss_polynomial_2_4) = 0),
  assert(f(0,2,ss_polynomial_2_8) = 0),
  assert(f(1,2,ss_polynomial_2_8) = 1),
  assert(f(x^8,2,ss_polynomial_2_8) = x^4+x^3+x+1),
  assert(f(ss_polynomial_2_8,2,ss_polynomial_2_8) = 0),
  true)$

okltest_nat2poly(f) := block([x],
  assert(f(0,2) = 0),
  assert(f(1,2) = 1),
  assert(f(2,2) = x),
  assert(f(3,2) = x+1),
  assert(f(4,2) = x^2),
  for e : 0 thru 5 do
    assert(f(2^e,2) = x^e),
  assert(f(0,3) = 0),
  assert(f(1,3) = 1),
  assert(f(2,3) = 2),
  assert(f(3,3) = x),
  assert(f(4,3) = x+1),
  for e : 0 thru 5 do
    assert(f(3^e,3) = x^e),
  true)$

okltest_poly2nat(f) := block([x],
  assert(f(0,2) = 0),
  assert(f(1,2) = 1),
  assert(f(x,2) = 2),
  assert(f(x+1,2) = 3),
  assert(f(x^2,2) = 4),
  for e : 0 thru 5 do
    assert(f(x^e,2) = 2^e),
  assert(f(0,3) = 0),
  assert(f(1,3) = 1),
  assert(f(2,3) = 2),
  assert(f(x,3) = 3),
  assert(f(x+1,3) = 4),
  for e : 0 thru 5 do
    assert(f(x^e,3) = 3^e),
  true)$

okltest_ss_stand_vec(f) := (
  assert(f([],2) = []),
  assert(f([0],2) = [0]),
  assert(f([1],2) = [1]),
  assert(f([1,0,0,0,0,1,1],2) = [1,0,0,0,0,1,1]),
  assert(f([2],2) = [0]),
  assert(f([3],2) = [1]),
  assert(f([3,1,1,1,2],2) = [1,1,1,1,0]),
  assert(f([],3) = []),
  assert(f([0],3) = [0]),
  assert(f([1],3) = [1]),
  assert(f([1,0,0,0,0,1,1],3) = [1,0,0,0,0,1,1]),
  assert(f([3],3) = [0]),
  assert(f([4],3) = [1]),
  assert(f([4,1,1,1,3],3) = [1,1,1,1,0]),
  true)$

okltest_nat2vec(f) := (
  assert(f(0,2) = [0]),
  assert(f(1,2) = [1]),
  assert(f(2,2) = [1,0]),
  assert(f(3,2) = [1,1]),
  assert(f(4,2) = [1,0,0]),
  for e : 0 thru 10 do
    assert(f(2^e,2) = cons(1,create_list(0,i,1,e))),
  assert(f(0,3) = [0]),
  assert(f(1,3) = [1]),
  assert(f(2,3) = [2]),
  assert(f(3,3) = [1,0]),
  assert(f(4,3) = [1,1]),
  assert(f(5,3) = [1,2]),
  assert(f(6,3) = [2,0]),
  assert(f(9,3) = [1,0,0]),
  for e : 0 thru 10 do
    assert(f(3^e,3) = cons(1,create_list(0,i,1,e))),
  true)$

okltest_nat2vec_ss(f) := (
  assert(f(0,2,8) = [0,0,0,0,0,0,0,0]),
  assert(f(1,2,8) = [0,0,0,0,0,0,0,1]),
  assert(f(2,2,8) = [0,0,0,0,0,0,1,0]),
  assert(f(3,2,8) = [0,0,0,0,0,0,1,1]),
  assert(f(4,2,8) = [0,0,0,0,0,1,0,0]),
  for e : 0 thru 7 do
    assert(f(2^e,2,8) = create_list(if i = 8 - e then 1 else 0, i, 1, 8)),
  assert(f(0,3,8) = [0,0,0,0,0,0,0,0]),
  assert(f(1,3,8) = [0,0,0,0,0,0,0,1]),
  assert(f(2,3,8) = [0,0,0,0,0,0,0,2]),
  assert(f(3,3,8) = [0,0,0,0,0,0,1,0]),
  assert(f(4,3,8) = [0,0,0,0,0,0,1,1]),
  for e : 0 thru 7 do
    assert(f(3^e,3,8) = create_list(if i = 8 - e then 1 else 0, i, 1, 8)),
  true)$

okltest_vec2nat(f) := (
  assert(f([0],2) = 0),
  assert(f([1],2) = 1),
  assert(f([1,0],2) = 2),
  assert(f([1,1],2) = 3),
  assert(f([1,0,0],2) = 4),
  for e : 0 thru 10 do
    assert(f(cons(1,create_list(0,i,1,e)),2) = 2^e),
  assert(f([0],3) = 0),
  assert(f([1],3) = 1),
  assert(f([2],3) = 2),
  assert(f([1,0],3) = 3),
  assert(f([1,1],3) = 4),
  assert(f([1,0,0],3) = 9),
  for e : 0 thru 10 do
    assert(f(cons(1,create_list(0,i,1,e)),3) = 3^e),
  true)$

okltest_poly2vec(f) := (
  assert(f(0) = [0]),
  assert(f(1) = [1]),
  assert(f(x) = [1,0]),
  assert(f(x+1) = [1,1]),
  assert(f(x^2) = [1,0,0]),
  for e : 0 thru 10 do
    assert(f(x^e) = cons(1,create_list(0,i,1,e))),
  assert(f(2*x^2) = [2,0,0]),
  true)$

okltest_poly2vec_ss(f) := (
  assert(f(0,8) = [0,0,0,0,0,0,0,0]),
  assert(f(1,8) = [0,0,0,0,0,0,0,1]),
  assert(f(x,8) = [0,0,0,0,0,0,1,0]),
  assert(f(x+1,8) = [0,0,0,0,0,0,1,1]),
  assert(f(x^2,8) = [0,0,0,0,0,1,0,0]),
  for e : 0 thru 7 do
    assert(f(x^e,8) = create_list(if i = 8 - e then 1 else 0, i, 1, 8)),
  assert(f(2*x^2,8) = [0,0,0,0,0,2,0,0]),
  true)$

okltest_vec2poly(f) := (
  assert(f([0]) = 0),
  assert(f([1]) = 1),
  assert(f([1,0]) = x),
  assert(f([1,1]) = x+1),
  assert(f([1,0,0]) = x^2),
  for e : 0 thru 10 do
    assert(f(cons(1,create_list(0,i,1,e))) = x^e),
  assert(f([2,0,0]) = 2*x^2),
  true)$


/* **************
   * Operations *
   **************
*/

okltest_ss_add(f) := block([x],
  assert(f(0,0,2,ss_polynomial_2_8) = 0),
  assert(f(x,x,2,ss_polynomial_2_8) = 0),
  assert(f(x,x^4+x^2+x+3,2,ss_polynomial_2_8) = x^4+x^2+1),
  true)$

okltest_ss_mul(f) := block([x],
  assert(f(0,0,2,ss_polynomial_2_8) = 0),
  assert(f(0,x^2,2,ss_polynomial_2_8) = 0),
  assert(f(1,x^3+x^2+3,2,ss_polynomial_2_8) = x^3+x^2+1),
  assert(f(x^4,x^4,2,ss_polynomial_2_8) = x^4+x^3+x+1),
  assert(f(ss_polynomial_2_8-1,ss_polynomial_2_8-1,2,ss_polynomial_2_8) = 1),
  true)$

okltest_ss_matmul(f) := block([x],
  assert(f(matrix(),matrix(),2,ss_polynomial_2_8) = matrix()),
  assert(f(matrix([0]),matrix([0]),2,ss_polynomial_2_8) = matrix([0])),
  assert(f(matrix([x,0],[0,x]),matrix([x,0],[0,x]),2,ss_polynomial_2_8) = matrix([x^2,0],[0,x^2])),
  assert(f(matrix([x,1],[x,x^2]),matrix([1,x^3],[x,0]),2,ss_polynomial_2_8) = matrix([0,x^4],[x^3+x,x^4])),
  assert(f(matrix([x^4,0],[0,x^4]),matrix([x^4,0],[0,x^4]),2,ss_polynomial_2_8) = matrix([x^4+x^3+x+1,0],[0,x^4+x^3+x+1])),
  true)$

okltest_ss_inv(f) := block([x],
  assert(f(1,2,ss_polynomial_2_8) = 1),
  assert(f(x,2,ss_polynomial_2_8) = x^7+x^3+x^2+1),
  assert(tcre_p(f(x+x^2,2,ss_polynomial_2_8)) = false),
  true)$

okltest_ss_einv(f) := (
  assert(f(0,2,ss_polynomial_2_8) = 0),
  assert(okltest_ss_inv(f) = true),
  true)$

okltest_ss_natadd(f) := (
  assert(f(0,0,2,ss_polynomial_2_8) = 0),
  assert(okltest_ss_add(buildq([f],
        lambda([m,n,b,mod_poly],
          nat2poly(f(poly2nat(ss_stand(m,b,mod_poly),b),
              poly2nat(ss_stand(n,b,mod_poly),b),b,mod_poly),b)))) = true),
  true)$

okltest_ss_natmul(f) := (
  assert(f(0,0,2,ss_polynomial_2_8) = 0),
  assert(f(0,1,2,ss_polynomial_2_8) = 0),
  assert(f(1,1,2,ss_polynomial_2_8) = 1),
  assert(f(2,141,2,ss_polynomial_2_8) = 1),
  true)$

okltest_ss_natinv(f) := (
  assert(f(0,2,ss_polynomial_2_8) = 0),
  assert(f(1,2,ss_polynomial_2_8) = 1),
  assert(f(2,2,ss_polynomial_2_8) = 141),
  assert(f(poly2nat(ss_stand(-1,2,ss_polynomial_2_8),2),2,ss_polynomial_2_8) = poly2nat(ss_stand(-1,2,ss_polynomial_2_8),2)),
  true)$

okltest_ss_vecadd(f) := (
  assert(f([0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0],2) = [0,0,0,0,0,0,0,0]),
  for i : 0 thru 7 do
    assert(f(nat2vec_ss(2^i,2,8),nat2vec_ss(0,2,8),2) = nat2vec_ss(2^i,2,8)),
  for i : 0 thru 7 do
    assert(f(nat2vec_ss(2^i,2,8),nat2vec_ss(2^i,2,8),2) = nat2vec_ss(0,2,8)),
  assert(f([1,0,1,1,0,1,0,0], [1,1,1,1,1,1,1,1],2) = [0,1,0,0,1,0,1,1]),
  true)$

okltest_ss_vecmul(f) := (
  assert(f([0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0],2,8,ss_polynomial_2_8) = [0,0,0,0,0,0,0,0]),
  assert(f([0,0,0,0,0,0,0,1], [0,0,0,0,0,0,0,1],2,8,ss_polynomial_2_8) = [0,0,0,0,0,0,0,1]),
  for i : 0 thru 7 do
    assert(f(nat2vec_ss(2^i,2,8),nat2vec_ss(0,2,8),2,8,ss_polynomial_2_8) = nat2vec_ss(0,2,8)),
  for i : 0 thru 6 do
    assert(f(nat2vec_ss(2^i,2,8),nat2vec_ss(2,2,8),2,8,ss_polynomial_2_8) = nat2vec_ss(2^(i+1),2,8)),
  for i : 0 thru 3 do
    assert(f(nat2vec_ss(2^i,2,8),nat2vec_ss(2^i,2,8),2,8,ss_polynomial_2_8) = nat2vec_ss(2^(2*i),2,8)),
  assert(f(nat2vec_ss(2^7,2,8),nat2vec_ss(2,2,8),2,8,ss_polynomial_2_8) = [0,0,0,1,1,0,1,1]),
  assert(f(nat2vec_ss(2^4,2,8),nat2vec_ss(2^4,2,8),2,8,ss_polynomial_2_8) = [0,0,0,1,1,0,1,1]),
  assert(f(nat2vec_ss(2^7,2,8), nat2vec_ss(2^7,2,8),2,8,ss_polynomial_2_8) = [1,0,0,1,1,0,1,0]),
  assert(f(nat2vec_ss(56,2,8), nat2vec_ss(32,2,8),2,8,ss_polynomial_2_8) = [0,1,0,0,0,0,0,1]),
  true)$

okltest_ss_vecinv(f) := (
  assert(f([0],2,8,ss_polynomial_2_8) = [0,0,0,0,0,0,0,0]),
  assert(f([1],2,8,ss_polynomial_2_8) = [0,0,0,0,0,0,0,1]),
  assert(f([0,0,0,0,0,1,0,1],2,8,ss_polynomial_2_8) = [0,1,0,1,0,0,1,0]),
  assert(okltest_ss_inv(
      buildq([f], lambda([p,b,mod_poly], block([max_coeff : hipow(mod_poly,x)],
          vec2poly(f(poly2vec_ss(p,max_coeff),b,max_coeff,mod_poly))))))),
  /* XXX */
  true)$


/*!
\endhtmlonly
*/
