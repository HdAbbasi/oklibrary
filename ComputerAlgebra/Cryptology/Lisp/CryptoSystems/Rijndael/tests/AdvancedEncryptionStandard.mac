/* Matthew Gwynne, 15.2.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/tests/AdvancedEncryptionStandard.mac
  \brief Tests for Advanced Encryption Standard

Use by

oklib_load("Transitional/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/tests/AdvancedEncryptionStandard.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$

kill(f)$


/* ********************
   * Basic Operations *
   ********************
*/


/* Test AES sbox operation */
okltest_sbox(f) := block(
  assert(f(0) = 99),
  assert(f(82) = 0),
  assert(f(255) = 22),
  true)$

/* Test inverse of AES sbox operation */
okltest_inv_sbox(f) := block(
  assert(f(0) = 82),
  assert(f(99) = 0),
  assert(f(22) = 255),
  true)$

/* Test AES mixcolumn operation. */
okltest_mixcolumn(f) := block(
  assert(f([0,0,0,0]) = [0,0,0,0]),
  assert(f([50,67,7,52])=[146, 137, 35, 122]),
  true)$

/* Test AES mixcolumn operation. */
okltest_inv_mixcolumn(f) := block(
  assert(f([0,0,0,0]) = [0,0,0,0]),
  assert(f([146, 137, 35, 122])=[50,67,7,52]),
  true)$

/* Test AES mixcolumns operation. */
okltest_mixcolumns(f) := block(
  assert(totaldisrep(f([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],lookup_mixcolumn)) = 
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
  assert(totaldisrep(f([50,136,49,224,67,90,49,55,246,48,152,7,168,141,162,52],
    lookup_mixcolumn))=[255,88,11,177,29,225,66,179,101,62,214,133,168,232,165,99]),
  true)$

/* Test inverse of AES mixcolumns operation. */
okltest_inv_mixcolumns(f) := block(
  assert(totaldisrep(f([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],lookup_inv_mixcolumn))=
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
  assert(totaldisrep(f([255,88,11,177,29,225,66,179,101,62,214,133,168,232,165,
  99],lookup_inv_mixcolumn))=[50,136,49,224,67,90,49,55,246,48,152,7,168,141,162,52]),
  true)$

/* Test AES shiftrows operation */
okltest_shiftrows(f) := block(
  assert(totaldisrep(f([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]))=
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
  assert(totaldisrep(f([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])) =
    [1,2,3,4,6,7,8,5,11,12,9,10,16,13,14,15]),
  true)$

/* Test inverse of AES shiftrows operation */
okltest_inv_shiftrows(f) := block(
  assert(totaldisrep(f([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]))=
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
  assert(totaldisrep(f([1,2,3,4,6,7,8,5,11,12,9,10,16,13,14,15])) =
  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]),
  true)$

/* Test AES key expansion */
okltest_key_expansion(f) := block(
  /* Extreme Cases for sbox */
  assert(totaldisrep(f([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],4,lookup_sbox,
    aes_log_gf2t8_add)) = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,98,98,98,99,99,99,99,
    99,99,99,99,99,99,99,99,155,249,155,249,152,251,152,251,152,251,152,251,201,
    170,201,170,144,105,242,11,151,108,244,15,52,207,87,172,80,250,51,153,238,
    135,117,126,6,106,158,145,218,21,66,238,123,129,178,43,127,248,141,243,46,
    68,218,75,43,62,124,146,136,9,187,144,236,20,153,106,97,37,255,180,75,117,9,
    155,133,140,55,167,33,53,172,198,117,80,175,27,23,98,107,240,135,11,60,155,
    14,59,151,81,249,169,6,29,3,97,10,250,51,56,4,159,177,138,29,76,212,125,123,
    102,216,185,179,73,226,218,222,65,180,62,35,111,239,146,233,143,91,226,81,
    24,203,17,207,142]),
  true)$

/* **********************
   * Main AES Algorithm *
   **********************
*/

/* Test individual AES round operation */
okltest_aes_round(f) := block(
  assert(totaldisrep(f([25,160,154,233,61,244,198,248,227,226,141,72,190,43,42,
    8],[160,136,35,42,250,84,163,108,254,44,57,118,23,177,57,5],lookup_sbox,
    lookup_mixcolumn,aes_log_gf2t8_add))=[164,104,107,2,156,159,91,106,127,53,234,80,242,
    43,67,73]),
  assert(totaldisrep(f([72,103,77,214,108,29,227,95,78,157,177,88,238,13,56,
    231],[239,168,182,219,68,82,113,11,165,91,37,173,65,127,59,0],lookup_sbox
    ,lookup_mixcolumn,aes_log_gf2t8_add))=[224,200,217,133,146,99,177,184,127,99,53,190,
    232,192,80,1]),
  true)$

/* Test inverse of individual AES round operation */
okltest_inv_aes_round(f) := block(
  assert(totaldisrep(f([164,104,107,2,156,159,91,106,127,53,234,80,242,43,67,
    73],[160,136,35,42,250,84,163,108,254,44,57,118,23,177,57,5],
    lookup_inv_sbox,lookup_inv_mixcolumn,aes_log_gf2t8_add))=[25,160,154,233,61,244,198,
    248,227,226,141,72,190,43,42,8]),
  assert(totaldisrep(f([224,200,217,133,146,99,177,184,127,99,53,190,232,192,
    80,1],[239,168,182,219,68,82,113,11,165,91,37,173,65,127,59,0],
    lookup_inv_sbox,lookup_inv_mixcolumn,aes_log_gf2t8_add)) =
    [72,103,77,214,108,29,227,95,78,157,177,88,238,13,56,231]),
  true)$

/* Test full AES encryption */
okltest_aes_encrypt(f) := block(
  assert(f([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    lookup_sbox,lookup_mixcolumn,aes_log_gf2t8_add) = 
    [102, 239, 136, 202, 233, 138, 76, 52, 75, 44, 250, 43, 212, 59, 89, 46]),
  assert(f([50,136,49,224,67,90,49,55,246,48,152,7,168,141,162,52],[43,40,171,
    9,126,174,247,207,21,210,21,79,22,166,136,60],lookup_sbox,lookup_mixcolumn,
    aes_log_gf2t8_add) = [57,2,220,25,37,220,17,106,132,9,133,11,29,251,151,50]),
  true)$

/* Test full AES decryption */
okltest_aes_decrypt(f) := block(
  assert(f([57,2,220,25,37,220,17,106,132,9,133,11,29,251,151,50],[43,40,171,9,
    126,174,247,207,21,210,21,79,22,166,136,60],lookup_sbox,lookup_inv_sbox,
    lookup_inv_mixcolumn,aes_log_gf2t8_add) = [50,136,49,224,67,90,49,55,246,48,152,7,168,
    141,162,52]),
  assert(f([102,239,136,202,233,138,76,52,75,44,250,43,212,59,89,46],[0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0],lookup_sbox,lookup_inv_sbox,lookup_inv_mixcolumn,
    aes_log_gf2t8_add) = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
  true)$

/* Performs integration testing on the AES encryption and decryption functions */
/* MG : Should this be higher test levels of the aes_encrypt and aes_decrypt
 * tests? */
okltest_aes(f_e,f_d) := block([inputList, outputList],
  inputList : [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  keyList : [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  for i : 0 thru 20 do
    inputList : f_e(inputList,keyList,lookup_sbox,lookup_mixcolumn,aes_log_gf2t8_add),
  for i : 0 thru 20 do 
    inputList : f_d(inputList,keyList,lookup_sbox,lookup_inv_sbox,lookup_inv_mixcolumn, aes_log_gf2t8_add),
  assert(inputList = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
  true)$

/* **********************
   * Helper Functions   *
   **********************
*/

okltest_polynomial2vector(f) := block(
  for i : 0 thru 9 do
    assert(f(x^(i+1),i) = apply(matrix,makelist([0],j,1,i))),
  for i : 0 thru 5 do
    for j : 0 thru i-1 do
      for k : -3 thru 3 do
        assert(f(k*x^j,i) = apply(matrix,
          append(makelist([0],l,1,i-j-1),[[k]], makelist([0],l,1,j)) 
        )),
  assert(f(x^8+5*x^3+x+1,9) = matrix([1],[0],[0],[0],[0],[5],[0],[1],[1])),
  assert(f(x^8+5*x^3+x+1,5) = matrix([0],[5],[0],[1],[1])),
  assert(f(-5*x^4+20*x^2,5) = matrix([-5],[0],[20],[0],[0])),
  assert(f(-5*x^4+20*x^2,7) = matrix([0],[0],[-5],[0],[20],[0],[0])),
  true)$

okltest_vector2polynomial(f) := block(
  for i : 0 thru 5 do
    for j : 0 thru i-1 do
      for k : -3 thru 3 do
        assert(f(apply(matrix,
          append(makelist([0],l,1,i-j-1),[[k]], makelist([0],l,1,j)) 
        )) = k*x^j),
  assert(f(matrix([1],[0],[0],[0],[0],[5],[0],[1],[1])) = x^8+5*x^3+x+1),
  assert(f(matrix([-5],[0],[20],[0],[0])) = -5*x^4+20*x^2),
  assert(f(matrix([0],[0],[-5],[0],[20],[0],[0])) = -5*x^4+20*x^2),
  true)$

/*!
\endhtmlonly
*/
