/* Oliver Kullmann, 24.12.2009 (Swansea) */
/* Copyright 2009, 2010, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/tests/ByteField.mac
  \brief Tests for Advanced Encryption Standard

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/tests/ByteField.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/ByteField.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/FiniteFields.mac")$
oklib_include("OKlib/ComputerAlgebra/MaximaInternals/Auxiliary.mac")$

kill(f)$

/* ******************
   * Representation *
   ******************
*/

okltest_rijn_polynomial(f) := block([x],
  assert(hipow(f,x) = 8),
  assert(gf_set(2,8,f)[1] # false),
  for i : 0 thru 7 do
    assert(elementp(coeff(f,x,i),{0,1}) = true),
  true)$

okltest_rijn_stand(f) := block([x],
  assert(f(0) = 0),
  assert(f(1) = 1),
  assert(f(x^8) = x^4+x^3+x+1),
  assert(f(x^8 + x^4 + x^3 + x + 1) = 0),
  true)$

okltest_nat2polybin(f) := block([x],
  assert(f(0) = 0),
  assert(f(1) = 1),
  assert(f(2) = x),
  assert(f(3) = x+1),
  assert(f(4) = x^2),
  for e : 0 thru 5 do
    assert(f(2^e) = x^e),
  true)$

okltest_polybin2nat(f) := block([x],
  assert(f(0) = 0),
  assert(f(1) = 1),
  assert(f(x) = 2),
  assert(f(x+1) = 3),
  assert(f(x^2) = 4),
  for e : 0 thru 5 do
    assert(f(x^e) = 2^e),
  true)$

okltest_rijn_stand_vec(f) := (
  assert(f([]) = []),
  assert(f([0]) = [0]),
  assert(f([1]) = [1]),
  assert(f([1,0,0,0,0,1,1]) = [1,0,0,0,0,1,1]),
  assert(f([2]) = [0]),
  assert(f([3]) = [1]),
  assert(f([3,1,1,1,2]) = [1,1,1,1,0]),
  true)$

okltest_nat2vecbin(f) := (
  assert(f(0) = [0]),
  assert(f(1) = [1]),
  assert(f(2) = [1,0]),
  assert(f(3) = [1,1]),
  assert(f(4) = [1,0,0]),
  for e : 0 thru 10 do
    assert(f(2^e) = cons(1,create_list(0,i,1,e))),
  true)$

okltest_nat2vecbin_rijn(f) := (
  assert(f(0) = [0,0,0,0,0,0,0,0]),
  assert(f(1) = [0,0,0,0,0,0,0,1]),
  assert(f(2) = [0,0,0,0,0,0,1,0]),
  assert(f(3) = [0,0,0,0,0,0,1,1]),
  assert(f(4) = [0,0,0,0,0,1,0,0]),
  for e : 0 thru 7 do
    assert(f(2^e) = create_list(if i = 8 - e then 1 else 0, i, 1, 8)),
  true)$

okltest_vecbin2nat(f) := (
  assert(f([0]) = 0),
  assert(f([1]) = 1),
  assert(f([1,0]) = 2),
  assert(f([1,1]) = 3),
  assert(f([1,0,0]) = 4),
  for e : 0 thru 10 do
    assert(f(cons(1,create_list(0,i,1,e))) = 2^e),
  true)$

okltest_polybin2vecbin(f) := (
  assert(f(0) = [0]),
  assert(f(1) = [1]),
  assert(f(x) = [1,0]),
  assert(f(x+1) = [1,1]),
  assert(f(x^2) = [1,0,0]),
  for e : 0 thru 10 do
    assert(f(x^e) = cons(1,create_list(0,i,1,e))),
  true)$

okltest_polybin2vecbin_rijn(f) := (
  assert(f(0) = [0,0,0,0,0,0,0,0]),
  assert(f(1) = [0,0,0,0,0,0,0,1]),
  assert(f(x) = [0,0,0,0,0,0,1,0]),
  assert(f(x+1) = [0,0,0,0,0,0,1,1]),
  assert(f(x^2) = [0,0,0,0,0,1,0,0]),
  for e : 0 thru 7 do
    assert(f(x^e) = create_list(if i = 8 - e then 1 else 0, i, 1, 8)),
  true)$

okltest_vecbin2polybin(f) := (
  assert(f([0]) = 0),
  assert(f([1]) = 1),
  assert(f([1,0]) = x),
  assert(f([1,1]) = x+1),
  assert(f([1,0,0]) = x^2),
  for e : 0 thru 10 do
    assert(f(cons(1,create_list(0,i,1,e))) = x^e),
  true)$

okltest_polybin2mvecbin(f) := (
  assert(f(0) = matrix([0])),
  assert(f(1) = matrix([1])),
  assert(f(x) = matrix([1],[0])),
  assert(f(x+1) = matrix([1],[1])),
  assert(f(x^2) = matrix([1],[0],[0])),
  for e : 0 thru 10 do
    assert(f(x^e) = apply(matrix,cons([1],create_list([0],i,1,e)))),
  true)$

okltest_polybin2mvecbin_rijn(f) := (
  assert(f(0) = matrix([0],[0],[0],[0],[0],[0],[0],[0])),
  assert(f(1) = matrix([0],[0],[0],[0],[0],[0],[0],[1])),
  assert(f(x) = matrix([0],[0],[0],[0],[0],[0],[1],[0])),
  assert(f(x+1) = matrix([0],[0],[0],[0],[0],[0],[1],[1])),
  assert(f(x^2) = matrix([0],[0],[0],[0],[0],[1],[0],[0])),
  for e : 0 thru 7 do
    assert(f(x^e) = apply(matrix,
        create_list(if i = 8 - e then [1] else [0], i, 1, 8))),
  true)$

okltest_mvecbin2polybin(f) := (
  assert(f(matrix([0])) = 0),
  assert(f(matrix([1])) = 1),
  assert(f(matrix([1],[0])) = x),
  assert(f(matrix([1],[1])) = x+1),
  assert(f(matrix([1],[0],[0])) = x^2),
  for e : 0 thru 10 do
    assert(f(apply(matrix,cons([1],create_list([0],i,1,e)))) = x^e),
  true)$



/* **************
   * Operations *
   **************
*/

okltest_rijn_add(f) := block([x],
  assert(f(0,0) = 0),
  assert(f(x,x) = 0),
  assert(f(x,x^4+x^2+x+3) = x^4+x^2+1),
  true)$

okltest_rijn_mul(f) := block([x],
  assert(f(0,0) = 0),
  assert(f(0,x^2) = 0),
  assert(f(1,x^3+x^2+3) = x^3+x^2+1),
  assert(f(x^4,x^4) = x^4+x^3+x+1),
  assert(f(rijn_polynomial-1,rijn_polynomial-1) = 1),
  true)$

okltest_rijn_matmul(f) := block([x],
  assert(f(matrix(),matrix()) = matrix()),
  assert(f(matrix([0]),matrix([0])) = matrix([0])),
  assert(f(matrix([x,0],[0,x]),matrix([x,0],[0,x])) = matrix([x^2,0],[0,x^2])),
  assert(f(matrix([x,1],[x,x^2]),matrix([1,x^3],[x,0])) = matrix([0,x^4],[x^3+x,x^4])),
  assert(f(matrix([x^4,0],[0,x^4]),matrix([x^4,0],[0,x^4])) = matrix([x^4+x^3+x+1,0],[0,x^4+x^3+x+1])),
  true)$

okltest_rijn_inv(f) := block([x],
  assert(f(1) = 1),
  assert(f(x) = x^7+x^3+x^2+1),
  assert(tcre_p(f(x+x^2)) = false),
  true)$

okltest_rijn_einv(f) := (
  assert(f(0) = 0),
  assert(okltest_rijn_inv(f) = true),
  true)$

okltest_rijn_natadd(f) := (
  assert(f(0,0) = 0),
  assert(okltest_rijn_add(buildq([f], lambda([a,b], nat2polybin(f(polybin2nat(rijn_stand(a)),polybin2nat(rijn_stand(b))))))) = true),
  true)$

okltest_rijn_natmul(f) := (
  assert(f(0,0) = 0),
  assert(f(0,1) = 0),
  assert(f(1,1) = 1),
  assert(f(2,141) = 1),
  true)$

okltest_rijn_natinv(f) := (
  assert(f(0) = 0),
  assert(f(1) = 1),
  assert(f(2) = 141),
  assert(f(polybin2nat(rijn_stand(-1))) = polybin2nat(rijn_stand(-1))),
  true)$

okltest_rijn_inv_pmtf(f) := (
  assert(create_list(f(i)-1,i,1,256) =
    [0,1,141,246,203,82,123,209,232,79,41,192,176,225,229,199,116,180,170,75,
    153,43,96,95,88,63,253,204,255,64,238,178,58,110,90,241,85,77,168,201,193,
    10,152,21,48,68,162,194,44,69,146,108,243,57,102,66,242,53,32,111,119,187,
    89,25,29,254,55,103,45,49,245,105,167,100,171,19,84,37,233,9,237,92,5,202,
    76,36,135,191,24,62,34,240,81,236,97,23,22,94,175,211,73,166,54,67,244,71,
    145,223,51,147,33,59,121,183,151,133,16,181,186,60,182,112,208,6,161,250,
    129,130,131,126,127,128,150,115,190,86,155,158,149,217,247,2,185,164,222,
    106,50,109,216,138,132,114,42,20,159,136,249,220,137,154,251,124,46,195,
    143,184,101,72,38,200,18,74,206,231,210,98,12,224,31,239,17,117,120,113,
    165,142,118,61,189,188,134,87,11,40,47,163,218,212,228,15,169,39,83,4,27,
    252,172,230,122,7,174,99,197,219,226,234,148,139,196,213,157,248,144,107,
    177,13,214,235,198,14,207,173,8,78,215,227,93,80,30,179,91,35,56,52,104,
    70,3,140,221,156,125,160,205,26,65,28]),
  true)$

okltest_rijn_vecadd(f) := (
  assert(f([0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0]) = [0,0,0,0,0,0,0,0]),
  for i : 0 thru 7 do
    assert(f(nat2vecbin_rijn(2^i),nat2vecbin_rijn(0)) = nat2vecbin_rijn(2^i)),
  for i : 0 thru 7 do
    assert(f(nat2vecbin_rijn(2^i),nat2vecbin_rijn(2^i)) = nat2vecbin_rijn(0)),
  assert(f([1,0,1,1,0,1,0,0], [1,1,1,1,1,1,1,1]) = [0,1,0,0,1,0,1,1]),
  true)$

okltest_rijn_vecmul(f) := (
  assert(f([0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0]) = [0,0,0,0,0,0,0,0]),
  assert(f([0,0,0,0,0,0,0,1], [0,0,0,0,0,0,0,1]) = [0,0,0,0,0,0,0,1]),
  for i : 0 thru 7 do
    assert(f(nat2vecbin_rijn(2^i),nat2vecbin_rijn(0)) = nat2vecbin_rijn(0)),
  for i : 0 thru 6 do
    assert(f(nat2vecbin_rijn(2^i),nat2vecbin_rijn(2)) = nat2vecbin_rijn(2^(i+1))),
  for i : 0 thru 3 do
    assert(f(nat2vecbin_rijn(2^i),nat2vecbin_rijn(2^i)) = nat2vecbin_rijn(2^(2*i))),
  assert(f(nat2vecbin_rijn(2^7),nat2vecbin_rijn(2)) = [0,0,0,1,1,0,1,1]),
  assert(f(nat2vecbin_rijn(2^4),nat2vecbin_rijn(2^4)) = [0,0,0,1,1,0,1,1]),
  assert(f(nat2vecbin_rijn(2^7), nat2vecbin_rijn(2^7)) = [1,0,0,1,1,0,1,0]),
  assert(f(nat2vecbin_rijn(56), nat2vecbin_rijn(32)) = [0,1,0,0,0,0,0,1]),
  true)$

okltest_rijn_vecinv(f) := (
  assert(f([0]) = [0,0,0,0,0,0,0,0]),
  assert(f([1]) = [0,0,0,0,0,0,0,1]),
  assert(f([0,0,0,0,0,1,0,1]) = [0,1,0,1,0,0,1,0]),
  assert(okltest_rijn_inv(
      buildq([f], lambda([a], vecbin2polybin(f(polybin2vecbin_rijn(a))))))),
  /* XXX */
  true)$


/*!
\endhtmlonly
*/
