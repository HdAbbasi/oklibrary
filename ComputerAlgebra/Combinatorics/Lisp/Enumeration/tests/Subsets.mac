/* Matthew Gwynne, 21.1.2009 (Swansea) */
/* Copyright 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Combinatorics/Lisp/Enumeration/tests/Subsets.mac
  \brief Tests for subset enumeration

Use by

oklib_load("OKlib/ComputerAlgebra/Combinatorics/Lisp/Enumeration/tests/Subsets.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


kill(f)$

/* ************
   * Counting *
   ************
*/

okltest_count_ksubsets_s(f) := block([a,b,c],
  for n : -2 thru 2 do
    assert(f({},n) = if n=0 then 1 else 0),
  assert(f({a,b,c},2) = 3),
  assert(okltest_count_ksubsets(buildq([f], lambda([n,k], f(setn(n),k)))) = true),
  true)$

okltest_count_ksubsets(f) := (
  for n : -2 thru 2 do
    assert(f(0,n) = if n=0 then 1 else 0),
  assert(f(1,-1) = 0),
  assert(f(1,0) = 1),
  assert(f(1,1) = 1),
  assert(f(1,2) = 0),
  assert(f(4,2) = 6),
  true)$

/* ****************************
   * Lexicographical ordering *
   ****************************
*/

okltest_lex_subsets_l(f) := block(
  for i : 0 thru 5 do
    assert(f(setn(i),0) = [{}]),
  for i : 1 thru 5 do
    assert(f({},i) = []),
  for i : 2 thru 5 do
    for j : 0 thru 5 do
      assert(f(setn(i),j) = listify(powerset(setn(i),j))),
  true)$ 

okltest_lex_subsets_ll(f) := block(
  assert(f([],0) = [{}]),
  assert(f([],1) = []),
  assert(f([3,2,1],1) = [{3},{2},{1}]),
  assert(f([4],2) = []),
  assert(f([4,1],2) = [{4,1}]),
  assert(f([3,1,2],2) = [{1,3},{2,3},{1,2}]),
  assert(f([1,4,3,2],2) = [{1,4},{1,3},{1,2},{3,4},{2,4},{2,3}]),
  assert(f([1,4,3,2],3) = [{1,4,3},{1,4,2},{1,3,2},{4,3,2}]),
  assert(f([1,4,3,2,5],3) = [{1,4,3},{1,4,2},{1,4,5},{1,3,2},{1,3,5},{1,2,5},{4,3,2},{4,3,5},{4,2,5},{3,2,5}]),
  assert(okltest_lex_subsets_l(buildq([f],lambda([M,k],f(listify(M),k)))) = true),
  if oklib_test_level=0 then return(true),
  assert(f(create_list(i,i,1,200000),1) = create_list({i},i,1,200000)),
  assert(length(f(create_list(i,i,1,200),2)) = binomial(200,2)),
  true)$

okltest_rank_lex_subsets(f) := block(
  for i : 0 thru 5 do  
    assert(f({},i) = 1),
  for i : 1 thru 5 do
    assert(f({i},5) = i),
  assert(f({5,6}, 10) = 31),
  assert(f({1,3,4,7}, 15) = 81), 
  true)$

okltest_unrank_lex_subsets(f) := block(
  for i : 0 thru 5 do
    assert(f(1, i, 0) = {}),
  for i : 1 thru 5 do
    assert(f(i,5,1) = {i}),
  assert(f(31,10,2) = {5,6}),
  assert(f(81,15,4) = {1,3,4,7}), 
  true)$


/* ******************************
   * Colexicographical ordering *
   ******************************
*/

okltest_colex_subsets_l(f) := block([cl],
  for i : 0 thru 5 do
    assert(f(setn(i),0) = [{}]),
  for i : 1 thru 5 do
    assert(f({},i) = []),
  assert(f(setn(4),3) = [{1,2,3},{1,2,4},{1,3,4},{2,3,4}]),
  cl : f(setn(7),3),
  for i : 3 thru 6 do block([rl],
    rl : f(setn(i),3),
    assert(take_elements(length(rl),cl) = rl)),
  true)$ 

okltest_colex_subsets_ll(f) := block(
  assert(f([],0) = [{}]),
  assert(f([],1) = []),
  assert(f([3,2,1],1) = [{3},{2},{1}]),
  assert(f([4],2) = []),
  assert(f([4,1],2) = [{4,1}]),
  assert(f([3,1,2],2) = [{1,3},{2,3},{1,2}]),
  assert(f([1,4,3,2],2) = [{1,4},{1,3},{3,4},{1,2},{2,4},{2,3}]),
  assert(f([1,4,3,2],3) = [{1,4,3},{1,4,2},{1,3,2},{4,3,2}]),
  assert(f([1,4,3,2,5],3) = [{1,4,3},{1,4,2},{1,3,2},{4,3,2},{1,4,5},{1,3,5},{4,3,5},{1,2,5},{4,2,5},{3,2,5}]),
  assert(okltest_colex_subsets_l(buildq([f],lambda([M,k],f(listify(M),k)))) = true),
  if oklib_test_level=0 then return(true),
  assert(f(create_list(i,i,1,200000),1) = create_list({i},i,1,200000)),
  assert(length(f(create_list(i,i,1,200),2)) = binomial(200,2)),
  true)$

okltest_rank_colex_subsets(f) := block(
  assert(f({}) = 1),
  for i : 1 thru 5 do
    assert(f({i}) = i),
  assert(f({5,6}) = 15),
  assert(f({1,3,4,7}) = 18), 
  true)$

okltest_unrank_colex_subsets(f) := block(
  for i : 0 thru 5 do
    assert(f(1, i, 0) = {}),
  for i : 1 thru 5 do
    assert(f(i,5,1) = {i}),
  assert(f(15,10,2) = {5,6}),
  assert(f(18,15,4) = {1,3,4,7}), 
  true)$


/*!
\endhtmlonly
*/
