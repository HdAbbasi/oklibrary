/* Oliver Kullmann, 22.8.2012 (Swansea) */
/* Copyright 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Combinatorics/Lisp/Enumeration/tests/Permutations.mac
  \brief Tests for enumeration of permutations

Use by

oklib_load("OKlib/ComputerAlgebra/Combinatorics/Lisp/Enumeration/tests/Permutations.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Combinatorics/Lisp/Enumeration/Permutations.mac")$

kill(f)$


/* ************
   * Counting *
   ************
*/

/* ****************************
   * Lexicographical ordering *
   ****************************
*/

okltest_lex_permutations_l(f) := (
  assert(f({}) = [[]]),
  assert(f({1}) = [[1]]),
  assert(f({-1,2}) = [[-1,2],[2,-1]]),
  assert(f({1,3,5}) = [[1,3,5],[1,5,3],[3,1,5],[3,5,1],[5,1,3],[5,3,1]]),
  true)$

okltest_rank_lex_permutations(f) := (
  for n : 0 thru cokltl(5,7) do
    assert(map(f,lex_permutations_l(setn(n))) = create_list(i,i,1,n!)),
  true)$

okltest_unrank_lex_permutations(f) := (
  for n : 0 thru cokltl(5,7) do
    assert(map(lambda([x],f(x,n)),create_list(i,i,1,n!)) = lex_permutations_l(setn(n))),
  true)$


/*!
\endhtmlonly
*/
