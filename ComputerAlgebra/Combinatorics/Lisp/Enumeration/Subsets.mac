/* Matthew Gwynne, 21.1.2009 (Swansea) */
/* Copyright 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Combinatorics/Lisp/Enumeration/Subsets.mac
  \brief Subset enumeration functions

Use by

oklib_load("OKlib/ComputerAlgebra/Combinatorics/Lisp/Enumeration/Subsets.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* The number of subsets of size k of set M: */
count_ksubsets_s(M,k) := binomial(length(M),k)$
/* The number of k-subsets of {1,...,n}: */
count_ksubsets(n,k) := binomial(n,k)$
/* Prerequisites in both cases: k is an integer. */

/* ***************************
   * Lexicographical ordering *
   ***************************
*/

/* "Lexicographical order" treats a subset as a list, sorted in ascending
    order, and the next subset is obtained by increasing the right-most
    element which can be increased (while maintaing the subset- and the
    sortedness-condition), where upon increment at some position the elements
    to the right are reset to their smallest possible values.

    This corresponds to considering the list as a base-n representation
    of a number, where n is the size of the base-set, and to each digit
    1 is added, and then going to the next element means to add 1 to the
    number.
*/

/* Produces a list of all k-subsets of M in lexicographical order: */
lex_subsets_l(M,k) := lex_subsets_ll(listify(M),k)$
/* We have lex_subsets_l(M,k) =
   map(setify,sort(map(listify,listify(powerset(M,k))), lex_lessp_l)).
*/
/* More generally, now M is a repetition-free list, and the order is as
   specified by the order of M:
*/
lex_subsets_ll(M,k) := if k=0 then [{}] elseif emptyp(M) then [] else
 block([x : first(M), R : rest(M)],
    append(add_element_l(x,lex_subsets_ll(R,k-1)), lex_subsets_ll(R,k)))$


/* Returns the rank (position) of the subset S of {1,...,n} in the 
   lexicographical enumeration of all |S|-subsets: */
rank_lex_subsets(S,n) := block([L : listify(S), k : length(S)],
  binomial(n,k) - sum_l(map(binomial,n-L,create_list(k-i+1, i,1,k))))$
/*  Note, for lex ordering, this does depend on n (as for instance {2,3,4}
    comes after {1,2,6}).
*/

/* Returns the 'x'th subset in the lexicographical enumeration of all
   k-subsets of {1,...,n}: */ 
unrank_lex_subsets(x,n,k) := block([S : [], L : 1],
  x : binomial(n,k) - x,
  for i : 1 thru k do block([j : k-i+1],
    while binomial(n-L, j) > x do L : L + 1,
    S : endcons(L,S), x : x - binomial(n-L, j)
  ),
  return(setify(S)))$


/* *****************************
   * Colexicographical ordering *
   *****************************
*/

/* "Coexicographical order" treats a subset as a list, sorted in ascending
    order, and the next subset is obtained by increasing the left-most
    element which can be increased (while maintaing the subset- and the
    sortedness-condition), where upon increment at some position the elements
    to the left are reset to their smallest possible values.
*/

/* Produces a list of all k-subsets of M in colexicographical order: */
colex_subsets_l(M,k) := colex_subsets_ll(listify(M),k)$
/* We have colex_subsets_l(M,k) =
   map(setify,sort(map(listify,listify(powerset(M,k))), colex_lessp_l)).
*/
/* More generally, now M is a repetition-free list, and the order is as
   specified by the order of M:
*/
colex_subsets_ll(M,k) := if k=0 then [{}] elseif emptyp(M) then [] else
  block([x : last(M), R : rest(M,-1)],
    append(colex_subsets_ll(R,k), add_element_l(x,colex_subsets_ll(R,k-1))))$

/* Returns the rank (position) of the subset S of {1,...,n} in the 
   colexicographical enumeration of all |S|-subsets: */
rank_colex_subsets(S) := block([L : listify(S)],
  sum_l(map(binomial,L-1,create_list(i,i,1,length(L)))) + 1)$
/*  Note, for colex ordering, this does not depend on n. */

/* Returns the 'x'th subset in the colexicographical enumeration of all
   k-subsets of {1,...,n}. */ 
unrank_colex_subsets(x,n,k) := block([S : [], L : n],
  x : x - 1,
  for i : k thru 1 step -1 do (
    while binomial(L-1,i) > x do L : L - 1,
    S : cons(L,S), x : x - binomial(L-1, i)
  ),
  return(setify(S)))$

/*!
\endhtmlonly
*/
