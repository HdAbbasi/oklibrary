/* Oliver Kullmann, 12.2.2010 (Swansea) */
/* Copyright 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Combinatorics/Lisp/Enumeration/Basics.mac
  \brief Basic concepts and tools regarding enumeration of basic combinatorial objects

Use by

oklib_load("OKlib/ComputerAlgebra/Combinatorics/Lisp/Enumeration/Basics.mac");

*/

/*!
\htmlonly
*/

/* ******************
   * Basic concepts *
   ******************
*/

/*
  Considered is a finite set M(p) of combinatorial objects, depending
  on a parameter p (in general a tuple of objects).
  The general task is to "enumerate" M(p), which has many facets.
  See ComputerAlgebra/Combinatorics/Lisp/Enumeration/Subsets.mac
  for the most up-to-date example yet.

  In module ComputerAlgebra/Combinatorics we only consider "classical"
  combinatorial objects. An attempt to define this could use the following
  properties:
   - The size of M(p) must be relatively easy to compute.
   - Enumeration is not a "hard" task.

  The starting task to is determine the size of M(p).
  Functions for doing so should start with "count_M", where M is a place-holder
  for the name of the object class.

  The most basic enumeration task is to completely list M(p) (as a list),
  where the two most basic orderings are lexicographical and colexicographical
  ordering (see ComputerAlgebra/Combinatorics/Lisp/Enumeration/Order.mac).
  The naming scheme is "lex_M_l", "colex_M_l" etc.

  The core task then is to *rank* the elements of M(p), that is, to compute
  functions M(p) -> {1, ..., |M(p)|} for the orderings considered, and
  to unrank them, that is, to compute the inverses of these functions.
  The naming scheme here is "rank_lex_M", "rank_colex_M" etc., resp.
  "unrank_lex_M", "unrank_colex_M" etc.
*/

/*!
\endhtmlonly
*/
