/* Oliver Kullmann, 27.1.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/TestSystem/Lisp/Asserts.mac
  \brief Maxima functions for asserts

Use by

oklib_load("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac");

*/

/*!
\htmlonly
*/

/* Use "assert(expr)" to state that expr shall evaluate to true. */
assert('expr) := block([error_size : error_size], error_size : 1000,
  if ev(expr) then true elseif not oklib_automatic_test then
    error("ASSERT: Expression \"", ev(expr), "\" does not evaluate to true.")
  else (
    with_stdout(test_output_okl, print("ASSERT: Expression \"", ev(expr), "\" does not evaluate to true.")),
    error("ASSERT: Expression \"", ev(expr), "\" does not evaluate to true.")))$

/* Helper functions to handle matters of precision. */
log10(x) := log(x) / log(10)$
no_digits(x) := if x = 0 then 0 else entier(log10(x)) + 1$

/* Use "assert_float_equal(a,b)" to state that a,b shall be equal within
   the floating-point precision. */
assert_float_equal(expr1,expr2) := ev(
  buildq([expr1,expr2], 
    assert(abs(expr1-expr2) < 2 * 10^(no_digits(max(abs(expr1), abs(expr2)))-16))),
 eval)$

/*!
\endhtmlonly
*/
