/* Oliver Kullmann, 4.5.2008 (Guangzhou) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/DataStructures/Lisp/HashMaps.mac
  \brief Functions for handling hash maps (in Maxima/Lisp)

Use by

oklib_load("Transitional/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac");

*/

/*!
\htmlonly
*/

/* ************************
   * Set-theoretical maps *
   ************************
*/

/* A "set-map" ("sm") is a set of pairs [x,y], such that x is unique.
   An "ordered set-map" ("osm") is a list of pairs without repetitions
   whose setification is a set-map.
*/

/* Checks whether M is a set-map. */
/* RENAME: sm_p */
setmapp(M) := if not setp(M) then false else block([is_setm : true],
  for p in M while is_setm do
    if not listp(p) or length(p) # 2 then is_setm : false,
  return(is_setm and length(map(first,M)) = length(M)))$
osm_p(M) := if not listp(M) then false else
 block([l : length(M)],
  if length(unique(M)) # l then return(false),
  block([is_osm : true],
    for p in M while is_osm do
      if not listp(p) or length(p) # 2 then is_osm : false,
    return(is_osm and length(unique(map(first,M))) = l)))$

/* Set a value for a set-map. */
/* RENAME: set_sm */
define_set_map(M,x,y) := block([found : false],
 for p in M unless found do
   if p[1] = x then (
     found : true,
     if p[2] # y then M : adjoin([x,y],disjoin(p,M))),
 if found then return(M) else return(adjoin([x,y],M)))$

/* Compute the value for an argument in the domain of a set-map.
   If x is not in the domain, then "done" is returned. */
/* RENAME: ev_sm */
evaluate_set_map(M,x) := for p in M do if p[1] = x then return(p[2])$
/* Use a default value if undefined. */
/* RENAME: ev_sm_d */
evaluate_set_map_d(M,x,y) := block([found : false, val],
 for p in M unless found do if p[1] = x then (found : true, val : p[2]),
 if found then val else y)$


/* ***********************************************
   * Hash maps as provided by the graphs-package *
   ***********************************************
*/

/* ATTENTION: The following two functions are only for
   compatability reasons - in the OKlibrary the functions
   below are to be used! (Which convert hash keys into
   strings.)
*/

oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/HashMaps.lisp")$

/* Given a map as a set-map, create a hash-map. */
/* The assignments are entered into the hash-map according to their
   order in the set-map (i.e., according to orderlessp).
   The order of the hash-map is the reverse order of the order in which
   the elements were entered. */
create_hash_map(S) := block([h : hash_table_okl()],
  for p in S do set_hash_okl(p[1],h,p[2]), return(h))$

/* Given a hash-map, create the corresponding set-theoretical map
   (as a set of pairs). */
create_set_map(h) := 
 setify(map(args,hash_table_data_okl(h)))$

/* The IMPROVED hash-map facilities */

/* The hash-map data type is given by the 7 functions
 - set_hm
 - ev_hm, ev_hm_d
 - del_hm
 - sm2hm, osm2hm
 - hm2osm, hm2sm
 - compose_hm_sm
 - lambda_hm.
*/

/* Set a value for the hash map. */
set_hm(h,x,y) := set_hash_okl(sconcat(x),h,y)$
/* Compute a value, returning false if undefined */
ev_hm(h,x) := get_hash_okl(sconcat(x),h)$
/* Compute a value, returning the provided value if undefined. */
ev_hm_d(h,x,y) := get_hash_okl(sconcat(x),h,y)$
/* Delete a key from a hash map. Returns false if x is not in h, otherwise
   return true. */
del_hm(h,x) := del_hash_okl(sconcat(x),h)$

/* Converting set-maps to hash-maps, and hash-maps to set-maps. */
/* The order of entries in the hash-table is given by orderlessp. */
sm2hm(M) := block([h : hash_table_okl()],
  for p in M do set_hm(h,p[1],p[2]), return(h))$
osm2hm(M) := sm2hm(M)$
/* The inverse conversions: */
hm2osm(h) :=
 map(lambda([a],[eval_string(part(a,1)),part(a,2)]),hash_table_data_okl(h))$
hm2sm(h) :=
 setify(hm2osm(h))$

/* Extending a hash-map by a set-map, overwriting old settings. */
compose_hm_sm(h,M) := (for p in M do set_hm(h,p[1],p[2]), h)$

/* Converting a hash-map into a lambda-term.
   Attention: the lambda-term is a *reference* to h! */
lambda_hm(h) := buildq([h],lambda([x],ev_hm(h,x)))$


/* ***********************
   * Arrays as hash-maps *
   ***********************
*/

/* Similar functions for arrays (like hash-maps, but fixed lenghts,
   and only integer indices, starting with 1). */

/* "okl-arrays" are 1-based, and at index 0 they contain their length. */

/* The equivalents of the built-in functions: */

okl_make_array(type,dim) := block([a : make_array(type,dim+1)], 
  a[0] : dim, a)$
okl_listarray(a) := rest(listarray(a))$
/* RENAME: ary2l */
array2l(a) := okl_listarray(a)$
/* Here L must be a list and a an okl-array: */
okl_fillarray_l(a,L) := fillarray(a,cons(a[0],L))$


/* Creating okl-arrays from lists: */

/* RENAME: l2ary */
l2array(L) := okl_fillarray_l(okl_make_array(any,length(L)),L)$
/* If the list contains only integers, and the array shall be
   an array of integers: */
/* RENAME: il2ary */
il2array(L) := okl_fillarray_l(okl_make_array(fixnum,length(L)),L)$
/* If the list contains only floating-point numbers, and the array shall be
   an array of floating-point numbers: */
/* RENAME: fl2ary */
fl2array(L) := okl_fillarray_l(okl_make_array(flonum,length(L)),L)$


/* Creating okl-arrays from set-maps: */

/* RENAME: sm2ary */
sm2array(M) := sm2array_lt(M,length(M),any)$
/* RENAME: osm2ary */
osm2array(M) := sm2array(M)$
/* If the type of the indices is known, and the length of the array
   is also to be specified: */
/* RENAME: sm2ary_lt */
sm2array_lt(M,l,type) := block([a : okl_make_array(type,l)],
  for p in M do a[p[1]] : p[2], return(a))$
/* RENAME: osm2ary_lt */
osm2array_lt(M,l,type) := sm2array_lt(M,l,type)$

/* Interpreting a value "false" as "not assigned": */
/* RENAME: ary2osm */
array2osm(a) := array2osm_v(a,false)$
/* Specifying the value which signals "not assigned": */
/* RENAME: ary2osm */
array2osm_v(a,v) := block([L : okl_listarray(a)],
  delete(v,create_list(if L[i]=false then false else [i,L[i]],i,1,length(L))))$

/* Creating lambda-maps with "built-in okl-array": */

/* Converting an array or an array-function into a lambda-term: */
/* RENAME: ary2lmp2 */
lambda_array(a) := buildq([a],lambda([x],a[x]))$
/* Extracting the array from a lambda-term created by lambda_array: */
/* RENAME: lmpa2ary */
extract_array(h) := part(h,2,0);
/* RENAME: lmpa2l */
extract_arraylist(h) := okl_listarray(extract_array(h))$


/* *********************
   * Frequency counter *
   *********************
*/

/* Given a list L of objects for which we want to count the number
   of occurrences, and then get the list of pairs [x,count],
   sorted by x, where the x are the different objects:
    - first create an empty hash-map h : sm2hm({})
    - then call enter_new_occurrences(h,x) for each occurrence,
    - and finally get the result via get_distribution(h).
*/
enter_new_occurrence(h,x) :=
  set_hm(h,x,ev_hm_d(h,x,0)+1)$
get_distribution(h) := sort(listify(hm2sm(h)),
  lambda([P1,P2], is(first(P1) < first(P2))))$

list_distribution(L) := block([h : sm2hm({})],
  for x in L do enter_new_occurrence(h,x),
  get_distribution(h))$

/* In the special case, where the x are numerical, we could do as
   follows; HOWEVER this is MUCH slower than the above: */
load(descriptive)$
num_distribution(L) := block([D : discrete_freq(L)],
  sort(map("[",D[1],D[2]),
    lambda([P1,P2], is(first(P1) < first(P2)))))$


/*!
\endhtmlonly
*/
