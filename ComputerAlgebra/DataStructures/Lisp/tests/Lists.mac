/* Oliver Kullmann, 20.2.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/DataStructures/Lisp/tests/Lists.mac
  \brief Tests for list-processing functions

Use by

oklib_load("Transitional/ComputerAlgebra/DataStructures/Lisp/tests/Lists.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac");


kill(f)$

okltest_take_elements(f) := (
  assert(f(0,[]) = []),
  assert(f(0,[1,2]) = []),
  assert(f(1,[1,2]) = [1]),
  assert(f(2,[1,2]) = [1,2]),
  assert(f(3,[1,2]) = [2]),
  assert(f(4,[1,2]) = []),
  block([L1,L2],
   L1 : [1,2,3],
   L2 : f(2,L1),
   assert(L2 = [1,2]),
   L2[1] : 77,
   assert(L1 = [1,2,3])),
  true)$

okltest_remove_element(f) := (
  assert(f(1,[1]) = []),
  assert(f(1,[1,2]) = [2]),
  assert(f(2,[1,2]) = [1]),
  block([L1,L2],
   L1 : [1,2,3],
   L2 : f(2,L1),
   assert(L2 = [1,3]),
   L2[1] : 77,
   assert(L1 = [1,2,3])),
  true)$

okltest_partition_elements(f) := (
  for n : 1 thru 3 do
    assert(f([],n) = []),
  for n : 1 thru 3 do
    assert(f([1],n) = [[1]]),
  for n : 1 thru 3 do
    assert(f([1,2],n) = if n=1 then [[1],[2]] else [[1,2]]),
  block([L1,L2],
   L1 : [1,2,3],
   L2 : f(L1,2),
   assert(L2 = [[1,2],[3]]),
   L2[1] : 77,
   assert(L1 = [1,2,3])),
  true)$

/*!
\endhtmlonly
*/
