/* Oliver Kullmann, 20.2.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/DataStructures/Lisp/tests/Lists.mac
  \brief Tests for list-processing functions

Use by

oklib_load("Transitional/ComputerAlgebra/DataStructures/Lisp/tests/Lists.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$


kill(f)$

okltest_take_elements(f) := (
  assert(f(0,[]) = []),
  assert(f(0,[1,2]) = []),
  assert(f(1,[1,2]) = [1]),
  assert(f(2,[1,2]) = [1,2]),
  assert(f(3,[1,2]) = [2]),
  assert(f(4,[1,2]) = []),
  block([L1,L2],
   L1 : [1,2,3],
   L2 : f(2,L1),
   assert(L2 = [1,2]),
   L2[1] : 77,
   assert(L1 = [1,2,3])),
  true)$

okltest_remove_element(f) := (
  assert(f(1,[1]) = []),
  assert(f(1,[1,2]) = [2]),
  assert(f(2,[1,2]) = [1]),
  block([L1,L2],
   L1 : [1,2,3],
   L2 : f(2,L1),
   assert(L2 = [1,3]),
   L2[1] : 77,
   assert(L1 = [1,2,3])),
  true)$

okltest_partition_elements(f) := (
  for n : 1 thru 3 do
    assert(f([],n) = []),
  for n : 1 thru 3 do
    assert(f([1],n) = [[1]]),
  for n : 1 thru 3 do
    assert(f([1,2],n) = if n=1 then [[1],[2]] else [[1,2]]),
  block([L1,L2],
   L1 : [1,2,3],
   L2 : f(L1,2),
   assert(L2 = [[1,2],[3]]),
   L2[1] : 77,
   assert(L1 = [1,2,3])),
  true)$

okltest_rotate(f) := (
  assert(f([1,2,3],1) = [3,1,2]),
  assert(f([1,2,3],2) = [2,3,1]),
  for n : -3 thru 3 do
    assert(f([],n) = []),
  for n : -3 thru 3 do
    assert(f([1,2,3],3*n) = [1,2,3]),
  for n : -3 thru 3 do
    assert(f([1,2,3],n) = f([1,2,3],-3+n)),
  block([L1,L2],
   L1 : [1,2,3],
   L2 : f(L1,2),
   assert(L2 = [2,3,1]),
   L2[1] : 77,
   assert(L1 = [1,2,3])),
  true)$

okltest_sublist_indicator(f) := (
  assert(f([],make_array(fixnum,0)) = []),
  assert(f([],make_array(fixnum,1)) = []),
  assert(f([1],make_array(fixnum,1)) = [1]),
  assert(f([1,2],make_array(fixnum,2)) = [1,2]),
  block([A : make_array(fixnum,4)],
   assert(f([1,2,3,4],A) = [1,2,3,4]),
   A[0] : 1,
   assert(f([1,2,3,4],A) = [2,3,4]),
   A[3] : 2,
   assert(f([1,2,3,4],A) = [2,3]),
   A[1] : -1,
   assert(f([1,2,3,4],A) = [3]),
   A[2] : 6,
   assert(f([1,2,3,4],A) = [])
  ),
  block([L : [1,2,3], A : make_array(fixnum,3), L2],
   A[1] : 1,
   L2 : f(L,A),
   assert(L2 = [1,3]),
   L2[1] : 77,
   assert(L[1] = 1)
  ),
  true)$


okltest_matrix2list(f) := (
  assert(f(matrix([])) = []),
  assert(f(matrix([1,2,3])) = [1,2,3]),
  assert(f(matrix([1,2,3],[4,5,6])) = [1,2,3,4,5,6]),
  assert(f(matrix([1,2,3],[4,5,6],[7,8,9])) = [1,2,3,4,5,6,7,8,9]),
  assert(f([]) = []),
  assert(f([[]]) = []),
  assert(f([[1,2,3]]) = [1,2,3]),
  assert(f([[1,2,3],[4,5,6]]) = [1,2,3,4,5,6]),
  assert(f([[1,2,3],[4,5,6],[7,8,9]]) = [1,2,3,4,5,6,7,8,9]),
  assert(f([[1,2,3],[4,5,6],[7,8,9],[]]) = [1,2,3,4,5,6,7,8,9]),
  assert(f([[1,2,3],[4,5,6],[7,8,9],[10]]) = [1,2,3,4,5,6,7,8,9,10]),
  true)$

okltest_matrixcolumns(f) := (
  assert(f(matrix()) = []),
  assert(f(matrix([1],[2],[3])) = [[1,2,3]]),
  assert(f(matrix([1,2,3])) = [[1],[2],[3]]),
  assert(f(matrix([1,2,3],[4,5,6])) = [[1,4],[2,5],[3,6]]),
  assert(f(matrix([1,2,3],[4,5,6],[7,8,9])) = [[1,4,7],[2,5,8],[3,6,9]]),
  true)$

okltest_columns2matrix(f) := (
  assert(f([]) = matrix()),
  assert(f([[1,2,3]]) = matrix([1],[2],[3])),
  assert(f([[1],[2],[3]]) = matrix([1,2,3])),
  assert(f([[1,4],[2,5],[3,6]]) = matrix([1,2,3],[4,5,6])),
  assert(f([[1,4,7],[2,5,8],[3,6,9]]) = matrix([1,2,3],[4,5,6],[7,8,9])),
  true)$

/*!
\endhtmlonly
*/
