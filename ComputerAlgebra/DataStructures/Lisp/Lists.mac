/* Oliver Kullmann, 20.2.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/DataStructures/Lisp/Lists.mac
  \brief Functions for handling lists (in Maxima/Lisp)

Use by

oklib_load("Transitional/ComputerAlgebra/DataStructures/Lisp/Lists.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$


/* ***********************
   * Apply-functionality *
   ***********************
*/

/* "Unrestricted apply" (for arbitrary argument-list-length);
   dissipating into apply's with blocksize many arguments: 
*/
uapply(_op,L,blocksize) :=  block([l : length(L)],
  if l <= blocksize then apply('_op,L)
  else block([d : divide(l-1, blocksize), res : apply('_op,[first(L)])],
    L : rest(L),
    thru d[1] do (
      res : apply('_op, [res, apply('_op, take_elements(blocksize,L))]),
      L : rest(L, blocksize)
    ),
    if d[2] # 0 then
      apply('_op, [res, apply('_op, take_elements(d[2],L))])
    else
      res))$
/* To be used with "append" etc.: */
uaapply(_op,L) := uapply(_op,L,maximal_argument_length)$
/* Remark: "apply("+",L)" etc. is possible for arbitrary lists L. */
/* Remark: For "union" and "intersection" use lunion resp. lintersection.
*/

/* The special case of appending the elements of a list: */
lappend(L) := uaapply(append,L)$


/* *******************************
   * Testing properties of lists *
   *******************************
*/

/* The versions of "every" and "some" with short-circuit evaluation: */

every_s(_prede,L) := block([nocountex : true],
  for x in L while nocountex do
    nocountex : _prede(x),
  return(nocountex))$
some_s(_preds,L) := block([countex : false],
  for x in L unless countex do
    countex : _preds(x),
  return(countex))$

/* Checks whether L is a list without repetitions: */
listnorep_p(L) := listp(L) and is(length(unique(L)) = length(L))$


/* *******************************************
   * Summations and products over lists/sets *
   *******************************************
*/

sum_l(L) := apply("+",L)$
sum_s(S) := apply("+",listify(S))$
gsum_l(f,L) := apply("+",map(f,L))$
gsum_s(f,S) := apply("+",map(f,listify(S)))$
prod_l(L) := apply("*",L)$
prod_s(S) := apply("*",listify(S))$
gprod_l(f,L) := apply("*",map(f,L))$
gprod_s(f,S) := apply("*",map(f,listify(S)))$


/* *************************************
   * Finding special elements in lists *
   *************************************
*/

/* Computing the first smallest element (w.r.t. "length") of a list
   (or of a set). */
/* Prerequisite: L is not empty. */
first_smallest_l(L) := block([s : inf, S],  
  for x in L do block([l : length(x)],
    if l < s then (s : l, S : x)),
  S)$
/* Now a lower bound on length is given: */
first_smallest_lb_l(L,lb) := block([s : inf, S],  
  for x in L unless s = lb do block([l : length(x)],
    if l < s then (s : l, S : x)),
  S)$
/* first_smallest_lb_l(L,0) computes the same result as first_smallest_l(L),
   but the computation is aborted as soon as an empty element was found
   (the price is the repeated evaluation of the condition).
*/

/* More generally, compute the minimum value of function _fmin together with
   the corresponding first element (returned as pair).
   If the list is empty, then return [inf].
*/
/* Prerequisite: _fmin(x) < inf for x in L. */
first_smallest_f_l(_fmin,L) := if emptyp(L) then [inf] else
 block([min_v : inf, opt_x],
  for x in L do block([v : _fmin(x)],
    if v < min_v then (opt_x : x, min_v : v)),
  [min_v, opt_x])$
/* Prerequisite: _fmax(x) > minf for x in L. */
first_largest_f_l(_fmax,L) := if emptyp(L) then [minf] else
 block([max_v : minf, opt_x],
  for x in L do block([v : _fmax(x)],
    if v > max_v then (opt_x : x, max_v : v)),
  [max_v, opt_x])$


/* **************************
   * Sublist constructions *
   **************************
*/

/* The first n elements of L for 0 <= n <= length(L), while for 
   length(L) <= n <= 2 length(L) we use n' := 2 length(L) - n and
   return the last n' elements. Error if n < 0 or n > 2 length(L). */
/* Returns a shallow copy of L. */
take_elements(n,L) := rest(L, - (length(L) - n))$

/* Finds the list of indices of elements equal to x. */
sublist_indices_el(L,x) := sublist_indices(L,lambda([e],is(e=x)))$

/* Removes element with index i from list L. Error if i < 1 or 
   i > length(L). */
/* Returns a shallow copy of L. */
remove_element(i,L) := append(take_elements(i-1,L), rest(L,i))$

/* Return the sublist of list L for which the corresponding entry in
   okl-array I is 0. Returns a shallow copy. */
sublist_indicator(L,I) := block([res : [], l : length(L), i : 1],
 for x in L do (
   if I[i] = 0 then res : endcons(x,res),
   i : i + 1),
 return(res))$


/* **********************
   * List constructions *
   **********************
*/

/* Partitions a given list l into a list of lists of size n,
   or less (in the case of the last-element list).
   Prerequisite n > 0. */
/* Returns a shallow copy of L. */
partition_elements(l,n) := if emptyp(l) then [] else 
 block([nn : min(length(l),n)],
  cons(take_elements(nn,l), partition_elements(rest(l,nn),n)))$
/* We have apply(append, partition_elements(l,n)) = l. */

/* Partition a list into yes- and no- instances */
partition_list(L,pred) := [sublist(L,pred),sublist(L,lambda([x],not pred(x)))]$


/* Rotates a list n elements to the right. Negative n rotates to the left. */
rotate(l,n) := 
  if n = 0 or l = [] then l
  else if sign(n) = pos then  rotate(append([last(l)],rest(l,-1)), n-1)
  else rotate(append(rest(l), [first(l)]), n+1)$


/* Removes duplicated elements in the order they appear (i.e., the second
   occurrence and later ones are removed). */
/* Returns copies of each first occurrence. */
stable_unique(L) := block([h : sm2hm({}), res : []],
 for x in L do
   if not ev_hm(h,x) then (
     set_hm(h,x,true),
     res : endcons(x,res)),
 return(res))$


/* *************************
   * Random parts of lists *
   *************************
*/

/* Setting the state 0 <= n < 2^32. */
/* Apparently each state is independent of every other state, and comprises
   a reasonably long sequence of random numbers.*/
/* It appears that when Maxima is initialised then the random state is set
   to some fixed but unspecified value. */
set_random(n) := set_random_state(make_random_state(n))$

/* Returns a random element with indices between a and b
   from a non-empty list L. */
/* Prerequisites: 1 <= a <= b <= length(L). */
random_element_ab(a,b,L) := L[random(b-a+1)+a]$
/* Returns a random element from a non-empty list: */
random_element(L) := random_element_ab(1,length(L),L)$

/* Removes a random element from a non-empty list passed by
   reference, and returns that element: */
remove_random_element(L) := block([n : length(ev(L)), i, x],
  i : random(n) + 1,
  x : ev(L)[i],
  L :: remove_element(i,ev(L)),
  return(x))$




/* REMARK : Functions below should go to LinearAlgebra? */

/* Flattens a matrix or list into a list of the elements, row by row: */
matrix2list(m) := uaapply(append, create_list(m[i],i,1,length(m)))$

/* Returns a list of the given matrix's columns (as lists) */
matrixcolumns(m) := partition_elements(matrix2list(transpose(m)),length(m))$

/* Builds a matrix from a list of it's columns (as lists) */
columns2matrix(mc) := transpose(uaapply(matrix, mc))$


/*!
\endhtmlonly
*/
