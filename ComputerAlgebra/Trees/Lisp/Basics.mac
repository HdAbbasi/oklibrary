/* Oliver Kullmann, 12.1.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Trees/Lisp/Basics.mac
  \brief Functions for handling trees

Use by

oklib_load("OKlib/ComputerAlgebra/Trees/Lisp/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Basic.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* ****************************
   * Unlabelled rooted trees  *
   ****************************
*/

/* An "unlabelled rooted tree" is recursively defined as a list
   [T_1, ..., T_n], where the T_i are the subtrees (the case
   n=0, i.e., the empty list, represents the trivial tree).
*/
/* In other words, an "rt" is represented by a term which uses only
   "[", "]" and commas.
*/

rt_p(T) := listp(T) and every_s(rt_p,T)$

/* The number of nodes in an unlabelled tree: */
nnds(T) := 1+sum_l(map(nnds,T))$

/* The number of leaves in an unlabelled rooted tree: */
nlvs(T) := if T = [] then 1 else sum_l(map(nlvs,T))$

/* A "node representation" for an unlabelled rooted tree is a list
   of natural numbers (>= 1) representing the path from the root
   to the node. */

/* The set of "leaves" of an unlabelled tree: */
lvs(T) := if emptyp(T) then {[]} else
  lunion(
    map(lambda([S,i],map(lambda([p],cons(i,p)),S)), 
      map(lvs,T), 
      create_list(i,i,1,length(T))))$

/* The set of "nodes" of an unlabelled tree: */
nds(T) := adjoin([], lunion(
  map(lambda([S,i],map(lambda([p],cons(i,p)),S)), 
    map(nds,T), 
    create_list(i,i,1,length(T)))))$


/* The subtree of unlabelled tree T at node (representation) p;
   prerequisite: p is a valid node representation for T, that is
   elementp(p,nds(T)) is true. */
subtree(T,p) := if p = [] then T else
  subtree(T[p[1]], rest(p))$
/* Remark: The subtree is a shallow copy, and so replacing an element of it
   will have the same effect for the original tree.
*/

/* The successor nodes (i.e., representations) of node (representation) p
   in unlabelled tree T: */
dst(T,p) := block([S : subtree(T,p)],
  setify(create_list(endcons(i,p),i,1,length(S))))$


/* The height of an unlabelled tree: */
height(T) := if T = [] then 0 else
  1 + lmax(map(height,T))$

/* The "levelled height" of an unlabelled tree 
   (also the "Horton-Strahler number"): */
levelled_height(T) := if T = [] then 0 else block(
  [H : map(levelled_height,T), max, count : 0],
   max : lmax(H),
   for h in H unless count=2 do
     if h=max then count : count + 1,
   if count <= 1 then return(max) else return(1+max))$


/* ****************************
   * Labelled rooted trees    *
   ****************************
*/

/* A "labelled rooted tree" is recursively defined as a list
   [L, T_1, ..., T_n], n >= 0, where L is the label, and the T_i
   are the subtrees.
*/

/* Transforms a labelled into an unlabelled tree by removing the labels: */
/* UPDATE: rename to lrt2rt. */
l2ult(T) := map(l2ult,rest(T))$

/* Number of nodes in a labelled rooted tree: */
nnds_l(T) := 1+sum_l(map(nnds_l,rest(T)))$

/* The number of leaves in a labelled rooted tree: */
nlvs_l(T) := if length(T) = 1 then 1 else sum_l(map(nlvs_l,rest(T)))$


/* ****************
   * Transformers *
   ****************
*/

/* Transforms a graph G, which is a tree, into a labelled rooted tree 
   (using root r, and the natural order on the vertices of G): */
/* UPDATE: rename to g2lrt. */
graph2tree(G,r) := block([N : listify(neighbours(r,G))],
 return(cons(r, create_list(graph2tree(remove_vertices_graph({r},G),v),v,N))))$


/* **************
   * Generators *
   **************
*/

/* The complete (unlabelled, rooted) tree of depth d and width q: */
complete_rt(d,q) := if d=0 then [] else
  create_list(complete_rt(d-1,q),i,1,q)$

oklib_plain_include(graphs)$
/* A random labelled tree with n vertices (labels 1,...,n; root is 1) */
random_ltree(n) := graph2tree(mg2g(random_tree(n)),1);


/* The list of all binary unlabelled trees with m nodes (recursively
   created, with increasing node number in the left substree).
   Prerequisite: m is an odd natural number.
*/
oklib_plain_include("integer_sequence")$
all2_rt(m) := if m=1 then [[]] else
  lappend(create_list(
    cartesian_product_l([all2_rt(a),all2_rt(m-a-1)]), 
    a, 1 .. 2 .. m-2))$
/* Now given the number i of inner nodes (a natural number >= 0): */
all2i_rt(i) := all2_rt(2*i+1)$
/* And given the number of leaves (a natural number >= 1): */
all2l_rt(l) := all2_rt(2*l-1)$

/*!
\endhtmlonly
*/
