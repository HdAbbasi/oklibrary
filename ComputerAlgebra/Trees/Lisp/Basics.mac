/* Oliver Kullmann, 12.1.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Trees/Lisp/Basics.mac
  \brief Functions for handling trees

Use by

oklib_load("OKlib/ComputerAlgebra/Trees/Lisp/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Basic.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* ****************************
   * Unlabelled rooted trees  *
   ****************************
*/

/* An "unlabelled rooted tree" is recursively defined as a list
   [T_1, ..., T_n], where the T_i are the subtrees (the case
   n=0, i.e., the empty list, represents the trivial tree).

   Note that these trees are ordered (the order of children matters).

   In other words, an "rt" is represented by a term which uses only
   "[", "]" and commas.
*/

/* Checking whether T is an unlabelled rooted tree: */
rt_p(T) := listp(T) and every_s(rt_p,T)$

/* Checking whether for unlabelled rooted tree T every inner node
   has precisely 2 children:
*/
rt2_p(T) := emptyp(T) or (length(T)=2 and every_s(rt2_p,T))$

/* A "node representation" for an unlabelled rooted tree is a list
   of natural numbers (>= 1) representing the path from the root
   to the node. */

/* The set of "leaves" of an unlabelled tree: */
lvs(T) := if emptyp(T) then {[]} else
  lunion(
    map(lambda([S,i],map(lambda([p],cons(i,p)),S)), 
      map(lvs,T), 
      create_list(i,i,1,length(T))))$

/* The set of "nodes" of an unlabelled tree: */
nds(T) := adjoin([], lunion(
  map(lambda([S,i],map(lambda([p],cons(i,p)),S)), 
    map(nds,T), 
    create_list(i,i,1,length(T)))))$


/* The subtree of unlabelled tree T at node (representation) p;
   prerequisite: p is a valid node representation for T, that is
   elementp(p,nds(T)) is true. */
subtree(T,p) := if p = [] then T else
  subtree(T[p[1]], rest(p))$
/* Remark: The subtree is a shallow copy, and so replacing an element of it
   will have the same effect for the original tree.
*/

/* The successor nodes (i.e., representations) of node (representation) p
   in unlabelled tree T: */
dst(T,p) := block([S : subtree(T,p)],
  setify(create_list(endcons(i,p),i,1,length(S))))$


/* ****************************
   * Labelled rooted trees    *
   ****************************
*/

/* A "labelled rooted tree" ("lrt") is recursively defined as a list
   [L, T_1, ..., T_n], n >= 0, where L is the label, and the T_i
   are the subtrees.
*/

/* Checking whether T is a labelled rooted tree: */
lrt_p(T) := listp(T) and is(length(T) >= 1) and every_s(lrt_p,rest(T))$


/* For a node-representation p in the labelled tree T, compute the label: */
ndrep2l_lrt(p,T) := if emptyp(p) then first(T) else
 ndrep2l_lrt(rest(p), T[first(p) + 1])$


/* Transforms a labelled into an unlabelled tree by removing the labels: */
/* UPDATE: rename to lrt2rt. */
l2ult(T) := map(l2ult,rest(T))$
lrt2rt(T) := l2ult(T)$

/* Apply map lmap_ to all labels of lrt T (obtaining another lrt): */
lmap_lrt(T, lmap_) := cons(lmap_(first(T)),
 map(lambda([t], lmap_lrt(t, lmap_)), rest(T)))$


/* Adding labels from list L to unlabelled tree T at inner nodes in in-order,
   while leaves are labelled by l.
   Prerequisite: the length of L is at least the number of inner nodes of T.
*/
rt2lrt_il(T,L,l) := if emptyp(T) then [l] else
  block([res : [first(L)]],
    L : rest(L),
    for S in T do block([n : ninds_rt(S)],
      res : cons(rt2lrt_il(S, take_l(n,L), l), res),
      L : rest(L,n)
    ),
    reverse(res))$

/* The set of leaf-labels: */
ll_lrt(T) := if length(T) = 1 then {first(T)}
else lunion(map(ll_lrt,rest(T)))$
/* The list-form (listing the leaf-labels from left to right): */
lll_lrt(T) := if length(T) = 1 then [first(T)]
else lappend(map(lll_lrt,rest(T)))$

/* The set of non-leaf-node-labels: */
il_lrt(T) := if length(T) = 1 then {}
else adjoin(first(T), lunion(map(il_lrt,rest(T))))$

/* The set of all labels: */
l_lrt(T) := adjoin(first(T), lunion(map(l_lrt,rest(T))))$
/* The list of labels, in pre-order: */
preorderl_lrt(T) := cons(first(T), lappend(map(preorderl_lrt, rest(T))))$
/* The list of labels, first sorted by level-order, then from left to right: */
levelorderl_lrt(T) := map(first,
 sort(preorderl_lrt(depth_annotation_lrt(T)),
      lambda([p1,p2], is(second(p1) < second(p2)))))$


/* Replacing every label l with the pair [l,d], where d is the depth of
   the node (the distance to the root):
*/
depth_annotation_g_lrt(T,k) :=
 cons([first(T), k], map(lambda([t], depth_annotation_g_lrt(t,k+1)), rest(T)))$
depth_annotation_lrt(T) := depth_annotation_g_lrt(T,0)$


/* ************
   * Measures *
   ************
*/

/* The number of nodes in an unlabelled tree: */
/* RENAME: nnds_rt */
nnds(T) := 1+sum_l(map(nnds,T))$
nnds_rt(T) := nnds(T)$
/* Number of nodes in a labelled rooted tree: */
/* RENAME: nnds_lrt */
nnds_l(T) := 1+sum_l(map(nnds_l,rest(T)))$
nnds_lrt(T) := nnds_l(T)$

/* The number of leaves in an unlabelled rooted tree: */
/* RENAME: nlvs_rt */
nlvs(T) := if emptyp(T) then 1 else sum_l(map(nlvs,T))$
nlvs_rt(T) := nlvs(T)$
/* The number of leaves in a labelled rooted tree: */
/* RENAME: nlvs_lrt */
nlvs_l(T) := if length(T) = 1 then 1 else sum_l(map(nlvs_l,rest(T)))$
nlvs_lrt(T) := nlvs_l(T)$

/* The number of inner nodes in an unlabelled rooted tree: */
ninds_rt(T) := if emptyp(T) then 0 else 1+sum_l(map(ninds_rt,T))$
/* The number of inner nodes in a labelled rooted tree: */
ninds_lrt(T) := if length(T) = 1 then 0 else 1+sum_l(map(ninds_lrt,rest(T)))$

/* We have nnds(T) = nlvs(T) + ninds(T). */

/* The height of an unlabelled tree: */
/* RENAME: height_rt */
height(T) := if T = [] then 0 else
  1 + lmax(map(height,T))$
height_rt(T) := height(T)$

/* The "levelled height" of an unlabelled tree 
   (also the "Horton-Strahler number"): */
/* RENAME: levelled_height_rt */
levelled_height(T) := if T = [] then 0 else block(
  [H : map(levelled_height,T), max, count : 0],
   max : lmax(H),
   for h in H unless count=2 do
     if h=max then count : count + 1,
   if count <= 1 then return(max) else return(1+max))$
levelled_height_rt(T) := levelled_height(T)$


/* ****************
   * Transformers *
   ****************
*/

/* Transforms a graph G, which is a tree, into a labelled rooted tree 
   (using root r, and the natural order on the vertices of G): */
g2lrt(G,r) := block([N : listify(neighbours(r,G))],
 return(cons(r, create_list(g2lrt(remove_vertices_graph({r},G),v),v,N))))$


/* **************
   * Generators *
   **************
*/

/* The complete (unlabelled, rooted) tree of depth d and with q children at
   each inner node: */
complete_rt(d,q) := if d=0 then [] else
  create_list(complete_rt(d-1,q),i,1,q)$

oklib_plain_include(graphs)$
/* A random labelled tree with n vertices (labels 1,...,n; root is 1) */
random_lrt(n) := g2lrt(mg2g(random_tree(n)),1);


/* The list of all binary unlabelled trees with m nodes (recursively
   created, with increasing node number in the left subtree).
   Prerequisite: m is an odd natural number.

   Note that "binary" here just means that every inner node has exactly
   two children (while we are considering unlabelled rooted trees as
   defined above).
*/
oklib_plain_include("integer_sequence")$
all2_rt(m) := if m=1 then [[]] else
  lappend(create_list(
    cartesian_product_l([all2_rt(a),all2_rt(m-a-1)]), 
    a, 1 .. 2 .. m-2))$
/* The number of all these trees: */
num_all2_rt(m) := num_all2i_rt((m-1)/2)$
/* Now given the number i of inner nodes (a natural number >= 0): */
all2i_rt(i) := all2_rt(2*i+1)$
/* The number of all these trees: */
num_all2i_rt(i) := catalan_number(i)$
/* And given the number of leaves (a natural number >= 1): */
all2l_rt(l) := all2_rt(2*l-1)$
/* The number of all these trees: */
num_all2l_rt(l) := num_all2i_rt(l-1)$

/* Creating "random" binary unlabelled trees with m nodes, by a simple
   random process where all possibilities for distributions of node
   counts on the two children are equally likely (this does not create the
   uniform distribution over all binary unlabelled trees).
   Prerequisite: m is an odd natural number.
*/
random2_rt(m) := if m=1 then [] else
 block([num_possibilities : (m-1)/2, rand, left, right],
  rand : random(num_possibilities),
  left : 1 + rand * 2,
  right : (m-1) - left,
  [random2_rt(left), random2_rt(right)])$

/* The variation which allows single nodes: Now all node distributions
   over left and right subtree are possible (and equally likely), and
   the cases with empty left or empty right subtree create a single node.
   (Thus single nodes are the likelier the smaller the (sub-)tree.
   Prerequisite: m >= 1 is an natural number.
*/
random12_rt(m) := if m=1 then [] else if m=2 then [[]] else
 block([left, right],
  left : random(m),
  right : (m-1) - left,
  if left=0 then [random12_rt(right)] else
  if right=0 then [random12_rt(left)]
  else [random12_rt(left), random12_rt(right)])$

/* The list of all unlabelled (rooted) trees with m nodes (where m is
   an integer).
   The order is is given by the lexicographical order of unordered integer
   partitions (recursively).
*/
all_rt(m) := if m <= 0 then [] elseif m=1 then [[]] else
  lappend(create_list(cartesian_product_l(map(all_rt,p)), p, listify(uinteger_partitions(m-1))))$
/* The number of all these trees: */
num_all_rt(m) := if m <= 0 then 0 else catalan_number(m-1)$

catalan_number(n) :=  binomial(2*n,n)/(n+1)$


/* **************
   * Operations *
   **************
*/

/* The mirror image of trees: */
mirror_rt(T) := reverse(map(mirror_rt,T))$

/* A "labelled tree with 2-dimensional coordinates", short "tdlrt",
   is a labelled tree, where each label is a list containing a
   list of 2 elements (the coordinates) as first element.
*/

/* Testing whether T is a labelled tree with 2-dimensional coordinates: */
tdlrt_p(T) := listp(T) and is(length(T) >= 1) and listp(first(T))
and is(length(first(T)) >= 1) and listp(first(first(T))) and
is(length(first(first(T))) = 2) and every_s(tdlrt_p,rest(T))$


/* Given a labelled tree T with 2-dimensional coordinates and
   a coordinate vector p, translate the coordinates by p:
*/
trans_lrt(T,p) := 
 cons(cons(first(first(T))+p, rest(first(T))), 
      map(lambda([S],trans_lrt(S,p)),rest(T)))$


/* The top-most (i.e., minimal) y-coordinate of a labelled rooted tree with
   2-dimensional coordinates: */
y_extreme_tdlrt(T) := if length(T)=1 then y_tdlrt(T) else
         lmin(map(y_extreme_tdlrt,rest(T)))$


/* Access-functions for labelled rooted trees with 2-dimensional coordinates:
*/
x_tdlrt(T) := T[1][1][1]$
y_tdlrt(T) := T[1][1][2]$


/*!
\endhtmlonly
*/
