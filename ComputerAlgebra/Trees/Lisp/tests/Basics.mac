/* Oliver Kullmann, 29.6.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Trees/Lisp/tests/Basics.mac
  \brief Tests related to extraction of the largest autarky

Use by

oklib_load("OKlib/ComputerAlgebra/Trees/Lisp/tests/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Trees/Lisp/Basics.mac")$

kill(f)$

/* ****************************
   * Unlabelled rooted trees  *
   ****************************
*/

okltest_rt_p(f) := block([x],
  assert(f([]) = true),
  assert(f(0) = false),
  assert(f({}) = false),
  assert(f(x) = false),
  assert(f([[]]) = true),
  assert(f([1]) = false),
  assert(f([[[]]]) = true),
  assert(f([[],[[]],[[],[]],[]]) = true),
  assert(f([[],[[]],[[],[]],[1,[]]]) = false),
  true)$

okltest_lvs(f) := (
  assert(f([]) = {[]}),
  assert(f([[]]) = {[1]}),
  assert(f([[[]]]) = {[1,1]}),
  assert(f([[],[]]) = {[1],[2]}),
  assert(f([[],[],[[]]]) = {[1],[2],[3,1]}),
  true)$

okltest_nds(f) := (
  assert(f([]) = {[]}),
  assert(f([[]]) = {[],[1]}),
  assert(f([[[]]]) = {[],[1],[1,1]}),
  assert(f([[],[]]) = {[],[1],[2]}),
  assert(f([[],[],[[]]]) = {[],[1],[2],[3],[3,1]}),
  true)$

okltest_subtree(f) := block([T,S],
  assert(f([],[]) = []),
  assert(f([[]],[]) = [[]]),
  assert(f([[]],[1]) = []),
  T : [[[]]], S : f(T,[1]),
  assert(S = [[]]),
  S[1] : [[],[]],
  assert(T=[[[[],[]]]]),
  true)$

okltest_dst(f) := (
  assert(dst([],[]) = {}),
  assert(dst([[]],[]) = {[1]}),
  assert(dst([[]],[1]) = {}),
  assert(dst([[],[],[]],[]) = {[1],[2],[3]}),
  assert(dst([[[]],[[],[]],[]],[2]) = {[2,1],[2,2]}),
  true)$


/* ****************************
   * Labelled rooted trees    *
   ****************************
*/

okltest_lrt_p(f) := block([x],
  assert(f(0) = false),
  assert(f([]) = false),
  assert(f([[]]) = true),
  assert(f([0]) = true),
  assert(f([0,[]]) = false),
  assert(f([0,0]) = false),
  assert(f([0,[0]]) = true),
  /* XXX */
  true)$

okltest_l2ult(f) := block([x],
  assert(f([0]) = []),
  assert(f([x]) = []),
  assert(f([x,[1],[2]]) = [[],[]]),
  assert(f([x,[x,[1],[2]],[x,[x],[x,[x]]]]) = [[[],[]], [[],[[]]]]),
  true)$

okltest_rt2lrt_il(f) := block([x,y],
  assert(f([],[],x) = [x]),
  assert(f([],[1],x) = [x]),
  assert(f([[],[]], [x], y) = [x, [y], [y]]),
  assert(f([[],[]], [x,1], y) = [x, [y], [y]]),
  assert(f([[[]]], [1,2], x) = [1, [2, [x]]]),
  assert(f([[[]]], [1,2,y], x) = [1, [2, [x]]]),
  assert(f([[[]],[[]]], [1,2,3], x) = [1, [2,[x]], [3,[x]]]),
  true)$


/* ************
   * Measures *
   ************
*/

okltest_nnds_rt(f) := (
  assert(f([]) = 1),
  assert(f([[]]) = 2),
  assert(f([[[]]]) = 3),
  assert(f([[],[]]) = 3),
  assert(f([[],[],[]]) = 4),
  assert(f([[[]],[[[]]],[],[[],[[]]]]) = 11),
  true)$

okltest_nnds_lrt(f) := block([x],
  assert(f([x]) = 1),
  assert(f([x,[x],[x],[x]]) = 4),
  assert(f([x,[x,[x,[x]]]]) = 4),
  assert(f([x, [x,[x]], [x, [x], [x,[x]]]]) = 7),
  true)$

okltest_nlvs_rt(f) := (
  assert(f([]) = 1),
  assert(f([[]]) = 1),
  assert(f([[[]]]) = 1),
  assert(f([[],[]]) = 2),
  assert(f([[],[],[]]) = 3),
  assert(f([[],[[[]]],[]]) = 3),
  assert(f([[[]],[[[]]],[],[[],[[]]]]) = 5),
  true)$

okltest_nlvs_lrt(f) := block([x],
  assert(f([x]) = 1),
  assert(f([x,[x],[x],[x]]) = 3),
  assert(f([x,[x,[x,[x]]]]) = 1),
  assert(f([x, [x,[x]], [x, [x], [x,[x]]]]) = 3),
  true)$

okltest_ninds_rt(f) := (
  assert(f([]) = 0),
  assert(f([[]]) = 1),
  assert(f([[[]]]) = 2),
  assert(f([[],[]]) = 1),
  assert(f([[],[],[]]) = 1),
  assert(f([[[]],[[[]]],[],[[],[[]]]]) = 6),
  true)$

okltest_ninds_lrt(f) := block([x],
  assert(f([x]) = 0),
  assert(f([x,[x],[x],[x]]) = 1),
  assert(f([x,[x,[x,[x]]]]) = 3),
  assert(f([x, [x,[x]], [x, [x], [x,[x]]]]) = 4),
  true)$

okltest_height_rt(f) := (
  assert(f([]) = 0),
  assert(f([[]]) = 1),
  assert(f([[[]]]) = 2),
  assert(f([[[]],[[[]]]]) = 3),
  assert(f([[],[],[],[]]) = 1),
  true)$

okltest_levelled_height_rt(f) := (
  assert(f([]) = 0),
  assert(f([[]]) = 0),
  assert(f([[[]]]) = 0),
  assert(f([[],[]]) = 1),
  assert(f([[[[[]]]],[]]) = 1),
  assert(f([[],[[],[]]]) = 1),
  assert(f([[],[[],[[],[]]]]) = 1),
  assert(f([[[],[]],[[],[]]]) = 2),
  for d : 0 thru 3 do
    for q : 2 thru 3 do
      assert(f(complete_rt(d,q)) = d),
  true)$


/* ****************
   * Transformers *
   ****************
*/

okltest_g2lrt(f) := (
  assert(f([{1},{}],1) = [1]),
  assert(f([{1,2},{{1,2}}],1) = [1,[2]]),
  assert(f([{1,2},{{1,2}}],2) = [2,[1]]),
  assert(f([{1,2,3},{{1,2},{1,3}}],1) = [1,[2],[3]]),
  assert(f([{1,2,3},{{1,2},{1,3}}],2) = [2,[1,[3]]]),
  assert(f([{1,2,3},{{1,2},{1,3}}],3) = [3,[1,[2]]]),
  true)$


/* **************
   * Generators *
   **************
*/

okltest_complete_rt(f) := (
  /* XXX */
  true)$

okltest_random_lrt(f) := (
  /* XXX */
  true)$

okltest_all2_rt(f) := (
  assert(f(1) = [[]]),
  assert(f(3) = [[[],[]]]),
  assert(f(5) = [[[],[[],[]]], [[[],[]], []]]),
  /* XXX */
  true)$

okltest_num_all2_rt(f) := (
  for m in (1 .. 2 .. 11) do
    assert(f(m) = length(all2_rt(m))),
  true)$

okltest_all2i_rt(f) := (
  assert(f(0) = [[]]),
  assert(f(1) = [[[],[]]]),
  assert(f(2) = [[[],[[],[]]], [[[],[]], []]]),
  /* XXX */
  true)$

okltest_num_all2i_rt(f) := (
  for m in (0 .. 6) do
    assert(f(m) = length(all2i_rt(m))),
  true)$

okltest_all2l_rt(f) := (
  assert(f(1) = [[]]),
  assert(f(2) = [[[],[]]]),
  assert(f(3) = [[[],[[],[]]], [[[],[]], []]]),
  /* XXX */
  true)$

okltest_num_all2l_rt(f) := (
  for m in (1 .. 6) do
    assert(f(m) = length(all2l_rt(m))),
  true)$

okltest_random2_rt(f) := (
  /* XXX */
  true)$

okltest_random12_rt(f) := (
  /* XXX */
  true)$

okltest_all_rt(f) := (
  assert(f(-1) = []),
  assert(f(0) = []),
  assert(f(1) = [ [] ]),
  assert(f(2) = [ [[]] ]),
  assert(f(3) = [ [[],[]], [[[]]] ]),
  true)$

okltest_num_all_rt(f) := (
  for m in (1 .. 7) do
    assert(f(m) = length(all_rt(m))),
  true)$

okltest_catalan_number(f) := (
  /* XXX */
  true)$


/* **************
   * Operations *
   **************
*/

okltest_mirror_rt(f) := (
  assert(f([]) = []),
  assert(f([[],[[]]]) = [[[]],[]]),
  assert(f([[[]],[]]) = [[],[[]]]),
  assert(f([[[],[[]]],[]]) = [[],[[[]],[]]]),
  assert(f([[[],[[]]],[[[]],[]]]) = [[[],[[]]],[[[]],[]]]),
  /* XXX */
  true)$

okltest_tdlrt_p(f) := block([label],
  assert(f(0) = false),
  assert(f([]) = false),
  assert(f([[]]) = false),
  assert(f([[1,2]]) = false),
  assert(f([[[]]]) = false),
  assert(f([[[1]]]) = false),
  assert(f([[[0,0]]]) = true),
  assert(f([[[0,0]],[[[1,2]]],[[[3,4]]]]) = true),
  assert(f([[[0,0]],[[[1,2]],[4,4]],[[[3,4]]]]) = false),
  assert(f([[[1,2]],[[[3,4],label]]]) = true ),
  true)$

okltest_trans_lrt(f) := block([label],
  assert(f([[[1,2]]],[3,1]) = [[[4,3]]]),
  assert(f([[[1,2]],[[[3,4],label]]],[4,4]) = [[[5,6]],[[[7,8],label]]]),
  assert(f([[[1,2],label],[[[3,4]],[[[5,4],label],[[[8,7]]]]],[[[2,2]]]],[9,5]) = [[[10,7],label],[[[12,9]],[[[14,9],label],[[[17,12]]]]],[[[11,7]]]]),
  true)$

okltest_y_extreme_tdlrt(f) := (
  assert(f([[[0,0]]]) = 0),
  assert(f([[[0,0]],[[[-1,-1]]],[[[1,-1]]]]) = -1),  
  assert(f([[[0,0]],[[[-2,-1]],[[[-3,-2]]],[[[-1,-2]]]],[[[2,-1]]]]) = -2),
  assert(f([[[0,0]],[[[-2,-1]]],[[[2,-1]],[[[1,-2]]],[[[3,-2]]]]]) = -2),
  assert(f([[[0,0]],[[[-2,-1]],[[[-3,-2]]]],[[[2,-1]],[[[1,-2]]]]]) = -2),
  assert(f([[[0,0]],[[[0,-1]],[[[0,-2]],[[[0,-3]]]]]]) = -3),
  assert(f([[[0,0]],[[[-1,-1]],[[[-2,-2]],[[[-2,-3]]]],[[[0,-2]]]],[[[1,-1]]]]) = -3),
  assert(f([[[0,0]],[[[-1,-1]],[[[-1,-2]],[[[-1,-3]]]]],[[[1,-1]],[[[0,-2]]],[[[2,-2]],[[[2,-3]],[[[2,-4]],[[[2,-5]]]]]]]]) = -5),
  true)$


/*!
\endhtmlonly
*/
