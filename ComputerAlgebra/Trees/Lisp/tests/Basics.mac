/* Oliver Kullmann, 29.6.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Trees/Lisp/tests/Basics.mac
  \brief Tests related to extraction of the largest autarky

Use by

oklib_load("Transitional/ComputerAlgebra/Trees/Lisp/tests/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("Transitional/ComputerAlgebra/Trees/Lisp/Basics.mac")$

kill(f)$

/* ****************************
   * Unlabelled rooted trees  *
   ****************************
*/

okltest_rt_p(f) := ([x],
  assert(f([]) = true),
  assert(f(0) = false),
  assert(f({}) = false),
  assert(f(x) = false),
  assert(f([[]]) = true),
  assert(f([1]) = false),
  assert(f([[[]]]) = true),
  assert(f([[],[[]],[[],[]],[]]) = true),
  assert(f([[],[[]],[[],[]],[1,[]]]) = false),
  true)$

okltest_nnds(f) := (
  assert(f([]) = 1),
  assert(f([[]]) = 2),
  assert(f([[[]]]) = 3),
  assert(f([[],[]]) = 3),
  assert(f([[],[],[]]) = 4),
  true)$

okltest_nlvs(f) := (
  assert(f([]) = 1),
  assert(f([[]]) = 1),
  assert(f([[[]]]) = 1),
  assert(f([[],[]]) = 2),
  assert(f([[],[],[]]) = 3),
  assert(f([[],[[[]]],[]]) = 3),
  true)$

okltest_lvs(f) := (
  assert(f([]) = {[]}),
  assert(f([[]]) = {[1]}),
  assert(f([[[]]]) = {[1,1]}),
  assert(f([[],[]]) = {[1],[2]}),
  assert(f([[],[],[[]]]) = {[1],[2],[3,1]}),
  true)$

okltest_nds(f) := (
  assert(f([]) = {[]}),
  assert(f([[]]) = {[],[1]}),
  assert(f([[[]]]) = {[],[1],[1,1]}),
  assert(f([[],[]]) = {[],[1],[2]}),
  assert(f([[],[],[[]]]) = {[],[1],[2],[3],[3,1]}),
  true)$

okltest_subtree(f) := block([T,S],
  assert(f([],[]) = []),
  assert(f([[]],[]) = [[]]),
  assert(f([[]],[1]) = []),
  T : [[[]]], S : f(T,[1]),
  assert(S = [[]]),
  S[1] : [[],[]],
  assert(T=[[[[],[]]]]),
  true)$

okltest_dst(f) := (
  assert(dst([],[]) = {}),
  assert(dst([[]],[]) = {[1]}),
  assert(dst([[]],[1]) = {}),
  assert(dst([[],[],[]],[]) = {[1],[2],[3]}),
  assert(dst([[[]],[[],[]],[]],[2]) = {[2,1],[2,2]}),
  true)$

okltest_height(f) := (
  assert(f([]) = 0),
  assert(f([[]]) = 1),
  assert(f([[[]]]) = 2),
  assert(f([[[]],[[[]]]]) = 3),
  assert(f([[],[],[],[]]) = 1),
  true)$

okltest_levelled_height(f) := (
  assert(f([]) = 0),
  assert(f([[]]) = 0),
  assert(f([[[]]]) = 0),
  assert(f([[],[]]) = 1),
  assert(f([[[[[]]]],[]]) = 1),
  assert(f([[],[[],[]]]) = 1),
  assert(f([[],[[],[[],[]]]]) = 1),
  assert(f([[[],[]],[[],[]]]) = 2),
  for d : 0 thru 3 do
    for q : 2 thru 3 do
      assert(f(complete_rt(d,q)) = d),
  true)$


/* ****************************
   * Labelled rooted trees    *
   ****************************
*/

okltest_l2ult(f) := ([x],
  assert(f([0]) = []),
  assert(f([x]) = []),
  assert(f([x,[1],[2]]) = [[],[]]),
  assert(f([x,[x,[1],[2]],[x,[x],[x,[x]]]]) = [[[],[]], [[],[[]]]]),
  true)$

/* ****************
   * Transformers *
   ****************
*/

okltest_graph2tree(f) := (
  assert(f([{1},{}],1) = [1]),
  assert(f([{1,2},{{1,2}}],1) = [1,[2]]),
  assert(f([{1,2},{{1,2}}],2) = [2,[1]]),
  assert(f([{1,2,3},{{1,2},{1,3}}],1) = [1,[2],[3]]),
  assert(f([{1,2,3},{{1,2},{1,3}}],2) = [2,[1,[3]]]),
  assert(f([{1,2,3},{{1,2},{1,3}}],3) = [3,[1,[2]]]),
  true)$

/*!
\endhtmlonly
*/
