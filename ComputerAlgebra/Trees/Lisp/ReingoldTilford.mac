/* Rui Wang, 28.9.2009 (Swansea) */
/* Copyright 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Trees/Lisp/ReingoldTilford.mac
  \brief Functions related to the Reingold-Tilford algorithm

Use by

oklib_load("OKlib/ComputerAlgebra/Trees/Lisp/ReingoldTilford.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Trees/Lisp/Basics.mac")$


/* ******************************
   * Reingold-Tilford algorithm *
   ******************************
*/

/* Produce a binary labelled rooted tree with 2-dimensional coordinates from a
   binary unlabelled rooted tree T with specified root coordinates x, y:
   Reingold-Tilford: 
          {reingold_tilford_rt(T,p)|T=[T_1, ..., T_n],p=[x,y]}
          Base case: If T consists of a single node, the coordinates of the 
                     single node is defined equal to p.
          Divide   : Recursively apply the algorithm to each subtree of T.
          Conquer  : 1. Make the distance 1 or 2 between the right most node of
                        the left subtree and the left most node of the right
                        subtree.
                     2. Make the root r of T one unit higher than and horizontally
                        half way between its children.
                        If r has only one subtree, say the left one, then place
                        r at horizontal distance 1 to the right of its left child.      
   Input: A binary unlabelled rooted tree T which is recursively defined as a 
          list [T_1, ..., T_n], 0 <= n <= 2, where the T_i are the subtrees.
          The root coordinates p which is a list [x,y] contains a pair of 
          coordinates.
   Output: A binary labelled rooted tree with 2-dimensional coordinates, which
           is a binary labelled rooted tree, where each label is a list 
           containing a list of 2 elements (the coordinates) as first element.
*/
/* (A "binary labelled rooted tree" is recursively defined as a list 
   [L, T_1, ..., T_n], 0 <= n <= 2, where L is the label, and the T_i are the
   subtrees.)
*/
reingold_tilford_rt(T,p) := reingold_tilford_remove_annotations(reingold_tilford_annotated(T,p))$

/* Remove the data regarding the left-most node and right-most node from
   the result of reingold_tilford_annotated:
   Input: A binary labelled rooted tree with 2-dimensional coordinates, and
          the x-coordinates of the left-most node and right-most
          node, where each label is a list containing two lists of 2
          elements (the coordinates) as first element.
[ [[x,y],[xmin,xmax]], ... ]
   Output: A binary labelled rooted tree with 2-dimensional coordinates, which
           is a binary labelled rooted tree, where each label is a list 
           containing a list of 2 elements (the coordinates) as first element. 
simpler! [[x,y],[xmin,xmax]] -> [[x,y]]


*/
reingold_tilford_remove_annotations(T) := cons([T[1][1]],map(reingold_tilford_remove_annotations,rest(T)))$

/* Coordinates computation using Reingold-Tilford algorithm. The input is
   an unlabelled rooted tree T with specified root coordinates p which is
   defined as a list [x,y].
   The function will produce a labelled rooted tree with 2-dimensional 
   coordinates. Furthermore, it contains additional data in each node which
   are the x-coordinates of the left-most node and the right-most node.



singles: most natural just to go down; perhaps as option to go (always) left or right
leftmost_x(T) := T[1][2][1]$
rightmost_x(T) := T[1][2][2]$
x_tdlrt(T) := T[1][1][1]$
y_tdlrt(T) := T[1][1][2]$
XXX
*/
reingold_tilford_annotated(T,p) := block(
 [left_subtr,right_subtr,offset],
  if emptyp(T) then 
    [[[p[1],p[2]],[p[1],p[1]]]] else
  if length(T) = 2 then (
    [left_subtr,right_subtr]:map(reingold_tilford_annotated,
                                 T,create_list([p[1],p[2]-1],i,1,length(T))),
    offset:(left_subtr[1][2][2]-left_subtr[1][1][1])-(right_subtr[1][2][1]-right_subtr[1][1][1]),
    if mod((offset+1),2)=0
    then offset:(offset+1)/2
    else offset:(offset+2)/2,
    left_subtr:trans_lrt(left_subtr,[-offset-left_subtr[1][1][1]+p[1],0]),
    right_subtr:trans_lrt(right_subtr,[offset-right_subtr[1][1][1]+p[1],0]),
    cons([[p[1],p[2]],[left_subtr[1][2][1]-offset,right_subtr[1][2][2]+offset]],
         [left_subtr,right_subtr])
  )
  else (
    [left_subtr]:map(reingold_tilford_annotated,T,[[p[1],p[2]-1]]),
    offset:((left_subtr[1][2][2]-left_subtr[1][1][1])+1),
    left_subtr:trans_lrt(left_subtr,[-offset-left_subtr[1][1][1]+p[1],0]),
    cons([[p[1],p[2]],[left_subtr[1][2][1]-offset,p[1]]],[left_subtr])
  )
)$


/*!
\endhtmlonly
*/
