/* Rui Wang, 28.10.2009 (Swansea) */
/* Copyright 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Trees/Lisp/Visualisation.mac
  \brief Functions of tree drawing using Gnuplot

Use by

oklib_load("OKlib/ComputerAlgebra/Trees/Lisp/Visualisation.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Trees/Lisp/ReingoldTilford.mac")$


/* ******************************
   * Tree drawing *
   ******************************
*/

/* Extract a list of points [[x1,y1], [x2,y2], ... , [xn,yn]] from a labelled
   rooted tree T with 2-dimensional coordinates.
*/
tdlrt2points(T) :=block([nt,nt1,nt2],if rest(T)=[] then return([T[1][1]]) else [nt1,nt2]:map(tdlrt2points, rest(T)),
nt:cons(T[1][1],append(nt1,nt2)),
return(nt))$

/* Extract a list of edges [[[x1,y1],[x2,y2]], ... , [[xn',yn'],[xn,yn]]] from a
   labelled rooted tree T with 2-dimensional coordinates.
*/
tdlrt2edges(T) :=block([nt,nt1,nt2],if rest(T)=[] then return(T) else [nt1,nt2]:map(tdlrt2edges, rest(T)), 
nt:append(cons([T[1][1],nt1[1][1]],if rest(nt1)=[]then [] else nt1),cons([T[1][1],nt2[1][1]],if rest(nt2)=[]then [] else nt2)),
return(nt))$

/* Visualise a labelled rooted tree T with 2-dimensional coordinates. */
/* The attribues of the visualised tree can be defined.
   xran : the range for the x coordinate [x1,x2].
   yran : the range for the y coordinate [y1,y2].
   pts  : the size of a point, it must be a non-negative number.
   ptt  : the type of points (circle, diamant, ...)
   ptc  : the colour of points (red, blue, ...)
   edgc : the colour of edges (red, blue, ...) 
*/
draw_tdlrt(T,xran,yran,pts,ptt,ptc,edgc) := apply(draw2d,
      append([grid=true,xrange = xran,yrange = yran,point_size = pts,point_type = ptt,color = ptc,points(tdlrt2points(reingold_tilford_rt(T,0,0))),color=edgc],map(polygon, tdlrt2edges(reingold_tilford_rt(T,0,0)))))$


/*!
\endhtmlonly
*/
