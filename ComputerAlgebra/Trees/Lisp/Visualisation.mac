/* Rui Wang, 28.10.2009 (Swansea) */
/* Copyright 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Trees/Lisp/Visualisation.mac
  \brief Functions for tree drawing using Gnuplot

Use by

oklib_load("OKlib/ComputerAlgebra/Trees/Lisp/Visualisation.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Trees/Lisp/ReingoldTilford.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* ******************************
   * Tree drawing *
   ******************************
*/

/* Extract a list of points [[x1,y1], [x2,y2], ... , [xn,yn]] from a labelled
   rooted tree T with 2-dimensional coordinates:
*/
tdlrt2points(T) := block([nt,nt1,nt2],
      if rest(T)=[] then return([T[1][1]]) 
      else if length(rest(T))=2 
           then ([nt1,nt2]:map(tdlrt2points, rest(T)),
                 nt:cons(T[1][1],append(nt1,nt2))) 
           else ([nt1]:map(tdlrt2points, rest(T)),
                 nt:cons(T[1][1],nt1)),
      return(nt))$

/* Extract a list of edges [[[x1,y1],[x2,y2]], ... , [[xn',yn'],[xn,yn]]] from
   a labelled rooted tree T with 2-dimensional coordinates:
*/
tdlrt2edges(T) := block([nt,nt1,nt2],
      if rest(T)=[] then return(T) 
      else if length(rest(T))=2 
           then ([nt1,nt2]:map(tdlrt2edges, rest(T)), 
                 nt:append(cons([T[1][1],nt1[1][1]],
                                if rest(nt1)=[] and rest(nt1[1])=[] then [] 
                                else nt1),
                                cons([T[1][1],nt2[1][1]],
                                     if rest(nt2)=[] and rest(nt2[1])=[] then []
                                     else nt2))) 
           else ([nt1]:map(tdlrt2edges, rest(T)), 
                 nt:cons([T[1][1],nt1[1][1]],
                         if rest(nt1)=[] and rest(nt1[1])=[] then [] else nt1)), 
      return(nt))$


/* Draw an unlabelled rooted tree T, using the Reingold-Tilford algorithm. */
/* Possible parameters are listed as follows:

    T     : an unlabelled rooted tree.
    p     : the root coordinates of the tree [x,y]; default [0,0].
    xran  : the range for the x coordinate [x_min,x_max]; default auto.
    yran  : the range for the y coordinate [y_min,y_max]; default auto.
    pts   : the size of a point (a non-negative number); default computed
    ptt   : the type of points (either as name or as integer):
                $none (-1)
                dot (0)
                plus (1)
                multiply (2)
                asterisk (3)
                square (4)
                filled_square (5)
                circle (6)
                filled_circle (7) *default*
                up_triangle (8)
                filled_up_triangle (9)
                down_triangle (10)
                filled_down_triangle (11)
                diamant (12)
                filled_diamant (13)
    ptc   : the colour of points (red, blue, ...); default red.
    edgc  : the colour of edges (red, blue, ...); default blue.
    output: if output is set to "true", the tree drawing will be output to a
            file called "output.eps" in the current directory. Otherwise, the
            tree drawing will be displayed normally.
    
   T is a compulsory parameter that can be accepted by a function call in the
   following ways:  
    1. Set T in global (e.g. T:value; then, draw_rt()).
    2. Use "T:value" as an argument. (e.g. draw_rt(T:value)).
    3. Use the "value" of T as the first argument. (e.g. draw_rt(value)).
   The other parameters are optional, the usage of which are similar to the
   parameter T which is listed above except 3. Furthermore, the optional 
   parameters can be set to "unknown" (e.g. draw_rt(pts:unknown)) so that
   the default values of the parameters will be used.

*/
draw_rt(['P]) :=     
  block([tdlrt,xdis,ydis,T:T,p:p,xran:xran,yran:yran,
         ptt:ptt,pts:pts,ptc:ptc,edgc:edgc,output:output],
   if not emptyp(P) and (atom(first(P)) or op(first(P))#":") then
    (T:ev(first(P)), ev(rest(P))) else
    ev(P),
   if p='p or p=unknown then p:[0,0],
   if xran='xran or xran=unknown then xran:auto,
   if yran='yran or yan=unknown then yran:auto,
   if ptt='ptt or ptt=unknown then ptt:filled_circle,
   if ptc='ptc or ptc=unknown then ptc:red,
   if edgc='edgc or edgc=unknown then edgc:blue,
   if output='output or output=unknown then output:false,
   tdlrt:reingold_tilford_annotated(T,p), 
   xdis:rightmost_x(tdlrt)-leftmost_x(tdlrt),
   ydis:y_tdlrt(tdlrt)-y_extreme_tdlrt(tdlrt),
   tdlrt:reingold_tilford_remove_annotations(tdlrt),
   if pts='pts or pts=unknown then
    pts:min(10/(max(xdis,2)^(5/11)),10/(max(ydis,2)^(5/11))),
   apply(draw2d,
         append([grid=true,xrange = xran,yrange = yran,
                 point_size = pts,point_type = ptt,color = ptc,
                 points(tdlrt2points(tdlrt)),                 
                 color=edgc,transparent=true],
                map(polygon, tdlrt2edges(tdlrt)),
                if output=true then 
                [file_name="output", terminal='eps] else [])),
   true)$


/* Perform the tree drawing with a labelled rooted tree T. RGB colour model is
   used for the colouring schemes.
   The compulsory parameter T is a labelled rooted tree. For the usage and 
   other possible parameters, please refer to draw_rt.
*/
draw_lrt(['P]) := 
  block([tdlrt,xdis,ydis,T:T,p:p,xran:xran,yran:yran,
         ptt:ptt,pts:pts,ptc:ptc,edgc:edgc,output:output],
   if not emptyp(P) and (atom(first(P)) or op(first(P))#":") then
    (T:ev(first(P)), ev(rest(P))) else
    ev(P),
   if p='p or p=unknown then p:[0,0],
   if xran='xran or xran=unknown then xran:auto,
   if yran='yran or yan=unknown then yran:auto,
   if ptt='ptt or ptt=unknown then ptt:filled_circle,
   if ptc='ptc or ptc=unknown then ptc:red,
   if edgc='edgc or edgc=unknown then edgc:blue,
   if output='output or output=unknown then output:false,
   tdlrt:reingold_tilford_annotated(lrt2rt(T),p), 
   xdis:rightmost_x(tdlrt)-leftmost_x(tdlrt),
   ydis:y_tdlrt(tdlrt)-y_extreme_tdlrt(tdlrt),
   tdlrt:reingold_tilford_remove_annotations(tdlrt),
   if pts='pts or pts=unknown then
    pts:min(10/(max(xdis,2)^(5/11)),10/(max(ydis,2)^(5/11))),
   apply(draw2d,
         append([grid=true,xrange = xran,yrange = yran,
                 point_size = pts,point_type = ptt],
                lappend((map(colouring, lrt2value(T),tdlrt2points(tdlrt)))),
                [color=edgc,transparent=true],
                map(polygon, tdlrt2edges(tdlrt)),
                if output=true then 
                [file_name="output", terminal='eps] else [])),
   true)$


/* Extract the values of labels from a labelled rooted tree T.
   The output is a list [label1, label2, ... , labelN], where N equals the 
   number of nodes in the labelled rooted tree T. The order of the labels
   obeys the rule of a pre-order tree traversal.
*/
lrt2value(T) := if length(T) = 1 then [T[1]] else
    block([left,right], 
          if length(T) = 3 
          then ([left,right]: map(lrt2value, rest(T)),
                cons(T[1],append(left,right))) 
          else cons(T[1],lrt2value(T[2])))$
          
          
/* Convert a decimal number to a string in hexadecimal.
   10 -> "0A"
*/
dec2hex(n) := if n<16 then concat("0",printf(false,"~x",n))
              else concat(printf(false,"~x",n))$          


/* Convert RGB decimal value to standard Maxima RGB code.
   [14,2,51] -> "#0E0233"
*/
format_rgb(rgb) := apply(concat,append(["#"],map(dec2hex,rgb)))$    


/* Convert a list of values (usually a label in a labelled rooted tree) to    
   standard Maxima RGB code.
   [value1, value2,...] -> "#rrggbb"
*/
/* Currently, the function handles the list that contains only 1 value,
   otherwise, the output colour is red ("#FF0000").
*/
value2rgb(v) := block([value:if listp(v) then v[1] else v],apply(format_rgb,
          [[255-min(value*15,255),min(value,255),min(value*10,255)]]))$


/* Binding one colour to one point.
*/
colouring(v,p) := [color= value2rgb(v),points([p])]$

leaves_colour(v,p,c) := block([value:if listp(v) then v[1] else v],
             [if value=true then color=c[1] else color=c[2],points([p])])$

/* Print the labels of the nodes of a binary labelled rooted tree T up to the
   depth d, where d is a natural number >= -1, and for the nodes of depth <= d
   then the labels are printed, while otherwise nothing shows. Leaves are
   treated differently, where the leaves that are labelled by "true" show the 
   node-symbol with red colour, otherwise grey colour.
   The compulsory parameter T is a labelled rooted tree. For the usage and 
   other possible parameters, please refer to draw_rt.
   Additionally, the following possible parameters are provided for 
   draw_lrt_dbl:
   
    lbc : the colour of labels; default red.
    tc  : the colour of true-leaves; default red.
    fc  : the colour of false-leaves; default grey.
    d   : the maximum depth which the labels will be printed.
           (d is a natural number >= -1).
*/
draw_lrt_dbl(['P]) := 
  block([nd,tdlrt,xdis,ydis,T:T,p:p,xran:xran,yran:yran,
         pts:pts,ptt:ptt,lbc:lbc,edgc:edgc,tc:tc,fc:fc,d:d,output:output],
   if not emptyp(P) and (atom(first(P)) or op(first(P))#":") then
    (T:ev(first(P)), ev(rest(P))) else
    ev(P),
   if p='p or p=unknown then p:[0,0],
   if ptt='ptt or ptt=unknown then ptt:filled_circle,
   if lbc='lbc or lbc=unknown then lbc:red,
   if tc='tc or tc=unknown then tc:red,
   if fc='fc or fc=unknown then fc:grey,
   if edgc='edgc or edgc=unknown then edgc:blue,
   if d='d or d=unknown then d:-1,
   if output='output or output=unknown then output:false,
   tdlrt:reingold_tilford_annotated(lrt2rt(T),p), 
   xdis:rightmost_x(tdlrt)-leftmost_x(tdlrt),
   ydis:y_tdlrt(tdlrt)-y_extreme_tdlrt(tdlrt),
   if xran='xran or xran=unknown then
    xran:[leftmost_x(tdlrt)-0.5,rightmost_x(tdlrt)+0.5],
   if yran='yran or yan=unknown then
    yran:[p[2]-ydis-0.5,p[2]+0.5],
   tdlrt:reingold_tilford_remove_annotations(tdlrt),
   nd: nodes_division(tdlrt2points(tdlrt),lrt2value(T),d),
   if pts='pts or pts=unknown then 
    pts:min(10/(max(xdis,2)^(5/11)),10/(max(ydis,2)^(5/11))),
   apply(draw2d,
         append([grid=true,xrange = xran,yrange = yran,
                 point_size = pts,point_type = ptt],
                 if not(nd[1]=[]) then
                  [color = lbc,label_alignment=left, 
                  apply(label,map(cons,map(string,if listp(nd[2][1]) then 
                  lappend(nd[2]) else nd[2]),nd[1]+0.1))]
                 else [],
                 if not(nd[5]=[]) then
                  lappend((map(leaves_colour, 
                  nd[6],nd[5],create_list([tc,fc],i,1,length(nd[6])))))
                 else [],
                 [color=edgc,transparent=true],
                 map(polygon, tdlrt2edges(tdlrt)),
                if output=true then 
                [file_name="output", terminal='eps] else [])),
   true)$


/* Dividing the nodes of trees into 3 parts according to the depth d and 
   whether nodes are leaves.
   Input: a point list pl, a value list vl and depth d.
   Output: a list [pointlist1,valuelist1,pointlist2,valuelist2,pointlist3,
   valuelist3], where pointlist1 and valuelist1 are relating to the nodes
   above the depth d(inclusive), pointlist2 and valuelist2 are relating to
   the nodes below the depth d, pointlist3 and valuelist3 are relating to
   the nodes which are leaves.
*/
nodes_division(pl,vl,d) := 
    block([y: pl[1][2]+d*(-1), l:[[],[],[],[],[],[]]],
          for i:1 thru length(pl)-1 do
            (if i=length(pl) then 
              (l[5]:endcons(pl[i],l[5]), l[6]:endcons(vl[i],l[6])) else
             if pl[i][2]<=pl[i+1][2] then
               (l[5]:endcons(pl[i],l[5]), l[6]:endcons(vl[i],l[6])) else
             if pl[i][2]>=y then
               (l[1]:endcons(pl[i],l[1]), l[2]:endcons(vl[i],l[2])) else 
               (l[3]:endcons(pl[i],l[3]), l[4]:endcons(vl[i],l[4]))),
          if length(pl) =1 and d>=0 then
            [[pl[1]],[vl[1]],[],[],[],[]] else 
          if length(pl) =1 and d=-1 then
            [[],[],[pl[1]],[vl[1]],[],[]] else
            (l[5]:endcons(pl[length(pl)],l[5]),
             l[6]:endcons(vl[length(pl)],l[6]),
             l)
)$

/* Drawing of splitting trees: */
draw_st(['P]) := apply(draw_lrt_dbl, P)$


/*!
\endhtmlonly
*/
