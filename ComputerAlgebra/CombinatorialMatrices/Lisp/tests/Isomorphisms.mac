/* Oliver Kullmann, 9.8.2008 (Swansea) */
/* Copyright 2008,  2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/CombinatorialMatrices/Lisp/tests/Isomorphisms.mac
  \brief Tests regarding isomorphisms of combinatorial matrices

Use by

oklib_load("OKlib/ComputerAlgebra/CombinatorialMatrices/Lisp/tests/Isomorphisms.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac")$


kill(f)$

/* ********************************
   * Incomplete isomorphism tests *
   ********************************
*/

okltest_is_isomorphic_incl0_com(f) := block([fun1,fun2],
  assert(f([{},{},fun1],[{},{},fun2]) = true),
  assert(f([{},{1},fun1],[{},{2},fun2]) = true),
  assert(f([{3},{},fun1],[{4},{},fun2]) = true),
  assert(f([{},{},fun1],[{1},{},fun2]) = false),
  assert(f([{},{},fun1],[{},{1},fun2]) = false),
  assert(f([{},{1},fun1],[{1},{},fun2]) = false),
  assert(f([{1},{},fun1],[{},{1},fun2]) = false),
  assert(f([{1,2},{3},fun1],[{1},{2},fun2]) = false),
  assert(f([{1},{3},fun1],[{1},{2,3},fun2]) = false),
  assert(f(zerocom({1},{2}),zerocom({3},{4})) = true),
  assert(f(zerocom({1},{2}),constantcom({1},{2},1)) = false),
  true)$

okltest_is_isomorphic_incl1_com(f) := (
  assert(okltest_is_isomorphic_incl0_com(f)),
  assert(f(zerocom({1,2},{2}),constantcom({1,2},{2},1)) = false),
  assert(f(m2com(matrix([1,1],[0,0])),m2com(matrix([1,0],[0,1]))) = false),
  true)$

okltest_is_isomorphic_incl2_com(f) := (
  assert(okltest_is_isomorphic_incl1_com(f)),

  true)$


/* ******************************
   * Complete isomorphism tests *
   ******************************
*/

/* Generic testfunction for binary predicates f(A,B), which return true
   iff the combinatorial matrices A, B are isomorphic: */
okltest_is_isomorphic_com_p(f) := block([fun1,fun2,M],
  assert(f([{},{},fun1], [{},{},fun2]) = true),
  assert(f([{},{},fun1], [{1},{},fun2]) = false),
  assert(f([{},{},fun1], [{},{1},fun2]) = false),
  assert(f([{},{},fun1], [{1},{1},fun2]) = false),
  assert(f([{1},{},fun1], [{1},{1},fun2]) = false),
  assert(f([{},{1},fun1], [{1},{1},fun2]) = false),
  assert(f(zerocom({1},{2}), zerocom({3},{4})) = true),
  assert(f(zerocom({1},{2}), constantcom({3},{4},1)) = false),
  assert(f(m2com(matrix([1,1],[0,0])), m2com(matrix([0,0],[1,1]))) = true),
  assert(f(m2com(matrix([1,0],[1,0])), m2com(matrix([0,1],[0,1]))) = true),
  assert(f(m2com(matrix([1,0],[0,1])), m2com(matrix([0,1],[0,1]))) = false),
  assert(f(m2com(matrix([1,0,0],[0,0,1],[0,0,0])), m2com(matrix([0,0,0],[0,0,1],[1,0,0]))) = true),
  assert(f(m2com(matrix([1,0,0],[0,0,2],[0,0,0])), m2com(matrix([0,0,0],[0,0,2],[1,0,0]))) = true),
  assert(f(m2com(matrix([1,0,0],[0,0,3],[0,0,0])), m2com(matrix([0,0,0],[0,0,2],[1,0,0]))) = false),
  if oklib_test_level = 0 then return(true),
  M : m2com(matrix([0,1,0,1,0,0],[0,0,1,1,1,0],[1,0,0,1,1,1],[0,1,1,0,1,0],[1,1,0,0,1,1],[0,1,1,1,1,1])),
  assert(f(M,trans_com(M)) = false),
  assert(f(m2com(matrix([1,1,2])),m2com(matrix([1,2,2]))) = false),
  true)$


/* ************************
   * Duality and polarity *
   ************************
*/

okltest_selfpolar_bydef_m_p(f) := (
  assert(f(matrix()) = true),
  assert(f(matrix([0])) = true),
  assert(f(matrix([1])) = true),
  assert(f(matrix([0,0],[0,0])) = true),
  assert(f(matrix([1,0],[0,0])) = true),
  assert(f(matrix([1,0],[1,0])) = false),
  assert(f(matrix([1,1],[0,0])) = false),
  assert(f(matrix([1,0],[0,1])) = true),
  assert(f(matrix([1,1],[1,0])) = true),
  assert(f(matrix([1,1],[1,1])) = true),
  true)$

okltest_selfdual_bydef_m_p(f) := (
  assert(f(matrix()) = true),
  assert(f(matrix([0])) = true),
  assert(f(matrix([1])) = true),
  assert(f(matrix([0,0],[0,0])) = true),
  assert(f(matrix([1,0],[0,0])) = true),
  assert(f(matrix([1,0],[1,0])) = false),
  assert(f(matrix([1,1],[0,0])) = false),
  assert(f(matrix([1,0],[0,1])) = true),
  assert(f(matrix([1,1],[1,0])) = true),
  assert(f(matrix([1,1],[1,1])) = true),
  true)$


/*!
\endhtmlonly
*/

