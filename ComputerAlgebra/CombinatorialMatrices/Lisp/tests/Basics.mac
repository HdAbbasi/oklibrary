/* Oliver Kullmann, 16.3.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/CombinatorialMatrices/Lisp/tests/Basics.mac
  \brief Tests for splitting trees

Use by

oklib_load("Transitional/ComputerAlgebra/CombinatorialMatrices/Lisp/tests/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$


kill(f)$

/* *******************
   * Transformations *
   *******************
*/

okltest_com2m(f) := (
  assert(f([{},{},identity]) = matrix()),
  assert(f([{1},{},identity]) = matrix([])),
  assert(f([{-1,1},{},identity]) = matrix([],[])),
  assert(f([{},{1},identity]) = matrix()),
  assert(f([{1,2},{1,2},lambda([i,j],i+j)]) = matrix([2,3],[3,4])),
  assert(f([{-1,0},{-4,3},lambda([i,j],i+j)]) = matrix([-5,2],[-4,3])),
  true)$

okltest_com2ghyp(f) := (
  assert(ghypequalp(f(emptycom), [{},{}, identity]) = true),
  assert(ghypequalp(f(zerocom({1,2},{1,2})), [{1,2},{1,2}, lambda([e],{})]) = true),
  assert(ghypequalp(f(constantcom({1,2},{3,4},2)), [{1,2},{3,4}, lambda([e],{1,2})]) = true),
  true)$


/* ********************
   * Basic operations *
   ********************
*/

okltest_comequalp(f) := (
  assert(f(emptycom,emptycom) = true),
  assert(f(emptycom,zerocom({},{1})) = false),
  assert(f(constantcom({1,2},{1,3},2), constantcom({1,2},{1,3},2)) = true),
  assert(f(constantcom({1,2},{1,3},1), constantcom({1,2},{1,3},2)) = false),
  assert(f(trans(trans(constantcom({1,2},{1,3},1))), constantcom({1,2},{1,3},1)) = true),
  true)$

okltest_scomequalp(f) := (
  assert(f(emptyscom,emptyscom) = true),
  assert(f(emptyscom,zeroscom({1})) = false),
  assert(f(constantscom({1,2},2), constantscom({1,2},2)) = true),
  assert(f(constantscom({1,2},1), constantscom({1,2},2)) = false),
  assert(f(strans(constantscom({1,2},1)), constantscom({1,2},1)) = true),
  assert(f(strans(idscom({1,2})), idscom({1,2})) = true),
  true)$

okltest_abs_com(f) := (
  assert(comequalp(f(emptycom), emptycom) = true),
  assert(comequalp(f(zerocom({1},{2})), zerocom({1},{2})) = true),
  assert(comequalp(f(constantcom({1,2},{3,4},-1)), constantcom({1,2},{3,4},1)) = true),
  true)$

okltest_abs_scom(f) := (
  assert(scomequalp(f(emptyscom), emptyscom) = true),
  assert(scomequalp(f(zeroscom({1})), zeroscom({1})) = true),
  assert(scomequalp(f(constantscom({1,2},-1)), constantscom({1,2},1)) = true),
  assert(scomequalp(f(idscom({1,2})), idscom({1,2})) = true),
  assert(scomequalp(f(cdiagscom({1,2},-2)), cdiagscom({1,2},2)) = true),
  true)$


okltest_rowsums_list_com(f) := block([u],
  assert(f([{},{},u]) = []),
  assert(f([{},{1},u]) = []),
  for n : 0 thru 4 do
    assert(f([setn(n),{},u]) = if n=0 then [] else [[0,n]]),
  for n : 0 thru 3 do
    for m : 0 thru 3 do
      for k : 0 thru 2 do
        assert(f([setn(n),setn(m),lambda([i,j],k)]) = if n=0 then [] else [[m*k,n]]),
  true)$

okltest_columnsums_list_com(f) := block(
  okltest_rowsums_list_com(buildq([f],lambda([M],f(trans(M))))),
  true)$


/*!
\endhtmlonly
*/
