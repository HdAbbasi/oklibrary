/* Oliver Kullmann, 16.3.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/CombinatorialMatrices/Lisp/tests/Basics.mac
  \brief Tests for splitting trees

Use by

oklib_load("OKlib/ComputerAlgebra/CombinatorialMatrices/Lisp/tests/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/SmallScaleWordFields.mac")$


kill(f)$

/* *****************
   * Basic notions *
   *****************
*/

okltest_binfam_p(f) := (

  true)$

okltest_com_p(f) := block([fun],
  assert(f(0,{}) = false),
  assert(f([],{}) = false),
  assert(f([0,0],{}) = false),
  assert(f([0,0,0],{}) = false),
  assert(f([[],[],[]],{}) = false),
  assert(f([{},{},fun],{}) = true),
  assert(f([{1},{},fun],{}) = true),
  assert(f([{},{1},fun],{}) = true),
  assert(f([{1},{1},fun],{}) = false),
  assert(f([{1},{1},lambda([i,j],2)],{}) = false),
  assert(f([{1},{1},lambda([i,j],2)],{1}) = false),
  assert(f([{1},{1},lambda([i,j],2)],{2}) = true),
  true)$

okltest_ocom_p(f) := block(
  /* XXX */
  true)$

okltest_scom_p(f) := block([fun],
  assert(f(0,{}) = false),
  assert(f([],{}) = false),
  assert(f([0,0],{}) = false),
  assert(f([[],fun],{}) = false),
  assert(f([{},fun],{}) = true),
  assert(f([{1},fun],{}) = false),
  assert(f([{1},lambda([i,j],0)],{}) = false),
  assert(f([{1},lambda([i,j],0)],{0}) = true),
  assert(f([{1,2},lambda([i,j],i+j)],{2,3,4}) = true),
  true)$

okltest_sqscom_p(f) := (
  /* XXX */
  true)$

okltest_osqcom_p(f) := (
  /* XXX */
  true)$



/* *********************
   * Checking equality *
   *********************
*/

okltest_com_equalp(f) := (
  assert(f(emptycom,emptycom) = true),
  assert(f(emptycom,zerocom({},{1})) = false),
  assert(f(constantcom({1,2},{1,3},2), constantcom({1,2},{1,3},2)) = true),
  assert(f(constantcom({1,2},{1,3},1), constantcom({1,2},{1,3},2)) = false),
  assert(f(trans(trans(constantcom({1,2},{1,3},1))), constantcom({1,2},{1,3},1)) = true),
  true)$

okltest_scom_equalp(f) := (
  assert(f(emptyscom,emptyscom) = true),
  assert(f(emptyscom,zeroscom({1})) = false),
  assert(f(constantscom({1,2},2), constantscom({1,2},2)) = true),
  assert(f(constantscom({1,2},1), constantscom({1,2},2)) = false),
  assert(f(strans(constantscom({1,2},1)), constantscom({1,2},1)) = true),
  assert(f(strans(idscom({1,2})), idscom({1,2})) = true),
  true)$


/* ***************
   * Conversions *
   ***************
*/

okltest_scom2com(f) := block([I,fun],
  assert(f([I,fun]) = [I,I,fun]),
  true)$

okltest_oscom2ocom(f) := block([I,fun],
  assert(f([I,fun]) = [I,I,fun]),
  true)$

okltest_com2scom(f) := block([I,fun],
  assert(f([I,I,fun]) = [I,fun]),
  true)$

okltest_ocom2oscom(f) := block([I,fun],
  assert(f([I,I,fun]) = [I,fun]),
  true)$

okltest_ocom2com(f) := block(
  /* XXX */
  true)$

okltest_oscom2scom(f) := block(
  /* XXX */
  true)$


okltest_com2ocom(f) := block(
  /* XXX */
  true)$

okltest_scom2oscom(f) := block(
  /* XXX */
  true)$


okltest_com2m(f) := (
  assert(f([{},{},identity]) = matrix()),
  assert(f([{1},{},identity]) = matrix([])),
  assert(f([{-1,1},{},identity]) = matrix([],[])),
  assert(f([{},{1},identity]) = matrix()),
  assert(f([{1,2},{1,2},lambda([i,j],i+j)]) = matrix([2,3],[3,4])),
  assert(f([{-1,0},{-4,3},lambda([i,j],i+j)]) = matrix([-5,2],[-4,3])),
  true)$

okltest_ocom2m(f) := ([a,b,c],
  assert(f([[a,b],[a,-1,c],lambda([i,j],i+j)]) = matrix([2*a,a-1,a+c],[b+a,b-1,b+c])),
  assert(okltest_com2m(buildq([f],lambda([M],f([listify(M[1]),listify(M[2]),M[3]]))))),
  true)$

okltest_scom2m(f) := ([fun],
  assert(f([{},fun]) = matrix()),
  assert(f([{1,2},lambda([i,j],i*j)]) = matrix([1,2],[2,4])),
  true)$

okltest_oscom2m(f) := ([fun],
  assert(f([[],fun]) = matrix()),
  assert(f([[1,2],lambda([i,j],i*j)]) = matrix([1,2],[2,4])),
  assert(f([[4,3],lambda([i,j],i*j)]) = matrix([16,12],[12,9])),
  true)$

okltest_m2com(f) := block([fun],
  assert(com_equalp(f(matrix()), [{},{},fun]) = true),
  assert(com_equalp(f(matrix([])), [{1},{},fun]) = true),
  assert(com_equalp(f(matrix([],[])), [{1,2},{},fun]) = true),
  assert(okltest_m2scom(buildq([f],lambda([M],com2scom(f(M)))))),
  true)$

okltest_m2ocom(f) := block([fun],
  assert(com_equalp(f(matrix()), [[],[],fun]) = true),
  assert(com_equalp(f(matrix([])), [[1],[],fun]) = true),
  assert(com_equalp(f(matrix([],[])), [[1,2],[],fun]) = true),
  assert(okltest_m2oscom(buildq([f],lambda([M],ocom2oscom(f(M)))))),
  true)$

okltest_m2scom(f) := block(
  assert(scom_equalp(f(matrix()),[{},identity]) = true),
  assert(scom_equalp(f(matrix([1])),[{1},lambda([i,j],1)]) = true),
  assert(scom_equalp(f(matrix([1,1],[1,1])),[{1,2},lambda([i,j],1)]) = true),
  assert(scom_equalp(f(matrix([2,3],[3,4])),[{1,2},lambda([i,j],i+j)]) = true),
  true)$

okltest_m2oscom(f) := block(
  assert(scom_equalp(f(matrix()),[[],identity]) = true),
  assert(scom_equalp(f(matrix([1])),[[1],lambda([i,j],1)]) = true),
  assert(scom_equalp(f(matrix([1,1],[1,1])),[[1,2],lambda([i,j],1)]) = true),
  assert(scom_equalp(f(matrix([2,3],[3,4])),[[1,2],lambda([i,j],i+j)]) = true),
  true)$


okltest_com_l(f) := (
  /* XXX */
  true)$

okltest_scom_l(f) := (
  /* XXX */
  true)$

okltest_mrc2ocom(f) := block([M,m,x],
  m : matrix([1,2],[3,4]),
  M : f(m,["a",88],[x,"jkl"]),
  assert(M[1] = ["a",88]),
  assert(M[2] = [x,"jkl"]),
  assert(M[3]("a",x) = 1),
  assert(M[3]("a","jkl") = 2),
  assert(M[3](88,x) = 3),
  assert(M[3](88,"jkl") = 4),
  /* XXX */
  true)$


/* ***********************
   * Basic constructions *
   ***********************
*/

okltest_emptycom(f) := (
  assert(com_p(f,{}) = true),
  assert(dim_com(f) = [0,0]),
  true)$

okltest_emptycom_r(f) := (

  true)$

okltest_emptycom_c(f) := (

  true)$

okltest_emptyscom(f) := (
  assert(scom_p(f,{}) = true),
  assert(order_scom(f) = 0),
  true)$

okltest_zerocom(f) := (

  true)$

okltest_zeroscom(f) := (

  true)$

okltest_constantcom(f) := (

  true)$

okltest_constantscom(f) := (

  true)$

okltest_idscom(f) := (

  true)$

okltest_cdiagscom(f) := (

  true)$

okltest_all_m(f) := (
  assert(f(0,0,[]) = [matrix()]),
  assert(f(0,0,[1]) = [matrix()]),
  assert(f(1,0,[]) = [matrix([])]),
  assert(f(2,0,[]) = [matrix([],[])]),
  assert(f(2,0,[1]) = [matrix([],[])]),
  assert(f(1,1,[-1,3,-2]) = [matrix([-1]),matrix([3]),matrix([-2])]),
  assert(length(f(2,2,[-3,0,3])) = 3^4),
  true)$

okltest_genmatrix_m(f) := (

  true)$

okltest_genmatrix_sm(f) := (

  true)$


/* *******************
   * Random matrices *
   *******************
*/

okltest_random_m(f) := block([x],
  assert(f(0,0,x) = matrix()),
  assert(f(1,0,x) = matrix([])),
  assert(f(1,1,1) = matrix([0])),
  set_random_state(make_random_state(0)),
  assert(f(2,2,100) = matrix([44,39],[33,60])),
  true)$

okltest_random_intiv_m(f) := block([a,b],
  assert(f(0,0,a,b) = matrix()),
  assert(f(1,0,a,b) = matrix([])),
  assert(f(1,1,0,0) = matrix([0])),
  set_random_state(make_random_state(0)),
  assert(f(4,2,-200,500) = matrix([211,131],[29,16],[384,320],[375,-36])),
  true)$

okltest_random_fpiv_m(f) := block([a,b,M],
  assert(f(0,0,a,b) = matrix()),
  assert(f(1,0,a,b) = matrix([])),
  set_random_state(make_random_state(0)),
  M : f(2,2,-200,500),
  assert_float_equal(M[1,1], 4.084476632548927),
  assert_float_equal(M[1,2], -121.2580674814649),
  assert_float_equal(M[2,1], -98.31836515964578),
  assert_float_equal(M[2,2], 40.18142835447708),
  true)$

okltest_random_sm(f) := block([x],
  assert(f(0,x) = matrix()),
  assert(f(2,1) = matrix([0,0],[0,0])),
  set_random_state(make_random_state(0)),
  assert(f(2,100) = matrix([44,39],[39,33])),
  thru 5 do block(
   [N : setmn(0,99), M : f(3,100)],
    assert(symmetric_m_p(M)),
    assert(every_scom_p(lambda([x],elementp(x,N)), m2scom(M)))),
  true)$

okltest_random_permutation_m(f) := (
  assert(f(matrix()) = matrix()),
  assert(f(matrix([])) = matrix([])),
  assert(f(matrix([],[])) = matrix([],[])),
  assert(f(matrix([0])) = matrix([0])),
  assert(f(matrix([0,0])) = matrix([0,0])),
  set_random(1),
  assert(f(matrix([1,2],[3,4])) = matrix([4,3],[2,1])),
  assert(f(matrix([1,2,3],[4,5,6])) = matrix([3,1,2],[6,4,5])),
  assert(f(matrix([1,2],[3,4],[5,6])) = matrix([6,5],[2,1],[4,3])),
  true)$

okltest_random_rpermutation_m(f) := (
  assert(f(matrix()) = matrix()),
  assert(f(matrix([])) = matrix([])),
  assert(f(matrix([],[])) = matrix([],[])),
  assert(f(matrix([0])) = matrix([0])),
  assert(f(matrix([0,0])) = matrix([0,0])),
  set_random(1),
  assert(f(matrix([1,2],[3,4],[5,6])) = matrix([5,6],[1,2],[3,4])),
  assert(f(matrix([1,2,3,4,5,6])) = matrix([1,2,3,4,5,6])),
  true)$

okltest_random_cpermutation_m(f) := (
  assert(f(matrix()) = matrix()),
  assert(f(matrix([])) = matrix([])),
  assert(f(matrix([],[])) = matrix([],[])),
  assert(f(matrix([0])) = matrix([0])),
  assert(f(matrix([0,0])) = matrix([0,0])),
  assert(f(matrix([1,2,3],[4,5,6],[7,8,9])) = matrix([3,1,2],[6,4,5],[9,7,8])),
  assert(f(matrix([1],[2],[3],[4],[5],[6])) = matrix([1],[2],[3],[4],[5],[6])),
  true)$

okltest_random_spolar_m(f) := (

  true)$

okltest_extend_linear_hull(f) := block([H],
  H : {},
  H : f([1,0,0],H,{0,1},
      lambda([a,b],ss_add(a,b,2,x)), lambda([a,b],ss_mul(a,b,2,x))),
  assert(H = {[1,0,0]}),
  H : f([1,0,0],H,{0,1},
    lambda([a,b],ss_add(a,b,2,x)), lambda([a,b],ss_mul(a,b,2,x))),
  assert(H = {[1,0,0]}),
  H : f([0,1,0],H,{0,1},
      lambda([a,b],ss_add(a,b,2,x)), lambda([a,b],ss_mul(a,b,2,x))),
  assert(H = {[0,1,0],[1,0,0],[1,1,0]}),
  H : f([0,0,1],H,{0,1},
    lambda([a,b],ss_add(a,b,2,x)), lambda([a,b],ss_mul(a,b,2,x))),
  assert(H = {[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]}),
  true)$

okltest_linear_hull(f) := (
  assert(f({},{0,1}, 'f, 'g) = {}),
  assert(f({[0,0,1]},{0,1},
      lambda([a,b],ss_add(a,b,2,x)), lambda([a,b],ss_mul(a,b,2,x))) =
    {[0,0,1]}),
  assert(f({[1,0,0],[0,0,1]},{0,1},
      lambda([a,b],ss_add(a,b,2,x)), lambda([a,b],ss_mul(a,b,2,x))) =
    {[0,0,1],[1,0,0],[1,0,1]}),
  assert(f({[0,1,0],[1,0,0],[0,0,1]},{0,1}, lambda([a,b],ss_add(a,b,2,x)),
      lambda([a,b],ss_mul(a,b,2,x))) =
    {[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]}),
  true)$

okltest_random_inv_m(f) := (
  set_random(1),
  assert(f(2,2,{0,1},
      lambda([a,b],ss_add(a,b,2,x)), lambda([a,b],ss_mul(a,b,2,x))) =
    matrix([1,1],[1,0])),
  assert(f(2,2,{0,1},
      lambda([a,b],ss_add(a,b,2,x)), lambda([a,b],ss_mul(a,b,2,x))) =
    matrix([1,0],[0,1])),
  true)$


/* ****************************
   * Rows, columns, diagonals *
   ****************************
*/

okltest_com2l_r(f) := (
  assert(f(emptycom) = []),
  assert(f(zerocom({1,2},{3,4})) = [0,0,0,0]),
  assert(f([{1,2},{7,10},lambda([i,j],i+j)]) = [8,11,9,12]),
  true)$
okltest_com2ll_r(f) := (
  assert(f(emptycom) = []),
  assert(f(zerocom({1,2,3},{4,5})) = [[0,0],[0,0],[0,0]]),
  assert(okltest_com2l_r(buildq([f],lambda([M],lappend(f(M)))))),
  true)$
okltest_scom2ll_r(f) := (
  /* XXX */
  true)$

okltest_com2l_c(f) := (
  assert(f(emptycom) = []),
  assert(f(zerocom({1,2},{3,4})) = [0,0,0,0]),
  assert(f([{1,2},{7,10},lambda([i,j],i+j)]) = [8,9,11,12]),
  true)$
okltest_com2ll_c(f) := (
  assert(f(emptycom) = []),
  assert(f(zerocom({1,2,3},{4,5})) = [[0,0,0],[0,0,0]]),
  assert(okltest_com2l_c(buildq([f],lambda([M],lappend(f(M)))))),
  true)$
okltest_scom2ll_c(f) := (
  /* XXX */
  true)$

okltest_row_m(f) := (
  assert(f(matrix([]),1) = []),
  assert(f(matrix([],[]),2) = []),
  assert(f(matrix([1]),1) = [1]),
  assert(f(matrix([1,2],[3,4]),2) = [3,4]),
  true)$

okltest_column_m(f) := (
  assert(f(matrix([1]),1) = [1]),
  assert(f(matrix([1,2],[3,4]),2) = [2,4]),
  true)$

okltest_com2omsoms_r(f) := (
  assert(f(emptycom) = []),
  assert(f(zerocom({1,2,3},{1,2})) = [[[[0,2]],3]]),
  assert(f(m2com(matrix([1,2,1],[2,3,3],[1,3,4],[2,1,1]))) = [ [[[1,1],[3,1],[4,1]],1], [[[1,2],[2,1]],2],  [[[2,1],[3,2]],1]  ]),
  true)$

okltest_com2omsoms_c(f) := (
  assert(f(emptycom) = []),
  assert(f(zerocom({1,2,3},{1,2})) = [[[[0,3]],2]]),
  assert(f(m2com(matrix([1,2,1],[2,3,3],[1,3,4],[2,1,1]))) = [ [[[1,1],[2,1],[3,2]],1], [[[1,2],[2,2]],1], [[[1,2],[3,1],[4,1]],1] ]),
  true)$

okltest_maindiag_scom(f) := (
  assert(f(emptyscom) = []),
  assert(f(zeroscom({2,3,4})) = [0,0,0]),
  assert(f(m2scom(matrix([1,2,3],[2,3,4],[3,4,5]))) = [1,3,5]),
  true)$

okltest_maindiagoms_scom(f) := (
  assert(f(emptyscom) = []),
  assert(f(zeroscom({2,3,4})) = [[0,3]]),
  assert(f(m2scom(matrix([1,2,3],[2,3,4],[3,4,5]))) = [[1,1],[3,1],[5,1]]),
  assert(f(m2scom(matrix([1,2,3],[2,1,4],[3,4,5]))) = [[1,2],[5,1]]),
  true)$


/* *******************
   * Transformations *
   *******************
*/

okltest_scom2g(f) := (

  true)$

okltest_scom2gl(f) := (

  true)$

okltest_scom2dg(f) := (

  true)$

okltest_scom2dgl(f) := (

  true)$

okltest_com2ghg(f) := (
  assert(ghg_equalp(f(emptycom), [{},{}, identity]) = true),
  assert(ghg_equalp(f(zerocom({1,2},{1,2})), [{1,2},{1,2}, lambda([e],{})]) = true),
  assert(ghg_equalp(f(constantcom({1,2},{3,4},2)), [{1,2},{3,4}, lambda([e],{1,2})]) = true),
  true)$

okltest_trans_l2scom(f) := (

  true)$


/* ********************
   * Basic operations *
   ********************
*/

okltest_dim_com(f) := (
  assert(f(emptycom) = [0,0]),
  assert(f(zerocom({},{1,2})) = [0,2]),
  assert(f(zerocom({1,2},{3})) = [2,1]),
  assert(okltest_order_scom(buildq([f],lambda([M],f(scom2com(M))[1])))),
  true)$

okltest_order_scom(f) := (
  assert(f(emptyscom) = 0),
  assert(f(zeroscom({1,2})) = 2),
  true)$

okltest_trans_com(f) := (
  assert(com_equalp(f(emptycom), emptycom) = true),
  assert(com_equalp(f(zerocom({1,3},{-3,4})), zerocom({-3,4},{1,3}))),
  assert(okltest_trans_scom(buildq([f],lambda([M],com2scom(f(scom2com(M))))))),
  true)$

okltest_trans_scom(f) := (
  assert(scom_equalp(f(emptyscom), emptyscom)),
  assert(scom_equalp(f(zeroscom({-3,4})), zeroscom({-3,4}))),
  true)$


/* ************************
   * Algebraic operations *
   ************************
*/

okltest_add_scom(f) := (

  true)$

okltest_diff_scom(f) := (

  true)$

okltest_scprod_scom(f) := (

  true)$

okltest_prod_com(f) := block([fun],
  assert(com_equalp(f([{},{},fun],[{},{},fun]), [{},{},fun]) = true),
  assert(com_equalp(f([{1,2},{},fun],[{},{3,4},fun]), zerocom({1,2},{3,4})) = true),
  assert(com_equalp(f(constantcom({1,2},{1,3},2),constantcom({1,2},{1,3},3)), constantcom({1,2},{1,3},12)) = true),
  true)$


/* ********************
   * Entry statistics *
   ********************
*/

okltest_min_com(f) := (
  assert(f(zerocom({1,2},{3,4})) = 0),
  assert(f(m2com(matrix([1,2],[-1,0]))) = -1),
  true)$

okltest_max_com(f) := (
  assert(f(zerocom({1,2},{3,4})) = 0),
  assert(f(m2com(matrix([1,2],[-1,0]))) = 2),
  true)$

okltest_sum_com(f) := (
  assert(f(emptycom) = 0),
  assert(f(emptycom_r({1,2})) = 0),
  assert(f(emptycom_c({3,4})) = 0),
  assert(f(conststdcom(3,4,-1)) = 3*4 * -1),
  assert(okltest_sum_scom(buildq([f],lambda([M],f(scom2com(M)))))),
  true)$

okltest_sum_scom(f) := (
  assert(f(emptyscom) = 0),
  assert(f(constantscom(setn(3),2)) = 18),
  true)$

okltest_abs_com(f) := (
  assert(com_equalp(f(emptycom), emptycom) = true),
  assert(com_equalp(f(zerocom({1},{2})), zerocom({1},{2})) = true),
  assert(com_equalp(f(constantcom({1,2},{3,4},-1)), constantcom({1,2},{3,4},1)) = true),
  true)$

okltest_abs_scom(f) := (
  assert(scom_equalp(f(emptyscom), emptyscom) = true),
  assert(scom_equalp(f(zeroscom({1})), zeroscom({1})) = true),
  assert(scom_equalp(f(constantscom({1,2},-1)), constantscom({1,2},1)) = true),
  assert(scom_equalp(f(idscom({1,2})), idscom({1,2})) = true),
  assert(scom_equalp(f(cdiagscom({1,2},-2)), cdiagscom({1,2},2)) = true),
  true)$


okltest_rowsums_list_com(f) := block([u],
  assert(f([{},{},u]) = []),
  assert(f([{},{1},u]) = []),
  for n : 0 thru 4 do
    assert(f([setn(n),{},u]) = if n=0 then [] else [[0,n]]),
  for n : 0 thru 3 do
    for m : 0 thru 3 do
      for k : 0 thru 2 do
        assert(f([setn(n),setn(m),lambda([i,j],k)]) = if n=0 then [] else [[m*k,n]]),
  true)$

okltest_columnsums_list_com(f) := block(
  okltest_rowsums_list_com(buildq([f],lambda([M],f(trans(M))))),
  true)$

okltest_com_distribution(f) := (
  assert(f(emptycom) = []),
  assert(f(emptycom_r({1,2})) = []),
  assert(f(emptycom_c({3,4})) = []),
  assert(f(m2com(matrix([1,2,3],[2,3,4],[1,4,5]))) = [[1,2],[2,2],[3,2],[4,2],[5,1]]),
  assert(f(m2com(matrix([{},{1},{-1}],[{1,2},{},{-1}]))) = [[{},2],[{-1},2],[{1},1],[{1,2},1]]),
  true)$


/* ***************
   * Basic tests *
   ***************
*/

okltest_empty_com_p(f) := block([fun],
  assert(f([{},{},fun]) = true),
  assert(f([{},{1},fun]) = true),
  assert(f([{1},{},fun]) = true),
  assert(f([{1},{1},fun]) = false),
  true)$

okltest_every_com_p(f) := block([fun],
  assert(f(fun,emptycom) = true),
  assert(f(lambda([x],is(x=0)),zerocom({1,2},{-3,3})) = true),
  assert(f(lambda([x],is(x=0)),scom2com(idscom({1,2}))) = false),
  assert(okltest_every_scom_p(buildq([f],lambda([pred,M],f(pred,scom2com(M)))))),
  true)$

okltest_every_scom_p(f) := block([fun],
  assert(f(fun,emptyscom) = true),
  assert(f(identity,constantscom({1,2},true)) = true),
  assert(f(identity,constantscom({1,2},false)) = false),
  true)$

okltest_some_com_p(f) :=  block([fun],
  assert(f(fun,emptycom) = false),
  assert(f(lambda([x],is(x=0)),zerocom({1},{-3,3})) = true),
  assert(f(lambda([x],is(x=1)),zerocom({1},{-3,3})) = false),
  assert(f(lambda([x],is(x=0)),scom2com(idscom({1,2}))) = true),
  assert(f(lambda([x],is(x=1)),scom2com(idscom({1,2}))) = true),
  assert(okltest_some_scom_p(buildq([f],lambda([pred,M],f(pred,scom2com(M)))))),
  assert(okltest_every_com_p(buildq([f],lambda([pred,M],
    not f(lambda([x], not pred(x)), M))))),
  true)$

okltest_some_scom_p(f) :=  block([fun],
  assert(f(fun,emptyscom) = false),
  assert(f(lambda([x],is(x=0)),zeroscom({-3,3})) = true),
  assert(f(lambda([x],is(x=1)),zeroscom({-3,3})) = false),
  assert(f(lambda([x],is(x=0)),idscom({0,1})) = true),
  assert(f(lambda([x],is(x=1)),idscom({0,1})) = true),
  true)$

okltest_every_diagc_scom_p(f) :=  block(
  assert(f(emptyscom,1) = true),
  assert(f(zeroscom({1}),1) = false),
  assert(f(zeroscom({1}),0) = true),
  assert(f(zeroscom({1,3}),1) = false),
  assert(f(zeroscom({1,3}),0) = true),
  assert(f(idscom({0,1}),1) = true),
  assert(f(idscom({0,1}),0) = false),
  true)$

okltest_every_diag_scom_p(f) := block([fun],
  assert(f(fun,emptyscom) = true),
  assert(okltest_every_diagc_scom_p(buildq([f], lambda([M,c],
    f(lambda([x],is(x=c)), M))))),
  true)$

okltest_every_ndiagc_scom_p(f) := block(
  assert(f(emptyscom,1) = true),
  assert(f(zeroscom({1}),1) = true),
  assert(f(zeroscom({1}),0) = true),
  assert(f(zeroscom({1,3}),1) = false),
  assert(f(zeroscom({1,3}),0) = true),
  assert(f(idscom({0,1}),1) = false),
  assert(f(idscom({0,1}),0) = true),
  true)$

okltest_every_ndiag_scom_p(f) := block([fun],
  assert(f(fun,emptyscom) = true),
  assert(okltest_every_ndiagc_scom_p(buildq([f], lambda([M,c],
    f(lambda([x],is(x=c)), M))))),
  true)$

okltest_some_ndiag_scom_p(f) := block([fun],
  assert(f(fun,emptyscom) = false),
  assert(f(identity, m2scom(matrix([false,true],[false,false]))) = true),
  assert(f(identity, m2scom(matrix([false,false],[false,false]))) = false),
  assert(okltest_every_ndiag_scom_p(buildq([f], lambda([npred,M],
    not f(lambda([x], not npred(x)), M))))),
  true)$

okltest_extscom_com_p(f) := (
  assert(f(emptycom) = true),
  assert(f(emptycom_r({1})) = false),
  assert(f(emptycom_c({2})) = false),
  assert(f(zerocom({1,2},{3,4})) = true),
  assert(f(zerocom({1,2},{3})) = false),
  true)$

okltest_obsscom_com_p(f) := (
  assert(f(emptycom) = true),
  assert(f(emptycom_r({1})) = false),
  assert(f(emptycom_c({2})) = false),
  assert(f(zerocom({1,2},{3,4})) = false),
  assert(f(zerocom({1,2},{3})) = false),
  assert(f(zerocom({1,2},{1,2})) = true),
  true)$

okltest_symmetric_scom_p(f) := (
  assert(f(emptyscom) = true),
  assert(f(zeroscom({0,2})) = true),
  assert(f(idscom({0,2})) = true),
  assert(f(m2scom(matrix([1,2],[1,2]))) = false),
  true)$

okltest_symmetric_m_p(f) := (
  assert(f(matrix()) = true),
  assert(f(matrix([1])) = true),
  assert(f(zeromatrix(3,3)) = true),
  assert(f(zeromatrix(2,3)) = false),
  true)$


/* ***************
   * Polynomials *
   ***************
*/

okltest_charpoly_m(f) := block([x],
  assert(f(matrix()) = 1),
  assert(f(matrix([0])) = x),
  assert(f(matrix([1])) = x-1),
  assert(f(matrix([2,0],[0,0])) = x^2 - 2 * x),
  assert(f(matrix([1,1],[1,1])) = x^2 - 2 * x),
  true)$

okltest_charpoly_scom(f) := block([fun],
  assert(f([{},fun]) = 1),
  assert(okltest_charpoly_m(buildq([f],lambda([M],f(m2scom(M)))))),
  true)$


/*!
\endhtmlonly
*/
