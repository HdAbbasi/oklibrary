/* Oliver Kullmann, 16.3.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/CombinatorialMatrices/Lisp/tests/Basics.mac
  \brief Tests for splitting trees

Use by

oklib_load("Transitional/ComputerAlgebra/CombinatorialMatrices/Lisp/tests/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$


kill(f)$

/* *****************
   * Basic notions *
   *****************
*/

okltest_binfam_p(f) := (

  true)$

okltest_com_p(f) := block([fun],
  assert(f(0,{}) = false),
  assert(f([],{}) = false),
  assert(f([0,0],{}) = false),
  assert(f([0,0,0],{}) = false),
  assert(f([[],[],[]],{}) = false),
  assert(f([{},{},fun],{}) = true),
  assert(f([{1},{},fun],{}) = true),
  assert(f([{},{1},fun],{}) = true),
  assert(f([{1},{1},fun],{}) = false),
  assert(f([{1},{1},lambda([i,j],2)],{}) = false),
  assert(f([{1},{1},lambda([i,j],2)],{1}) = false),
  assert(f([{1},{1},lambda([i,j],2)],{2}) = true),
  true)$

okltest_scom_p(f) := block([fun],
  assert(f(0,{}) = false),
  assert(f([],{}) = false),
  assert(f([0,0],{}) = false),
  assert(f([[],fun],{}) = false),
  assert(f([{},fun],{}) = true),
  assert(f([{1},fun],{}) = false),
  assert(f([{1},lambda([i,j],0)],{}) = false),
  assert(f([{1},lambda([i,j],0)],{0}) = true),
  assert(f([{1,2},lambda([i,j],i+j)],{2,3,4}) = true),
  true)$


/* *********************
   * Checking equality *
   *********************
*/

okltest_com_equalp(f) := (
  assert(f(emptycom,emptycom) = true),
  assert(f(emptycom,zerocom({},{1})) = false),
  assert(f(constantcom({1,2},{1,3},2), constantcom({1,2},{1,3},2)) = true),
  assert(f(constantcom({1,2},{1,3},1), constantcom({1,2},{1,3},2)) = false),
  assert(f(trans(trans(constantcom({1,2},{1,3},1))), constantcom({1,2},{1,3},1)) = true),
  true)$

okltest_scom_equalp(f) := (
  assert(f(emptyscom,emptyscom) = true),
  assert(f(emptyscom,zeroscom({1})) = false),
  assert(f(constantscom({1,2},2), constantscom({1,2},2)) = true),
  assert(f(constantscom({1,2},1), constantscom({1,2},2)) = false),
  assert(f(strans(constantscom({1,2},1)), constantscom({1,2},1)) = true),
  assert(f(strans(idscom({1,2})), idscom({1,2})) = true),
  true)$


/* ***************
   * Conversions *
   ***************
*/

okltest_scom2com(f) := block([I,fun],
  assert(f([I,fun]) = [I,I,fun]),
  true)$

okltest_com2scom(f) := block([I,fun],
  assert(f([I,I,fun]) = [I,fun]),
  true)$

okltest_com2m(f) := (
  assert(f([{},{},identity]) = matrix()),
  assert(f([{1},{},identity]) = matrix([])),
  assert(f([{-1,1},{},identity]) = matrix([],[])),
  assert(f([{},{1},identity]) = matrix()),
  assert(f([{1,2},{1,2},lambda([i,j],i+j)]) = matrix([2,3],[3,4])),
  assert(f([{-1,0},{-4,3},lambda([i,j],i+j)]) = matrix([-5,2],[-4,3])),
  true)$

okltest_ocom2m(f) := ([a,b,c],
  assert(f([[a,b],[a,-1,c],lambda([i,j],i+j)]) = matrix([2*a,a-1,a+c],[b+a,b-1,b+c])),
  assert(okltest_com2m(buildq([f],lambda([M],f([listify(M[1]),listify(M[2]),M[3]]))))),
  true)$

okltest_scom2m(f) := ([fun],
  assert(f([{},fun]) = matrix()),
  assert(f([{1,2},lambda([i,j],i*j)]) = matrix([1,2],[2,4])),
  true)$

okltest_m2com(f) := block([fun],
  assert(com_equalp(f(matrix()), [{},{},fun]) = true),
  assert(com_equalp(f(matrix([])), [{1},{},fun]) = true),
  assert(com_equalp(f(matrix([],[])), [{1,2},{},fun]) = true),
  assert(okltest_m2scom(buildq([f],lambda([M],com2scom(f(M)))))),
  true)$

okltest_m2scom(f) := block(
  assert(scom_equalp(f(matrix()),[{},identity]) = true),
  assert(scom_equalp(f(matrix([1])),[{1},lambda([i,j],1)]) = true),
  assert(scom_equalp(f(matrix([1,1],[1,1])),[{1,2},lambda([i,j],1)]) = true),
  assert(scom_equalp(f(matrix([2,3],[3,4])),[{1,2},lambda([i,j],i+j)]) = true),
  true)$


/* ***********************
   * Basic constructions *
   ***********************
*/

okltest_emptycom(f) := (
  assert(com_p(f,{}) = true),
  assert(dim_com(f) = [0,0]),
  true)$

okltest_emptyscom(f) := (
  assert(scom_p(f,{}) = true),
  assert(order_scom(f) = 0),
  true)$

okltest_zerocom(f) := (

  true)$

okltest_zeroscom(f) := (

  true)$

okltest_constantcom(f) := (

  true)$

okltest_constantscom(f) := (

  true)$

okltest_idscom(f) := (

  true)$

okltest_cdiagscom(f) := (

  true)$

okltest_all_m(f) := (
  assert(f(0,0,[]) = [matrix()]),
  assert(f(0,0,[1]) = [matrix()]),
  assert(f(1,0,[]) = [matrix([])]),
  assert(f(2,0,[]) = [matrix([],[])]),
  assert(f(2,0,[1]) = [matrix([],[])]),
  assert(f(1,1,[-1,3,-2]) = [matrix([-1]),matrix([3]),matrix([-2])]),
  assert(length(f(2,2,[-3,0,3])) = 3^4),
  true)$

okltest_genmatrix_m(f) := (

  true)$

okltest_genmatrix_sm(f) := (

  true)$


/* *******************
   * Random matrices *
   *******************
*/

okltest_random_m(f) := block([x],
  assert(f(0,0,x) = matrix()),
  assert(f(1,0,x) = matrix([])),
  assert(f(1,1,1) = matrix([0])),
  set_random_state(make_random_state(0)),
  assert(f(2,2,100) = matrix([44,39],[33,60])),
  true)$

okltest_random_sm(f) := block([x],
  assert(f(0,x) = matrix()),
  assert(f(2,1) = matrix([0,0],[0,0])),
  set_random_state(make_random_state(0)),
  assert(f(2,100) = matrix([44,39],[39,33])),
  thru 5 do block(
   [N : setmn(0,99), M : f(3,100)],
    assert(symmetric_m_p(M)),
    assert(every_scom_p(lambda([x],elementp(x,N)), m2scom(M)))),
  true)$

okltest_random_permutation_m(f) := (

  true)$

okltest_random_rpermutation_m(f) := (

  true)$

okltest_random_cpermutation_m(f) := (

  true)$

okltest_random_spolar_m(f) := (

  true)$

/* *******************
   * Transformations *
   *******************
*/

okltest_com2l_r(f) := (
  assert(f(emptycom) = []),
  assert(f(zerocom({1,2},{3,4})) = [0,0,0,0]),
  assert(f([{1,2},{3,4},lambda([i,j],i+j)]) = [4,5,5,6]),
  true)$

okltest_scom2g(f) := (

  true)$

okltest_scom2gl(f) := (

  true)$

okltest_scom2dg(f) := (

  true)$

okltest_scom2dgl(f) := (

  true)$

okltest_com2ghg(f) := (
  assert(ghg_equalp(f(emptycom), [{},{}, identity]) = true),
  assert(ghg_equalp(f(zerocom({1,2},{1,2})), [{1,2},{1,2}, lambda([e],{})]) = true),
  assert(ghg_equalp(f(constantcom({1,2},{3,4},2)), [{1,2},{3,4}, lambda([e],{1,2})]) = true),
  true)$

okltest_trans_l2scom(f) := (

  true)$


/* ********************
   * Basic operations *
   ********************
*/

okltest_dim_com(f) := (
  assert(f(emptycom) = [0,0]),
  assert(f(zerocom({},{1,2})) = [0,2]),
  assert(f(zerocom({1,2},{3})) = [2,1]),
  assert(okltest_order_scom(buildq([f],lambda([M],f(scom2com(M))[1])))),
  true)$

okltest_order_scom(f) := (
  assert(f(emptyscom) = 0),
  assert(f(zeroscom({1,2})) = 2),
  true)$

okltest_trans_com(f) := (
  assert(com_equalp(f(emptycom), emptycom) = true),
  assert(com_equalp(f(zerocom({1,3},{-3,4})), zerocom({-3,4},{1,3}))),
  assert(okltest_trans_scom(buildq([f],lambda([M],com2scom(f(scom2com(M))))))),
  true)$

okltest_trans_scom(f) := (
  assert(scom_equalp(f(emptyscom), emptyscom)),
  assert(scom_equalp(f(zeroscom({-3,4})), zeroscom({-3,4}))),
  true)$

okltest_add_scom(f) := (

  true)$

okltest_diff_scom(f) := (

  true)$

okltest_scprod_scom(f) := (

  true)$

okltest_prod_com(f) := block([fun],
  assert(com_equalp(f([{},{},fun],[{},{},fun]), [{},{},fun]) = true),
  assert(com_equalp(f([{1,2},{},fun],[{},{3,4},fun]), zerocom({1,2},{3,4})) = true),
  assert(com_equalp(f(constantcom({1,2},{1,3},2),constantcom({1,2},{1,3},3)), constantcom({1,2},{1,3},12)) = true),
  true)$

okltest_min_com(f) := (

  true)$

okltest_max_com(f) := (

  true)$

okltest_sum_com(f) := (

  true)$

okltest_sum_scom(f) := (
  assert(f(emptyscom) = 0),
  assert(f(constantscom(setn(3),2)) = 18),
  true)$

okltest_abs_com(f) := (
  assert(com_equalp(f(emptycom), emptycom) = true),
  assert(com_equalp(f(zerocom({1},{2})), zerocom({1},{2})) = true),
  assert(com_equalp(f(constantcom({1,2},{3,4},-1)), constantcom({1,2},{3,4},1)) = true),
  true)$

okltest_abs_scom(f) := (
  assert(scom_equalp(f(emptyscom), emptyscom) = true),
  assert(scom_equalp(f(zeroscom({1})), zeroscom({1})) = true),
  assert(scom_equalp(f(constantscom({1,2},-1)), constantscom({1,2},1)) = true),
  assert(scom_equalp(f(idscom({1,2})), idscom({1,2})) = true),
  assert(scom_equalp(f(cdiagscom({1,2},-2)), cdiagscom({1,2},2)) = true),
  true)$


okltest_rowsums_list_com(f) := block([u],
  assert(f([{},{},u]) = []),
  assert(f([{},{1},u]) = []),
  for n : 0 thru 4 do
    assert(f([setn(n),{},u]) = if n=0 then [] else [[0,n]]),
  for n : 0 thru 3 do
    for m : 0 thru 3 do
      for k : 0 thru 2 do
        assert(f([setn(n),setn(m),lambda([i,j],k)]) = if n=0 then [] else [[m*k,n]]),
  true)$

okltest_columnsums_list_com(f) := block(
  okltest_rowsums_list_com(buildq([f],lambda([M],f(trans(M))))),
  true)$


/* ***************
   * Basic tests *
   ***************
*/

okltest_every_com_p(f) := block([fun],
  assert(f(fun,emptycom) = true),
  assert(f(lambda([x],is(x=0)),zerocom({1,2},{-3,3})) = true),
  assert(f(lambda([x],is(x=0)),scom2com(idscom({1,2}))) = false),
  assert(okltest_every_scom_p(buildq([f],lambda([pred,M],f(pred,scom2com(M)))))),
  true)$

okltest_every_scom_p(f) := block([fun],
  assert(f(fun,emptyscom) = true),
  assert(f(identity,constantscom({1,2},true)) = true),
  assert(f(identity,constantscom({1,2},false)) = false),
  true)$

okltest_some_com_p(f) :=  block([fun],
  assert(f(fun,emptycom) = false),
  assert(f(lambda([x],is(x=0)),zerocom({1},{-3,3})) = true),
  assert(f(lambda([x],is(x=1)),zerocom({1},{-3,3})) = false),
  assert(f(lambda([x],is(x=0)),scom2com(idscom({1,2}))) = true),
  assert(f(lambda([x],is(x=1)),scom2com(idscom({1,2}))) = true),
  assert(okltest_some_scom_p(buildq([f],lambda([pred,M],f(pred,scom2com(M)))))),
  assert(okltest_every_com_p(buildq([f],lambda([pred,M],
    not f(lambda([x], not pred(x)), M))))),
  true)$

okltest_some_scom_p(f) :=  block([fun],
  assert(f(fun,emptyscom) = false),
  assert(f(lambda([x],is(x=0)),zeroscom({-3,3})) = true),
  assert(f(lambda([x],is(x=1)),zeroscom({-3,3})) = false),
  assert(f(lambda([x],is(x=0)),idscom({0,1})) = true),
  assert(f(lambda([x],is(x=1)),idscom({0,1})) = true),
  true)$

okltest_every_diagc_scom_p(f) :=  block(
  assert(f(emptyscom,1) = true),
  assert(f(zeroscom({1}),1) = false),
  assert(f(zeroscom({1}),0) = true),
  assert(f(zeroscom({1,3}),1) = false),
  assert(f(zeroscom({1,3}),0) = true),
  assert(f(idscom({0,1}),1) = true),
  assert(f(idscom({0,1}),0) = false),
  true)$

okltest_every_diag_scom_p(f) := block([fun],
  assert(f(fun,emptyscom) = true),
  assert(okltest_every_diagc_scom_p(buildq([f], lambda([M,c],
    f(lambda([x],is(x=c)), M))))),
  true)$

okltest_every_ndiagc_scom_p(f) := block(
  assert(f(emptyscom,1) = true),
  assert(f(zeroscom({1}),1) = true),
  assert(f(zeroscom({1}),0) = true),
  assert(f(zeroscom({1,3}),1) = false),
  assert(f(zeroscom({1,3}),0) = true),
  assert(f(idscom({0,1}),1) = false),
  assert(f(idscom({0,1}),0) = true),
  true)$

okltest_every_ndiag_scom_p(f) := block([fun],
  assert(f(fun,emptyscom) = true),
  assert(okltest_every_ndiagc_scom_p(buildq([f], lambda([M,c],
    f(lambda([x],is(x=c)), M))))),
  true)$

okltest_some_ndiag_scom_p(f) := block([fun],
  assert(f(fun,emptyscom) = false),
  assert(f(identity, m2scom(matrix([false,true],[false,false]))) = true),
  assert(f(identity, m2scom(matrix([false,false],[false,false]))) = false),
  assert(okltest_every_ndiag_scom_p(buildq([f], lambda([npred,M],
    not f(lambda([x], not npred(x)), M))))),
  true)$

okltest_symmetric_scom_p(f) := (
  assert(f(emptyscom) = true),
  assert(f(zeroscom({0,2})) = true),
  assert(f(idscom({0,2})) = true),
  assert(f(m2scom(matrix([1,2],[1,2]))) = false),
  true)$

okltest_symmetric_m_p(f) := (
  assert(f(matrix()) = true),
  assert(f(matrix([1])) = true),
  assert(f(zeromatrix(3,3)) = true),
  assert(f(zeromatrix(2,3)) = false),
  true)$


/* ************************
   * Duality and polarity *
   ************************
*/

okltest_selfpolar_bydef_m_p(f) := (
  assert(f(matrix()) = true),
  assert(f(matrix([0])) = true),
  assert(f(matrix([1])) = true),
  assert(f(matrix([0,0],[0,0])) = true),
  assert(f(matrix([1,0],[0,0])) = true),
  assert(f(matrix([1,0],[1,0])) = false),
  assert(f(matrix([1,1],[0,0])) = false),
  assert(f(matrix([1,0],[0,1])) = true),
  assert(f(matrix([1,1],[1,0])) = true),
  assert(f(matrix([1,1],[1,1])) = true),
  true)$

okltest_selfdual_bydef_m_p(f) := (
  assert(f(matrix()) = true),
  assert(f(matrix([0])) = true),
  assert(f(matrix([1])) = true),
  assert(f(matrix([0,0],[0,0])) = true),
  assert(f(matrix([1,0],[0,0])) = true),
  assert(f(matrix([1,0],[1,0])) = false),
  assert(f(matrix([1,1],[0,0])) = false),
  assert(f(matrix([1,0],[0,1])) = true),
  assert(f(matrix([1,1],[1,0])) = true),
  assert(f(matrix([1,1],[1,1])) = true),
  true)$


/*!
\endhtmlonly
*/
