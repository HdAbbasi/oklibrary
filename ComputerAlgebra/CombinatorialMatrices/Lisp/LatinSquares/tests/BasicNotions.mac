/* Oliver Kullmann, 30.12.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/CombinatorialMatrices/Lisp/LatinSquares/tests/BasicNotions.mac
  \brief Tests regarding basic notions for latin squares

Use by

oklib_load("Transitional/ComputerAlgebra/CombinatorialMatrices/Lisp/LatinSquares/tests/BasicNotions.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("Transitional/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac")$
oklib_include("Transitional/ComputerAlgebra/Algebra/Lisp/Groupoids/Groups/CyclicGroups.mac")$
oklib_include("Transitional/ComputerAlgebra/Algebra/Lisp/Groupoids/BasicNotions.mac")$

kill(f)$

/* *****************
   * Basic notions *
   *****************
*/

okltest_lso_p(f) := (
  /* XXX */
  true)$

/* Remark: The semantics of okltest_ls_p is identical with that of
   okltest_qgrp_p. Currently all tests are handled by okltest_ls_p.
*/
okltest_ls_p(f) := (
  assert(f(0) = false),
  assert(f([]) = false),
  assert(f([[],[]]) = false),
  assert(f([{},0]) = true),
  assert(f([{1},0]) = false),
  assert(f(scom_l([1])) = true),
  assert(f(scom_l([2])) = false),
  assert(f(scom_l([1,2],[2,1])) = true),
  assert(f(scom_l([2,1],[1,2])) = true),
  assert(f(scom_l([1,2],[2,2])) = false),
  for n : 1 thru 6 do
    assert(f(grpn2grp(cyclic_grpn(n))) = true),
  true)$

okltest_stdls_p(f) := (
  /* XXX */
  assert(f(matrix([2,1],[1,2])) = false),
  assert(f(matrix([1,2],[2,1])) = true),
  assert(f(matrix([1,3,2],[2,1,3],[3,2,1])) = true),
  true)$

okltest_fstdls_p(f) := (
  /* XXX */
  assert(f(matrix([2,1],[1,2])) = false),
  assert(f(matrix([1,2],[2,1])) = true),
  assert(f(matrix([1,2,3],[3,1,2],[2,3,1])) = false),
  assert(f(matrix([1,2,3],[2,3,1],[3,1,2])) = true),
  assert(f(matrix([1,3,2],[2,1,3],[3,2,1])) = false),
  true)$


okltest_ols_p(f) := (
  assert(f(scom_l([1]),scom_l([1])) = true),
  assert(f(scom_l([1,2],[2,1]), scom_l([1,2],[2,1])) = false),
  assert(f(scom_l([1,2],[2,1]), scom_l([2,1],[1,2])) = false),
  assert(f(m2scom(LS_cyc3), m2scom(LS_cyc3_o)) = true),
  true)$

okltest_mols_p(f) := (
  assert(okltest_ols_p(buildq([f],lambda([A,B], f([A,B]))))),
  /* XXX */
  true)$


/* ************
   * Examples *
   ************
*/

okltest_LS_cyc3(f) := (
  assert(matrix_size(f) = [3,3]),
  assert(fstdls_p(f) = true),
  true)$

okltest_LS_cyc3_o(f) := (
  assert(matrix_size(f) = [3,3]),
  assert(fstdls_p(f) = false),
  assert(stdls_p(f) = true),
  assert(ols_p(m2scom(f),m2scom(LS_cyc3)) = true),
  true)$

okltest_LS_DK(f) := (
  assert(matrix_size(f) = [10,10]),
  assert(fstdls_p(f) = true),
  true)$

okltest_LS_DK_o(f) := (
  assert(matrix_size(f) = [10,10]),
  assert(fstdls_p(f) = false),
  assert(stdls_p(f) = true),
  assert(ols_p(m2scom(f),m2scom(LS_DK)) = true),
  true)$


/*!
\endhtmlonly
*/
