/* Oliver Kullmann, 24.1.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac
  \brief Basic functionality for combinatorial matrices

Use by

oklib_load("Transitional/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* *****************
   * Basic notions *
   *****************
*/

/* Checking whether fam is a family with index set XxY over Z: */
binfam_p(fam,X,Y,Z) := block(
 [e : errcatch(
   subsetp(map(lambda([P],apply(fam,P)),cartesian_product(X,Y)),Z))],
 not emptyp(e) and e[1])$


/* Tests whether M is a combinatorial matrix over H: */
com_p(M,H) := listp(M) and is(length(M) = 3) and setp(M[1]) and setp(M[2]) and
 binfam_p(M[3],M[1],M[2],H)$
/* Tests whether M is a square combinatorial matrix over H: */
scom_p(M,H) := listp(M) and is(length(M) = 2) and setp(M[1]) and 
  com_p([M[1],M[1],M[2]],H)$

/* Two types of combinatorial matrices which "look like" square matrices: */
/* A "square-sized combinatorial matrix": */
sqscom_p(M,H) := com_p(M,H) and is(length(M[1]) = length(M[2]))$
/* An "observed square combinatorial matrix": */
osqcom_p(M,H) := com_p(M,H) and is(M[1] = M[2])$


/* *********************
   * Checking equality *
   *********************
*/

/* Equality test for combinatorial matrices: */
/* RENAME: com_equalp */
comequalp(A,B) := is(A[1] = B[1]) and is(A[2] = B[2]) and
 block([break : false],
  for a in A[1] unless break do for b in A[2] unless break do
    if A[3](a,b) # B[3](a,b) then break : true,
  return(not break))$
com_equalp(A,B) := comequalp(A,B)$

/* Equality test for square combinatorial matrices: */
/* RENAME: scom_equalp */
scomequalp(A,B) := is(A[1] = B[1]) and
 block([break : false],
  for a in A[1] unless break do for b in A[1] unless break do
    if A[2](a,b) # B[2](a,b) then break : true,
  return(not break))$
scom_equalp(A,B) := scomequalp(A,B)$


/* ***************
   * Conversions *
   ***************
*/

/* Conversions between general and square matrices: */
scom2com(M) := [M[1],M[1],M[2]]$
oscom2ocom(M) := [M[1],M[1],M[2]]$
com2scom(M) := [M[1],M[3]]$
ocom2oscom(M) := [M[1],M[3]]$
/* com2scom, ocom2oscom can only be applied sensibly if M[1] = M[2]. */

/* Conversions between ordered and unordered matrices: */
ocom2com(M) := [setify(M[1]),setify(M[2]),M[3]]$
oscom2scom(M) := [setify(M[1]),M[2]]$
com2ocom(M) := [listify(M[1]),listify(M[2]),M[3]]$
scom2oscom(M) := [listify(M[1]),M[2]]$

/* Conversions between combinatorial matrices and Maxima matrices: */

/* Transforms a combinatorial matrix into a Maxima matrix, using the
   implicit order on rows and columns: */
com2m(M) := block([rows : listify(M[1]), cols : listify(M[2]), f : M[3]],
  apply(matrix, create_list(create_list(f(i,j),j,cols),i,rows)))$
/* Now using the explicit order on rows and columns: */
ocom2m(M) := block([rows : M[1], cols : M[2], f : M[3]],
  apply(matrix, create_list(create_list(f(i,j),j,cols),i,rows)))$
/* For square matrices: */
scom2m(M) := com2m(scom2com(M))$
oscom2m(M) := ocom2m(oscom2ocom(M))$

/* Transforms a Maxima matrix into a combinatorial matrix
   (attention: this constitutes a reference to the original matrix). */
m2com(M) := block([m,n],
  [m,n] : matrix_size(M),
  [setn(m), setn(n),
    buildq([M], lambda([i,j], 'M[i,j]))])$
m2ocom(M) := block([m,n],
  [m,n] : matrix_size(M),
  [create_list(i,i,1,m), create_list(i,i,1,n),
    buildq([M], lambda([i,j], 'M[i,j]))])$
/* RENAME: m2scom */
sm2scom(M) := [setn(matrix_size(M)[1]), buildq([M], lambda([i,j], 'M[i,j]))]$
m2scom(M) := sm2scom(M)$
m2oscom(M) := [create_list(i,i,1,matrix_size(M)[1]), buildq([M], lambda([i,j], 'M[i,j]))]$

/* For convenience: Input as the Maxima function "matrix", but returns
   a com resp. scom:
*/
com_l([L]) := m2com(apply(matrix,L))$
scom_l([L]) := m2scom(apply(matrix,L))$


/* ***********************
   * Basic constructions *
   ***********************
*/

/* The empty combinatorial matrix; since no arguments are given, this means
   that rowset and columnset are empty; more generally, an "empty com" has no
   entries, that is, one of rowset or columnset (at least) is empty: */
emptycom : [{},{},lambda([i,j],false)]$
emptycom_r(R) := [R,{},lambda([i,j],false)]$
emptycom_c(C) := [{},C,lambda([i,j],false)]$

/* The empty square combinatorial matrix: */
emptyscom : [{},lambda([i,j],false)]$

/* The zero combinatorial matrix for given index sets: */
zerocom(I,J) := [I,J,lambda([i,j],0)]$
/* The zero square combinatorial matrix for a given index set: */
zeroscom(I) := [I,lambda([i,j],0)]$

/* The constant combinatorial matrix for given index sets and value: */
/* RENAME: constcom */
constantcom(I,J,a) := [I,J,buildq([a],lambda([i,j],a))]$
constcom(I,J,a) := constantcom(I,J,a)$
conststdcom(n,m,a) := constcom(setn(n),setn(m),a)$
/* The constant square combinatorial matrix for given index set and value: */
/* RENAME: constscom */
constantscom(I,a) := [I,buildq([a],lambda([i,j],a))]$
constscom(I,a) := constantscom(I,a)$
conststdscom(n,a) := constscom(setn(n),a)$

/* The identity matrix: */
idscom(I) := [I, lambda([i,j],if i=j then 1 else 0)]$
/* The diagonal matrix with constant diagonal value: */
cdiagscom(I,a) := [I,buildq([a],lambda([i,j],if i=j then a else 0))]$

/* Creating all Maxima matrices of size m*n with elements from
   list L:. */
/* Prerequisite: if m=0 then n=0. */
all_m(m,n,L) := if n=0 then [apply(matrix,create_list([],i,1,m))] else
map(
 lambda([L],apply(matrix,partition_elements(L,n))),
 cartesian_product_l(create_list(L,i,1,m*n)))$

/* The corrected Maxima function "genmatrix" for the main case 
   (can now handle also genmatrix(f,m,0)): */
genmatrix_m(_fun,m,n) := if n=0 then apply(matrix,create_list([],i,1,m))
 else genmatrix(_fun,m,n)$
genmatrix_sm(_fun,n) := if n=0 then matrix()
 else genmatrix(_fun,n)$


/* *******************
   * Random matrices *
   *******************
*/

/* A random Maxima matrix of size m x n, with entries random(x)
   (as usual, if m=0 then n=0): */
random_m(m,n,x) := genmatrix_m(lambda([i,j],random(x)),m,n)$
/* A random Maxima matrix of size m x n, with random entries
   from the integer interval [a,b]: */
random_intiv_m(m,n,a,b) := block([s : b - a + 1],
  genmatrix_m(lambda([i,j],random(s)+a),m,n))$
/* A random Maxima matrix of size m x n, with random entries
   from the real interval [a,b) (using floating points): */
random_fpiv_m(m,n,a,b) := block([s : float(b - a)],
  genmatrix_m(lambda([i,j],random(s)+a),m,n))$


/* A random symmetric Maxima matrix: */
random_sm(n,x) := block(
 [m : genmatrix_sm(lambda([i,j], 
        if i > j then random(x) elseif i=j then random(x)/2 else 0),n)],
  m + transpose(m))$

/* A random permutation of a Maxima matrix: */
random_permutation_m(M) := block([s : matrix_size(M)],
  prod_m(trans_l2m(random_permutation(create_list(i,i,1,s[1]))),
         M,
         trans_l2m(random_permutation(create_list(i,i,1,s[2])))))$
/* A random permutation of the rows of a Maxima matrix: */
random_rpermutation_m(M) := block([s : matrix_size(M)],
  prod_m(trans_l2m(random_permutation(create_list(i,i,1,s[1]))), M))$
/* A random permutation of the columns of a Maxima matrix: */
random_cpermutation_m(M) := block([s : matrix_size(M)],
  prod_m(M, trans_l2m(random_permutation(create_list(i,i,1,s[2])))))$

/* A random self-polar matrix : */
random_spolar_m(n,x) := random_permutation_m(random_sm(n,x))$


/* *******************
   * Transformations *
   *******************
*/

/* Transforms a combinatorial matrix into a list, row-wise: */
com2l_r(M) := map(lambda([p],apply(M[3],p)), cartesian_product_l(map(listify,rest(M,-1))))$
/* Similarly, but into a list of lists: */
com2ll_r(M) := create_list(create_list(M[3](i,j), j,listify(M[2])), i,listify(M[1]))$
scom2ll_r(M) := com2ll_r(scom2com(M))$
/* Transforms a combinatorial matrix into a list, column-wise: */
com2l_c(M) := com2l_r(trans_com(M))$
/* Similarly, but into a list of lists: */
com2ll_c(M) := create_list(create_list(M[3](i,j), i,listify(M[1])), j,listify(M[2]))$
scom2ll_c(M) := com2ll_c(scom2com(M))$

/* Remarks: For a Maxima matrix A, by A[i] we obtain the list of the elements
   of row i; accordingly, by transpose(A)[i] we obtain column i as list.
   On the other hand, by row(A,i) resp. column(A,i) we obtain the rows resp.
   columns as (Maxima) matrices.
*/

/* Transforms a symmetric combinatorial matrix into a graph: */
/* RENAME: scom2g */
com2g(M) := [M[1], subset(powerset(M[1],2), lambda([S],
  block([L : listify(S)], is(M[2](L[1],L[2]) # 0))))]$
scom2g(M) := com2g(M)$
/* Transforms a symmetric combinatorial matrix into a graph with loops: */
scom2gl(M) := [M[1], subset(union(powerset(M[1],1),powerset(M[1],2)), 
 lambda([S], block([L : listify(S)], 
   if length(L)=1 then is(M[2](L[1],L[1]) # 0) else
     is(M[2](L[1],L[2]) # 0))))]$

/* Transforms a square combinatorial matrix into a digraph: */
scom2dg(M) := [M[1], subset(cartesian_product(M[1],M[1]), lambda([L],
  is(L[1]#L[2] and M[2](L[1],L[2]) # 0)))]$
/* Transforms a symmetric combinatorial matrix into a digraph with loops: */
scom2dgl(M) := [M[1], subset(cartesian_product(M[1],M[1]), 
 lambda([L], is(M[2](L[1],L[2]) # 0)))]$


/* Transforms a combinatorial matrix into a general hypergraph: */
/* RENAME: com2ghg */
com2ghyp(M) := [M[1], M[2], buildq([M], 
 lambda([j], subset(M[1], lambda([i], is(M[3](i,j) # 0)))))]$
com2ghg(M) := com2ghyp(M)$

/* Converts a transformation in list-form into a square combinatorial
   matrix: */
trans_l2scom(L) := block([A : l2array(L)],[setn(length(L)),
  buildq([A],lambda([i,j],if A[j]=i then 1 else 0))]);
trans_l2m(L) := scom2m(trans_l2scom(L))$


/* ********************
   * Basic operations *
   ********************
*/

/* The dimensions of a combinatorial matrix: */
dim_com(M) := [length(M[1]), length(M[2])]$
/* The order of a square combinatorial matrix: */
order_scom(M) := length(M[1])$

/* Transposition of a combinatorial matrix: */
/* RENAME: trans_com */
trans(M) := [M[2], M[1], buildq([M], lambda([i,j], M[3](j,i)))]$
trans_com(M) := [M[2], M[1], buildq([M], lambda([i,j], M[3](j,i)))]$
/* Transposition of a square combinatorial matrix: */
/* RENAME: trans_scom */
strans(M) := [M[1], buildq([M], lambda([i,j], M[2](j,i)))]$
trans_scom(M) := [M[1], buildq([M], lambda([i,j], M[2](j,i)))]$


/* ************************
   * Algebraic operations *
   ************************
*/

/* The product of Maxima matrices, yielding always a matrix (not a scalar
   in cases of overloading with scalar product): */
prod_m([LM]) := block([P : apply(".", LM)],
  if not matrixp(P) then matrix([P])
  else P)$

/* The addition of two square combinatorial matrices
   Precondition: A[1] = B[1]. */
add_scom(A,B) := [A[1], buildq([A,B],
  lambda([i,j], A[2](i,j) + B[2](i,j)))]$
/* The difference of two square combinatorial matrices
   Precondition: A[1] = B[1]. */
diff_scom(A,B) := [A[1], buildq([A,B],
  lambda([i,j], A[2](i,j) - B[2](i,j)))]$

/* Multiplying a square combinatorial matrix with a scalar: */
scprod_scom(a,A) := [A[1], buildq([a,A], lambda([i,j], a * A[2](i,j)))]$

/* The product of two combinatorial matrices.
   Precondition: A[2] = B[1]. */
prod_com(A,B) := [A[1], B[2], buildq([A,B],
  lambda([i,j], 
    sum_l(map(lambda([k],A[3](i,k)),listify(A[2])) * map(lambda([k],B[3](k,j)),listify(A[2])))))]$


/* ********************
   * Entry statistics *
   ********************
*/

/* The minimum over all entries of a non-empty combinatorial matrix: */
min_com(M) := lmin(com2l_r(M))$
/* The maximum over all entries of a non-empty combinatorial matrix: */
max_com(M) := lmax(com2l_r(M))$

/* The sum over all entries of a combinatorial matrix */
sum_com(M) := sum_l(com2l_r(M))$
/* The sum over all entries of a square combinatorial matrix */
sum_scom(M) := sum_com(scom2com(M))$

/* The entrywise absolute values of a combinatorial matrix */
abs_com(M) := [M[1], M[2], buildq([M],lambda([i,j], abs(M[3](i,j))))]$
/* The entrywise absolute values of a square combinatorial matrix */
abs_scom(M) := [M[1], buildq([M],lambda([i,j], abs(M[2](i,j))))]$

/* The distribution of row-sums, that is a list of pairs [possible
    row-sum, number of rows], sorted by ascending row-sum. */
rowsums_list_com(M) := block([C : listify(M[2])],
 list_distribution(
  create_list(gsum_l(lambda([j],M[3](i,j)),C), i,listify(M[1]))))$

/* The distribution of column-sums, that is a list of pairs [possible
    column-sum, number of rows], sorted by ascending column-sum. */
columnsums_list_com(M) := block([R : listify(M[1])],
 list_distribution(
  create_list(gsum_l(lambda([i],M[3](i,j)),listify(R)), j,listify(M[2]))))$

/* The distribution of values, as a list of pairs [possible value, number
   of entries], sorted by ascending values: */
com_distribution(M) := list_distribution(com2l_r(M))$


/* ***************
   * Basic tests *
   ***************
*/

/* Checking for an "empty" combinatorial matrix (no entries): */
empty_com_p(M) := is(length(M[1]) = 0 or length(M[2]) = 0)$

every_com_p(_pred,M) := every_s(_pred, com2l_r(M))$
every_scom_p(_pred,M) := every_com_p(_pred,scom2com(M))$
some_com_p(_pred,M) := some_s(_pred, com2l_r(M))$
some_scom_p(_pred,M) := some_com_p(_pred, scom2com(M))$

/* Every diagonal value is constant = s: */
every_diagc_scom_p(M,s) := 
  every_s(lambda([i], is(M[2](i,i)=s)), M[1])$
/* More generally, every diagonal entry fulfils _predx: */
every_diag_scom_p(_predx,M) := 
  every_s(lambda([i], _predx(M[2](i,i))), M[1])$
/* Every value outside the diagonal is constant = s: */
every_ndiagc_scom_p(M,s) := block([L : listify(M[1])],
  every_s(lambda([p], is(p[1]=p[2] or apply(M[2],p)=s)), cartesian_product_l([L,L])))$
/* More generally, every non-diagonal entry fulfils _predx: */
every_ndiag_scom_p(_predx,M) := block([L : listify(M[1])],
  every_s(lambda([p], is(p[1]=p[2] or _predx(apply(M[2],p)))), cartesian_product_l([L,L])))$
/* Some non-diagonal entry fulfils _predx: */
some_ndiag_scom_p(_predx,M) := block([L : listify(M[1])],
  some_s(lambda([p], is(p[1]#p[2] and _predx(apply(M[2],p)))), cartesian_product_l([L,L])))$

/* Externally square combinatorial matrices: */
extscom_com_p(M) := is(length(M[1]) = length(M[2]))$
/* Observedly square combinatorial matrices: */
obsscom_com_p(M) := is(M[1] = M[2])$ 

symmetric_scom_p(M) := scom_equalp(M,trans_scom(M))$
symmetric_m_p(M) := is(M = transpose(M))$


/* ***************
   * Polynomials *
   ***************
*/

oklib_plain_include("nchrpl")$

/* The characteristic polynomial, in the standard sense, where the leading
   coefficient is always +1.
*/
/* It seems that for all our cases setting ratmx to true yields a *much*
   faster computation: */
charpoly_m(M) := block([n : matrix_size(M)[1]],
  if n=0 then 1 
  elseif n < 30 then
    block([ratmx : true], (-1)^(matrix_size(M)[1]) * charpoly(M,x))
  else ncharpoly(M,x))$
charpoly_scom(M) := charpoly_m(scom2m(M))$

/*!
\endhtmlonly
*/
