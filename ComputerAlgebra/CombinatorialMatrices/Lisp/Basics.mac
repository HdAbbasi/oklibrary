/* Oliver Kullmann, 24.1.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac
  \brief Basic functionality for combinatorial matrices

Use by

oklib_load("Transitional/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$

/* Transposition of a combinatorial matrix */
trans(M) := [M[2], M[1], buildq([M], lambda([i,j], M[3](j,i)))]$

/* Equality test for combinatorial matrices */
comequalp(A,B) := is(A[1] = B[1]) and is(A[2] = B[2]) and
 block([break : false],
  for a in A[1] unless break do for b in A[2] unless break do
    if A[3](a,b) # B[3](a,b) then break : true,
  return(not break))$

/* Converts a square combinatorial matrix into a combinatorial matrix */
scom2com(M) := [M[1],M[1],M[2]]$


/* *******************
   * Transformations *
   *******************
*/

/* Transforms a combinatorial matrix into a Maxima matrix */
com2m(M) := block([rows : listify(M[1]), cols : listify(M[2]), f : M[3]],
  apply(matrix, makelist(makelist(f(i,j),j,cols),i,rows)))$

/* Transforms a square combinatorial matrix into a Maxima matrix */
scom2m(M) := com2m(scom2com(M))$

/* Transforms a Maxima matrix into a combinatorial matrix
   (attention: this constitutes a reference to the original matrix). */
m2com(M) := block([m,n],
  [m,n] : matrix_size(M),
  [setn(m), setn(n),
    buildq([M], lambda([i,j], 'M[i,j]))])$

/* Transforms a square combinatorial matrix into a graph */
com2g(M) := [M[1], subset(powerset(M[1],2), lambda([S],
  block([L : listify(S)], return(is(M[2](L[1],L[2]) # 0)))))]$


/*!
\endhtmlonly
*/
