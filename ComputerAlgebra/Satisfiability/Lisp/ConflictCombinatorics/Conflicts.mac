/* Oliver Kullmann, 24.1.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/Conflicts.mac
  \brief Functions related to the conflict-combinatorics of clause-sets

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/Conflicts.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("Transitional/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac")$
oklib_include("Transitional/ComputerAlgebra/LinearAlgebra/Lisp/QuadraticForms.mac")$
oklib_include("Transitional/ComputerAlgebra/Graphs/Lisp/Basic.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/IndependentSets.mac")$
oklib_include("Transitional/ComputerAlgebra/Graphs/Lisp/IndependentSets.mac")$
oklib_include("Transitional/ComputerAlgebra/Graphs/Lisp/Colouring.mac")$


/* *****************
   * Constructions *
   *****************
*/

/* The conflict-matrix (as a square combinatorial matrix) of a clause-set */
cm_cs(F) := [F, lambda([C,D], length(intersection(C,comp_sl(D))))]$
/* cm_cs(F) = 1/2 (cl_varint_scom_cs(F) - cl_int_scom_cs(F)). */

/* The conflict-graph of a clause-set */
cg_cs(F) := [F, subset(powerset(F,2),lambda([S], 
  block([L:listify(S)], return(clashp(L[1],L[2])))))]$
/* cg_cs(F) = com2g(cm_cs(F)) */

/* The hypergraph of maximal conflict-independent subsets of a 
   clause-set; i.e., all maximal conflict-free subsets. */
mcind_cs(F, Ind) := Ind(cg_cs(F))$
mcind_cs_trrs(F) := mcind_cs(F, independence_hyp_trrs)$
/* The hypergraph of all conflict-independent subsets of a clause-set */
cind_cs_trrs(F) := subset_closure_hyp(mcind_cs_trrs(F))$


/* ************
   * Measures *
   ************
*/

/* The number of conflicts of a boolean clause-set F */
nconflicts(F) := sum_scom(cm_cs(F))/2$
/* The "reduced number of conflicts" of a boolean clause-set F 
   (counting only one possible conflict per pair of clauses) */
rnconflicts(F) := length(cg_cs(F)[2])$

/* Using function h for computing the hermitian rank of a matrix */
hermitian_rank_cs_h(F,_h) := _h(scom2m(cm_cs(F)))$
/* The hermitian rank of a boolean clause-set F */
hermitian_rank_cs(F) := hermitian_rank_cs_h(F,hermitian_rank_charpoly)$

/* The hermitian defect of a boolean clause-set F */
hermitian_defect_cs(F) := ncl_cs(F) - hermitian_rank_cs(F)$

/* The conflict-independence number of a clause-set F, using function ind_num_f
   for computing the independence number of a graph */
independence_number_cs(F, ind_num_f) :=ind_num_f(cg_cs(F))$
/* Using the Maxima-function */
independence_number_m_cs(F) := independence_number_cs(F, independence_number_gr_m)$

/* The conflict-partition number of a clause-set F, using function part_num_f
   for computing the partition number of a graph */
/* The conflict-partition number of F is <= 1 iff F is hitting. */
partition_number_cs(F, part_num_f) := part_num_f(cg_cs(F))$
/* Using the Maxima-function */
partition_number_m_cs(F) := partition_number_cs(F, partition_number_gr_m)$


/* *********
   * Tests *
   *********
*/

/* Whether a clause-set is graphic (the conflict multigraph
   is a graph) */
graphiccsp(F) := is(max_com(scom2com(cm_cs(F))) <= 1)$

/* The Alon-Saks-conjecture for graphs states that the chromatic number
   is at most the biclique-partion number + 1.
   We transfer this to clause-sets, and return unknown in case the clause-set
   is not graphic, while otherwise a list is returned with first entry a
   boolean on whether the conjecture is true for this case or not.
   The second entry is again a boolean, about the (likely false) strengthened
   conjecture where n(F)+1 is lower-bounded by h(F)+1.
   The remaining three entries are the numbers involved. */
alon_saks_cs(F) := if not graphiccsp(F) then unknown else
 block([chi : chromatic_number_gr_m(cg_cs(F)), 
        r : hermitian_rank_cs(F), 
        n : nvar_cs(F)],
  return([is(chi <= n+1),is(chi <= r+1),chi,r+1,n+1]))$

/*!
\endhtmlonly
*/
