/* Oliver Kullmann, 24.1.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/Conflicts.mac
  \brief Functions related to the conflict-combinatorics of clause-sets

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/Conflicts.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac");
oklib_include("Transitional/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac");
oklib_include("Transitional/ComputerAlgebra/LinearAlgebra/Lisp/QuadraticForms.mac");
oklib_include("Transitional/ComputerAlgebra/Graphs/Lisp/Basic.mac");
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac");
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/IndependentSets.mac");

/* *****************
   * Constructions *
   *****************
*/

/* The conflict-matrix (as a square combinatorial matrix) of a clause-set */
cm_cs(F) := [F, lambda([C,D], length(intersection(C,comp_sl(D))))]$

/* The conflict-graph of a clause-set */
cg_cs(F) := [F, subset(powerset(F,2),lambda([S], 
  block([L:listify(S)], return(clashp(L[1],L[2])))))]$
/* cg_cs(F) = com2g(cm_cs(F)) */

/* The hypergraph of maximal conflict-independent subsets of a 
   clause-set; i.e., all maximal conflict-free subsets. */
mcind_cs(F, Ind) := Ind(cg_cs(F))$
mcind_cs_trrs(F) := mcind_cs(F, independence_hyp_trrs)$
/* The hypergraph of all conflict-independent subsets of a clause-set */
cind_cs_trrs(F) := subset_closure_hyp(mcind_cs_trrs(F))$


/* *********
   * Tests *
   *********
*/

/* Tests whether a clause-set is a hitting clause-set */
hittingcsp(F) := block([l : length(F), L : listify(F), break : false],
  for i : 1 thru l-1 unless break do for j : i+1 thru l unless break do
    if not clashp(L[i], L[j]) then break : true,
  return(not break))$
/* hittingcsp(F) = completegrp(cg_cs(F)) */
/* Also: hittingcsp(F) iff independence_number_cs(F) <= 1. */


/* ************
   * Measures *
   ************
*/

/* The hermitean rank of a boolean clause-set F */
hermitean_rank_cs(F) := hermitean_rank(scom2m(cm_cs(F)))$

/* The hermitean defect of a boolean clause-set F */
hermitean_defect_cs(F) := ncl_cs(F) - hermitean_rank_cs(F)$

/* The independence number of a clause-set F, using function ind_num_f
   for computing the independence number of a graph */
independence_number_cs(F, ind_num_f) :=ind_num_f(cg_cs(F))$


/*!
\endhtmlonly
*/
