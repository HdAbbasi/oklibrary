/* Oliver Kullmann, 12.2.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/tests/Conflicts.mac
  \brief Tests for basic conflict-combinatorics-functionality

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/tests/Conflicts.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("Transitional/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$


kill(f)$

/* *****************
   * Constructions *
   *****************
*/

okltest_cm_cs(f) := block([F,M],
  assert(scomequalp(f({}), emptyscom)),
  F : {{}}, M : f(F),
  assert(scomequalp(M, zeroscom(F))),
  block([alt_cm_cs : lambda([F], 
      scprod_scom(1/2, diff_scom(cl_varint_scom_cs(F), cl_int_scom_cs(F))))],
    for n : 0 thru (if oklib_test_level = 0 then 2 else 3) do 
     block([F : full_fcs(n)[2]],
      assert(scomequalp(f(F), alt_cm_cs(F))))),
  true)$

okltest_cg_cs(f) := block([F,G],
  assert(f({}) = [{},{}]),
  assert(f({{}}) = [{{}},{}]),
  true)$


/* ************
   * Measures *
   ************
*/

okltest_nconflicts(f) := block(
  assert(f({}) = 0),
  assert(f({{}}) = 0),
  assert(f({{1},{-1}}) = 1),
  assert(f({{1,2},{-1,-2}}) = 2),
  for n : 0 thru 4 do
    assert(f(uniform_usat_hitting_max(n)) = n/4 * 4^n),
  for n : 0 thru 4 do
    assert(f(uniform_usat_hitting_min(n)) = 1/2 * (4^n - 2^n)),
  true)$

okltest_rnconflicts(f) := block(
  assert(f({}) = 0),
  assert(f({{}}) = 0),
  assert(f({{1},{-1}}) = 1),
  assert(f({{1,2},{-1,-2}}) = 1),
  for n : 0 thru 4 do
    assert(f(uniform_usat_hitting_max(n)) = binom(2^n,2)),
  for n : 0 thru 4 do
    assert(f(uniform_usat_hitting_min(n)) = binom(2^n,2)),
  true)$


/* Tests whether f computes the hermitian rank of a clause-set. */
okltest_hermitian_rank_cs(f) := block(
  assert(f({}) = 0),
  assert(f({{}}) = 0),
  assert(f({{1}}) = 0),
  assert(f({{1},{-1}}) = 1),
  for k : 1 thru 3 do block([F : uniform_usat_hitting_min(k)],
    assert(f(F) = 2^k-1),
    assert(f(adjoin({},F)) = 2^k-1)
  ),
  if oklib_test_level = 0 then return(true),
  for k : 4 thru 5 do
    assert(f(uniform_usat_hitting_min(k)) = 2^k - 1),
  true)$

okltest_hermitian_rank_cs_h(f) := block(
  assert(okltest_hermitian_rank_cs(buildq([f],lambda([F],f(F,hermitian_rank))))),
  assert(okltest_hermitian_rank_cs(buildq([f],lambda([F],f(F,hermitian_rank_charpoly))))),
  if oklib_test_level >= 1 then block([oklib_test_level : oklib_test_level-1],
    assert(okltest_hermitian_rank_cs(buildq([f],lambda([F],f(F,hermitian_rank_eig)))))
  ),
  true)$

/* Tests whether f computes the characteristic polynomial of a clause-set. */
okltest_charpoly_cs(f) := block(
  assert(f({}) = 0),
  assert(f({{}}) = -x),
  assert(f({{1}}) = -x),
  assert(f({{1},{2}}) = x^2),
  assert(f({{1},{2},{3}}) = -x^3),
  assert(f({{-1},{1}}) = x^2 - 1),
  true)$


/* Tests whether f computes the conflict-partition-number of a clause-set
   (the minimal number of hitting sets partitioning the clause-set) */
okltest_partition_number_cs(f) := block(
  assert(f({}) = 0),
  assert(f({{}}) = 1),
  assert(f({{1}}) = 1),
  assert(f({{1},{-1}}) = 1),
  assert(f({{1},{2}}) = 2),
  for k : 0 thru 3 do (
    assert(f(uniform_usat_hitting_min(k)) = 1),
    assert(f(uniform_usat_hitting_max(k)) = 1),
    assert(f(smusat_horn(k)) = 1)),
  assert(f(sasg2000[2]) = 1),
true)$


/* *********
   * Tests *
   *********
*/

okltest_graphiccsp(f) := block(
  assert(f({}) = true),
  assert(f({{}}) = true),
  assert(f({{1}}) = true),
  assert(f({{1},{-1}}) = true),
  assert(f({{},{1}}) = true),
  assert(f({{1,2},{-1,-2}}) = false),
  true);

okltest_alon_saks_cs(f) := block(
  assert(f({}) = [true,true,0,1,1]),
  assert(f({{}}) = [true,true,1,1,1]),
  assert(f({{1},{-1}}) = [true,true,2,2,2]),
  assert(f({{1,2},{-1,-2}}) = unknown),
  true);

/*!
\endhtmlonly
*/
