/* Oliver Kullmann, 12.2.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/tests/HittingClauseSets.mac
  \brief Tests for basic conflict-combinatorics-functionality

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/tests/HittingClauseSets.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac");
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac");
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac");
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac");
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac");

kill(f)$


/* **************
   * Generators *
   **************
*/

okltest_sasg2000(FF) := block([F : FF[2]],
  assert(FF[1] = {1,2,3,4}),
  assert(not treehittingcsp(F)),
  assert(literalregularcsp(F)),
  assert(min_literal_degree_cs(F) = 3),
  assert(max_variable_frequency_cs(F) = 3/4),
  assert(abd_parameters(F) = [4,3]),
  true)$

okltest_brouwer1999(FF) := block([F : FF[2]],
  assert(FF[1] = setn(8)),
  assert(not treehittingcsp(F)),
  assert(literalregularcsp(F)),
  assert(min_literal_degree_cs(F) = 10),
  assert(max_variable_frequency_cs(F) = 5/8),
  assert(abd_parameters(F) = [8,5]),
  true)$


/* *********
   * Tests *
   *********
*/

okltest_hittingcsp(f) := block(
  assert(f({}) = true),
  assert(f({{}}) = true),
  assert(f({{1}}) = true),
  assert(f({{},{1}}) = false),
  for n : 2 thru 4 do
    assert(f(musatd2(n)[2]) = if n <= 3 then true else false),
  assert(f({{1},{-1}}) = true),
  for n : 0 thru 4 do
    assert(f(uniform_usat_hitting_min(n))),
  for n : 0 thru 4 do
    assert(f(uniform_usat_hitting_max(n))),
  true)$


okltest_treehittingcsp(f) := block(
  assert(f({}) = false),
  assert(f({{}}) = true),
  assert(f({{1}}) = false),
  assert(f({{},{1}}) = false),
  assert(f({{1},{-1}}) = true),
  for n : 2 thru 4 do
    assert(f(musatd2(n)[2]) = if n <= 2 then true else false),
  for n : 0 thru 4 do
    assert(f(uniform_usat_hitting_min(n))),
  for n : 0 thru 4 do
    assert(f(uniform_usat_hitting_max(n))),
  true)$

/*!
\endhtmlonly
*/
