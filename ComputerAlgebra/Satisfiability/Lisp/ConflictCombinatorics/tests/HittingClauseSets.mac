/* Oliver Kullmann, 12.2.2008 (Swansea) */
/* Copyright 2008, 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/tests/HittingClauseSets.mac
  \brief Tests for basic conflict-combinatorics-functionality

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/tests/HittingClauseSets.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Deficiency2.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Symmetries/Symmetries.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/DP-Reductions.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Symmetries/Symmetries.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Substitutions.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/DeficiencyOne.mac")$

kill(f)$

/* *******************
   * Representations *
   *******************
*/

okltest_hitting_cls_rep_st(f) := block(
  assert(f([true]) = [{},{{}}]),
  assert(f([false]) = [{{}}, {}]),
  assert(f([1,[false],[false]]) = [{{1},{-1}},{}]),
  assert(f([1,[false],[true]]) = [{{1}},{{1}}]),
  assert(f([1,[true],[false]]) = [{{-1}},{{-1}}]),
  assert(f([1,[true],[true]]) = [{},{{-1},{1}}]),
  true)$


/* **************
   * Generators *
   **************
*/

okltest_over_full_hitting_fcs(f) := (
  for m : 2 thru 5 do block([FF : f(m)],
    assert(FF[1] = setn(m+1)),
    assert(ncl_fcs(FF) = 2^m+2),
    assert(check_hitting_nsing_def(FF[2]) = [2^m-m+1]),
    assert(min_variable_degree_cs(FF[2]) = 2^m)
  ),
  true)$

okltest_smusat_horn_cs(f) := (
  assert(f(0) = {{}}),
  assert(f(1) = {{-trv([])},{trv([])}}),
  assert(f(2) = {{-trv([]),-trv([2])},{-trv([]),trv([2])},{trv([])}}),
  assert(f(3) = {{-trv([]),-trv([2]),-trv([2,2])},{-trv([]),-trv([2]),trv([2,2])},{-trv([]),trv([2])},{trv([])}}),
  assert(okltest_smusat_horn_stdfcs(buildq([f], lambda([k], cs2fcs((ev(f(k), trv(L):=length(L)+1, trv)))))) = true),
  true)$

okltest_smusat_horn_stdfcl(f) := (
  assert(f(0) = [[],[{}]]),
  assert(f(1) = [[1],[{1},{-1}]]),
  assert(f(2) = [[1,2],[{1},{-1,2},{-1,-2}]]),
  assert(f(3) = [[1,2,3],[{1},{-1,2},{-1,-2,3},{-1,-2,-3}]]),
  true)$

okltest_smusat_horn_stdfcs(f) := (
  assert(f(0) = [{},{{}}]),
  assert(f(1) = [{1},{{1},{-1}}]),
  assert(f(2) = [{1,2},{{1},{-1,2},{-1,-2}}]),
  assert(f(3) = [{1,2,3},{{1},{-1,2},{-1,-2,3},{-1,-2,-3}}]),
  true)$

okltest_nvar_smusat_horn(f) := (
  for k : 0 thru 5 do block([n : f(k)],
    assert(n = nvar_cs(smusat_horn_cs(k))),
    assert(n = nvar_fcl(smusat_horn_stdfcl(k)))
  ),
  true)$

okltest_ncl_smusat_horn(f) := (
  for k : 0 thru 5 do block([c : f(k)],
    assert(c = ncl_cs(smusat_horn_cs(k))),
    assert(c = ncl_fcl(smusat_horn_stdfcl(k)))
  ),
  true)$

okltest_ncl_list_smusat_horn(f) := (
  for k : 0 thru 5 do block([cl : f(k)],
    assert(cl = ncl_list_cs(smusat_horn_cs(k))),
    assert(cl = ncl_list_fcl(smusat_horn_stdfcl(k)))
  ),
  true)$

okltest_nlitocc_smusat_horn(f) := (
  for k : 0 thru 5 do block([l : f(k)],
    assert(l = nlitocc_cs(smusat_horn_cs(k))),
    assert(l = nlitocc_fcl(smusat_horn_stdfcl(k)))
  ),
  true)$

okltest_sasg2000(FF) := block([F : FF[2]],
  assert(FF[1] = {1,2,3,4}),
  assert(not treehittingcsp(F)),
  assert(literalregularcsp(F)),
  assert(min_literal_degree_cs(F) = 3),
  assert(max_variable_frequency_cs(F) = 3/4),
  assert(abd_parameters(F) = [4,3]),
  true)$

okltest_brouwer1999(FF) := block([F : FF[2]],
  assert(FF[1] = setn(8)),
  assert(not treehittingcsp(F)),
  assert(literalregularcsp(F)),
  assert(min_literal_degree_cs(F) = 10),
  assert(max_variable_frequency_cs(F) = 5/8),
  assert(abd_parameters(F) = [8,5]),
  true)$

okltest_max_var_hitting_def(f) := (
  for k : 2 thru 5 do ([FF : f(k)],
    assert(hittingcsp(FF[2]) = true),
    assert(sat_decision_hitting_cs(FF[2]) = false),
    assert(redsingdpp(FF[2]) = true),
    assert(deficiency_fcs(FF) = k),
    assert(nvar_f(FF) = 3 + (k-2) * 4)
  ),
  true)$

okltest_nvar_max_var_hitting_def(f) := (
  assert(f(2) = 3),
  assert(f(3) = 7),
  for k : 2 thru 5 do ([FF : f(k)],
    assert(f(k) = nvar_f(max_var_hitting_def(k)))),
  true)$

okltest_all_hitting_extensions_k_fcs(f) := block([X],
  assert(f(X,-1) = {}),
  assert(f(X,0) = X),
  assert(f({},1) = {}),
  assert(f({[{},{}]},1) = {}),
  assert(f({[{},{{}}]},1) = { [{1},{{-1},{1}}] }),
  assert(f({[{},{{}}]},2) = { [{1,2},{{-1,-2},{-1,2},{1}}], [{1,2},{{1,-2},{1,2},{-1}}], [{1,2},{{1,-2},{-1,-2},{2}}] }),
  for k : 0 thru if oklib_test_level=0 then 2 else 3 do 
   block([H : f({[{},{{}}]},k), S : all_smusat1_cs(k)],
    assert(map(fcs2cs,lunion(map(all_renamings_fcs,H))) = setify(S))
  ),
  true)$

okltest_all_reps_hitting_extensions_k_fcs(f) := block([X],
  assert(f(X,-1) = {}),
  assert(f({},0) = {}),
  assert(f({[{},{}]},0) = {[{},{}]}),
  assert(f({ [{1},{{1},{-1}}], [{2},{{2},{-2}}] },0) = {[{1},{{1},{-1}}]}),
  assert(f({},1) = {}),
  assert(f({[{},{}]},1) = {}),
  assert(f({[{},{{}}]},1) = { [{1},{{-1},{1}}] }),
  assert(f({[{},{{}}]},2) = { [{1,2},{{-1,-2},{1,-2},{2}}] }),
  true)$


/* *********
   * Tests *
   *********
*/

okltest_sat_decision_hitting_cs(f) := (
  assert(f({}) = true),
  assert(f({{}}) = false),
  assert(f({{1}}) = true),
  for n : 0 thru 3 do
    assert(f(full_fcs(n)[2]) = false),
  true)$

okltest_hittingcsp(f) := block(
  assert(f({}) = true),
  assert(f({{}}) = true),
  assert(f({{1}}) = true),
  assert(f({{},{1}}) = false),
  for n : 2 thru 4 do
    assert(f(musatd2_fcs(n)[2]) = if n <= 3 then true else false),
  assert(f({{1},{-1}}) = true),
  for n : 0 thru 4 do
    assert(f(uniform_usat_hitting_min(n))),
  for n : 0 thru 4 do
    assert(f(uniform_usat_hitting_max(n))),
  true)$

okltest_hitting1rcsp(f) := block(
  assert(f({}) = true),
  assert(f({{}}) = true),
  assert(f({{1}}) = true),
  assert(f({{},{1}}) = false),
  for n : 2 thru 4 do
    assert(f(musatd2_fcs(n)[2]) = false),
  assert(f({{1},{-1}}) = true),
  for n : 0 thru 4 do
    assert(f(uniform_usat_hitting_min(n)) = true),
  for n : 0 thru 4 do
    assert(f(uniform_usat_hitting_max(n)) = if n<=1 then true else false),
  true)$

okltest_treehittingcsp(f) := block(
  assert(f({}) = false),
  assert(f({{}}) = true),
  assert(f({{1}}) = false),
  assert(f({{},{1}}) = false),
  assert(f({{1},{-1}}) = true),
  for n : 2 thru 4 do
    assert(f(musatd2_fcs(n)[2]) = if n <= 2 then true else false),
  for n : 0 thru 4 do
    assert(f(uniform_usat_hitting_min(n))),
  for n : 0 thru 4 do
    assert(f(uniform_usat_hitting_max(n))),
  true)$

okltest_check_hitting_nsing_def(f) := block(
  assert(f({{}}) = [1]),
  assert(f({}) = []),
  assert(f({{1},{-1}}) = []),
  assert(f(musatd2_fcs(2)[2]) = [2]),
  assert(f(musatd2_fcs(3)[2]) = [2]),
  assert(f(musatd2_fcs(4)[2]) = []),
  assert(f({{1,2,3},{-1,2,3},{1,-2,3},{-1,-2,3},{1,-3},{-1,-3}}) = [3]),
  assert(f({{1,2,3},{-1,2,3},{1,-2,4}, {-1,-2,4},{2,-3,5},{2,-3,-5},{-2,-4,5},{-2,-4,-5}}) = [3]),
  assert(f({{1,2,3},{1,-2,3},{1,2,-3},{1,-2,-3},{-1,4,5},{-1,-4,5},{-1,4,-5},{-1,-4,-5}}) = [3]),
  assert(f(full_fcs(3)[2]) = [5]),
  true)$


/* **************************************************************
   * Necessary conditions for unsatisfiable hitting clause-sets *
   **************************************************************
*/

okltest_all_cld_uhit(f) := block(
  assert(f(1,0,0) = {{[0,1]}}),
  assert(f(1,0,1) = {}),
  assert(f(1,0,2) = {}),
  assert(f(1,1,0) = {{[1,2]}}),
  assert(f(1,1,1) = {}),
  assert(f(1,1,2) = {}),
  assert(f(1,2,0) = {}),
  assert(f(1,2,1) = {{[1,1],[2,2]}}),
  assert(f(1,2,2) = {}),
  assert(f(1,2,3) = {}),
  assert(f(1,3,0) = {}),
  assert(f(1,3,1) = {}),
  true)$

okltest_all_cld_uhit_minvd(f) := block(
  assert(f(6,4,9) = {{[2,2],[4,8]}}),
  assert(f(6,5,9) = {{[1,1],[3,1],[4,3],[5,6]},{[1,1],[3,2],[5,8]},{[1,1],[4,6],[5,4]},{[2,3],[5,8]}}),
  true)$

okltest_all_cld_uhit_maxminvd(f) := block(
  assert(f(6,4) = {{[2,2],[4,8]}}),
  assert(f(6,5) = {{[1,1],[3,1],[4,3],[5,6]},{[1,1],[3,2],[5,8]},{[1,1],[4,6],[5,4]},{[2,3],[5,8]}}),
  true)$

/* ****************************************************
   * Representing clause-sets via hitting clause-sets *
   ****************************************************
*/

okltest_hitting_decomposition_m_cs(f) := block(
  assert(f({}) = []),
  assert(f({{}}) = [{{}}]),
  assert(f({{1}}) = [{{1}}]),
  assert(f({{1},{-1}}) = [{{1},{-1}}]),
  assert(setify(f({{1},{-1},{}})) = {{{1},{-1}},{{}}}),
  assert(setify(f({{-1},{1},{2},{-2},{3},{-3}})) = {{{-1},{1}},{{-2},{2}},{{-3},{3}}}),
  true)$


/* ********************************************************************
   * Finding hitting clause-sets with given deficiency "sporadically" *
   ********************************************************************
*/

okltest_all_hittinginstances_def(f) := block(
  assert(f({},0) = {{}}),
  assert(f({},1) = {}),
  assert(f({{}},0) = {}),
  assert(f({{}},1) = {{{}}}),
  assert(f({{1}},0) = {{},{{1}}}),
  assert(f({{1}},1) = {{{}}}),
  assert(f({{1}},2) = {}),
  assert(f({{1},{-1}},0) = {}),
  assert(f({{1},{-1}},1) = {{{}},{{1},{-1}}}),
  assert(f({{1},{-1}},2) = {}),
  assert(f({{1},{-1}},3) = {}),
  true)$

okltest_all_hitting_DP_reductions_def(f) := block(
 [List : [
   [[{},0], {{}}], 
   [[{},1], {}], 
   [[{{}},0], {}],
   [[{{}},1], {{{}}}],
   [[{{1}},0], {{},{{1}}}],
   [[{{1}},1], {}],
   [[{{1}},2], {}],
   [[{{1},{-1}},0], {}],
   [[{{1},{-1}},1], {{{}},{{1},{-1}}}],
   [[{{1},{-1}},2], {}],
   [[full_fcs(2)[2],0], {}],
   [[full_fcs(2)[2],1], {{{}},{{1},{-1}},{{2},{-2}}}],
   [[full_fcs(2)[2],2], {full_fcs(2)[2]}],
   [[full_fcs(2)[2],3], {}]
  ]],
  for case in List do
    assert(apply(f,case[1]) = case[2]),
  for case in List do block(
   [presult, result],
    result : apply(f,endcons('presult,case[1])),
    assert(result = case[2]),
    assert(result = presult)
  ),
  for case in List do block(
   [presult, pc, result, n : nvar_cs(case[1][1])],
    result : apply(f,append(case[1],['presult,'pc])),
    assert(result = case[2]),
    assert(result = presult),
    assert(pc = if n = 0 then 0 else n!)
  ),
  for case in List do block(
   [presult, pc, result, n : nvar_cs(case[1][1])],
    pc : 0,
    result : apply(f,append(case[1],['presult,'pc])),
    assert(result = case[2]),
    assert(result = presult),
    assert(pc = if n = 0 then 0 else n!)
  ),
  for case in List do block(
   [presult, pc, result, F : case[1][1], k : case[1][2], n, def],
    n : nvar_cs(F),
    def : deficiency_cs(F),
    pc : n! + 1,
    result : apply(f,append(case[1],['presult,'pc])),
    assert(result = if def = k then {F} else {}),
    assert(result = presult),
    assert(pc = n!)
  ),
  true)$


/* ********************************************************************
   * Finding hitting clause-sets with given deficiency systematically *
   ********************************************************************
*/

okltest_derived_hitting_cs(f) := block([presult,result,F],
  result : f({},0,'presult), assert(result = {{}}), assert(presult = result),
  result : f({},1,'presult), assert(result = {}), assert(presult = result),
  result : f({{}},0,'presult), assert(result = {{{}}}), assert(presult = result),
  result : f({{}},1,'presult), assert(result = {}), assert(presult = result),
  result : f({{1}},0,'presult), assert(result = {{{1}}}), assert(presult = result),
  result : f({{1}},1,'presult), assert(result = {}), assert(presult = result),
  result : f({{1},{-1}},0,'presult), assert(result = {{{1},{-1}}}), assert(presult = result),
  result : f({{1},{-1}},1,'presult), assert(result = {}), assert(presult = result),
  result : f({{1},{-1}},2,'presult), assert(result = {}), assert(presult = result),
  F : full_fcs(2)[2],
  result : f(F,0,'presult),
  assert(result = {F}),
  assert(presult = result),
  result : f(F,1,'presult), assert(result = {{{1},{-1,2},{-1,-2}},{{-1},{1,2},{1,-2}},{{2},{-2,1},{-2,-1}},{{-2},{2,1},{2,-1}}}), assert(presult = result),
  result : f(F,2,'presult), assert(result = {}), assert(presult = result),
  true)$

okltest_derived_hitting_cs_pred(f) := block([presult,result,P],
  okltest_derived_hitting_cs(buildq([f],lambda([F,k,r],
    f(F,k,r,buildq([F],lambda([G],is(nvar_cs(G) = nvar_cs(F)))))))),
  P : lambda([F], true),
  for n : 0 thru (if oklib_test_level = 0 then 2 else 3) do block(
   [F : full_fcs(n)[2]],
    result : f(F,2^n-1,'presult,P),
    assert(result = {{{}}}),
    assert(presult = result)
  ),
  true)$

okltest_derived_hitting_cs_nsing(f) := block([presult,result,F],
  F : full_fcs(2)[2],
  result : f(F,0,'presult),
  assert(result = {F}),
  assert(presult = result),
  result : f(F,1,'presult),
  assert(result = {}),
  assert(presult = result),
  true)$

okltest_all_derived_hitting_cs_nsing_isoelim(f) := block([repo,M:{},FF],
  repo : sm2hm({}),
  FF : [{},{}],
  assert(f(FF[2],repo) = 1),
  M : adjoin([fcs_identifier(FF), {FF}],M),
  assert(hm2sm(repo) = M),
  assert(f(FF[2],repo) = 0),
  assert(hm2sm(repo) = M),
  FF : [{},{{}}],
  assert(f(FF[2],repo) = 1),
  M : adjoin([fcs_identifier(FF), {FF}],M),
  assert(hm2sm(repo) = M),
  assert(f(FF[2],repo) = 0),
  assert(hm2sm(repo) = M),
  FF : full_fcs(2),
  assert(f(FF[2],repo) = 1),
  M : adjoin([fcs_identifier(FF), {FF}],M),
  assert(hm2sm(repo) = M),
  assert(f(FF[2],repo) = 0),
  assert(hm2sm(repo) = M),
  assert(length(M) = 3),
  repo : sm2hm({}),
  FF : full_fcs(3),
  assert(f(FF[2],repo) = 1 + 3 + 1 + 1),
  assert(analyse_isorepo_def(repo) = [[2,1],[3,3],[4,1],[5,1]]),
  true)$

okltest_all_unsinghitting_def(f) := block([presult,result],
  result : f(0,0,'presult), assert(result = {}), assert(presult = result),
  result : f(0,1,'presult), assert(result = {}), assert(presult = result),
  result : f(1,0,'presult), assert(result = {{{}}}), assert(presult = result),
  result : f(2,0,'presult), assert(result = {}), assert(presult = result),
  result : f(2,1,'presult), assert(result = {}), assert(presult = result),
  result : f(2,2,'presult), assert(result = {full_fcs(2)[2]}), assert(presult = result),
  result : f(5,3,'presult), assert(result = {full_fcs(3)[2]}), assert(presult = result),
  result : f(2,3,'presult), 
  assert(length(result) = 1),
  assert(is_isomorphic_cs(single_element(result), musatd2_fcs(3)[2])),
  assert(subsetp(result,presult) = true),
  result : f(4,3,'presult),
  assert(length(result) = 1), assert(presult = result),
  assert(is_isomorphic_cs(single_element(result), {{-3,-2,-1},{-3,-2,1},{-3,-1,2},{-2,-1,3},{-2,1,3},{-1,2,3},{1,2}})),
  true)$

okltest_all_unsinghitting(f) := block([hash],
  assert(f(2,'hash) = 1),
  assert(analyse_isorepo_def(hash) = [[2,1]]),
  assert(f(3,'hash) = 1 + 3 + 1 + 1),
  assert(analyse_isorepo_def(hash) = [[2,1],[3,3],[4,1],[5,1]]),
  true)$


/*!
\endhtmlonly
*/
