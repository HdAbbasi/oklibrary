/* Oliver Kullmann, 12.2.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/tests/HittingClauseSets.mac
  \brief Tests for basic conflict-combinatorics-functionality

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/tests/HittingClauseSets.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$


kill(f)$

/* *******************
   * Representations *
   *******************
*/

okltest_hitting_cls_rep_st(f) := block(
  assert(f([true]) = [{},{{}}]),
  assert(f([false]) = [{{}}, {}]),
  assert(f([1,[false],[false]]) = [{{1},{-1}},{}]),
  assert(f([1,[false],[true]]) = [{{1}},{{1}}]),
  assert(f([1,[true],[false]]) = [{{-1}},{{-1}}]),
  assert(f([1,[true],[true]]) = [{},{{-1},{1}}]),
  true)$


/* **************
   * Generators *
   **************
*/

okltest_sasg2000(FF) := block([F : FF[2]],
  assert(FF[1] = {1,2,3,4}),
  assert(not treehittingcsp(F)),
  assert(literalregularcsp(F)),
  assert(min_literal_degree_cs(F) = 3),
  assert(max_variable_frequency_cs(F) = 3/4),
  assert(abd_parameters(F) = [4,3]),
  true)$

okltest_brouwer1999(FF) := block([F : FF[2]],
  assert(FF[1] = setn(8)),
  assert(not treehittingcsp(F)),
  assert(literalregularcsp(F)),
  assert(min_literal_degree_cs(F) = 10),
  assert(max_variable_frequency_cs(F) = 5/8),
  assert(abd_parameters(F) = [8,5]),
  true)$


/* *********
   * Tests *
   *********
*/

okltest_sat_decision_hitting_cs(f) := (
  assert(f({}) = true),
  assert(f({{}}) = false),
  assert(f({{1}}) = true),
  for n : 0 thru 3 do
    assert(f(full_fcs(n)[2]) = false),
  true)$

okltest_hittingcsp(f) := block(
  assert(f({}) = true),
  assert(f({{}}) = true),
  assert(f({{1}}) = true),
  assert(f({{},{1}}) = false),
  for n : 2 thru 4 do
    assert(f(musatd2(n)[2]) = if n <= 3 then true else false),
  assert(f({{1},{-1}}) = true),
  for n : 0 thru 4 do
    assert(f(uniform_usat_hitting_min(n))),
  for n : 0 thru 4 do
    assert(f(uniform_usat_hitting_max(n))),
  true)$


okltest_treehittingcsp(f) := block(
  assert(f({}) = false),
  assert(f({{}}) = true),
  assert(f({{1}}) = false),
  assert(f({{},{1}}) = false),
  assert(f({{1},{-1}}) = true),
  for n : 2 thru 4 do
    assert(f(musatd2(n)[2]) = if n <= 2 then true else false),
  for n : 0 thru 4 do
    assert(f(uniform_usat_hitting_min(n))),
  for n : 0 thru 4 do
    assert(f(uniform_usat_hitting_max(n))),
  true)$

okltest_check_hitting_nsing_def(f) := block(
  assert(f({{}}) = [1]),
  assert(f({}) = []),
  assert(f({{1},{-1}}) = []),
  assert(f(musatd2(2)[2]) = [2]),
  assert(f(musatd2(3)[2]) = [2]),
  assert(f(musatd2(4)[2]) = []),
  assert(f({{1,2,3},{-1,2,3},{1,-2,3},{-1,-2,3},{1,-3},{-1,-3}}) = [3]),
  assert(f({{1,2,3},{-1,2,3},{1,-2,4}, {-1,-2,4},{2,-3,5},{2,-3,-5},{-2,-4,5},{-2,-4,-5}}) = [3]),
  assert(f({{1,2,3},{1,-2,3},{1,2,-3},{1,-2,-3},{-1,4,5},{-1,-4,5},{-1,4,-5},{-1,-4,-5}}) = [3]),
  assert(f(full_fcs(3)[2]) = [5]),
  true)$


/* ****************************************************
   * Representing clause-sets via hitting clause-sets *
   ****************************************************
*/

okltest_hitting_decomposition_m_cs(f) := block(
  assert(f({}) = []),
  assert(f({{}}) = [{{}}]),
  assert(f({{1}}) = [{{1}}]),
  assert(f({{1},{-1}}) = [{{1},{-1}}]),
  assert(setify(f({{1},{-1},{}})) = {{{1},{-1}},{{}}}),
  assert(setify(f({{-1},{1},{2},{-2},{3},{-3}})) = {{{-1},{1}},{{-2},{2}},{{-3},{3}}}),
  true)$


/* ***********************************************
   * Hitting clause-sets with bounded deficiency *
   ***********************************************
*/

okltest_all_hittinginstances_def(f) := block(
  assert(f({},0) = {{}}),
  assert(f({},1) = {}),
  assert(f({{}},0) = {}),
  assert(f({{}},1) = {{{}}}),
  assert(f({{1}},0) = {{},{{1}}}),
  assert(f({{1}},1) = {{{}}}),
  assert(f({{1}},2) = {}),
  assert(f({{1},{-1}},0) = {}),
  assert(f({{1},{-1}},1) = {{{}},{{1},{-1}}}),
  assert(f({{1},{-1}},2) = {}),
  assert(f({{1},{-1}},3) = {}),
  true)$

/*!
\endhtmlonly
*/
