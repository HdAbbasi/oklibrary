/* Oliver Kullmann, 27.12.2009 (Swansea) */
/* Copyright 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Primality/RBases.mac
  \brief Removing redundancies from the set of prime implicates by reductions

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Primality/RBases.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/PartialAssignments.mac")$

/*
  See "Bases of the set of prime clauses relative to some reduction" in
  Satisfiability/Lisp/Primality/plans/general.hpp for the definitions.
*/

/* ************
   * Sampling *
   ************
*/

/* Computing some red_-base of clause-set F according to the definition,
   that is, a minimal subset S of F such that for all clauses D in F - S
   we have {} in red_(phi_D * F).
   The only assumption on red_ (besides always red_(F) sat-equivalent to F)
   is that if {} in red_(F) then also {} in red_(F') for any super-set F'
   of F (so that once a clause is classified as unremovable, then this
   doesn't change after further removals).
*/

rand_rbase_cs(F,red_) := block([F0 : F], 
  for C in random_permutation(F0) do
   block([S : disjoin(C,F)],
    if every_s(
      lambda([D], elementp({}, red_(apply_pa_cs(comp_sl(D), S)))),
      setdifference(F0,S))
    then F : S
 ),
 return(F))$

/* Remarks:
   If red_(F) = F then rand_rbase_cs(F,red_) is subsumption elimination for F.
   If red_(F) = generalised_ucp_cs(F,inf) then rand_rbase_cs(F,red_) returns
   a choice of an irredundant core of F.
*/

/*!
\endhtmlonly
*/
