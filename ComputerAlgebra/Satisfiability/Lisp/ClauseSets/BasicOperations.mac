/* Oliver Kullmann, 29.11.2007 (Swansea) */
/* Copyright 2007, 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac
  \brief Functions for basic operations with clause-sets

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$

/* Guaranteed to be included: */
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/PartialAssignments.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Substitutions.mac")$


/* **************************
   * Variables and literals *
   **************************
*/

/*
 A "boolean variable" might be any expression x, such that "- x" is defined
 and yields a different object, and such that abs(x) = x.
*/

v_p(v) := 
 is(is(v>0)=true) and 
 is(is(-v<0)=true) and 
 is(is(-v#v)=true) and 
 is(is(abs(v)=v)=true) and 
 is(is(abs(-v)=v)=true) and 
 is(is(--v=v)=true)$

/* 
 A "boolean literal" might be a boolean variable "v" or a negated boolean
 variable "-v".
*/

l_p(x) := 
 is(is(--x=x)=true) and 
 if is(x>0)=true then 
   is(is(abs(x)=x)=true) and v_p(x) 
 elseif is(x<0)=true then 
   is(is(abs(x)=-x)=true) and v_p(-x) 
 else false$

/* The underlying variable of a literal: */
var_l(x) := abs(x)$

/* The sign of a literal in {-1,+1}: */
sign_l(x) := block([s : sign(x)], if s = pos then 1 else -1)$

/* The literals for a set of variables, V can also be a set of literals,
   and then we obtain the closure under complementation (and also
   a list of literals is possible): */
literals_v(V) := block([L : listify(V)], setify(append(L,-L)))$


/* ***********
   * Clauses *
   ***********
*/

/* complementation of a set of literals */
comp_sl(L) := map("-", L)$

/*
 A "boolean clause" is a set C of boolean literals such that
 C and comp_sl(C) have empty intersection.
*/

c_p(C) := setp(C) and every(l_p,C) and emptyp(intersection(C,comp_sl(C)))$

/* Tests whether two literal sets contain a clashing literal. */
clashp(A,B) := not emptyp(intersection(A,comp_sl(B)))$

/* The set of variables in a clause: */
var_c(C) := map(var_l, C)$
/* The set of variables in a set of literals: */
var_sl(C) := map(var_l, C)$

/* The positive resp. negative literals in a clause (can also be applied to 
   a set of literals): */
pospart_c(C) := subset(C, lambda([x], is(x>0)))$
negpart_c(C) := subset(C, lambda([x], is(x<0)))$


/* ***************
   * Clause-sets *
   ***************
*/

/*
 A "boolean clause-set" (cs) is a set of boolean clauses.
*/
cs_p(F) := setp(F) and every(c_p,F)$
/*
 An "ordered boolean clause-set" (ocs) is a repetition-free list
 of boolean clauses.
*/
ocs_p(F) := listnorep_p(F) and every(c_p,F)$
/*
 A "boolean clause-list" (cl) is a list of boolean clauses.
*/
cl_p(F) := listp(F) and every(c_p,F)$

/*
 A "formal boolean clause-set" is a pair [V, F], where V is a set of
 variables, while F is a clause-set using only variables from V
 (that is, with var_cs(F) <= V).
*/
fcs_p(FF) := listp(FF) and is(length(FF) = 2) and setp(FF[1]) and
  every(v_p,FF[1]) and cs_p(FF[2]) and subsetp(var_cs(FF[2]),FF[1])$
/*
 An "ordered formal boolean clause-set" is a pair [V,F], where V is
 a repetition-free list of variables, while F is an ordered clause-set
 using only variables from V.
*/
ofcs_p(FF) := listp(FF) and is(length(FF) = 2) and listnorep_p(FF[1])
  and every(v_p,FF[1]) and ocs_p(FF[2]) and subsetp(var_ocs(FF[2]),setify(FF[1]))$
/*
 An "formal boolean clause-list" is a pair [V,F], where V is
 a repetition-free list of variables, while F is a clause-list
 using only variables from V.
*/
fcl_p(FF) := listp(FF) and is(length(FF) = 2) and listnorep_p(FF[1])
  and every(v_p,FF[1]) and cl_p(FF[2]) and subsetp(var_cl(FF[2]),setify(FF[1]))$

/* Extracting the set of variables: */

var_cs(F) := var_sl(apply(union,listify(F)))$
var_cl(F) := var_sl(apply(union,F))$
var_ocs(F) := var_cl(F)$
/* RENAME: var_fcs */
var_cs_f(FF) := FF[1]$
var_fcs(FF) := FF[1]$
var_fcl(FF) := setify(FF[1])$
var_ofcs(FF) := var_fcl(FF)$

/* Extracting the repetition-free list of variables in a clause-list
   (in the order as they occur): */
ovar_cl(F) := block([L : [], V : {}],
  for C in F do block([vc : var_c(C), nv],
    nv : setdifference(vc, V),
    L : append(L,listify(nv)),
    V : union(V,nv)
  ),
  return(L))$


/* Promotions: */

/* RENAME: cs2fcs */
cs_to_fcs(F) := [var_cs(F), F]$
cs2fcs(F) := [var_cs(F), F]$
cl2fcl(F) := [listify(var_cl(F)), F]$
ocs2ofcs(F) := [ovar_cl(F), F]$
/* So a clause-list is promoted to a formal clause-list by taking the
   order of variables as given by the given order on the variables,
   while for an ordered clause-set we take the order of the
   variables as found in the clause-list (this is more expensive).
*/

cs2ocs(F) := listify(F)$
cs2cl(F) := listify(F)$
fcs2ofcs(FF) := map(listify,FF)$
fcs2fcl(FF) := map(listify,FF)$


/* Downcasts: */

ocs2cs(F) := setify(F)$
cl2cs(F) := setify(F)$
fcl2fcs(FF) := map(setify,FF)$
ofcs2fcs(FF) := map(setify,FF)$

/* RENAME: fcs2cs */
clauses_f(FF) := FF[2]$
fcs2cs(FF) := second(FF)$
ofcs2ocs(FF) := second(FF)$
fcl2cl(FF) := second(FF)$


/* ***********************************
   * Selecting parts of a clause-set *
   ***********************************
*/

/* All clauses of length k of a clause-set. */
/* RENAME: scs_k */
scls_k(F,k) := subset(F, lambda([C], is(length(C) = k)))$
scs_k(F,k) := scls_k(F,k)$

/* All clauses of a clause-set containing a literal. */
/* RENAME: scs_l */
scls_l(F,l) := subset(F, lambda([C], elementp(l,C)))$
scs_l(F,l) := scls_l(F,l)$

/* All clauses of a clause-set containing a variable. 
*/
/* RENAME: scs_v */
scls_v(F,v) := subset(F, lambda([C], elementp(v,var_c(C))))$
scs_v(F,v) := scls_v(F,v)$
/* More generally, all clauses containing some of a given set of variables.
   This is denoted by "F_V" in articles.
 */
/* RENAME: scs_V */
scls_V(F,V) := subset(F, lambda([C], not disjointp(var_c(C),V)))$
scs_V(F,V) := scls_V(F,V)$
socs_V(F,V) := sublist(F, lambda([C], not disjointp(var_c(C),V)))$


/* **************************
   * Crossing out variables *
   **************************
*/

apply_sv_c(V,C) := setdifference(C,literals_v(V))$

apply_sv_cs(V,F) := block([L : literals_v(V)],
  setify(map(lambda([C],setdifference(C,L)),listify(F))))$
apply_sv_cl(V,F) := block([L : literals_v(V)],
  map(lambda([C],setdifference(C,L)),F))$

restrict_V_cs(F,V) := block([L : literals_v(V)],
  disjoin({},setify(map(lambda([C],intersection(C,L)),listify(F)))))$
restrict_V_cl(F,V) := block([L : literals_v(V)],
  delete({},map(lambda([C],intersection(C,L)),F)))$


/* *****************************************
   * Printing clause-sets in Dimacs-format *
   *****************************************
*/

/* output a literal */
dimacs_l_string(x) := sconcat(x," ")$

/* output a clause */
dimacs_c_string(C) := xreduce(sconcat, map(dimacs_l_string, C))$

/* print a string without line-breaks */
print_nlb(s) := block([old_linel : linel],
  linel : slength(s) + 1,
  print(s),
  linel : old_linel)$

/* Print a formal clause-set in Dimacs format: */
/* RENAME: print_fcs */
print_cs_f(comment,FF) := (
  print_nlb(sconcat("c ", comment)),
  print_nlb(sconcat("p cnf ", nvar_f(FF), " ", length(clauses_f(FF)))),
  for C in clauses_f(FF) do print_nlb(sconcat(dimacs_c_string(C), "0"))
)$
print_fcs(comment,FF) := print_cs_f(comment,FF)$

/* Output formal clause-set FF to file n: */
/* RENAME: output_fcs */
output_cs_f(comment,FF,n) := with_stdout(n, print_cs_f(comment,FF))$
output_fcs(comment,FF,n) := with_stdout(n, print_fcs(comment,FF))$

/* Print a formal clause-set in Dimacs format, together with a map
   which explains the variable meaning: */
/* RENAME: print_fcs_v */
print_cs_f_v(comment,FF,varlist) := (
  print_nlb(sconcat("c ", comment)),
  for i from 1 thru length(varlist) do print_nlb(sconcat("c ", i, " : ", varlist[i])),
  print_nlb(sconcat("p cnf ", nvar_f(FF), " ", length(clauses_f(FF)))),
  for C in clauses_f(FF) do print_nlb(sconcat(dimacs_c_string(C), "0"))
)$
print_fcs_v(comment,FF,varlist) := print_cs_f_v(comment,FF,varlist)$
print_fcl_v(comment,FF,varlist) := (
  print_nlb(sconcat("c ", comment)),
  block([i:1], for v in varlist do (
    print_nlb(sconcat("c ", i, " : ", v)), i : i + 1
  )),
  print_nlb(sconcat("p cnf ", length(FF[1]), " ", length(FF[2]))),
  for C in FF[2] do print_nlb(sconcat(dimacs_c_string(C), "0"))
)$

/* Output formal clause-set FF to file n, using a variable-list: */
/* RENAME: output_fcs_v */
output_cs_f_v(comment,FF,n,varlist) := 
  with_stdout(n, print_cs_f_v(comment,FF,varlist))$
output_fcl_v(comment,FF,n,varlist) := 
  with_stdout(n, print_fcl_v(comment,FF,varlist))$


/*!
\endhtmlonly
*/
