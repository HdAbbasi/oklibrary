/* Oliver Kullmann, 4.4.2008 (Swansea) */
/* Copyright 2008, 2009, 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac
  \brief Functions for basic statistics for clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* ******************
   * Basic measures *
   ******************
*/

/* Counting the number of variables: */

nvar_cs(F) := length(var_cs(F))$
nvar_ocs(F) := nvar_cl(F)$
nvar_cl(F) := length(var_cl(F))$
/* RENAME: nvar_fcs(FF) */
nvar_f(FF) := length(FF[1])$
nvar_fcs(FF) := length(FF[1])$
nvar_fcl(FF) := length(FF[1])$
nvar_ofcs(FF) := length(FF[1])$


/* Number of clauses of a formal clause-set: */
/* RENAME: ncl_fcs */
ncl_f(FF) := length(clauses_f(FF))$
ncl_fcs(FF) := length(FF[2])$
ncl_fcl(FF) := length(FF[2])$
/* Number of clauses of a clause-set: */
ncl_cs(F) := length(F)$
ncl_cl(F) := length(F)$

/* Number of literal occurrences in a clause-set: */
nlitocc_cl(F) := sum_l(map(length,listify(F)))$
nlitocc_cs(F) := nlitocc_cl(F)$
nlitocc_fcl(FF) := nlitocc_cl(FF[2])$
nlitocc_fcs(FF) := nlitocc_cl(FF[2])$

/* The list of pairs
   [occurring clause-lengths, number of clauses of this length],
   sorted by ascending clause-length.
*/
ncl_list_fcl(FF) := block([n : nvar_fcl(FF), counts, res : []],
  counts : make_array(fixnum, n+1),
  for C in FF[2] do block([l : length(C)],
    counts[l] : counts[l] + 1),
  for i : 0 thru n do
    if counts[i] # 0 then res : cons([i, counts[i]], res),
  return(reverse(res)))$
ncl_list_fcs(FF) := ncl_list_fcl(FF)$
ncl_list_cl(F) := block(
 [n : nvar_cl(F), counts, res : []],
  counts : make_array(fixnum, n+1),
  for C in F do block([l : length(C)],
    counts[l] : counts[l] + 1),
  for i : 0 thru n do
    if counts[i] # 0 then res : cons([i, counts[i]], res),
  return(reverse(res)))$
ncl_list_cs(F) := ncl_list_cl(F)$

/* Maximal clause-length of a clause-set: */
max_rank_cs(F) := block([m : -1],
  for C in F do if length(C) > m then m : length(C),
  return(m))$
max_rank_fcs(FF) := max_rank_cs(FF[2])$
/* Minimal clause-length of a clause-set: */
min_rank_cs(F) := block([m : inf],
  for C in F do if length(C) < m then m : length(C),
  return(m))$
min_rank_fcs(FF) := min_rank_cs(FF[2])$
/* Tests whether a clause-set F is uniform: */
uniformcsp(F) := is(max_rank_cs(F) <= min_rank_cs(F))$


/* *******************
   * Literal degrees *
   *******************
*/

/* The degree of a literal in a clause-set: */
literal_degree_cs(F,l) := length(scls_l(F,l))$

/* The literal-degrees of a clause-set, as hash-map, considering
   only occurring literals: */
literal_degrees_cs(F) := block([h : sm2hm({})],
 for C in F do for x in C do enter_new_occurrence(h,x),
 return(h))$
literal_degrees_cl(F) := block([h : sm2hm({})],
 for C in F do for x in C do enter_new_occurrence(h,x),
 return(h))$
/* The literal-degrees of a formal clause-set, as hash-map, considering
   all literals (w.r.t. the variables given): */
/* RENAME: literal_degrees_fcs */
all_literal_degrees_fcs(FF) := block(
 [h : literal_degrees_cs(FF[2]), L : literals_v(FF[1])],
  for x in L do if ev_hm(h,x) = false then set_hm(h,x,0),
  return(h))$
literal_degrees_fcs(FF) := all_literal_degrees_fcs(FF)$

/* Returns the pairs of literal and literal degree of a clause-set F in
   descending order of the literal degree using the given order
   on literals  for equal counts. */
ordered_literal_degrees_cs(F) :=
   sort(listify(hm2sm(literal_degrees_cs(F))),
        lambda([P1,P2], is(second(P1) > second(P2))))$
ordered_literal_degrees_fcs(F) :=
   sort(listify(hm2sm(literal_degrees_fcs(F))),
        lambda([P1,P2], is(second(P1) > second(P2))))$

/* Minimal literal-degree of a clause-set. */
min_literal_degree_cs(F) :=
  lmin(map(second,hm2sm(literal_degrees_cs(F))))$
min_literal_degree_fcs(FF) := min_literal_degree_cs(FF[2])$
/* maximal literal-degree of a clause-set */
max_literal_degree_cs(F) :=
  lmax(map(second,hm2sm(literal_degrees_cs(F))))$
max_literal_degree_fcs(FF) := max_literal_degree_cs(FF[2])$
/* Also returns a literal of minimal degree (if there is a literal);
   in case of ties, the return value is implementation-defined. */
min_literal_degree_l_cs(F) := if F = {} or F = {{}} then [inf,0] else block(
  [D : hm2sm(literal_degrees_cs(F)),
   optl : 0, mind : inf],
  for m in D do block([d : m[2]],
    if d < mind then (mind : d, optl : m[1])),
  return([mind, optl]))$
/* Also returns a literal of maximal degree (if there is a literal);
   in case of ties, the return value is implementation-defined. */
max_literal_degree_l_cs(F) := if F = {} or F = {{}} then [minf,0] else block(
  [D : hm2sm(literal_degrees_cs(F)),
   optl : 0, maxd : minf],
  for m in D do block([d : m[2]],
    if d > maxd then (maxd : d, optl : m[1])),
  return([maxd, optl]))$
max_literal_degree_l_cl(F) :=
 if emptyp(F) or F = [{}] then [minf,0] else block(
  [D : hm2sm(literal_degrees_cl(F)),
   optl : 0, maxd : minf],
  for m in D do block([d : m[2]],
    if d > maxd then (maxd : d, optl : m[1])),
  return([maxd, optl]))$

/* Tests whether a clause-set is literal-regular (all literals have the same
   degree): */
literalregularcsp(F) := is(min_literal_degree_cs(F) >= max_literal_degree_cs(F))$
/* The average literal degree of a formal clause-set: */
mean_literal_degree_fcs(FF) := nlitocc_fcs(FF) / (2 * nvar_f(FF))$
/* Literal frequencies in various forms: */
min_literal_frequency_cs(F) := min_literal_degree_cs(F) / ncl_cs(F)$
max_literal_frequency_cs(F) := max_literal_degree_cs(F) / ncl_cs(F)$
mean_literal_frequency_cs(FF) := mean_literal_degree_cs(FF) / ncl_f(FF)$

/* The list of pairs
   [occurring literal-degree, number of literals of this degree],
   sorted by ascending literal_degree.
*/
literal_degrees_list_fcs(FF) := block(
 [litdeg : hm2sm(all_literal_degrees_fcs(FF)), h : sm2hm({})],
  for p in litdeg do
    enter_new_occurrence(h,p[2]),
  get_distribution(h))$


/* OK; ???? what is this doing ? What is "tb" ? */
/* Would also need renaming: "_fcs". */
max_literal_degree_tb(FF,l,d,n) := block([max_ld1, max_ld2, max_l1, max_l2],
      [max_l1, max_ld1] : max_literal_degree_tb_l_cs(apply_pa_f({l}, FF),d,n),
      [max_l2, max_ld2] : max_literal_degree_tb_l_cs(apply_pa_f({-l}, FF),d,n),
      [if max_ld1 > max_ld2 then max_l1 else max_l2, max_ld1 + max_ld2])$
/* Returns the pair of literal and literal degree for the literal
   with the maximum degree in the given clause set, where look-aheads are made
   when a tie occurs for the maximum degree, looking up to d levels deeper
   and considering up to n tied literals. */
/* OK: "look-ahead" ??? a definition is needed. */
/* Would also need renaming: "_fcs". */
max_literal_degree_tb_l_cs(FF,d,n) := block(
  [old : ordered_literal_degrees_cs(FF[2])],
  if emptyp(old) then [0,0]
  else if d < 1 then old[1]
  else
    xreduce(lambda([a,b], if second(a) > second(b) then a else b),
      map(lambda([c], max_literal_degree_tb(FF, first(c),d-1,n)),
        block([ml : sublist(rest(old),lambda([a],is(second(a)=second(first(old)))))],
          take_elements(min(n,length(ml)),ml))),
    first(old)))$


/* ********************
   * Variable degrees *
   ********************
*/

/* The degree of a variable in a clause-set: */
variable_degree_cs(F,v) := length(scls_v(F,v))$

/* The variable-degrees of a clause-set, as hash-map: */
variable_degrees_cs(F) := block([h : sm2hm({})],
 for C in F do for v in var_c(C) do enter_new_occurrence(h,v),
 return(h))$

/* The minimal variable-degree of a clause-set: */
min_variable_degree_cs(F) := lmin(map(second,hm2sm(variable_degrees_cs(F))))$
min_variable_degree_fcs(FF) := min_variable_degree_cs(FF[2])$
/* Also returns a variable of minimal degree, i.e., returns a pair
   [min-degree, var], chosing the first in the internal order, while returning
   [inf,0] in case there is no variable:
*/
min_variable_degree_v_cs(F) := if F = {} or F = {{}} then [inf,0] else block(
  [D : hm2sm(variable_degrees_cs(F)), optv : 0, mind : inf],
  for m in D do block([d : m[2]], if d < mind then (mind : d, optv : m[1])),
  return([mind, optv]))$

/* The maximal min-var-degree of a set (or list) of clause-sets: */
max_min_var_deg_cs(SF) := lmax(map(min_variable_degree_cs,SF))$
max_variable_degree_fcs(FF) := max_variable_degree_cs(FF[2])$

/* The maximal variable-degree of a clause-set: */
max_variable_degree_cs(F) :=
  lmax(map(second,hm2sm(variable_degrees_cs(F))))$
/* Also returns a variable of maximal degree (if there is a variable). */
max_variable_degree_v_cs(F) := if F = {} or F = {{}} then [minf,0] else block(
  [D : hm2sm(variable_degrees_cs(F)),
   optv : 0, maxd : minf],
  for m in D do block([d : m[2]],
    if d > maxd then (maxd : d, optv : m[1])),
  return([maxd, optv]))$

/* The minimal max-var-degree of a set (or list) of clause-sets. */
min_max_var_deg_cs(SF) := lmin(map(max_variable_degree_cs,SF))$

/* Tests whether a clause-set is variable-regular (all variables have the same
   degree). */
variableregularcsp(F) := is(min_variable_degree_cs(F) >= max_variable_degree_cs(F))$

/* The average variable-degree of a formal clause-set: */
mean_variable_degree_cs(FF) := 2 * mean_literal_degree_fcs(FF)$
/* literal frequencies in various forms: */
min_variable_frequency_cs(F) := min_variable_degree_cs(F) / ncl_cs(F)$
max_variable_frequency_cs(F) := max_variable_degree_cs(F) / ncl_cs(F)$
mean_variable_frequency_cs(FF) := mean_variable_degree_fcs(FF) / ncl_f(FF)$

/* The list of pairs
   [occurring variable-degree, number of variables of this degree],
   sorted by ascending variable_degree.
*/
variable_degrees_list_cs(F) := block(
 [vardeg : hm2sm(variable_degrees_cs(F)), h : sm2hm({})],
  for p in vardeg do
    enter_new_occurrence(h,p[2]),
  get_distribution(h))$

/* The set of full variables of a non-empty clause-set: */
full_variables_cs(F) := lintersection(map(var_c,F))$
/* The set of full variables of a formal clause-set: */
full_variables_fcs(FF) := if emptyp(FF[2]) then FF[1] else
 full_variables_cs(FF[2])$
/* Predicate for deciding whether a clause-set contains a full variable: */
full_var_csp(F) := if emptyp(F) then false else
  not emptyp(full_variables_cs(F))$
full_var_fcsp(FF) := not emptyp(full_variables_fcs(FF))$

/* The set of singular or pure variables of a clause-set: */
singularpure_variables_cs(F) :=
  setify(map(var_l,
      map(first,
          sublist(ordered_literal_degrees_fcs(cs2fcs(F)),
                  lambda([P], is(P[2]<=1))))))$
/* Now just the singular variables (without pure variables): */
singular_variables_cs(F) := singular_variables_fcs(cs2fcs(F))$
singular_variables_fcs(FF) := block([h : literal_degrees_fcs(FF)],
  subset(FF[1],
         lambda([v], block([D : {ev_hm(h,v), ev_hm(h,-v)}],
                            elementp(1,D) and not elementp(0,D)))))$
/* 1-singular variables: */
onesingular_variables_fcs(FF) := block([h : literal_degrees_fcs(FF)],
  subset(FF[1], lambda([v], is(ev_hm(h,v)=1 and ev_hm(h,-v)=1))))$
onesingular_variables_cs(F) := onesingular_variables_fcs(cs2fcs(F))$
/* Non-1-singular variables: */
nononesingular_variables_fcs(FF) := block([h : literal_degrees_fcs(FF)],
  subset(FF[1], lambda([v], block([D:{ev_hm(h,v),ev_hm(h,-v)}],
    not elementp(0,D) and elementp(1,D) and length(D)>=2))))$
nononesingular_variables_cs(F) := nononesingular_variables_fcs(cs2fcs(F))$


/* For a clause-set F, compute the list of variables sorted by ascending
   products pos-occurrences*neg-occurrences (for equal products use the
   built-in order of variables):
*/
sortvar_prodocc_cs(F) := block([V : var_cs(F)],
 h : literal_degrees_fcs([V,F]),
 map(first,
     sort(map(lambda([v], [v,ev_hm(h,v)*ev_hm(h,-v)]), listify(V)),
          lambda([p1,p2], is(second(p1) < second(p2))))))$


/* **********************
   * Numbers of clauses *
   **********************
*/

/* The number of full clauses in a formal clause-list: */
nfcl_fcl(FF) := block([n : length(FF[1])],
  length(sublist_indices(FF[2], lambda([C], is(length(C)=n)))))$
/* The number of full clauses in a clause-set: */
nfcl_cs(F) := nfcl_fcl(cs2fcl(F))$


/* The weighted number of clauses, using weights 2^(-k) for clause-length k.
   This is also the expected number of falsified clauses, under a random
   assignment (with uniform distribution). And for a hitting clause-set,
   it is the probability that a random assignment falsifies the clause.
*/
weighted_ncl_2n_cs(F) := block([L : listify(F)],
 return(sum(2^(-length(L[i])),i,1,length(L))))$
weighted_ncl_2n_fcs(FF) := weighted_ncl_2n_cs(FF[2])$


/* **************************
   * Summarising statistics *
   **************************
*/

/* Gathers main statistics for a clause-set: */
statistics_cs(F) := block([nl : 0, maxr : -1, minr : inf],
 for C in F do block([l : length(C)],
  nl : nl + l, if l > maxr then maxr : l, if l < minr then minr : l),
 return([nvar_cs(F), ncl_cs(F), nl, maxr, minr]))$
/* We have statistics_cs(F) =
  [nvar_cs(F),ncl_cs(F),nlitocc_cs(F),max_rank_cs(F),min_rank_cs(F)]
*/
/* Gathers main statistics for a formal clause-set: */
statistics_fcs(FF) := block([nl : 0, maxr : -1, minr : inf],
 for C in FF[2] do block([l : length(C)],
  nl : nl + l, if l > maxr then maxr : l, if l < minr then minr : l),
 return([nvar_fcs(FF), ncl_fcs(FF), nl, maxr, minr]))$
/* We have statistics_fcs(F) =
  [nvar_fcs(FF),ncl_fcs(FF),nlitocc_fcs(FF),max_rank_fcs(FF),min_rank_fcs(FF)]
*/

extended_statistics_fcs(FF) := block(
 [nl : 0, minr : inf, maxr : -1, n : nvar_cs(FF[2]),
  cl_count, cl_list : [],
  v_count : sm2hm({}), l_count : sm2hm({})],
  cl_count : make_array(fixnum, n+1),
  for C in FF[2] do block([l : length(C)],
    nl : nl + l,
    if l > maxr then maxr : l, if l < minr then minr : l,
    cl_count[l] : cl_count[l] + 1,
    for x in C do (
      enter_new_occurrence(v_count, var_l(x)),
      enter_new_occurrence(l_count, x)
  )),
  for i : 0 thru n do
    if cl_count[i] # 0 then cl_list : cons([i, cl_count[i]], cl_list),
  return([
    length(FF[1]),length(FF[2]),nl,minr,maxr,reverse(cl_list),
    lmin(map(second,hm2sm(l_count))),
    lmax(map(second,hm2sm(l_count))),
    lmin(map(second,hm2sm(v_count))),
    lmax(map(second,hm2sm(v_count)))
  ]))$
/* We have extended_statistics_fcs(FF) =
  [nvar_fcs(FF),ncl_fcs(FF),nlitocc_fcs(FF),min_rank_fcs(FF),max_rank_fcs(FF),
   ncl_list_fcs(FF),min_literal_degree_fcs(FF),max_literal_degree_fcs(FF),
   min_variable_degree_fcs(FF),max_variable_degree_fcs(FF)]
*/

/*!
\endhtmlonly
*/
