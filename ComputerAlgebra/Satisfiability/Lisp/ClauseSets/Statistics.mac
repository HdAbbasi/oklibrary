/* Oliver Kullmann, 4.4.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac
  \brief Functions for basic statistics for clause-sets

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$


/* ******************
   * Basic measures *
   ******************
*/

/* Counting the number of variables: */

nvar_cs(F) := length(var_cs(F))$
nvar_ocs(F) := nvar_cl(F)$
nvar_cl(F) := length(var_cl(F))$
/* RENAME: nvar_fcs(FF) */
nvar_f(FF) := length(FF[1])$
nvar_fcs(FF) := length(FF[1])$
nvar_fcl(FF) := length(FF[1])$
nvar_ofcs(FF) := length(FF[1])$


/* number of clauses of a formal clause-set */
/* RENAME: ncl_fcs */
ncl_f(FF) := length(clauses_f(FF))$
ncl_fcs(FF) := length(FF[2])$
/* number of clauses of a clause-set */
ncl_cs(F) := length(F)$

/* number of literal occurrences in a clause-set */
nlitocc(F) := block([s : 0],
 for C in F do s : s + length(C), return(s))$
 
/* The list of pairs
   [occurring clause-lengths, number of clauses of this length],
   sorted by ascending clause-length.
*/
ncl_list_f(FF) := block(
 [n : nvar_f(FF), counts, res : []],
  counts : make_array(fixnum, n+1),
  for C in FF[2] do block([l : length(C)],
    counts[l] : counts[l] + 1),
  for i : 0 thru n do
    if counts[i] # 0 then res : endcons([i, counts[i]], res),
  return(res))$

/* maximal clause-length of a clause-set */
max_rank_cs(F) := block([m : -1],
  for C in F do if length(C) > m then m : length(C),
  return(m))$
/* minimal clause-length of a clause-set */
min_rank_cs(F) := block([m : inf],
  for C in F do if length(C) < m then m : length(C),
  return(m))$
/* Tests whether a clause-set F is uniform */
uniformcsp(F) := is(max_rank_cs(F) <= min_rank_cs(F))$

/* Gathers main statistics for a clause-set */
statistics_cs(F) := 
  [nvar_cs(F),ncl_cs(F),nlitocc(F),max_rank_cs(F),min_rank_cs(F)]$
/* Gathers main statistics for a formal clause-set */
statistics_fcs(FF) := 
  [nvar_f(FF),ncl_f(FF),nlitocc(FF[2]),max_rank_cs(FF[2]),min_rank_cs(FF[2])]$


/* *******************
   * Literal degrees *
   *******************
*/

/* The degree of a literal in a clause-set. */
literal_degree_cs(F,l) := length(scls_l(F,l))$

/* The literal-degrees of a clause-set, as hash-map, considering
   only occurring literals. */
literal_degrees_cs(F) := block([h : sm2hm({})],
 for C in F do
  for x in C do enter_new_occurrence(h,x),
 return(h))$
/* The literal-degrees of a formal clause-set, as hash-map, considering
   all occurring literals. */
all_literal_degrees_fcs(FF) := block(
 [h : literal_degrees_cs(FF[2]), L : literals_v(FF[1])],
  for x in L do if ev_hm(h,x) = false then set_hm(h,x,0),
  return(h))$

/* Returns the pairs of literal and literal degree of a clause-set F in 
   descending order of the literal degree using the given order
   on literals  for equal counts. */
/* This assumes that the Maxima "sort" is a stable sort (which actually is
   not specified?). */
ordered_literal_degrees_cs(F) := 
   sort(listify(hm2sm(literal_degrees_cs(F))),
        lambda([P1,P2], is(second(P1) > second(P2))))$

/* Minimal literal-degree of a clause-set. */
min_literal_degree_cs(F) := 
  lmin(map(lambda([A],second(A)),hm2sm(literal_degrees_cs(F))))$
/* maximal literal-degree of a clause-set */
max_literal_degree_cs(F) := 
  lmax(map(lambda([A],second(A)),hm2sm(literal_degrees_cs(F))))$
/* Also returns a literal of minimal degree (if there is a literal);
   in case of ties, the return value is implementation-defined. */
min_literal_degree_l_cs(F) := if F = {} or F = {{}} then [inf,0] else block(
  [D : hm2sm(literal_degrees_cs(F)),  
   optl : 0, mind : inf],
  for m in D do block([d : m[2]],
    if d < mind then (mind : d, optl : m[1])),
  return([mind, optl]))$
/* Also returns a literal of maximal degree (if there is a literal);
   in case of ties, the return value is implementation-defined. */
max_literal_degree_l_cs(F) := if F = {} or F = {{}} then [minf,0] else block(
  [D : hm2sm(literal_degrees_cs(F)),  
   optl : 0, maxd : minf],
  for m in D do block([d : m[2]],
    if d > maxd then (maxd : d, optl : m[1])),
  return([maxd, optl]))$

/* Tests whether a clause-set is literal-regular (all literals have the same
   degree) */
literalregularcsp(F) := is(min_literal_degree_cs(F) >= max_literal_degree_cs(F))$
/* the average literal degree of a formal clause-set */
mean_literal_degree_fcs(FF) := nlitocc(FF[2]) / (2 * nvar_f(FF))$
/* literal frequencies in various forms: */
min_literal_frequency_cs(F) := min_literal_degree_cs(F) / ncl_cs(F)$
max_literal_frequency_cs(F) := max_literal_degree_cs(F) / ncl_cs(F)$
mean_literal_frequency_cs(FF) := mean_literal_degree_cs(FF) / ncl_f(FF)$

/* The list of pairs
   [occurring literal-degree, number of literals of this degree],
   sorted by ascending literal_degree.
*/
literal_degrees_list_fcs(FF) := block(
 [litdeg : hm2sm(all_literal_degrees_fcs(FF)), h : sm2hm({})],
  for p in litdeg do
    enter_new_occurrence(h,p[2]),
  get_distribution(h))$


/* OK; ???? what is this doing ? What is "tb" ? */
max_literal_degree_tb(FF,l,d,n) := block([max_ld1, max_ld2, max_l1, max_l2],
      [max_l1, max_ld1] : max_literal_degree_tb_l_cs(apply_pa_f({l}, FF),d,n),
      [max_l2, max_ld2] : max_literal_degree_tb_l_cs(apply_pa_f({-l}, FF),d,n),
      [if max_ld1 > max_ld2 then max_l1 else max_l2, max_ld1 + max_ld2])$
/* Returns the pair of literal and literal degree for the literal
   with the maximum degree in the given clause set, where look-aheads are made
   when a tie occurs for the maximum degree, looking up to d levels deeper 
   and considering up to n tied literals. */
/* OK: "look-ahead" ??? a definition is needed. */
max_literal_degree_tb_l_cs(FF,d,n) := block(
  [old : ordered_literal_degrees_cs(FF[2])],
  if emptyp(old) then [0,0]
  else if d < 1 then old[1]
  else
    xreduce(lambda([a,b], if second(a) > second(b) then a else b), 
      map(lambda([c], max_literal_degree_tb(FF, first(c),d-1,n)), 
        block([ml : sublist(rest(old),lambda([a],is(second(a)=second(first(old)))))],
          take_elements(min(n,length(ml)),ml))),
    first(old)))$


/* ********************
   * Variable degrees *
   ********************
*/

/* The degree of a variable in a clause-set: */
variable_degree_cs(F,v) := length(scls_v(F,v))$

/* The variable-degrees of a clause-set, as hash-map. */
variable_degrees_cs(F) := block([h : sm2hm({})],
 for C in F do
  for v in var_c(C) do enter_new_occurrence(h,v),
 return(h))$

/* The minimal variable-degree of a clause-set: */
min_variable_degree_cs(F) := 
  lmin(map(lambda([A],second(A)),hm2sm(variable_degrees_cs(F))))$
/* The maximal min-var-degree of a set (or list) of clause-sets. */
max_min_var_deg_cs(SF) := lmax(map(min_variable_degree_cs,SF))$

/* The maximal variable-degree of a clause-set: */
max_variable_degree_cs(F) := 
  lmax(map(lambda([A],second(A)),hm2sm(variable_degrees_cs(F))))$
/* Also returns a variable of maximal degree (if there is a variable). */
max_variable_degree_v_cs(F) := if F = {} or F = {{}} then [minf,0] else block(
  [D : hm2sm(variable_degrees_cs(F)),  
   optv : 0, maxd : minf],
  for m in D do block([d : m[2]],
    if d > maxd then (maxd : d, optv : m[1])),
  return([maxd, optv]))$
/* The minimal max-var-degree of a set (or list) of clause-sets. */
min_max_var_deg_cs(SF) := lmin(map(max_variable_degree_cs,SF))$

/* Tests whether a clause-set is variable-regular (all variables have the same
   degree). */
variableregularcsp(F) := is(min_variable_degree_cs(F) >= max_variable_degree_cs(F))$

/* The average variable-degree of a formal clause-set: */
mean_variable_degree_cs(FF) := 2 * mean_literal_degree_fcs(FF)$
/* literal frequencies in various forms: */
min_variable_frequency_cs(F) := min_variable_degree_cs(F) / ncl_cs(F)$
max_variable_frequency_cs(F) := max_variable_degree_cs(F) / ncl_cs(F)$
mean_variable_frequency_cs(FF) := mean_variable_degree_fcs(FF) / ncl_f(FF)$

/* The list of pairs
   [occurring variable-degree, number of variables of this degree],
   sorted by ascending variable_degree.
*/
variable_degrees_list_cs(F) := block(
 [vardeg : hm2sm(variable_degrees_cs(F)), h : sm2hm({})],
  for p in vardeg do
    enter_new_occurrence(h,p[2]),
  get_distribution(h))$


/* *******************************
   * Weighted numbers of clauses *
   *******************************
*/

/* The weighted number of clauses, using weights 2^(-k) for clause-length k.
   This is also the expected number of falsified clauses, under a random
   assignment (with uniform distribution). And for a hitting clause-set,
   it is the probability that a random assignment falsifies the clause.
*/
weighted_ncl_2n_cs(F) := block([L : listify(F)],
 return(sum(2^(-length(L[i])),i,1,length(L))))$
weighted_ncl_2n_fcs(FF) := weighted_ncl_2n_cs(FF[2])$


/*!
\endhtmlonly
*/
