/* Oliver Kullmann, 27.7.2007 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Substitutions.mac
  \brief Applying substitutions to literals, clauses and clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Substitutions.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$


/* ********************************************
   * Substitutions for variables and literals *
   ********************************************
*/

/* Replace literal x via hash table h (by another literal),
   where h maps var_l(x) to some literal; if var_l(x) is
   not in the domain of the hash-map, then false resp. -false
   is returned. */
substitute_l(x,h) := if x > 0 then ev_hm(h,x) else -ev_hm(h,-x)$


/* *****************************
   * Substitutions for clauses *
   *****************************
*/

/* Substitute literals in clause C via hash table h;
   possibly a pseudo-clause with clashing literals is created. */
substitute_c(C,h) :=
 map(
  lambda([x],block([y:substitute_l(x,h)],
    if elementp(y,{false,-false}) then x else y)),
  C)$
/* Here it is required that h covers all variables in C: */
substitutetotal_c(C,h) :=
 map(lambda([x],substitute_l(x,h)), C)$


/* *********************************
   * Substitutions for clause-sets *
   *********************************
*/

/* Substitute literals in clause-set F via hash table h (possibly
   creating pseudo-clauses with clashing literals). */
substitute_cs(F,h) := map(lambda([C],substitute_c(C,h)), F)$
substitutetotal_cs(F,h) := map(lambda([C],substitutetotal_c(C,h)), F)$
substitute_cl(F,h) := map(lambda([C],substitute_c(C,h)), F)$
substitutetotal_cl(F,h) := map(lambda([C],substitutetotal_c(C,h)), F)$

/* Given a list of literals of the same size as the set
   of variables of a formal clause-set, rename the formal
   clause-set, using the natural correspondence given by
   the given order on the set of variables.
*/
rename_fcs(FF,L) := block(
 [V : listify(FF[1]), h],
  h : osm2hm(map("[",V,L)),
  [setify(abs(L)), substitutetotal_cs(FF[2],h)])$
rename_cs(F,L) := fcs2cs(rename_fcs(cs2fcs(F),L))$
rename_fcl(FF,L) := block(
 [V : FF[1], h],
  h : osm2hm(map("[",V,L)),
  [abs(L), substitutetotal_cl(FF[2],h)])$

/* The set of all renamings without flipping signs or introducing new
   variables of a formal clause-set FF:
*/
all_var_renamings_fcs(FF) :=
 map(lambda([L], rename_fcs(FF,L)), permutations(FF[1]))$
/* The set of all sign-flippings of a formal clause-set FF: */
all_sign_flippings_fcs(FF) := block([V : listify(FF[1])],
 map(lambda([L], rename_fcs(FF,L*V)), all_tuples({-1,1},length(V))))$
/* The set of all renamings without introducing new variables
   of a formal clause-set FF:
*/
all_renamings_fcs(FF) := lunion(map(all_sign_flippings_fcs, all_var_renamings_fcs(FF)))$


/* Translating variable names of a formal clause-set into natural numbers;
   outputs a pair consisting of the translated formal clause-set and
   the list of old variable names (positions corresponding to new
   variable-numbers) */
standardise_fcs(FF) := block([L : create_list(i,i,1,nvar_f(FF))],
 [rename_fcs(FF,L), listify(var_cs_f(FF))])$
standardise_fcl(FF) := block([L : create_list(i,i,1,length(FF[1]))],
 [rename_fcl(FF,L), FF[1]])$


/* Make a list of formal clause-sets variable-disjoint, using
   variables from 1 on. Returns a pair consisting of the renamed
   list and the total number n of variables (so the next free
   variable is n+1). */
make_vardisjoint_fcs(LFF) := block([index : 0, result : []],
  for FF in LFF do block([n : nvar_f(FF)],
    result : endcons(rename_fcs(FF,create_list(index + i, i,1,n)), result),
    index : index + n),
  return([result, index]))$

/*!
\endhtmlonly
*/
