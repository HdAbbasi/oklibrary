/* Oliver Kullmann, 15.12.2007 (Swansea) */
/* Copyright 2007 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Reductions.mac
  \brief Functions for reductions on clause-sets

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Reductions.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$


/* the r_k reductions */

/* input a clause-set F and level k, output r_k(F) */
generalised_ucp(F,k) := block([V : var_cs(F), break : false],
 if k = 0 then if has_empty_element(F) then return({{}}) else return(F),
 for v in V unless break do for eps in {-1,1} unless break do
  if generalised_ucp(apply_pa({eps * v}, F), k-1) = {{}} then
    (F : apply_pa({-eps * v}, F), break : true),
 if break then return(generalised_ucp(F,k)) else return(F))$


/*!
\endhtmlonly
*/
