/* Oliver Kullmann, 5.7.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ClauseSets/tests/PartialAssignments.mac
  \brief Tests for operations with partial assignments

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/PartialAssignments.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/tests/BasicOperations.mac")$

kill(f)$

/* ****************************************
   * The notion of a "partial assignment" *
   ****************************************
*/

okltest_pa_p(f) := block(
  assert(f({}) = true),
  okltest_c_p(f))$

okltest_all_pass(f) := (
  assert(f({}) = {{}}),
  assert(f({1}) = {{},{1},{-1}}),
  assert(f({1,2}) = {{},{-1},{1},{-2},{2},{-1,-2},{-1,2},{1,-2},{1,2}}),
  for n : 0 thru 3 do
    assert(length(f(setn(n))) = 3^n),
  true)$

okltest_all_pass_n(f) := block(
  assert(f({},-1) = {}),
  assert(f({1},-1) = {}),
  assert(f({},0) = {{}}),
  assert(f({1},0) = {{}}),
  assert(f({},1) = {}),
  assert(f({1},1) = {{-1},{1}}),
  for n : 0 thru 3 do
    assert(f(setn(n),n) = full_fcs(n)[2]),
  if oklib_test_level = 0 then return(true),
  block([oklib_test_level : oklib_test_level - 1],
    okltest_all_pass(buildq([f],lambda([V],apply(union,create_list(f(V,n),n,0,length(V))))))),
  true)$

okltest_all_tass(f) := block(
  assert(f({}) = {{}}),
  assert(f({1}) = {{-1},{1}}),
  assert(f({1,2}) = {{-1,-2},{-1,2},{1,-2},{1,2}}),
  for n : 3 thru 5 do
    assert(length(f(setn(n))) = 2^n),
  true)$


/* ********************
   * Basic operations *
   ********************
*/

okltest_var_pa(f) := (
  assert(f({}) = {}),
  assert(f({1}) = {1}),
  assert(f({1,-3,4,-5}) = {1,3,4,5}),
  true)$

okltest_restr_c_pa(f) := (
  assert(f({},{}) = {}),
  assert(f({},{1}) = {}),
  assert(f({1},{1}) = {}),
  assert(f({-1},{1}) = {}),
  assert(f({2},{1}) = {2}),
  assert(f({-1,-2},{2}) = {-1}),
  true)$

okltest_compo_pass(f) := (
  assert(f({},{}) = {}),
  assert(f({},{1}) = {1}),
  assert(f({1},{}) = {1}),
  assert(f({1},{-1}) = {-1}),
  assert(f({-1},{1}) = {1}),
  assert(f({1,2,3},{1,-2,-4}) = {1,-2,3,-4}),
  true)$

/* ********************************
   * Applying partial assignments *
   ********************************
*/

okltest_apply_pa_cs(f) := (
  assert(f({},{}) = {}),
  assert(f({},{{}}) = {{}}),
  assert(f({},{{1},{2}}) = {{1},{2}}),
  assert(f({3},{{1},{2}}) = {{1},{2}}),
  assert(f({1},{{1},{2}}) = {{2}}),
  assert(f({-1},{{1},{2}}) = {{},{2}}),
  assert(f({2},{{1},{2}}) = {{1}}),
  assert(f({-2},{{1},{2}}) = {{},{1}}),
  assert(f({1,2},{{1},{2}}) = {}),
  assert(f({-1,2},{{1},{2}}) = {{}}),
  assert(f({-1,-2},{{1},{2}}) = {{}}),
  true)$

okltest_apply_pa_fcs(f) := (
  assert(f({},[{},{}]) = [{},{}]),
  assert(f({},[{},{{}}]) = [{},{{}}]),
  assert(f({},[{1},{}]) = [{1},{}]),
  assert(f({},[{1},{{}}]) = [{1},{{}}]),
  assert(f({1},[{},{}]) = [{},{}]),
  assert(f({1},[{},{{}}]) = [{},{{}}]),
  assert(f({1},[{1},{}]) = [{},{}]),
  assert(f({1},[{1},{{}}]) = [{},{{}}]),
  true)$


/* *********************************
   * Analysing partial assignments *
   *********************************
*/

okltest_sat_pac_p(f) := (
  assert(f({},{}) = false),
  assert(f({1},{}) = false),
  assert(f({-1},{}) = false),
  assert(f({1},{2}) = false),
  assert(f({1},{1}) = true),
  assert(f({1},{-1}) = false),
  assert(f({1},{1,2}) = true),
  assert(f({1},{-1,2}) = false),
  true)$

okltest_sat_pafcs_p(f) := (
  assert(f({},[{},{}]) = true),
  assert(f({},[{1},{}]) = true),
  assert(f({},[{},{{}}]) = false),
  assert(f({1},[{1},{{1}}]) = true),
  assert(f({1},[{1},{{-1}}]) = false),
  true)$

okltest_sat_pa_cs(f) := (
  assert(f({},{}) = {}),
  assert(f({},{{}}) = {}),
  assert(f({},{{1}}) = {}),
  assert(f({1},{}) = {}),
  assert(f({1},{{}}) = {}),
  assert(f({1},{{2}}) = {}),
  assert(f({1},{{1}}) = {{1}}),
  assert(f({1},{{-1}}) = {}),
  assert(f({1,-2},{{},{1,2,3},{-1,3},{-2,3},{2,4}}) = {{1,2,3},{-2,3}}),
  true)$

okltest_waut_pacs_p(f) := (
  assert(f({},{}) = true),
  assert(f({},{{}}) = true),
  assert(f({},{{1}}) = true),
  assert(f({},{{1},{-1}}) = true),
  assert(f({1},{}) = true),
  assert(f({1},{{}}) = true),
  assert(f({1},{{2}}) = true),
  assert(f({1},{{1}}) = true),
  assert(f({1},{{-1}}) = false),
  assert(f({1},{{-1,2},{}}) = false),
  assert(f({1},{{1,2},{}}) = true),
  assert(f({1},{{-1,2},{2}}) = true),
  true)$

okltest_aut_pacs_p(f) := (
  assert(f({},{}) = true),
  assert(f({},{{}}) = true),
  assert(f({},{{1}}) = true),
  assert(f({},{{1},{-1}}) = true),
  assert(f({1},{}) = true),
  assert(f({1},{{}}) = true),
  assert(f({1},{{2}}) = true),
  assert(f({1},{{1}}) = true),
  assert(f({1},{{-1}}) = false),
  assert(f({1},{{-1,2},{}}) = false),
  assert(f({1},{{1,2},{}}) = true),
  assert(f({1},{{-1,2},{2}}) = false),
  true)$

okltest_analyse_pa_cs(f) := (
  assert(f({},{}) = [{},{},{},{}]),
  assert(f({},{{}}) = [{},{{}},{},{}]),
  assert(f({},{{1},{}}) = [{},{{}},{{1}},{}]),
  assert(f({1},{}) = [{},{},{},{}]),
  assert(f({1},{{}}) = [{},{{}},{},{}]),
  assert(f({1},{{1},{-1},{},{2},{-1,2}}) = [{{1}},{{-1},{}},{{2}},{{-1,2}}]),
  true)$

okltest_all_sattass_cs(f) := block(
  assert(f({},{}) = {{}}),
  okltest_all_tass(buildq([f],lambda([V],f({},V)))),
  assert(f({{}},{}) = {}),
  assert(f({{}},{1}) = {}),
  assert(f({{1}},{}) = {}),
  assert(f({{1}},{2}) = {}),
  assert(f({{1}},{1}) = {{1}}),
  assert(f({{1}},{1,2}) = {{1,2},{1,-2}}),
  assert(f({{-1},{1}},{1}) = {}),
  true)$

okltest_all_aut_cs(f) := (
  assert(f({}) = {{}}),
  assert(f({{}}) = {{}}),
  assert(f({{1}}) = {{},{1}}),
  assert(f({{1},{-1}}) = {{}}),
  assert(f({{2},{-1,2}}) = {{},{2},{-1},{-1,2},{1,2}}),
  true)$

/*!
\endhtmlonly
*/
