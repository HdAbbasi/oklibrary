/* Oliver Kullmann, 5.5.2008 (Guangzhou) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ClauseSets/tests/Constructions.mac
  \brief Tests for the basic operations with clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/tests/Constructions.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/tests/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$

kill(f)$


/* **************************
   * Syntactical operations *
   **************************
*/

okltest_comp_cs(f) := (
  assert(f({}) = {}),
  assert(f({{}}) = {{}}),
  assert(f({{1}}) = {{-1}}),
  assert(f({{1,2},{-2,-3}}) = {{-1,-2},{2,3}}),
  true)$

okltest_comp_fcs(f) := block(
  okltest_comp_cs(buildq([f],lambda([F], fcs2cs(f(cs2fcs(F)))))),
  assert(f([{1,2,3},{{1,2},{-1,2}}]) = [{1,2,3},{{-1,-2},{1,-2}}]),
  true)$


/* **********************
   * Logical operations *
   **********************
*/

okltest_or_cs2(f) := (
  assert(f({},{}) = {}),
  assert(f({},{{}}) = {}),
  assert(f({{}},{}) = {}),
  assert(f({{}},{{}}) = {{}}),
  assert(f({{}},{{1}}) = {{1}}),
  assert(f({{1}},{{-1}}) = {}),
  assert(f({{},{1},{-1}},{{},{1},{-1}}) = {{},{1},{-1}}),
  true)$

okltest_or_cs(f) := (
  /* XXX */
  true)$

okltest_dual_cs(f) := (
  assert(f({}) = {{}}),
  assert(f({{}}) = {}),
  assert(f({{1}}) = {{1}}),
  assert(f({{1},{-1}}) = {}),
  assert(f({{1},{2}}) = {{1,2}}),
  assert(f({{1},{-1,2}}) = {{1,2}}),
  assert(f({{1,2},{1,-2}}) = {{1},{1,-2},{1,2}}),
  assert(f({{1,2},{1,-2},{-1,2}}) = {{1,2}}),
  true)$

okltest_dualts_fcl(f) := (
  assert(f([[],[]]) = [[],[{}]]),
  assert(f([[3,1],[]]) = [[3,1],[{}]]),
  assert(f([[],[{}]]) = [[dts(1)],[{dts(1)},{dts(1)}]]),
  assert(f([[3,1],[{}]]) = [[3,1,dts(1)],[{dts(1)},{dts(1)}]]),
  assert(f([[3,1],[{},{1,3},{-3},{-1,-3}]]) = [
   [3,1,dts(1),dts(2),dts(3),dts(4)],
   [{dts(1)}, {-1,-3,dts(2)}, {3,dts(3)}, {1,3,dts(4)},
    {-dts(2),1}, {-dts(2),3}, {-dts(3),-3}, {-dts(4),-3},{-dts(4),-1},
    {dts(1),dts(2),dts(3),dts(4)}
   ]]),
  true)$


/* ****************************
   * Combinatorial operations *
   ****************************
*/

okltest_vardisjoint_sum_fcs(f) := (
  assert(f() = [{},{}]),
  okltest_standardise_fcs(buildq([f],lambda([FF],[f(FF),listify(FF[1])]))),
  assert(f([{3,4},{{-3},{4}}],[{1,3},{{1,3},{-1,-3}}]) = [{1,2,3,4},{{-1},{2},{3,4},{-3,-4}}]),
  true)$

okltest_vardisjoint_full_gluing(f) := (
  assert(f([{},{}],[{},{}]) = [{},{}]),
  assert(f([{},{}],[{},{{}}]) = [{1},{{-1}}]),
  assert(f([{},{{}}],[{},{{}}]) = [{1},{{1},{-1}}]),
  assert(f([{},{}],[{1},{{1},{-1}}]) = [{1,2},{{-2,1},{-2,-1}}]),
  assert(f([{1,2},{{1},{-1,2}}],full_fcs(2)) = [{1,2,3,4,5},{{5,1},{5,-1,2},{-5,3,4},{-5,-3,4},{-5,3,-4},{-5,-3,-4}}]),
  true)$

okltest_full_gluing(f) := (
  assert(f([{},{}],[{},{}]) = [{1},{}]),
  assert(f([{},{{}}],[{},{}]) = [{1},{{1}}]),
  assert(f([{},{}],[{},{{}}]) = [{1},{{-1}}]),
  assert(f([{},{{}}],[{},{{}}]) = [{1},{{1},{-1}}]),
  assert(f([{1},{{1}}],[{1},{{1}}]) = [{1,2},{{1,2},{1,-2}}]),
  assert(f([{1,3},{{1},{3}}],[{1,2},{{1},{2}}]) = [{1,2,3,4},{{1,4},{3,4},{1,-4},{2,-4}}]),
  assert(f([{2,4},{{2},{4}}],[{2,3},{{2},{3}}]) = [{1,2,3,4},{{1,4},{3,4},{1,-4},{2,-4}}]),
  true)$

okltest_partial_gluing(f) := (
  okltest_full_gluing(buildq([f],lambda([FF1,FF2],f(FF1,FF1[2],FF2,FF2[2])))),
  assert(f([{1,2},{{1},{2}}],{{2}},[{2,3},{{2},{3}}],{{3}}) = [{1,2,3,4},{{1},{2,4},{2},{3,-4}}]),
  true)$

/*!
\endhtmlonly
*/
