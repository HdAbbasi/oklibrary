/* Oliver Kullmann, 4.4.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ClauseSets/tests/Statistics.mac
  \brief Tests for the basic operations with clause-sets

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/tests/Statistics.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/tests/HashMaps.mac")$

kill(f)$

/* *******************
   * Literal degrees *
   *******************
*/

okltest_literal_degree_cs(f) := block(
  assert(f({},1) = 0),
  assert(f({{}},1) = 0),
  assert(f({{1}},1) = 1),
  assert(f({{1}},-1) = 0),
  assert(f({{1}},2) = 0),
  assert(f({{1},{-1}},1) = 1),
  assert(f({{1},{-1}},-1) = 1),
  block([F : {{-3,-2,-1},{-3,1},{-2,3},{-1,2},{1,2,3}}],
    for i : 1 thru 3 do (
      assert(f(F,i) = 2),
      assert(f(F,-i) = 2)
  )),
  true)$

okltest_literal_degrees_cs(f) := block(
  assert(eq_hmsm_p(f({}),{}) = true),
  assert(eq_hmsm_p(f({{}}),{}) = true),
  assert(eq_hmsm_p(f({{1}}),{[1,1]}) = true),
  assert(eq_hmsm_p(f({{1},{-1}}),{[1,1],[-1,1]}) = true),
  assert(eq_hmsm_p(f({{1},{-1},{}}),{[1,1],[-1,1]}) = true),
  assert(eq_hmsm_p(f({{1},{-1},{},{2,1}}),{[1,2],[-1,1],[2,1]}) = true),
  true)$

okltest_all_literal_degrees_fcs(f) := block(
  assert(eq_hmsm_p(f([{},{}]),{}) = true),
  assert(eq_hmsm_p(f([{1},{}]),{[1,0],[-1,0]}) = true),
  assert(eq_hmsm_p(f([{1},{{}}]),{[1,0],[-1,0]}) = true),
  assert(eq_hmsm_p(f([{1},{{1}}]),{[1,1],[-1,0]}) = true),
  assert(eq_hmsm_p(f([{1},{{1},{-1}}]),{[1,1],[-1,1]}) = true),
  true)$

okltest_ordered_literal_degrees_cs(f) := block(
  assert(f({}) = []),
  assert(f({{}}) = []),
  assert(f({{1}}) = [[1,1]]),
  assert(f({{-1}}) = [[-1,1]]),
  assert(f({{1},{-1}}) = [[-1,1],[1,1]]),
  assert(f({{1},{-1},{}}) = [[-1,1],[1,1]]),
  assert(f({{1,2},{-1},{-2},{-1,2}}) = [[-1,2],[2,2],[-2,1],[1,1]]),
  assert(f({{1,2},{1},{1,2,3}}) = [[1,3],[2,2],[3,1]]),
true)$

okltest_min_literal_degree_cs(f) := (
  assert(f({}) = inf),
  assert(f({{}}) = inf),
  assert(f({{1}}) = 1),
  assert(f({{1},{-1}}) = 1),
  assert(f({{1},{1,2}}) = 1),
  for n : 1 thru 3 do
    assert(f(full_fcs(n)[2]) = 2^(n-1)),
  true)$

okltest_max_literal_degree_cs(f) := (
  assert(f({}) = minf),
  assert(f({{}}) = minf),
  assert(f({{1}}) = 1),
  assert(f({{1},{-1}}) = 1),
  assert(f({{1},{1,2}}) = 2),
  for n : 1 thru 3 do
    assert(f(full_fcs(n)[2]) = 2^(n-1)),
  true)$

okltest_min_literal_degree_l_cs(f) := block(
  assert(f({}) = [inf,0]),
  assert(f({{}}) = [inf,0]),
  assert(f({{1}}) = [1,1]),
  assert(elementp(f({{1},{-1}}), {[1,1],[1,-1]}) = true),
  assert(f({{},{1},{1,2}}) = [1,2]),
  true)$

okltest_max_literal_degree_l_cs(f) := block(
  assert(f({}) = [minf,0]),
  assert(f({{}}) = [minf,0]),
  assert(f({{1}}) = [1,1]),
  assert(elementp(f({{1},{-1}}), {[1,1],[1,-1]}) = true),
  assert(f({{},{1},{1,2}}) = [2,1]),
  true)$

okltest_literal_degrees_list_fcs(f) := block(
  assert(f([{},{}]) = []),
  assert(f([{},{{}}]) = []),
  assert(f([{1,2},{}]) = [[0,4]]),
  assert(f([{1,2},{{}}]) = [[0,4]]),
  assert(f([{1},{{},{1}}]) = [[0,1],[1,1]]),
  assert(f([{1},{{},{1},{-1}}]) = [[1,2]]),
  assert(f([{1,2},{{},{1},{-1}}]) = [[0,2],[1,2]]),
  assert(f([setn(4),{{-4,-3},{-4,-1,2,3},{-4,1,2,3},{-3,-2,4},{-2,-1,3},{-2,1,3},{2,4}}]) = [[2,4],[3,3],[4,1]]),
  for n : 0 thru 3 do
    assert(f(full_fcs(n)) = if n=0 then [] else [[2^(n-1),2*n]]),
  true)$


/* ********************
   * Variable degrees *
   ********************
*/

okltest_variable_degree_cs(f) := block(
  assert(f({},1) = 0),
  assert(f({{}},1) = 0),
  assert(f({{1}},1) = 1),
  assert(f({{1}},-1) = 0),
  assert(f({{1}},2) = 0),
  assert(f({{1},{-1}},1) = 2),
  block([F : {{-3,-2,-1},{-3,1},{-2,3},{-1,2},{1,2,3}}],
    for i : 1 thru 3 do
      assert(f(F,i) = 4)),
  true)$

okltest_variable_degrees_cs(f) := block(
  assert(eq_hmsm_p(f({}),{}) = true),
  assert(eq_hmsm_p(f({{}}),{}) = true),
  assert(eq_hmsm_p(f({{1}}),{[1,1]}) = true),
  assert(eq_hmsm_p(f({{1},{-1}}),{[1,2]}) = true),
  assert(eq_hmsm_p(f({{1},{-1},{}}),{[1,2]}) = true),
  assert(eq_hmsm_p(f({{1},{-1},{},{2,1}}),{[1,3],[2,1]}) = true),
  true)$

okltest_min_variable_degree_cs(f) := (
  assert(f({}) = inf),
  assert(f({{}}) = inf),
  assert(f({{1}}) = 1),
  assert(f({{1},{-1}}) = 2),
  assert(f({{1},{1,2}}) = 1),
  for n : 1 thru 3 do
    assert(f(full_fcs(n)[2]) = 2^n),
  true)$

okltest_max_variable_degree_cs(f) := (
  assert(f({}) = minf),
  assert(f({{}}) = minf),
  assert(f({{1}}) = 1),
  assert(f({{1},{-1}}) = 2),
  assert(f({{1},{1,2}}) = 2),
  for n : 1 thru 3 do
    assert(f(full_fcs(n)[2]) = 2^n),
  true)$

okltest_max_variable_degree_v_cs(f) := block(
  assert(f({}) = [minf,0]),
  assert(f({{}}) = [minf,0]),
  assert(f({{1}}) = [1,1]),
  assert(f({{1},{-1}}) = [2,1]),
  assert(f({{},{1},{1,2}}) = [2,1]),
  assert(f({{},{-1},{1,2}}) = [2,1]),
  true)$


/* *******************************
   * Weighted numbers of clauses *
   *******************************
*/

okltest_weighted_ncl_2n_cs(f) := (
  assert(f({}) = 0),
  assert(f({{}}) = 1),
  assert(f({{1}}) = 1/2),
  assert(f({{-1}}) = 1/2),
  assert(f({{1},{-1}}) = 1),
  assert(f({{1,2}}) = 1/4),
  assert(f({{1,2},{-1,2}}) = 1/2),
  assert(f({{1,2},{-1,2}, {1,-2}}) = 3/4),
  for k : 0 thru 5 do
    assert(f({setn(k)}) = 2^(-k)),
  assert(f({{},{1},{1,2}}) = 7/4),
  true)$


/*!
\endhtmlonly
*/
