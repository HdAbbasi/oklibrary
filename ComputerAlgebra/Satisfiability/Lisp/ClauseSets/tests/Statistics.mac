/* Oliver Kullmann, 4.4.2008 (Swansea) */
/* Copyright 2008, 2009, 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ClauseSets/tests/Statistics.mac
  \brief Tests for the basic operations with clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/tests/Statistics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/tests/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$

kill(f)$

/* ******************
   * Basic measures *
   ******************
*/

okltest_nvar_cs(f) := (
  assert(f({}) = 0),
  assert(f({{}}) = 0),
  assert(f({{1},{-1},{2,3},{-2,-1}}) = 3),
  true)$

okltest_nvar_ocs(f) := (
  assert(f([]) = 0),
  assert(f([{}]) = 0),
  assert(okltest_nvar_cs(buildq([f],lambda([F],f(cs2ocs(F)))))),
  true)$

okltest_nvar_cl(f) := (
  assert(f([]) = 0),
  assert(f([{}]) = 0),
  assert(f([{1},{1},{},{-1},{}]) = 1),
  assert(okltest_nvar_ocs(f)),
  true)$


okltest_nvar_fcs(f) := (
  assert(f([{},{}]) = 0),
  assert(f([{},{{}}]) = 0),
  assert(f([{1,2},{}]) = 2),
  assert(okltest_nvar_cs(buildq([f],lambda([F],f(cs2fcs(F)))))),
  true)$

okltest_nvar_fcl(f) := (
  assert(okltest_nvar_fcs(buildq([f],lambda([FF],f(fcs2fcl(FF)))))),
  assert(f([[],[{},{}]]) = 0),
  true)$

okltest_nvar_ofcs(f) := (
  assert(okltest_nvar_fcs(buildq([f],lambda([FF],f(fcs2ofcs(FF)))))),
  true)$

okltest_ncl_fcs(f) := (
  /* XXX */
  true)$

okltest_ncl_fcl(f) := (
  /* XXX */
  true)$

okltest_ncl_cs(f) := (
  /* XXX */
  true)$

okltest_ncl_cl(f) := (
  /* XXX */
  true)$

okltest_nlitocc_cl(f) := (
  assert(f([]) = 0),
  assert(f([{}]) = 0),
  assert(f([{1},{-1}]) = 2),
  assert(f([{1},{},{1,2},{-2,3}]) = 5),
  assert(f([{},{1},{},{1},{1,2},{-2,3},{2,1}]) = 8),
  true)$

okltest_nlitocc_cs(f) := (
  assert(f({}) = 0),
  assert(f({{}}) = 0),
  assert(f({{1},{-1}}) = 2),
  assert(f({{1},{},{1,2},{-2,3}}) = 5),
  true)$

okltest_nlitocc_fcl(f) := (
  assert(f([[],[]]) = 0),
  assert(f([[1],[{},{1},{1},{-1},{}]]) = 3),
  assert(okltest_nlitocc_cl(buildq([f],lambda([F],f(cl2fcl(F))))) = true),
  true)$

okltest_nlitocc_fcs(f) := block([x,y,z],
  assert(okltest_nlitocc_cs(buildq([f],lambda([F],f(cs2fcs(F))))) = true),
  assert(okltest_nlitocc_cs(buildq([f],lambda([F],f([union(var_cs(F),{x,y,z}),F])))) = true),
  true)$

okltest_ncl_list_fcl(f) := (
  assert(f([[],[]]) = []),
  assert(f([[1,2,3],[]]) = []),
  assert(f([[],[{},{}]]) = [[0,2]]),
  assert(f([[1,3,5],[{},{}]]) = [[0,2]]),
  assert(okltest_ncl_list_fcs(buildq([f], lambda([FF],f(fcs2fcl(FF))))) = true),
  true)$

okltest_ncl_list_fcs(f) := (
  assert(f([{},{}]) = []),
  assert(f([{},{{}}]) = [[0,1]]),
  assert(f([{1},{{},{1},{-1}}]) = [[0,1],[1,2]]),
  assert(f([{1},{{1},{-1}}]) = [[1,2]]),
  assert(f([{1,2},{{1},{-1,2},{1,-2}}]) = [[1,1],[2,2]]),
  for n : 0 thru 3 do
    assert(f(full_fcs(n)) = [[n,2^n]]),
  true)$

okltest_ncl_list_cl(f) := (
  assert(okltest_ncl_list_fcl(buildq([f], lambda([FF],f(fcl2cl(FF))))) = true),
  true)$

okltest_ncl_list_cs(f) := (
  assert(okltest_ncl_list_fcs(buildq([f], lambda([FF],f(fcs2cs(FF))))) = true),
  true)$

okltest_max_rank_cs(f) := (
  assert(f({}) = -1),
  assert(f({{}}) = 0),
  assert(f({{1,2}}) = 2),
  assert(f({{1,2},{}}) = 2),
  assert(f({{1,2},{1},{-1,-2,-3}}) = 3),
  true)$

okltest_max_rank_fcs(f) := block([x,y,z],
  assert(okltest_max_rank_cs(buildq([f],lambda([F],f(cs2fcs(F))))) = true),
  assert(okltest_max_rank_cs(buildq([f],lambda([F],f([union(var_cs(F),{x,y,z}),F])))) = true),
  true)$

okltest_min_rank_cs(f) := (
  assert(f({}) = inf),
  assert(f({{}}) = 0),
  assert(f({{1,2}}) = 2),
  assert(f({{1,2},{}}) = 0),
  assert(f({{1,2},{1},{-1,-2,-3}}) = 1),
  true)$

okltest_min_rank_fcs(f) := (
  assert(okltest_min_rank_cs(buildq([f],lambda([F],f(cs2fcs(F))))) = true),
  assert(okltest_min_rank_cs(buildq([f],lambda([F],f([union(var_cs(F),{x,y,z}),F])))) = true),
  true)$

okltest_uniformcsp(f) := (
  /* XXX */
  true)$


/* *******************
   * Literal degrees *
   *******************
*/

okltest_literal_degree_cs(f) := block(
  assert(f({},1) = 0),
  assert(f({{}},1) = 0),
  assert(f({{1}},1) = 1),
  assert(f({{1}},-1) = 0),
  assert(f({{1}},2) = 0),
  assert(f({{1},{-1}},1) = 1),
  assert(f({{1},{-1}},-1) = 1),
  block([F : {{-3,-2,-1},{-3,1},{-2,3},{-1,2},{1,2,3}}],
    for i : 1 thru 3 do (
      assert(f(F,i) = 2),
      assert(f(F,-i) = 2)
  )),
  true)$

okltest_literal_degrees_cs(f) := block(
  assert(eq_hmsm_p(f({}),{}) = true),
  assert(eq_hmsm_p(f({{}}),{}) = true),
  assert(eq_hmsm_p(f({{1}}),{[1,1]}) = true),
  assert(eq_hmsm_p(f({{1},{-1}}),{[1,1],[-1,1]}) = true),
  assert(eq_hmsm_p(f({{1},{-1},{}}),{[1,1],[-1,1]}) = true),
  assert(eq_hmsm_p(f({{1},{-1},{},{2,1}}),{[1,2],[-1,1],[2,1]}) = true),
  true)$

okltest_literal_degrees_cl(f) := block(
  assert(hm2sm(f([])) = {}),
  assert(hm2sm(f([{}])) = {}),
  assert(hm2sm(f([{1},{1}])) = {[1,2]}),
  assert(okltest_literal_degrees_cs(buildq([f],lambda([F],f(cs2cl(F))))) = true),
  true)$

okltest_literal_degrees_fcs(f) := block(
  assert(eq_hmsm_p(f([{},{}]),{}) = true),
  assert(eq_hmsm_p(f([{1},{}]),{[1,0],[-1,0]}) = true),
  assert(eq_hmsm_p(f([{1},{{}}]),{[1,0],[-1,0]}) = true),
  assert(eq_hmsm_p(f([{1},{{1}}]),{[1,1],[-1,0]}) = true),
  assert(eq_hmsm_p(f([{1},{{1},{-1}}]),{[1,1],[-1,1]}) = true),
  true)$

okltest_ordered_literal_degrees_cs(f) := block(
  assert(f({}) = []),
  assert(f({{}}) = []),
  assert(f({{1}}) = [[1,1]]),
  assert(f({{-1}}) = [[-1,1]]),
  assert(f({{1},{-1}}) = [[-1,1],[1,1]]),
  assert(f({{1},{-1},{}}) = [[-1,1],[1,1]]),
  assert(f({{1,2},{-1},{-2},{-1,2}}) = [[-1,2],[2,2],[-2,1],[1,1]]),
  assert(f({{1,2},{1},{1,2,3}}) = [[1,3],[2,2],[3,1]]),
true)$

okltest_ordered_literal_degrees_fcs(f) := block(
  assert(f([{},{}]) = []),
  assert(f([{1},{}]) = [[-1,0],[1,0]]),
  assert(f([{},{{}}]) = []),
  assert(f([{1},{{}}]) = [[-1,0],[1,0]]),
  assert(f([{1},{{1}}]) = [[1,1],[-1,0]]),
  assert(f([{1,2},{{1}}]) = [[1,1],[-2,0],[-1,0],[2,0]]),
  assert(f([{1},{{-1}}]) = [[-1,1],[1,0]]),
  assert(f([{1},{{1},{-1}}]) = [[-1,1],[1,1]]),
  assert(f([{1},{{1},{-1},{}}]) = [[-1,1],[1,1]]),
  assert(f([{1,2},{{1,2},{-1},{-2},{-1,2}}]) = [[-1,2],[2,2],[-2,1],[1,1]]),
  assert(f([{1,2,3},{{1,2},{1},{1,2,3}}]) = [[1,3],[2,2],[3,1],[-3,0],[-2,0],[-1,0]]),
true)$

okltest_min_literal_degree_cs(f) := (
  assert(f({}) = inf),
  assert(f({{}}) = inf),
  assert(f({{1}}) = 1),
  assert(f({{1},{-1}}) = 1),
  assert(f({{1},{1,2}}) = 1),
  for n : 1 thru 3 do
    assert(f(full_fcs(n)[2]) = 2^(n-1)),
  true)$

okltest_min_literal_degree_fcs(f) := (
  /* XXX */
  true)$

okltest_max_literal_degree_cs(f) := (
  assert(f({}) = minf),
  assert(f({{}}) = minf),
  assert(f({{1}}) = 1),
  assert(f({{1},{-1}}) = 1),
  assert(f({{1},{1,2}}) = 2),
  for n : 1 thru 3 do
    assert(f(full_fcs(n)[2]) = 2^(n-1)),
  true)$

okltest_max_literal_degree_fcs(f) := (
  /* XXX */
  true)$

okltest_min_literal_degree_l_cs(f) := block(
  assert(f({}) = [inf,0]),
  assert(f({{}}) = [inf,0]),
  assert(f({{1}}) = [1,1]),
  assert(elementp(f({{1},{-1}}), {[1,1],[1,-1]}) = true),
  assert(f({{},{1},{1,2}}) = [1,2]),
  true)$

okltest_max_literal_degree_l_cs(f) := block(
  assert(f({}) = [minf,0]),
  assert(f({{}}) = [minf,0]),
  assert(f({{1}}) = [1,1]),
  assert(elementp(f({{1},{-1}}), {[1,1],[1,-1]}) = true),
  assert(f({{},{1},{1,2}}) = [2,1]),
  true)$

okltest_max_literal_degree_l_cl(f) := (
  assert(f([]) = [minf,0]),
  assert(f([{}]) = [minf,0]),
  assert(f([{-1},{-1},{2}]) = [2,-1]),
  assert(okltest_max_literal_degree_l_cs(buildq([f],lambda([F],f(cs2cl(F))))) = true),
  true)$

okltest_literalregularcsp(f) := (
  /* XXX */
  true)$

okltest_mean_literal_degree_fcs(f) := (
  /* XXX */
  true)$

okltest_min_literal_frequency_cs(f) := (
  /* XXX */
  true)$

okltest_max_literal_frequency_cs(f) := (
  /* XXX */
  true)$

okltest_mean_literal_frequency_cs(f) := (
  /* XXX */
  true)$

okltest_literal_degrees_list_fcs(f) := block(
  assert(f([{},{}]) = []),
  assert(f([{},{{}}]) = []),
  assert(f([{1,2},{}]) = [[0,4]]),
  assert(f([{1,2},{{}}]) = [[0,4]]),
  assert(f([{1},{{},{1}}]) = [[0,1],[1,1]]),
  assert(f([{1},{{},{1},{-1}}]) = [[1,2]]),
  assert(f([{1,2},{{},{1},{-1}}]) = [[0,2],[1,2]]),
  assert(f([setn(4),{{-4,-3},{-4,-1,2,3},{-4,1,2,3},{-3,-2,4},{-2,-1,3},{-2,1,3},{2,4}}]) = [[2,4],[3,3],[4,1]]),
  for n : 0 thru 3 do
    assert(f(full_fcs(n)) = if n=0 then [] else [[2^(n-1),2*n]]),
  true)$

okltest_max_literal_degree_tb(f) := (
  /* XXX */
  true)$

okltest_max_literal_degree_tb_l_cs(f) := (
  /* XXX */
  true)$


/* ********************
   * Variable degrees *
   ********************
*/

okltest_variable_degree_cs(f) := block(
  assert(f({},1) = 0),
  assert(f({{}},1) = 0),
  assert(f({{1}},1) = 1),
  assert(f({{1}},-1) = 0),
  assert(f({{1}},2) = 0),
  assert(f({{1},{-1}},1) = 2),
  block([F : {{-3,-2,-1},{-3,1},{-2,3},{-1,2},{1,2,3}}],
    for i : 1 thru 3 do
      assert(f(F,i) = 4)),
  true)$

okltest_variable_degrees_cs(f) := block(
  assert(eq_hmsm_p(f({}),{}) = true),
  assert(eq_hmsm_p(f({{}}),{}) = true),
  assert(eq_hmsm_p(f({{1}}),{[1,1]}) = true),
  assert(eq_hmsm_p(f({{1},{-1}}),{[1,2]}) = true),
  assert(eq_hmsm_p(f({{1},{-1},{}}),{[1,2]}) = true),
  assert(eq_hmsm_p(f({{1},{-1},{},{2,1}}),{[1,3],[2,1]}) = true),
  true)$

okltest_min_variable_degree_cs(f) := (
  assert(f({}) = inf),
  assert(f({{}}) = inf),
  assert(f({{1}}) = 1),
  assert(f({{1},{-1}}) = 2),
  assert(f({{1},{1,2}}) = 1),
  for n : 1 thru 3 do
    assert(f(full_fcs(n)[2]) = 2^n),
  true)$

okltest_min_variable_degree_fcs(f) := (
  /* XXX */
  true)$

okltest_max_min_var_deg_cs(f) := (
  /* XXX */
  true)$

okltest_max_variable_degree_fcs(f) := (
  /* XXX */
  true)$

okltest_max_variable_degree_cs(f) := (
  assert(f({}) = minf),
  assert(f({{}}) = minf),
  assert(f({{1}}) = 1),
  assert(f({{1},{-1}}) = 2),
  assert(f({{1},{1,2}}) = 2),
  for n : 1 thru 3 do
    assert(f(full_fcs(n)[2]) = 2^n),
  true)$

okltest_max_variable_degree_v_cs(f) := block(
  assert(f({}) = [minf,0]),
  assert(f({{}}) = [minf,0]),
  assert(f({{1}}) = [1,1]),
  assert(f({{1},{-1}}) = [2,1]),
  assert(f({{},{1},{1,2}}) = [2,1]),
  assert(f({{},{-1},{1,2}}) = [2,1]),
  true)$

okltest_min_max_var_deg_cs(f) := (
  /* XXX */
  true)$

okltest_variableregularcsp(f) := (
  /* XXX */
  true)$

okltest_mean_variable_degree_cs(f) := (
  /* XXX */
  true)$

okltest_min_variable_frequency_cs(f) := (
  /* XXX */
  true)$

okltest_max_variable_frequency_cs(f) := (
  /* XXX */
  true)$

okltest_mean_variable_frequency_cs(f) := (
  /* XXX */
  true)$

okltest_variable_degrees_list_cs(f) := block(
  assert(f({}) = []),
  assert(f({{}}) = []),
  assert(f({{},{1}}) = [[1,1]]),
  assert(f({{},{1},{-1}}) = [[2,1]]),
  assert(f({{},{1},{-1}}) = [[2,1]]),
  assert(f({{-4,-3},{-4,-1,2,3},{-4,1,2,3},{-3,-2,4},{-2,-1,3},{-2,1,3},{2,4}}) = [[4,1],[5,1],[6,2]]),
  for n : 0 thru 3 do
    assert(f(full_fcs(n)[2]) = if n=0 then [] else [[2^n,n]]),
  true)$

okltest_full_variables_cs(f) := (
  assert(f({{}}) = {}),
  assert(f({{1}}) = {1}),
  assert(f({{1},{-1}}) = {1}),
  assert(f({{1},{2}}) = {}),
  true)$

okltest_full_variables_fcs(f) := block([X],
  assert(f([{},{}]) = {}),
  assert(f([X,{}]) = X),
  assert(okltest_full_variables_cs(buildq([f],lambda([F],f(cs2fcs(F))))) = true),
  true)$

okltest_full_var_csp(f) := (
  assert(f({}) = false),
  assert(f({{}}) = false),
  assert(f({{1}}) = true),
  assert(f({{1},{-1}}) = true),
  assert(f({{1},{2}}) = false),
  true)$

okltest_full_var_fcsp(f) := (
  assert(f([{},{}]) = false),
  assert(f([{1},{}]) = true),
  assert(okltest_full_var_csp(buildq([f],lambda([F],f(cs2fcs(F))))) = true),
  true)$

okltest_singularpure_variables_cs(f) := (
  assert(f({}) = {}),
  assert(f({{}}) = {}),
  assert(f({{1}}) = {1}),
  assert(f({{-1}}) = {1}),
  assert(f({{1},{-1}}) = {1}),
  assert(f({{1,2}}) = {1,2}),
  assert(f({{1,2},{-1,2}}) = {1,2}),
  true)$

okltest_singular_variables_cs(f) := (
  assert(f({}) = {}),
  assert(f({{}}) = {}),
  assert(f({{1}}) = {}),
  assert(f({{-1}}) = {}),
  assert(f({{1},{-1}}) = {1}),
  assert(f({{1,2}}) = {}),
  assert(f({{1,2},{-1,2}}) = {1}),
  assert(f({{1,2},{-1,2},{-2,1}}) = {1,2}),
  assert(f({{1,2},{-1,2},{-2,1},{-1,-2}}) = {}),
  true)$

okltest_singular_variables_fcs(f) := (
  assert(f([{},{}]) = {}),
  assert(f([{},{{}}]) = {}),
  assert(f([{1},{}]) = {}),
  assert(f([{1},{{}}]) = {}),
  assert(f([{1},{{1}}]) = {}),
  assert(f([{1},{{1},{-1}}]) = {1}),
  assert(okltest_singular_variables_cs(buildq([f], lambda([F],f(cs2fcs(F))))) = true),
  true)$

okltest_sortvar_prodocc_cs(f) := (
  assert(f({}) = []),
  assert(f({{}}) = []),
  assert(f({{1}}) = [1]),
  assert(f({{1},{-1},{2}}) = [2,1]),
  assert(f({{1,2},{-1,2},{1,-2}}) = [1,2]),
  assert(f({{1,2,3},{-1},{-2,-3},{-1,-2},{3}}) = [1,2,3]),
  assert(f({{1,2,3},{-1},{-2,-3},{-1,-2},{3},{2,3}}) = [1,3,2]),
  assert(f({{1,2,3},{-1},{-2,-3},{-1,-2},{3},{2,3},{-1,3}}) = [1,2,3]),
  assert(f({{1,2,3},{-1},{-2,-3},{-1,-2},{3},{2,3},{-1,3},{1}}) = [2,3,1]),
  true)$


/* **********************
   * Numbers of clauses *
   **********************
*/

okltest_nfcl_fcl(f) := (
  assert(f([[],[]]) = 0),
  assert(f([[],[{}]]) = 1),
  assert(f([[],[{},{}]]) = 2),
  assert(f([[1],[{}]]) = 0),
  assert(f([[1],[{1},{},{-1},{1},{},{-1}]]) = 4),
  assert(f([[1,2],[{1,2},{-1,2},{2}]]) = 2),
  assert(f([[1,2,3],[{1,2},{-1,2},{2}]]) = 0),
  assert(okltest_nfcl_cs(buildq([f], lambda([F], f(cs2fcl(F))))) = true),
  true)$

okltest_nfcl_cs(f) := (
  assert(f({}) = 0),
  assert(f({{}}) = 1),
  assert(f({{1},{-1},{}}) = 2),
  assert(f({{1,2},{3},{-1},{1,2,3}}) = 1),
  true)$

okltest_weighted_ncl_2n_cs(f) := (
  assert(f({}) = 0),
  assert(f({{}}) = 1),
  assert(f({{1}}) = 1/2),
  assert(f({{-1}}) = 1/2),
  assert(f({{1},{-1}}) = 1),
  assert(f({{1,2}}) = 1/4),
  assert(f({{1,2},{-1,2}}) = 1/2),
  assert(f({{1,2},{-1,2}, {1,-2}}) = 3/4),
  for k : 0 thru 5 do
    assert(f({setn(k)}) = 2^(-k)),
  assert(f({{},{1},{1,2}}) = 7/4),
  true)$

okltest_weighted_ncl_2n_fcs(f) := (
  /* XXX */
  true)$


/* **************************
   * Summarising statistics *
   **************************
*/

okltest_statistics_cs(f)  := (
  assert(f({}) = [0,0,0,-1,inf]),
  assert(f({{}}) = [0,1,0,0,0]),
  assert(f({{1},{1,2},{-1,4},{2,-4,-1}}) = [3,4,8,3,1]),
  assert(okltest_nvar_cs(buildq([f],lambda([F],f(F)[1]))) = true),
  assert(okltest_ncl_cs(buildq([f],lambda([F],f(F)[2]))) = true),
  assert(okltest_nlitocc_cs(buildq([f],lambda([F],f(F)[3]))) = true),
  assert(okltest_max_rank_cs(buildq([f],lambda([F],f(F)[4]))) = true),
  assert(okltest_min_rank_cs(buildq([f],lambda([F],f(F)[5]))) = true),
  true)$

okltest_statistics_fcs(f)  := (
  assert(okltest_statistics_cs(buildq([f],lambda([F],f(cs2fcs(F))))) = true),
  assert(f([{1},{}]) = [1,0,0,-1,inf]),
  assert(f([{2},{{}}]) = [1,1,0,0,0]),
  assert(okltest_nvar_fcs(buildq([f],lambda([F],f(F)[1]))) = true),
  assert(okltest_ncl_fcs(buildq([f],lambda([F],f(F)[2]))) = true),
  assert(okltest_nlitocc_fcs(buildq([f],lambda([F],f(F)[3]))) = true),
  assert(okltest_max_rank_fcs(buildq([f],lambda([F],f(F)[4]))) = true),
  assert(okltest_min_rank_fcs(buildq([f],lambda([F],f(F)[5]))) = true),
  true)$

okltest_extended_statistics_fcs(f) := (
  assert(f([{},{}]) = [0,0,0,inf,-1,[],inf,minf,inf,minf]),
  assert(okltest_nvar_fcs(buildq([f],lambda([F],f(F)[1]))) = true),
  assert(okltest_ncl_fcs(buildq([f],lambda([F],f(F)[2]))) = true),
  assert(okltest_nlitocc_fcs(buildq([f],lambda([F],f(F)[3]))) = true),
  assert(okltest_min_rank_fcs(buildq([f],lambda([F],f(F)[4]))) = true),
  assert(okltest_max_rank_fcs(buildq([f],lambda([F],f(F)[5]))) = true),
  assert(okltest_ncl_list_fcs(buildq([f],lambda([F],f(F)[6]))) = true),
  assert(okltest_min_literal_degree_fcs(buildq([f],lambda([F],f(F)[7]))) = true),
  assert(okltest_max_literal_degree_fcs(buildq([f],lambda([F],f(F)[8]))) = true),
  assert(okltest_min_variable_degree_fcs(buildq([f],lambda([F],f(F)[9]))) = true),
  assert(okltest_max_variable_degree_fcs(buildq([f],lambda([F],f(F)[10]))) = true),
  true)$

/*!
\endhtmlonly
*/
