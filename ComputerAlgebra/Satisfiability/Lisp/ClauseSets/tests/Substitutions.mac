/* Oliver Kullmann, 27.7.2007 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ClauseSets/tests/Substitutions.mac
  \brief Tests for the basic operations with clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/tests/Substitutions.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$

kill(f)$

/* ********************************************
   * Substitutions for variables and literals *
   ********************************************
*/

okltest_substitute_l(f) := block([h],
  h : sm2hm({[1,3],[2,-4],[3,-3]}),
  assert(f(1,h) = 3), assert(f(-1,h) = -3),
  assert(f(2,h) = -4), assert(f(-2,h) = 4),
  assert(f(3,h) = -3), assert(f(-3,h) = 3),
  assert(f(4,h) = false), assert(f(-4,h) = -false),
  true)$


/* *****************************
   * Substitutions for clauses *
   *****************************
*/

okltest_substitute_c(f) := block([h],
  h : sm2hm({[1,3],[2,-4],[3,-3]}),
  assert(f({},h) = {}),
  assert(f({1},h) = {3}), assert(f({-1},h) = {-3}),
  assert(f({2},h) = {-4}), assert(f({-2},h) = {4}),
  assert(f({3},h) = {-3}), assert(f({-3},h) = {3}),
  assert(f({1,2,3},h) = {3,-4,-3}),
  assert(f({1,2,-3},h) = {3,-4}),
  assert(f({1,2,-3,4},h) = {3,-4,4}),
  assert(f({1,2,-3,-4},h) = {3,-4}),
  assert(f({1,2,-3,5},h) = {3,-4,5}),
  true)$


/* *********************************
   * Substitutions for clause-sets *
   *********************************
*/

okltest_substitute_cs(f) := block([h],
  h : sm2hm({[1,3],[2,-4],[3,-3]}),
  assert(f({},h) = {}),
  assert(f({{}},h) = {{}}),
  assert(f({{},{4,5}},h) = {{},{4,5}}),
  assert(f({{1,2},{1,3},{-2,3}},h) = {{3,-4},{3,-3},{4,-3}}),
  true)$

okltest_rename_fcs(f) := block(
  assert(f([{},{}],[]) = [{},{}]),
  assert(f([{},{{}}],[]) = [{},{{}}]),
  assert(f([{1},{{1}}],[-2]) = [{2},{{-2}}]),
  assert(f([{1},{{-1}}],[-1]) = [{1},{{1}}]),
  assert(f([{1,2},{{1,2},{-1,2}}],[-2,1]) = [{1,2},{{-2,1},{1,2}}]),
  true)$

okltest_standardise_fcs(f) := block(
  assert(f([{},{}]) = [[{},{}],[]]),
  assert(f([{},{{}}]) = [[{},{{}}],[]]),
  assert(f([{1},{{}}]) = [[{1},{{}}],[1]]),
  assert(f([{2,3},{{}}]) = [[{1,2},{{}}],[2,3]]),
  assert(f([{4,5,6},{{},{-4,5,6},{5},{4,-5},{-5,-6}}]) = [[{1,2,3},{{},{-1,2,3},{2},{1,-2},{-2,-3}}],[4,5,6]]),
  true)$

okltest_make_vardisjoint_fcs(f) := (
  assert(f([]) = [[],0]),
  assert(f(map(cs_to_fcs,[{},{{}},{},{{}}])) = [map(cs_to_fcs,[{},{{}},{},{{}}]), 0]),
  assert(f(map(cs_to_fcs,[{{1}},{{}},{{1}},{{}}])) = [map(cs_to_fcs,[{{1}},{{}},{{2}},{{}}]), 2]),
  assert(f(map(cs_to_fcs,[{{4}},{{2}},{{2}},{{1}}])) = [map(cs_to_fcs,[{{1}},{{2}},{{3}},{{4}}]), 4]),
  true)$


/*!
\endhtmlonly
*/
