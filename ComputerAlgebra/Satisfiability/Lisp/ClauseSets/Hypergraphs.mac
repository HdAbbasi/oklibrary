/* Oliver Kullmann, 31.12.2007 (Swansea) */
/* Copyright 2007, 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac
  \brief Functions related to the various transformation to graphs and hypergraphs

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac");
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("Transitional/ComputerAlgebra/Graphs/Lisp/Basic.mac")$
oklib_include("Transitional/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac");


/* *******************
   * Transformations *
   *******************
*/

/* A formal clause-set as a hypergraph */
hyp_fcs(FF) := [literals_v(FF[1]), FF[2]]$


/* The clause-variable graph of a formal clause-set (also "incidence graph") */
cl_var_graph(FF) := [set_sumn(FF[2], FF[1]),
  family_sets_union(FF[2], lambda([C], setify(makelist({[C,1],[var_l(x),2]},x,listify(C)))))]$


/* The variable-hypergraph of a formal clause-set */
var_hyp(FF) := [FF[1], map(var_c,FF[2])]$
/* The variable-interaction graph (or "primal graph") of a formal clause-set */
vig_fcs(FF) := section_hyp(var_hyp(FF),2)$

/* The common-variable graph of a clause-set (this is also the
   "stochastic-dependence graph"). */
cvg_cs(F) := [F, 
 subset(powerset(F,2), lambda([S], 
        block([L : listify(S)], not disjointp(var_c(L[1]), var_c(L[2])))))]$


/* The combinatorial clause-variable matrix of a formal clause-set */
cl_var_com_fcs(FF) := [FF[2], FF[1], lambda([C,v], 
  if elementp(v, C) then +1 else if elementp(-v,C) then -1 else 0)]$
/* abs_com(cls_var_com_fcs(FF)) = edge_vertex_com_hyp(hyp_fcs(FF)) */


/* The clause-intersection matrix (as square combinatorial matrix)
   of a clause-set (for each pair of clauses the number of common literals
   minus the number of clashing literals) */
cl_int_scom_cs(F) := block([FF : cs_to_fcs(F), M],
 M : cl_var_com_fcs(FF),
  return(com2scom(prod_com(M, trans(M)))))$
/* The clause-var-intersection matrix (as square combinatorial matrix)
   of a clause-set (for each pair of clauses the number of common variables) */
cl_varint_scom_cs(F) := block([FF : cs_to_fcs(F), M],
 M : abs_com(cl_var_com_fcs(FF)),
  return(com2scom(prod_com(M, trans(M)))))$


/* The variable-intersection matrix (as square combinatorial matrix)
   of a formal clause-set (for each pair of variables the number of 
   occurrences with the same sign occurrences minus the number of 
   occurrences with opposite signs) */
var_int_scom_fcs(FF) := block([M : cl_var_com_fcs(FF)],
  return(com2scom(prod_com(trans(M), M))))$


/* The directed variable-literal-clause graph of a formal
   clause-set (from a variable to its two literals, from a
   literal to its clauses).
   Literals are here represented as pairs [v,+1] resp. [v,-1].
*/
var_lit_clause_digraph(FF) := block(
 [Var : FF[1],
  Lit : family_sets_union(FF[1], lambda([v],{[v,1],[v,-1]})),
  Cl : FF[2],
  V, E],
  V : union(Var,Lit,Cl),
  E : family_sets_union(Var,lambda([v],{[v,[v,1]], [v,[v,-1]]})),
  E : union(E, family_sets_union(Lit, 
        lambda([x], cartesian_product({x}, scls_l(Cl, x[2]*x[1]))))),
  return([V,E]))$


/* ************
   * Measures *
   ************
*/

/* The minimal degree of the common-variable graph */
min_degree_cvg_cs(F) := if emptyp(F) then inf else
  min_degree(g2mg(cvg_cs(F)))[1]$
/* The maximal degree of the common-variable graph */
max_degree_cvg_cs(F) := if emptyp(F) then minf else
  max_degree(g2mg(cvg_cs(F)))[1]$


/* The deficiency of a formal clause-set */
deficiency_fcs(FF) := length(FF[2]) - length(FF[1])$
/* The deficiency of a clause-set */
deficiency_cs(F) := deficiency_fcs(cs_to_fcs(F))$

/* The maximal deficiency of a formal clause-set */
max_deficiency_fcs(FF) := length(FF[2]) - length(max_matching(g2mg(cl_var_graph(FF))))$


/* ************
   * Analysis *
   ************
*/

var_disjointp(FF1,FF2) := disjointp(FF1[1],FF2[1])$

/* The set of accumulation variables of a clause-set */
accumulation_variables_fcs(FF) := block(
 [V : FF[1],
  result : {}],
  for v in V do 
    if var_disjointp(apply_pa_f({v},FF), apply_pa_f({-v},FF)) then
      result : adjoin(v,result),
  return(result))$

/*!
\endhtmlonly
*/
