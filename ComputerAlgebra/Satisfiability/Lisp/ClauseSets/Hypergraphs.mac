/* Oliver Kullmann, 31.12.2007 (Swansea) */
/* Copyright 2007, 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac
  \brief Functions related to the various transformation to graphs and hypergraphs

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac");
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("Transitional/ComputerAlgebra/Graphs/Lisp/Basic.mac")$


/* *******************
   * Transformations *
   *******************
*/

/* A formal clause-set as a hypergraph */
hyp_fcs(FF) := [literals_v(FF[1]), FF[2]]$

/* The clause-variable graph of a formal clause-set (also "incidence graph") */
cl_var_graph(FF) := [set_sumn(FF[2], FF[1]),
  family_sets_union(FF[2], lambda([C], setify(makelist({[C,1],[var_l(x),2]},x,listify(C)))))]$

/* The variable-hypergraph of a formal clause-set */
var_hyp(FF) := [FF[1], map(var_c,FF[2])]$
/* The variable-interaction graph (or "primal graph") of a formal clause-set */
vig_fcs(FF) := section_hyp(var_hyp(FF),2)$

/* The common-variable graph of a clause-set (this is also the
   "stochastic-dependence graph"). */
cvg_cs(F) := [F, 
 subset(powerset(F,2), lambda([S], 
        block([L : listify(S)], not disjointp(var_c(L[1]), var_c(L[2])))))]$


/* ************
   * Measures *
   ************
*/

/* The minimal degree of the common-variable graph */
min_degree_cvg_cs(F) := if emptyp(F) then inf else
  min_degree(g2mg(cvg_cs(F)))[1]$
/* The maximal degree of the common-variable graph */
max_degree_cvg_cs(F) := if emptyp(F) then minf else
  max_degree(g2mg(cvg_cs(F)))[1]$


/* The deficiency of a formal clause-set */
deficiency_fcs(FF) := length(FF[2]) - length(FF[1])$

/* The maximal deficiency of a formal clause-set */
max_deficiency_fcs(FF) := length(FF[2]) - length(max_matching(g2mg(cl_var_graph(FF))))$

/*!
\endhtmlonly
*/
