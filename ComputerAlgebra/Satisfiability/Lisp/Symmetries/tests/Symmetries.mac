/* Oliver Kullmann, 30.4.2008 (Guangzhou) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Symmetries/tests/Symmetries.mac
  \brief Tests for symmetry operations (on clause-sets)

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/Symmetries/tests/Symmetries.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Reductions/GeneralisedUCP.mac")$
oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$

kill(f)$


okltest_is_isomorphic_fcs(f) := block(
  assert(f([{},{}],[{},{}]) = true),
  assert(f([{},{{}}],[{},{{}}]) = true),
  assert(f([{},{}],[{},{{}}]) = false),
  assert(f([{},{}],[{1},{}]) = false),
  assert(f([{2},{}],[{1},{}]) = true),
  assert(f([{1},{{-1},{1}}],[{2},{{-2},{2}}]) = true),
  assert(f([{1},{{1}}],[{1},{{-1}}]) = true),
  assert(f([{1,2,3},{{-3,-2},{-3,-1,2},{-3,1,2},{-2,-1,3},{-1,2,3},{1,3}}],
    [{1,2,3},{{-3,-2},{-3,-1,2},{-3,1,2},{-2,-1,3},{-2,1,3},{2,3}}])
    = true),
  if oklib_test_level = 0 then return(true),
  for n : 3 thru 4 do block([FF : weak_php(n+1,n), v, G],
    v : choose_element(FF[1]),
    G : apply_pa_f({v},FF),
    G : cs_to_fcs(weakaut_red(generalised_ucp1(G[2]),1)),
    assert(f(G, weak_php(n,n-1)) = true)
  ),
  true)$

okltest_representatives_fcs(f) := block([FF],
  assert(f({}) = {}),
  assert(f({FF}) = {FF}),
  assert(f({[{},{{}}],[{},{}]}) = {[{},{{}}],[{},{}]}),
  block([R : f({[{1},{}], [{2},{}], [{},{}]})],
    assert(length(R) = 2),
    assert(elementp([{},{}], R) = true),
    assert(length(intersection(R, {[{1},{}], [{2},{}]})) = 1)
  ),
  true)$

okltest_manage_repository_isomorphism_types(f) := block([repo,M,FF1,FF2,deg],
  repo : hash_table(),
  assert(f([{},{}],repo) = true),
  M : {[[0,0,[],[]], {[{},{}]}]},
  assert(create_set_map(repo) = M),
  assert(f([{},{}],repo) = false),
  assert(create_set_map(repo) = M),
  assert(f([{},{{}}],repo) = true),
  M : adjoin([[0,1,[],[[0,1]]], {[{},{{}}]}], M),
  assert(create_set_map(repo) = M),
  assert(f([{},{{}}],repo) = false),
  assert(create_set_map(repo) = M),
  assert(f([{1},{}],repo) = true),
  M : adjoin([[1,0,[[0,2]],[]],{[{1},{}]}], M),
  assert(create_set_map(repo) = M),
  assert(f([{1},{}],repo) = false),
  assert(create_set_map(repo) = M),
  assert(f([{2},{}],repo) = false),
  assert(create_set_map(repo) = M),
  assert(f([{1},{{1}}],repo) = true),
  M : adjoin([[1,1,[[0,1],[1,1]],[[1,1]]], {[{1},{{1}}]}], M),
  assert(create_set_map(repo) = M),
  assert(f([{1},{{1}}],repo) = false),
  assert(create_set_map(repo) = M),
  FF1 : [setn(4),{{-4,-3},{-4,-1,2,3},{-4,1,2,3},{-3,-2,4},{-2,-1,3},{-2,1,3},{2,4}}],
  assert(f(FF1,repo) = true),
  deg : [4,7,[[2,4],[3,3],[4,1]],[[2,2],[3,3],[4,2]]],
  M : adjoin([deg, {FF1}], M),
  assert(create_set_map(repo) = M),
  FF2 : [setn(4),{{-4,-3},{-4,2,3},{-3,-2,1,4},{-3,-1,4},{-2,3},{-1,2,3,4},{1,2,4}}],
  assert(f(FF2,repo) = true),
  M : disjoin([deg,{FF1}],M), M : adjoin([deg,{FF1,FF2}],M),
  assert(create_set_map(repo) = M),
  true)$

/*!
\endhtmlonly
*/
