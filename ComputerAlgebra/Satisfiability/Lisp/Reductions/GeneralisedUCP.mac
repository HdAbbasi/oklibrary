/* Oliver Kullmann, 15.12.2007 (Swansea) */
/* Copyright 2007, 2008, 2009, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Reductions/GeneralisedUCP.mac
  \brief Functions for generalised unit-clause-propagation on clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/GeneralisedUCP.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/UnitClausePropagation.mac")$


/* **********************
   * The r_k reductions *
   **********************
*/

/* "Generalised unit-clause-propagation":
    input a clause-set F and level k >= 0, output r_k(F).
    Every forced assignment is found for k large enough.
*/
/* The general idea: */
generalised_ucp_g_cs(F,k) :=
 if k=0 then
   if elementp({},F) then {{}} else F
 else block([V : var_cs(F), break : false],
  for v in V unless break do for eps in {-1,1} unless break do
    if generalised_ucp(apply_pa({eps * v}, F), k-1) = {{}} then
      (F : apply_pa({-eps * v}, F), break : true),
  if break then return(generalised_ucp(F,k)) else return(F))$

/* For the cases k=0,1 one has special algorithms (making the
   implementation more efficient), and also the case k=1 should
   be applied in any case. This is implemented in this basic algorithm:
*/
/* RENAME: generalised_ucp_cs */
generalised_ucp(F,k) := block(
 if elementp({},F) then return({{}})
 elseif k=0 then return(F),
 F : ucp_0_cs(F),
 if k=1 or F={{}} then return(F)
 else block([mr : min_rank_cs(F)],
  if mr > k then return(F) else
   block([V : var_cs(F), break : false],
   for v in V unless break do for eps in {-1,1} unless break do
     if generalised_ucp(apply_pa({eps * v}, F), k-1) = {{}} then
       (F : apply_pa({-eps * v}, F), break : true),
   if break then return(generalised_ucp(F,k)) else return(F))))$
generalised_ucp_cs(F,k) := generalised_ucp(F,k)$

/* generalised_ucp(F,1) is unit-clause-elimination.
   If F in 2-CNF, then generalised_ucp(F,2) = {{}} iff F is unsatisfiable.
   If {} in F, then the result is always {{}}.
*/

/* Input a clause-set F and level k, output r_k(F) together with a forced
   partial assignment phi s.t. phi * F = r_k(F) */
/* RENAME: generalised_ucp_pa_cs */
generalised_ucp_pa(F,k) := block([R : generalised_ucp_opa(F,k)],
 [R[1], setify(R[2])])$
/* The variation which returns an ordered partial assignment (in the
   order the forced assignments were found; variables are tested
   in the natural order, trying "true" first):
*/
/* RENAME: generalised_ucp_opa_cs */
generalised_ucp_opa(F,k) := block([V : var_cs(F), mr : min_rank_cs(F)],
 if mr > k then [F,[]]
 elseif mr = 0 then [{{}},listify(V)] else
  block([break : false, x],
  for v in V unless break do for eps in {-1,1} unless break do
    if generalised_ucp(apply_pa({eps * v}, F), k-1) = {{}} then (
      x : -eps * v,
      F : apply_pa({x}, F),
      break : true),
  if break then block([R : generalised_ucp_opa(F,k)],
    return([R[1], cons(x, R[2])]))
  else return([F,[]])))$


/* Instances */

generalised_ucp0_cs(F) := generalised_ucp_cs(F,0);
generalised_ucp1(F) := generalised_ucp(F,1);
generalised_ucp2(F) := generalised_ucp(F,2);
generalised_ucp_pa1(F) := generalised_ucp_pa(F,1);
generalised_ucp_pa2(F) := generalised_ucp_pa(F,2);


/* *******************************
   * Reduction by weak autarkies *
   *******************************
*/

/* Generalised pure-literal-elimination, more precisely, reduction by
   weak autarkies found by making k assumptions; input a clause-set.
   weakaut_red(F,1) is pure-literal-elimination, strengthened by
   subsumption.
   Every weak autarky is found for k large enough. */
weakaut_red(F,k) := if k = 0 then F else
  block([L : literals_v(var_cs(F)), break : false, G],
    for x in L unless break do (
      G : weakaut_red(apply_pa({x},F),k-1),
      if subsetp(G, F) then break : true),
    if break then return(weakaut_red(G,k)) else return(F))$

/* Additionally return the weak autarky found. */
weakaut_red_pa(F,k) := if k = 0 then [F,{}] 
 else block(
  [V : var_cs(F), L, break : false, y, G, H],
  L : literals_v(V),
  for x in L unless break do (
    G : weakaut_red_pa(apply_pa({x},F),k-1),
    if subsetp(G[1], F) then (y : x, break : true)
  ),
  if break then (
    H : weakaut_red_pa(G[1],k), 
    return([H[1], union(H[2], G[2], {y})]))
  else return([F,{}]))$


/* ****************************************************************
   * Combining generalised unit-clause and weak-autarky-reduction *
   ****************************************************************
*/

/* Combined generalised ucp and weak-autarky-reductions: Guarantees that
   either F = {{}} or F = {} or for all literals x we have
     generalised_ucp(apply_pa({x}, F),k-1) <> {{}} and
     generalised_weakaut(apply_pa({x}, F),k-1) is not subset of F.
  For k >= n(F) solves the SAT-problem for F.
*/
generalised_ucp_war(F,k) := if has_empty_element(F) then {{}}
  elseif k = 0 then F else
  block([L : literals_v(var_cs(F)), break : false, G],
    for x in L unless break do (
      G : generalised_ucp_war(apply_pa({x},F),k-1),
      if G = {{}} then (
        F : apply_pa({-x},F), break : true)
      elseif subsetp(G, F) then (
        F : G, break : true
      )),
    if break then return(generalised_ucp_war(F,k)) else return(F))$

/* Additionally return the partial assignment yielding the result. */
generalised_ucp_war_pa(F,k) := block([V : var_cs(F)],
 if has_empty_element(F) then return([{{}}, V])
 elseif k = 0 then return([F,{}]) 
 else block(
  [L : literals_v(V), break : false, y, G, H],
  for x in L unless break do (
    G : generalised_ucp_war_pa(apply_pa({x},F),k-1),
    if G[1] = {{}} then (
      F : apply_pa({-x},F), y : -x, break : true)
    elseif subsetp(G[1], F) then (
      F : G[1], y : x, break : true)),
  if break then (
    H : generalised_ucp_war_pa(F,k), 
    return([H[1], union(H[2], G[2], {y})]))
  else return([F,{}])))$


/* ******************************************************************
   * Generalised elimination of pure literals by forced assignments *
   ******************************************************************
*/

/* This reduction is really meaningful only as a part of generalised_ucp_ple 
   below. */

/* Generalised pure-literal-elimination ("ple") by sub-ordinated ucp.
   Finds thus all weak autarkies which are "mostly enforced". */
generalised_ple(F,k) := block([L : literals_v(var_cs(F)), break : false, G],
  for x in L unless break do (
    G : generalised_ucp(apply_pa({x},F),k),
    if subsetp(G, F) then break : true),
  if break then return(generalised_ple(G,k)) else return(F))$

/* generalised_ple(F,0) is pure-literal-elimination.
   generalised_ple(F,1) is the lean kernel for F in 2-CNF if F all clauses of
   F have length (exactly) 2.
   If {} in F then the result is {{}}.
*/

/* Additionally return the weak autarky found */
generalised_ple_pa(F,k) := block([L : literals_v(var_cs(F)), break : false, y],
  for x in L unless break do
    if subsetp(generalised_ucp(apply_pa({x},F),k), F) then (y : x, break : true),
  if break then
   block([G : generalised_ucp_pa(apply_pa({y},F),k)],
    block([H : generalised_ple_pa(G[1],k)], 
     return([H[1], union(H[2], G[2], {y})])))
  else return([F,{}]))$


/* *******************************************************
   * Look-ahead reduction for r_k and enforced autarkies *
   *******************************************************
*/

/* Combined generalised ucp-ple: Guarantees that
   either F = {{}} or F = {} or for all literals x we have
     generalised_ucp(apply_pa({x}, F),k) <> {{}} and
     generalised_ucp(apply_pa({x}, F),k) is not subset of F.
*/
generalised_ucp_ple(F,k) := generalised_ple(generalised_ucp(F,k+1),k)$

/* generalised_ucp_ple(F,0) is unit-clause-elimination and elimination
   of pure literals.
   generalised_ucp_ple(F,1) solves SAT for clause-sizes at most 2.
*/

/* Additionally return the partial assignment leading to the reduced
   clause-set */
generalised_ucp_ple_pa(F,k) := block([G : generalised_ucp_pa(F,k+1), H],
  H : generalised_ple_pa(G[1],k),
  return([H[1], union(G[2], H[2])]))$

/* Instances */

generalised_ucp_ple0(F) := generalised_ucp_ple(F,0)$
generalised_ucp_ple1(F) := generalised_ucp_ple(F,1)$
generalised_ucp_ple_pa0(F) := generalised_ucp_ple_pa(F,0)$
generalised_ucp_ple_pa1(F) := generalised_ucp_ple_pa(F,1)$

/* Note that splitting trees obtained via generalised_ucp_ple(F,k)
   for unsatisfiable F are r_{k+1}-splitting trees!
*/


/*!
\endhtmlonly
*/
