/* Oliver Kullmann, 23.12.2008 (Schwalbach) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Reductions/UnitClausePropagation.mac
  \brief Functions for unit-clause-propagation on clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/UnitClausePropagation.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/PartialAssignments.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$

/* The most basic algorithm for unit-clause propagation, input a clause-set,
   output the reduced clause-set.
*/
ucp_0_cs(F) := block([U],
  do (
    if empty_element_p(F) then return({{}}),
    if emptyp(U : lunion(scs_k(F,1))) then return(F),
    if clashp(U,U) then return({{}}),
    F : apply_pa_cs(U,F)
  ))$

/* Now returning a pair [F,phi], where phi is a list of
   partial assignments, corresponding to the blocks of
   unit-clauses found (phi_1 comprises the unit-clauses
   in F, phi_2 those in pni_1 * F, etc.).
   Only forced assignments by unit-clauses are considered
   here, and so if {} in F, then the process stops, and the
   remaining clauses stay in F.
   If in some stage contradictory unit-clauses {x},{-x} are found,
   then the positive assignment is applied, while all other eliminations
   are ignored (if there are several such x, then that x with lexicographically
   first x or -x is chosen).
*/
ucp_lpa_0_cs(F) := block([phi : [], U],
  do (
    if empty_element_p(F) then return(),
    if emptyp(U : lunion(scs_k(F,1))) then return(),
    if clashp(U,U) then (block(
     [x : var_l(first_element(intersection(U,comp_sl(U))))],
      F : apply_pa_cs({x},F),
      phi : cons({x},phi)),
     return()),
    F : apply_pa_cs(U,F),
    phi : cons(U,phi)
  ),
  return([F,reverse(phi)]))$


/*!
\endhtmlonly
*/
