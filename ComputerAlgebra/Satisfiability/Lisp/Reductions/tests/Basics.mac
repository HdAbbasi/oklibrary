/* Oliver Kullmann, 28.12.2009 (Swansea) */
/* Copyright 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Reductions/tests/Basics.mac
  \brief Tests regarding the most basic reductions

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/tests/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/tests/DLL_solvers.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$

kill(f)$

/* *****************************
   * The notion of a reduction *
   *****************************
*/

okltest_weakest_reduction_cs(f) := block([F],
  assert(f(F) = F),
  true)$

okltest_strongest_reduction_cs(f) := block(
 [S : dll_simplest_first_shortest_clause],
  assert(okltest_SATsolver(buildq([f,S], lambda([FF], if f(fcs2cs(FF),S)={} then true else false))) = true),
  true)$


/* ***************************
   * Subsumption elimination *
   ***************************
*/

okltest_subsumption_elimination_cs(f) := (
  assert(f({}) = {}),
  assert(f({{}}) = {{}}),
  assert(f({{},{1}}) = {{}}),
  assert(f({{1},{2,3},{-1},{1,3}}) = {{1},{2,3},{-1}}),
  assert(f({{1,2},{2,3},{-1},{1,3}}) = {{1,2},{2,3},{-1},{1,3}}),
  assert(f({{1,2},{1,3,2},{1,-4,2},{2,3},{2,3,4},{2,3,-5}}) = {{1,2},{2,3}}),
  true)$
  
/*!
\endhtmlonly
*/
