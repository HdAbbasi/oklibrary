/* Oliver Kullmann, 25.4.2008 (Guangzhou) */
/* Copyright 2008, 2009, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Reductions/tests/DP-Reductions.mac
  \brief Tests for SAT-reductions

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/tests/DP-Reductions.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Pigeonhole.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/DeficiencyOne.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$

kill(f)$


/* *************************
   * Singular DP-reduction *
   *************************
*/

okltest_sdp_reduction_cs(f) := (
  assert(f({}) = {}),
  assert(f({{}}) = {{}}),
  assert(f({{1,2},{2,3},{-2,3},{-2,-3},{2},{-3}}) = {{1,2},{2,3},{-2,3},{-2,-3},{2},{-3}}),
  assert(f({{1,2},{1,-2},{2},{-2}}) = {{1,2},{1,-2},{2},{-2}}),
  for n : 0 thru 3 do block([F : full_fcs(n)[2]],
    assert(f(F) = if n <= 1 then {{}} else F)),
  for k : 0 thru 3 do block([F : marginal_musat1(k)],
    assert(f(F) = {{}})),
  for k : 0 thru 3 do block([F : uniform_usat_hitting_min(k)],
    assert(f(F) = {{}})),
  for k : 0 thru 3 do block([F : smusat_horn_cs(k)],
    assert(f(F) = {{}})),
  assert(nvar_cs(f(weak_php(3,2)[2])) = 3),
  true)$

okltest_onesdp_reduction_cs(f) := (
  assert(f({}) = {}),
  assert(f({{}}) = {{}}),
  assert(f({{1,2},{2,3},{-2,3},{-2,-3},{2},{-3}}) = {{1,2},{2,3},{-2,3},{-2,-3},{2},{-3}}),
  assert(f({{1,2},{1,-2},{2},{-2}}) = {{1,2},{1,-2},{2},{-2}}),
  for n : 0 thru 3 do block([F : full_fcs(n)[2]],
    assert(f(F) = if n <= 1 then {{}} else F)),
  for k : 0 thru 3 do block([F : marginal_musat1(k)],
    assert(f(F) = {{}})),
  for k : 0 thru 3 do block([F : uniform_usat_hitting_min(k)],
    assert(f(F) = {{}})),
  for k : 0 thru 3 do block([F : smusat_horn_cs(k)],
    assert(f(F) = {{}})),
  assert(nvar_cs(f(weak_php(3,2)[2])) = 6),
  assert(f({{1,2,8},{-1,3,9},{-2,4},{-2,5},{-3,6},{-3,7}}) = {{2,3,8,9},{-2,4},{-2,5},{-3,6},{-3,7}}),
  true)$

okltest_sdp_set_cs_bydef(f) := block(
  assert(f({}) = {{}}),
  assert(f({{}}) = {{{}}}),
  for k : 0 thru if oklib_test_level=0 then 2 else 3 do
   block([F : marginal_musat1(k)],
    assert(f(F) = {{{}}})),
  assert(f({{1,2},{-1,3},{-1,-3},{-2,3},{-2,-3}}) = {{{2,3},{-2,3},{2,-3},{-2,-3}}, {{1,3},{1,-3},{-1,3},{-1,-3}}}),
  assert(f({{5,6,1},{-5,2},{-5,6,-2},{6,-1,2},{6,-1,-2},{-6,3,4},{-6,3,-4},{-6,-3,4},{-6,-3,-4}}) = { {{6,1,2},{6,1,-2},{6,-1,2}, {6,-1,-2},{-6,3,4},{-6,3,-4},{-6,-3,4},{-6,-3,-4}}, {{-6,-4,-3},{-6,-4,3},{-6,-3,4},{-6,3,4},{-5,-2,6},{-5,2},{-2,5,6},{2,5,6}}}),
  if oklib_test_level=0 then return(true),
  assert(f({{1,2},{-1,3,5},{-1,4,6},{-2,3,5},{-2,4,6},{-3,5},{-4,6},{-5,-6}}) = { {{2,6},{-2,6},{2,-6},{-2,-6}}, {{1,6},{-1,6},{1,-6},{-1,-6}}, {{2,5},{-2,5},{2,-5},{-2,-5}}, {{1,5},{-1,5},{1,-5},{-1,-5}} }),
  assert(f({{1,2},{-1,3},{-2,4},{-2,5},{-3,6},{-3,7}}) = { {{3,4},{3,5},{-3,6},{-3,7}}, {{2,6},{2,7},{-2,4},{-2,5}}, {{1,4},{1,5},{-1,6},{-1,7}} }),
  assert(f({{1,2,8},{-1,3,9},{-2,4},{-2,5},{-3,6},{-3,7}}) = { {{3,4,8,9},{3,5,8,9},{-3,6},{-3,7}}, {{2,6,8,9},{2,7,8,9},{-2,4},{-2,5}}, {{1,4,8},{1,5,8},{-1,6,9},{-1,7,9}} }),
  true)$

okltest_cfsdp_count_cs_bydef(f) := block(
  assert(f({}) = 1),
  assert(f({{}}) = 1),
  assert(f({{1,2,8},{-1,3,9},{-2,4},{-2,5},{-3,6},{-3,7}}) = 3),
  assert(f({{2,3,8,9},{-2,4},{-2,5},{-3,6},{-3,7}}) = 2),
  assert(f({{1,2},{-1,3},{-2,4},{-2,-4},{-3,4},{-3,-4}}) = 3),
  assert(f({{2,3},{-2,4},{-2,-4},{-3,4},{-3,-4}}) = 2),
  if oklib_test_level=0 then return(true),
  assert(f({{2,5,3,6},{-2,4},{-2,-4},{-3,4},{-3,-4},{-5,7,8},{-5,-7,8},{-5,7,-8},{-5,-7,-8},{-6,9,10},{-6,-9,10},{-6,9,-10},{-6,-9,-10}}) = 4),
  true)$

okltest_cfsdp_csp_bydef(f) := (
  assert(f({}) = true),
  assert(f({{}}) = true),
  for k : 0 thru if oklib_test_level=0 then 2 else 3 do
   block([F : marginal_musat1(k)],
    assert(f(F) = true)),
  assert(f({{1,2},{-1,3},{-1,-3},{-2,3},{-2,-3}}) = false),
  true)$

okltest_cfisdp_count_cs_bydef(f) := block(
  assert(f({}) = 1),
  assert(f({{}}) = 1),
  assert(f({{1,2,8},{-1,3,9},{-2,4},{-2,5},{-3,6},{-3,7}}) = 2),
  assert(f({{2,3,8,9},{-2,4},{-2,5},{-3,6},{-3,7}}) = 1),
  assert(f({{1,2},{-1,3},{-2,4},{-2,-4},{-3,4},{-3,-4}}) = 1),
  if oklib_test_level=0 then return(true),
  assert(f({{1,2,5},{-1,3,6},{-2,4},{-2,-4},{-3,4},{-3,-4}}) = 2),
  assert(f({{2,5,3,6},{-2,4},{-2,-4},{-3,4},{-3,-4}}) = 1),
  assert(f({{1,2,5},{-1,3,6},{-2,4},{-2,-4},{-3,4},{-3,-4},{-5,7,8},{-5,-7,8},{-5,7,-8},{-5,-7,-8},{-6,9,10},{-6,-9,10},{-6,9,-10},{-6,-9,-10}}) = 5),
  assert(f({{2,5,3,6},{-2,4},{-2,-4},{-3,4},{-3,-4},{-5,7,8},{-5,-7,8},{-5,7,-8},{-5,-7,-8},{-6,9,10},{-6,-9,10},{-6,9,-10},{-6,-9,-10}}) = 2),
  assert(f({{1,2,5},{-1,3,6},{-2,4,5},{-2,-4,6},{-3,4},{-3,-4},{-5,7,8},{-5,-7,8},{-5,7,-8},{-5,-7,-8},{-6,9,10},{-6,-9,10},{-6,9,-10},{-6,-9,-10}}) = 3),
  assert(f({{2,5,3,6},{-2,4,5},{-2,-4,6},{-3,4},{-3,-4},{-5,7,8},{-5,-7,8},{-5,7,-8},{-5,-7,-8},{-6,9,10},{-6,-9,10},{-6,9,-10},{-6,-9,-10}}) = 2),
  assert(f({{-10,-9,-6},{-10,-6,9},{-9,-6,10},{-8,-7,-5},{-8,-5,7},{-7,-5,8},{-6,9,10},{-5,7,8},{-4,-3},{-4,-2,6},{-3,4},{-2,4,5},{2,3,5,6}}) = 2),
  assert(f({{1,2},{-1,3,5},{-1,4,6},{-2,3,5},{-2,4,6},{-3,5},{-4,6},{-5,-6}}) = 1),
  true)$

okltest_cfisdp_csp_bydef(f) := (
  assert(f({}) = true),
  assert(f({{}}) = true),
  assert(f({{1,2},{-1,3},{-1,-3},{-2,3},{-2,-3}}) = true),
  assert(f({{1,2,8},{-1,3,9},{-2,4},{-2,5},{-3,6},{-3,7}}) = false),
  true)$

okltest_nonsingular_csp(f) := (
  assert(f({}) = true),
  assert(f({{}}) = true),
  assert(f({{1}}) = true),
  assert(f({{-1}}) = true),
  assert(f({{1},{-1}}) = false),
  assert(f({{1,2}}) = true),
  assert(f({{1,2},{-1,2}}) = false),
  assert(f({{1,2},{-1,2},{-2,1}}) = false),
  assert(f({{1,2},{-1,2},{-2,1},{-1,-2}}) = true),
  assert(f({{-3,-2,-1},{-3,1},{-2,3},{-1,2},{1,2,3}}) = true),
  assert(f(weak_php(3,2)[2]) = false),
  true)$

okltest_nononesingular_csp(f) := (
  assert(f({}) = true),
  assert(f({{}}) = true),
  assert(f({{1}}) = true),
  assert(f({{-1}}) = true),
  assert(f({{1},{-1}}) = false),
  assert(f({{1,2}}) = true),
  assert(f({{1,2},{-1,2}}) = false),
  assert(f({{1,2},{-1,2},{-2,1}}) = true),
  assert(f({{1,2},{-1,2},{-2,1},{-1,-2}}) = true),
  assert(f({{-3,-2,-1},{-3,1},{-2,3},{-1,2},{1,2,3}}) = true),
  assert(f(weak_php(3,2)[2]) = true),
  true)$


/*!
\endhtmlonly
*/
