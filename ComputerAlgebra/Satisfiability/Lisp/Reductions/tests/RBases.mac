/* Oliver Kullmann, 28.12.2009 (Swansea) */
/* Copyright 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Reductions/tests/RBases.mac
  \brief Tests for components related to r-bases

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/tests/RBases.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/UnitClausePropagation.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/tests/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/GeneralisedUCP.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/Cores.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$

kill(f)$



/* ************
   * Sampling *
   ************
*/

okltest_rand_rbase_cs(f) := block(
 [S, R, fr, F0,res0,core0,add0, s : make_random_state(false)],
  assert(f({},ucp_0_cs) = {}),
  assert(f({{}},ucp_0_cs) = {{}}),
  for n : 0 thru 5 do block([F : setify(create_list({i},i,1,n))],
    assert(f(F,ucp_0_cs) = F)),
  assert(f({{},{1}},ucp_0_cs) = {{}}),
  assert(f({{1},{-1},{2}},ucp_0_cs) = {{1},{-1}}),
  set_random(0),
  assert(f({{1},{-1},{2},{-2}},ucp_0_cs) =  {{1},{-1}}),
  set_random(1),
  assert(f({{1},{-1},{2},{-2}},ucp_0_cs) =  {{2},{-2}}),
  assert(f({{1,2,3},{-1,3,4},{2,3,4}},ucp_0_cs) = {{1,2,3},{-1,3,4}}),
  assert(f({{1,2,3},{-1,3,4},{2,3,4},{3,-4,5},{2,3,5}},ucp_0_cs) = {{1,2,3},{-1,3,4},{3,-4,5}}),
  assert(f({{1,2,3},{2,-3,4},{1,2,4},{5,-6,7},{-4,5,6},{-4,5,7},{1,2,5,7}},ucp_0_cs) = {{1,2,3},{2,-3,4},{5,-6,7},{-4,5,6}}),
  core0 : {{1,2,-3,7},{1,2,3,7},{-1,7},{4,5,-6,-7},{4,5,6,-7},{-5,-7}},
  add0 : {{2,7,8},{4,-7,8},{2,4,8}},
  F0 : union(core0,add0),
  for n : 0 thru 15 do block([res0],
    set_random(n),
    res0 : f(F0,ucp_0_cs),
    assert(subsetp(core0,res0) = true),
    assert(setdifference(res0,core0) = if elementp(n,{0,2,3,10}) then {{2,4,8}} elseif elementp(n,{1,4,5,6,7,9,11,12,13,14}) then {{4,-7,8}} elseif elementp(n,{8,15}) then {{2,7,8}})
  ),
  assert(f(F0,weakest_reduction_cs) = F0),
  assert(okltest_subsumption_elimination_cs(buildq([f], lambda([F], f(F,weakest_reduction_cs)))) = true),
  assert(okltest_subsumption_elimination_cs(buildq([f], lambda([F], f(F,generalised_ucp0_cs)))) = true),
  S : dll_simplest_first_shortest_clause,
  R : buildq([S],lambda([F], strongest_reduction_cs(F,S))),
  assert(f(F0,R) = core0),
  fr : buildq([f,R],lambda([F], f(F,R))),
  assert(okltest_some_irr_cs(fr) = true),
  /* XXX */
  set_random_state(s),
  true)$

/*!
\endhtmlonly
*/
