/* Oliver Kullmann, 28.12.2009 (Swansea) */
/* Copyright 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Reductions/Basics.mac
  \brief Basic reductions

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$


/* *****************************
   * The notion of a reduction *
   *****************************
*/

/* 
  A "reduction" for CNF clause-sets (and its variations) is a map
  r: CLS -> CLS such that for all F in CLS, r(F) is satisfiability
  equivalent to F
*/

weakest_reduction_cs(F) := F$
/* Taking a SAT solver S as parameter (which returns true of false): */
strongest_reduction_cs(F,S_) := if S_(cs2fcs(F)) then {} else {{}}$


/* ***************************
   * Subsumption elimination *
   ***************************
*/

/* Removes all subsumed clauses from clause-set F: */
subsumption_elimination_cs(F) := min_elements(F)$

/*!
\endhtmlonly
*/
