/* Oliver Kullmann, 25.4.2008 (Guangzhou) */
/* Copyright 2008, 2009, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Reductions/DP-Reductions.mac
  \brief Special cases of applications of the DP-operator which yield reductions

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/DP-Reductions.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Resolution/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Symmetries/Symmetries.mac")$


/* *************************
   * Singular DP-reduction *
   *************************
*/

/* Applying elimination of singular literals as long as possible, choosing
   always the first singular variable available (in the Maxima-order): */
sdp_reduction_cs(F) := block([S : singular_variables_cs(F)],
 if emptyp(S) then return(F) else
 return(sdp_reduction_cs(dp_operator_cs(F,first_element(S)))))$

/* Full reduction regarding 1sDP-reduction (which is confluent): */
onesdp_reduction_cs(F) := block([S : onesingular_variables_cs(F)],
 if emptyp(S) then return(F) else
 return(onesdp_reduction_cs(dp_operator_cs(F,first_element(S)))))$

/* The set of all fully reduced results obtained by sDP-reduction: */
sdp_set_cs_bydef(F) := block([S : singular_variables_cs(F)],
 if emptyp(S) then return({F}) else
 return(lunion(map(lambda([v],sdp_set_cs_bydef(dp_operator_cs(F,v))),
                   listify(S)))))$

/* The number of different reduction-results via sDP: */
cfsdp_count_cs_bydef(F) := length(sdp_set_cs_bydef(F))$
/* Whether sDP-reduction is confluent: */
cfsdp_csp_bydef(F) := is(cfsdp_count_cs_bydef(F) = 1)$

/* The number of isomorphism-classes in sDP(F): */
cfisdp_count_cs_bydef(F) := length(representatives_cs(sdp_set_cs_bydef(F)))$
/* Whether sDP-reduction is confluent modulo isomorphism: */
cfisdp_csp_bydef(F) := is(cfisdp_count_cs_bydef(F) = 1)$


/* Predicate for testing whether clause-set F is reduced w.r.t. singular
   DP-reduction: */
nonsingular_csp(F) := emptyp(singular_variables_cs(F))$
/* Testing whether clause-set F is reduced w.r.t. 1-singular DP-reduction: */
nononesingular_csp(F) := emptyp(onesingular_variables_cs(F))$


/*!
\endhtmlonly
*/
