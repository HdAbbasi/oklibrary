/* Oliver Kullmann, 27.12.2009 (Swansea) */
/* Copyright 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Reductions/RBases.mac
  \brief Removing redundancies from clause-sets by reductions

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/RBases.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/PartialAssignments.mac")$

/*
 Consider a function r: CLS -> CLS; the meaning is that r is a "reduction",
 which means that r(F) is sat-equivalent to F, but for the general definitions
 actually no requirements are needed for r.
 Consider a clause-set F (regarding as CNF).
 An "r-generating subset of F" is a subset F' <= F such that for all
 clauses C in F we have {} in r(vp_C * F').
 An "r-base of F" is a minimal r-generating subset of F.
*/

/* Predicate for deciding whether G is r-generating for F (assuming only
   that if {} in F, then {} in red_(F)):
*/

/* First without subsumption-check: */
rgen0_p_cs(G,F,red_) :=
  every_s(lambda([C], elementp({}, red_(apply_pa_cs(comp_sl(C), G)))),
          setdifference(F,G))$
/* Now the complete test: */
rgen_p_cs(G,F,red_) := subsetp(G,F) and rgen0_p_cs(G,F,red_)$

/* Now the predicate whether G is an r-base for F: */
rbase_p_cs(G,F,red_) := rgen_p_cs(G,F,red_) and
  every_s(lambda([C], not rgen0_p_cs(disjoin(C,G),F,red_)), G)$

/* Computes the set of all r-bases of clause-set F "by definition": */
all_rbases_bydef(F,red_) :=
  subset(powerset(F), lambda([G], rbase_p_cs(G,F,red_)))$
    

/* ************
   * Sampling *
   ************
*/

/* Computing some red_-base of clause-set F according to the definition,
   that is, a minimal subset S of F such that for all clauses D in F - S
   we have {} in red_(phi_D * F).
   The only assumption on red_ (besides {} in F => {} in red_(F)) is that
   if {} in red_(F) then also {} in red_(F') for any super-set F'
   of F (so that once a clause is classified as unremovable, then this
   doesn't change after further removals).
   Any possible red_-base will be chosen if its clauses come first in the
   order; so given that random_permutation is really random, all possible
   bases have non-zero probability of being chosen.
*/

rand_rbase_cs(F,red_) := block([F0 : F], 
  for C in random_permutation(F0) do
    if rgen0_p_cs(disjoin(C,F),F0,red_) then F : disjoin(C,F),
 return(F))$

/* Remarks:
   If red_(F) = F then rand_rbase_cs(F,red_) is subsumption elimination for F.
   If red_(F) = generalised_ucp_cs(F,inf) then rand_rbase_cs(F,red_) returns
   a choice of an irredundant core of F.
*/

/*!
\endhtmlonly
*/
