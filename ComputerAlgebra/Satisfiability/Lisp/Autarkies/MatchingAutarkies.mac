/* Oliver Kullmann, 1.6.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Autarkies/MatchingAutarkies.mac
  \brief Functions related to matching autarkies

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/Autarkies/MatchingAutarkies.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/PartialAssignments.mac")$


/* ********************
   * Basic operations *
   ********************
*/

/* The ordered directed clause-literal graph of an ordered
   clause-set, restricted to the edges to satisfying 
   literal-occurrences for a given partial assignment:
*/
cllit_aut_odg(F,phi) := 
  [append(
     map(lambda([C],[C,1]),F), 
     map(lambda([x],[x,2]),
       listify(intersection(literals_v(var_ocs(F)),phi)))),
   apply(append,
     map(
       lambda([C], 
         map(lambda([x],[[C,1],[x,2]]),
             listify(intersection(phi,C)))),
       F))]$

/* Test for a matching autarky for an ordered clause-set: */
maut_paocs_p(phi,F) := block([F0 : socs_V(F,var_pa(phi))],
  is(length(max_matching(og2mg_nl(odg2og(cllit_aut_odg(F0,phi))))) = length(F0)))$

/* The set of all matching autarkies for an ordered clause-set: */
all_maut_ocs(F) := subset(all_pass(var_ocs(F)), 
  lambda([phi],maut_paocs_p(phi,F)))$
/* The matching autarky monoid of an ordered clause-set: */
mautmon_ocs(F) := [all_maut_ocs(F), compo_pass, {}]$


/* *****************************
   * Matching-lean clause-sets *
   *****************************
*/

/* Testing matching-leanness of clause-sets by the strict maximality of the 
   maximum deficiency. */
matchinglean_smax_p(F) := if emptyp(F) then true else block(
 [V : var_cs(F), def],
  def : deficiency_fcs([V,F]),
  if def <= 0 then return(false),
  block([found : false],
    for C in F unless found do 
      found : is(def <= max_deficiency_fcs([V,disjoin(C,F)])),
    return(not found)))$

/* An example for a claw-free matching lean clause-set of deficiency 1.
   From [Kullmann, SAT 2003], Section 5. */
clawfree_mlean_def1 : 
[setn(8), {
  {1,3,8},{1,-3,4},{-1,-2,6,7},{-1,-2,-5,-6},{2,-3,-4,-5},{-4,5,-7,-8},
  {-1,5,-6,8},{-1,4,6,-7},{2,3,7,-8}
 }]$

/*!
\endhtmlonly
*/

