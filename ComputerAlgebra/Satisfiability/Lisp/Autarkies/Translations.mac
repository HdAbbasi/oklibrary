/* Oliver Kullmann, 27.1.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Autarkies/Translations.mac
  \brief Functions translating autarky-search-problems into other problems

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Autarkies/Translations.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$

/* *********************************************************
   * Translation to SAT according to Liffiton and Sakallah *
   *********************************************************
*/

/* Based on [Liffiton, Sakallah, 2008; Searching for Autarkies to Trim
   Unsatisfiable Clause Sets]. */

/* "lsav" : Liffiton-Sakallah autarky variables */
kill(lsavl,lsavv,lsavc)$
declare(lsavl, noun, lsavv, noun, lsavc, noun)$
declare(lsavl, posfun, lsavv, posfun, lsavc, posfun)$
lsavl_var(v,s) := nounify(lsavl)(v,s)$ /* v an original variable, s in {-1,1} */
lsavv_var(v) := nounify(lsavv)(v)$ /* v an original variable */
lsavc_var(C) := nounify(lsavc)(C)$ /* C an original clause */

/* Meaning:
 - lsavv(v) is true iff the autarky uses v
 - lsavc(C) is true iff the autarky satisfies C
 - lsavl(v,1) is the literal v, lsavl(v,-1) is the literal -v;
   lsavl(v,1) is true iff v is assigned and set to true,
   lsavl(v,-1) is true iff v is assigned and set to false.
*/

/* Auxiliary function to translate literals */
trans_lit_ls(x) := if x > 0 then lsavl_var(x,1) else lsavl_var(-x,-1)$

/* Input a formal clause-set FF, returns a formal clause-set GG whose
   satisfying assignments correspond to the autarkies of FF.
   More precisely, the assigned original variables v are those
   with lsavv(c) true, and the satisfied clauses C are those
   with lsavc(C) true. */
/* Prerequisite: FF does not use variables created by lsavl, lsavv
   or lsavc (a sufficient test is that 
   freeof(lsavl, FF) and freeof(lsavv, FF) and freeof(lsavc, FF)
   is true).
*/
aut_sat_ls(FF) := block([V : listify(FF[1]), L : listify(FF[2])],
  return(
   [union(FF[1],
     setify(create_list(lsavl_var(v,-1),v,V)),
     setify(create_list(lsavl_var(v,+1),v,V)),
     setify(create_list(lsavv_var(v),v,V)),
     setify(create_list(lsavc_var(C),C,L))),
    union(
     /* if a clauses is satisfied, then also some of its literals: */
     setify(create_list(adjoin(-lsavc_var(C),map(trans_lit_ls,C)),C,L)),
     /* make lsavl_var(v,1) equivalent to (lsavv_var(v) & v): */
     family_sets_union(V, lambda([v], {
       {-lsavl_var(v,1),lsavv_var(v)},
       {-lsavl_var(v,1),v},
       {lsavl_var(v,1),-lsavv_var(v),-v}})),
     /* make lsavl_var(v,-1) equivalent to (lsavv_var(v) & -v): */
     family_sets_union(V, lambda([v], {
       {-lsavl_var(v,-1),lsavv_var(v)},
       {-lsavl_var(v,-1),-v},
       {lsavl_var(v,-1),-lsavv_var(v),v}})),
     /* if a variable in a clause is assigned, then the clause must
        be satisfied: */
     setify(create_list({-lsavv_var(var_l(x)),lsavc_var(C)}, C,L, x,listify(C))))]))$

/* The corresponding translation FF -> GG such that FF is lean iff 
   GG is unsatisfiable (adding a clause which demands that at least
   one variable is used in the autarky). */
lean_usat_ls(FF) := block([T : aut_sat_ls(FF)],
  [T[1], adjoin(map(lsavv,FF[1]),T[2])])$


/* Translates an autarky phi for formal clause-set FF into a satisfying 
   assignment for aut_sat_ls(FF). */
/* Prerequisite: phi uses only variables from FF. */
trans_aut_sat_ls(phi,FF) := block(
 [VF : listify(FF[1]), L : listify(FF[2]), S : sat_pa(phi,FF[2]), V, OV],
 phi : restr_pa(phi, FF[1]),
 V : var_pa(phi), /* the variables in the autarky */
 OV : setdifference(FF[1], V), /* unassigned variables */
 return(union(phi,
  map(lambda([x],lsavl_var(var_l(x),sign_l(x))), phi),
  map(lambda([x],-lsavl_var(var_l(x),-sign_l(x))), phi),
  map(lambda([v],-lsavl_var(v,-1)), OV),
  map(lambda([v],-lsavl_var(v,+1)), OV),
  map(lsavv_var,V),
  comp_sl(map(lsavv_var,OV)),
  map(lsavc_var, S),
  map(lambda([C],-lsavc_var(C)), setdifference(FF[2],S)))))$
/* For
 check_ls(phi,FF) := satisfyingpap(trans_aut_sat_ls(phi,FF),aut_sat_ls(FF)[2])
   we have check_ls(phi,FF) = true iff phi is an autarky for FF.
*/

/* Given a satisfying partial assignment phi for aut_sat_ls(FF), returns
   the set of clauses of FF satisfied by phi. */
itransc_aut_sat_ls(phi,FF) := 
  map(lambda([x],args(x)[1]),subset(phi,lambda([x],is(not atom(x) and op(x) = lsavc))))$
/* Given a satisfying partial assignment phi for aut_sat_ls(FF), returns
   the corresponding autarky for FF. */
itrans_aut_sat_ls(phi,FF) := block(
 [active_vars : subset(phi,lambda([x],is(not atom(x) and op(x) = lsavv)))],
  return(intersection(phi, literals_v(map(lambda([x],args(x)[1]),active_vars)))))$


/* Find an autarky for a formal clause-set FF by translation to 
   SAT, and using a SAT solver returning a partial assignment (or "false");
   the autarky uses only variables from FF and is non-empty iff possible. */
find_autarky_ls_fcs(FF,solver) := block([GG : lean_usat_ls(FF), phi],
  phi : solver(GG), 
  if phi=false then return({})
  else return(itrans_aut_sat_ls(phi,FF)))$

/*!
\endhtmlonly
*/
