/* Oliver Kullmann, 5.7.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Autarkies/AutarkyMonoid.mac
  \brief Functions translating autarky-search-problems into other problems

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/Autarkies/AutarkyMonoid.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/PartialAssignments.mac")$
oklib_include("Transitional/ComputerAlgebra/Algebra/Lisp/Groupoids/Closures.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/RandomClauseSets.mac")$


/* The autarky monoid is computed by M = autmon_cs(F), while the set of 
   autarkies is A = all_aut_cs(F) = M[1].
   Extract the atoms by min_elements(disjoin({},A)) and the maximal autarkies
   by max_elements(A).
   The indecomposable elements are indecomposable_elements_bydef_grd(M).
*/

/* First attempt at analysing the autarky monoid: Computing
 - the set of autarkies
 - the set of indecomposable autarkies
 - the set of atomic autarkies
 - the variables involved in any autarky
 - the variables involved only in indecomposable autarkies
 - the variables involved only in atomic autarkies
 - the largest autark subset
 - all clauses satisfied by indecomposable autarkies
 - all clauses satisfied by atomic autarkies.
*/
analyse_autmon(F) := block([M : autmon_cs(F), V,FA, At,VAt,Ft, I,VI,Fi],
  V : var_cs(M[1]), FA : scls_V(F,V),
  At : min_elements(disjoin({},M[1])), VAt : var_cs(At), Ft : scls_V(F,VAt),
  I : indecomposable_elements_bydef_grd(M), VI : var_cs(I), Fi : scls_V(F,VI),
  [M[1],I,At,  V,VI,VAt, FA,Fi,Ft])$

/* An open problem: Does the following function always return true? */
are_indecomposable_autarkies_sufficient_cs(F) := block([A : analyse_autmon(F)],
  is(A[8] = A[7]))$
/* Searching for a counter-example: */
test_sufficiency_indaut(n,k,c) := block([found : false], 
 unless found#false do
  block([F : setify(random_fcl(n,k,c)[2]), an],
   an : analyse_autmon(F),
   if oklib_monitor then print(map(length,an)),
   if length(an[8]) < length(an[7]) then
     found : F
   ),
 return(found))$ 

/* The restricted autarky-closure: */
rautclosure_bydef_cs(F) := all_aut_cs(all_aut_cs(F))$

/*!
\endhtmlonly
*/
