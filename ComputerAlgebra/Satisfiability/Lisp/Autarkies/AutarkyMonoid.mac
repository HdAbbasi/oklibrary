/* Oliver Kullmann, 5.7.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Autarkies/AutarkyMonoid.mac
  \brief Functions translating autarky-search-problems into other problems

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/Autarkies/AutarkyMonoid.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/PartialAssignments.mac")$
oklib_include("Transitional/ComputerAlgebra/Algebra/Lisp/Groupoids/Closures.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/RandomClauseSets.mac")$


/* The autarky monoid is computed by M = autmon_cs(F), while the set of 
   autarkies is A = all_aut_cs(F) = M[1] (and the composition is
   compo_pass = M[2]; all_sat_cs(F) is the set of all (total) satisfying
   assignments).
   Extract the atoms by min_elements(disjoin({},A)) and the maximal autarkies
   by max_elements(A).
   The indecomposable elements are indecomposable_elements_bydef_grd(M).
*/

/* ********************************
   * Analysing the autarky monoid *
   ********************************
*/

/* First attempt at analysing the autarky monoid: Computing
 - the set of autarkies
 - the set of indecomposable autarkies
 - the set of atomic autarkies
 - the variables involved in any autarky
 - the variables involved only in indecomposable autarkies
 - the variables involved only in atomic autarkies
 - the largest autark subset
 - all clauses satisfied by indecomposable autarkies
 - all clauses satisfied by atomic autarkies.
*/
analyse_autmon(F) := block([M : autmon_cs(F), V,FA, At,VAt,Ft, I,VI,Fi],
  V : var_cs(M[1]), FA : scls_V(F,V),
  At : min_elements(disjoin({},M[1])), VAt : var_cs(At), Ft : scls_V(F,VAt),
  I : indecomposable_elements_bydef_grd(M), VI : var_cs(I), Fi : scls_V(F,VI),
  [M[1],I,At,  V,VI,VAt, FA,Fi,Ft])$


/* ************
   * Examples *
   ************
*/

trivial_exmp1_autmon_fcs(n) := [setn(n), {setn(n)}]$
/* The structure of the autarky monoid for
    F : trivial_exmp1_autmon_fcs(n)[2]
    M : autmon_cs(F)
   is as follows:
 - There are n minimal autarkies {i}, i.e., 
   min_elements(disjoin({},M[1])) = setify(create_list({i},i,1,n)).
 - There are 2^n-1 maximal autarkies (the satisfying total assignments) for
   n >= 1, while for n=0 we have one; i.e.,
   length(max_elements(M[1])) = if n=0 then 1 else 2^n - 1.
 - There are 3^n - (2^n - 1) autarkies (exclude all negative assignments), 
   i.e.,
   length(M[1]) = 3^n - 2^n + 1.
 - There are n + n(n-1) + 1 indecomposable autarkies, namely the minimal
   autarkies, the autarkies {i,-j}, and the empty autarky.
   This yields also a (smallest w.r.t. semigroup-generation) generating set,
   i.e.,
   length(indecomposable_elements_bydef_grd(M)) = n + n*(n-1) + 1,
   is(closure_bydef_grd(M[2], indecomposable_elements_bydef_grd(M)) = M[1]).
*/

trivial_exmp2_autmon_fcs(n) := [setn(2*n), 
 setify(create_list({2*i-1,2*i},i,1,n))]$
/* The structure of the autarky monoid for
    F : trivial_exmp2_autmon_fcs(n)[2]
    M : autmon_cs(F)
   is as follows:
 - There are 2n minimal autarkies {i}, i.e., 
   min_elements(disjoin({},M[1])) = setify(create_list({i},i,1,2*n)).
 - There are 3^n satisfying total assignments, which are the
   combinations of the three satisfying assignmens {x,y},{-x,y},{y,-x}
   for the clauses {x,y}, wherex=2i-1 and y=2i, i.e.,
   length(all_sat_cs(F)) = 3^n.
 - There are 6^n autarkies, which are the combinations of the 6
   autarkies for the clauses {x,y} (see trivial_exmp1_autmon_fcs),
   i.e.,
   length(M[1]) = 6^n.
 - There are 4n+1 indecomposable autarkies, which are the four indecomposable
   autarkies for each clause {x,y}, plus the empty autarky, and this yields 
   also a (smallest w.r.t. semigroup-generation) generating set, i.e.,
   length(indecomposable_elements_bydef_grd(M)) = 4*n+1,
   is(closure_bydef_grd(M[2], indecomposable_elements_bydef_grd(M)) = M[1]).
*/

/* *******************************************
   * On "sufficient" selections of autarkies *
   *******************************************
*/

/* An open problem: Does the following function always return true? */
/* The CONJECTURE is that it does. */
are_indecomposable_autarkies_sufficient_cs(F) := block([A : analyse_autmon(F)],
  is(A[8] = A[7]))$

/* Searching for counter-examples: */

test_sufficiency_indaut(n,k,c) := block([found : false], 
 unless found#false do
  block([F : setify(random_fcl(n,k,c)[2]), an],
   an : analyse_autmon(F),
   if oklib_monitor then
     print(F, ":", statistics_cs(F), map(length,an)),
   if length(an[8]) < length(an[7]) then
     found : F
   ),
 return(found))$
test_sufficiency_indaut_rcl(n,p,c) := block([found : false], 
 unless found#false do
  block([F : setify(random_rcl_fcl(n,p,c)[2]), an],
   an : analyse_autmon(F),
   if oklib_monitor then
     print(F, ":", statistics_cs(F), map(length,an)),
   if length(an[8]) < length(an[7]) then
     found : F
   ),
 return(found))$
test_sufficiency_indaut_rrcl(n,c) := block([found : false], 
 unless found#false do
  block([p : random(1.0), F, an],
   F : setify(random_rcl_fcl(n,p,c)[2]),
   an : analyse_autmon(F),
   if oklib_monitor then
     print(F, ":", statistics_cs(F), map(length,an)),
   if length(an[8]) < length(an[7]) then
     found : F
   ),
 return(found))$
test_sufficiency_indaut_rnrrcl(n,c0) := block([found : false], 
 unless found#false do
  block([p : random(1.0), c : random(c0), F, an],
   F : setify(random_rcl_fcl(n,p,c)[2]),
   an : analyse_autmon(F),
   if oklib_monitor then
     print(F, ":", statistics_cs(F), map(length,an)),
   if length(an[8]) < length(an[7]) then
     found : F
   ),
 return(found))$


/* **********************
   * On autarky duality *
   **********************
*/

/* The restricted autarky-closure: */
rautclosure_bydef_cs(F) := all_aut_cs(all_aut_cs(F))$

rautclosure1_cs(F) := 
 adjoin({},closure_bydef_grd(compo_pass,resolution_closure_cs(F)[1]))$
/* An example where rautclosure1_cs(F) < rautclosure_bydef_cs(F):
 {{-4,-3,-2,-1},{-4,-1,2,3},{-2,4}}. */
rautclosure2_cs(F) := 
 adjoin({},resolution_closure_cs(closure_bydef_grd(compo_pass,F))[1])$

/* Question: Is always rautclosure2_cs(F) a superset of
   rautclosure_bydef_cs(F)? */
/* The CONJECTURE is that this is true. */
experiment_autclosures(n,c0) := block([found : false],
 unless found#false do
  block([p : random(1.0), c : random(c0), F, F0,F2],
   F : setify(random_rcl_fcl(n,p,c)[2]),
   F0 : rautclosure_bydef_cs(F),
   F2 : rautclosure2_cs(F),
print(map(statistics_cs,[F,F0,F2])),
   if not subsetp(F0,F2) then
     found : [F,2]
   ),
 return(found))$

/*!
\endhtmlonly
*/
