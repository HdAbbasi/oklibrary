/* Oliver Kullmann, 14.5.2008 (Guangzhou) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Autarkies/tests/Translations.mac
  \brief Tests for autarky search via reductions to other problems

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/Autarkies/tests/Translations.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Autarkies/Translations.mac")$

kill(f)$


okltest_aut_sat_ls(f) := (
  assert(f([{},{}]) = [{},{}]),
  assert(f([{},{{}}]) = [{lsavc_var({})}, {{-lsavc_var({})}}]),
  true)$

/* Test function to check a leanness-decision-function (returning
   true iff lean (false otherwise)). */
okltest_lean(f) := (
  assert(f([{},{}]) = true),
  assert(f([{},{{}}]) = true),
  assert(f([{1},{}]) = false),
  assert(f([{1},{{}}]) = false),
  assert(f([{1,2},{{2},{-1},{1}}]) = false),
  if oklib_test_level = 0 then return(true),
  for n : 0 thru 3 do
    assert(f(full_fcs(n)) = true),
  true)$


okltest_lean_usat_ls(f) := block([solver : dll_simplest_trivial2],
  assert(nvar_f(f(ls_exmp_talk_guangzhou)) = 5 + 5 + 6 + 2 * 5),
  okltest_lean(buildq([f,solver],lambda([FF], not solver(f(FF))))),
  true)$

ls_exmp_talk_guangzhou : [
  {1,2,3,4,5}, {{1},{-1,2},{-1,-2}, {-2,3},{4,5},{-4,-5}}]$

autarky_test_cases : [ /* autarkies and their formal clause-sets */
  [{}, [{},{}]],
  [{}, [{},{{}}]],
  [{}, [{1},{{-1},{1}}]],
  [{1}, [{1,2},{{1},{-2},{2}}]],
  [{1,2}, [{1,2}, {{1,-2},{-1,2},{1,2}}]],
  [{3}, ls_exmp_talk_guangzhou],
  [{4,-5}, ls_exmp_talk_guangzhou],
  [{-4,5}, ls_exmp_talk_guangzhou],
  [{3,4,-5}, ls_exmp_talk_guangzhou],
  [{3,-4,5}, ls_exmp_talk_guangzhou]
 ]$

okltest_trans_aut_sat_ls(f) := (
  assert(f({},[{},{}]) = {}),
  assert(f({},[{},{{}}]) = {-lsavc_var({})}),
  assert(f({},[{1},{{-1},{1}}]) = 
    {-lsavc_var({1}), -lsavc_var({-1}),
     -lsavl_var(1,-1), -lsavl_var(1,1),
     -lsavv_var(1)}),
  for P in autarky_test_cases do
    assert(satisfyingpafp(f(P[1],P[2]), aut_sat_ls(P[2])) = true),
  true)$

okltest_itransc_aut_sat_ls(f) := block(
  for P in autarky_test_cases do block(
   [phi : P[1],
    FF : P[2],
    trans_phi : trans_aut_sat_ls(P[1],P[2]), 
    A : sat_paf(P[1],P[2])],
    assert(f(trans_phi,FF) = A)),
  true)$

okltest_itrans_aut_sat_ls(f) := block(
  assert(f({},[{},{}]) = {}),
  assert(f({-lsavc_var({})},[{},{{}}]) = {}),
  assert(f({-lsavc_var({1}), -lsavc_var({-1}),
     -lsavl_var(1,-1), -lsavl_var(1,1),
     -lsavv_var(1)}, [{1},{{-1},{1}}]) = {}),
  true)$

/*!
\endhtmlonly
*/
