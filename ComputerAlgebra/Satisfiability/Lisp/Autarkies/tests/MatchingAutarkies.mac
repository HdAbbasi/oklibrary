/* Oliver Kullmann, 1.6.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Autarkies/tests/MatchingAutarkies.mac
  \brief Tests related to extraction of the largest autarky

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Autarkies/tests/MatchingAutarkies.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Autarkies/MatchingAutarkies.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/BasicNotions.mac")$

kill(f)$

/* ********************
   * Basic operations *
   ********************
*/

okltest_cllit_aut_odg(f) := (
  assert(f([],{}) = [[],[]]),
  assert(f([],{1}) = [[],[]]),
  assert(f([{}],{}) = [[[{},1]],[]]),
  assert(f([{}],{1}) = [[[{},1]],[]]),
  assert(f([{1}],{1}) = [[[{1},1],[1,2]], [[[{1},1],[1,2]]]]),
  assert(f([{1}],{-1}) = [[[{1},1],[-1,2]], []]),
  assert(f([{1},{-1,2}],{-1}) = [[[{1},1],[{-1,2},1],[-1,2]], [[[{-1,2},1],[-1,2]]]]),
  true)$

okltest_maut_paocs_p(f) := (
  assert(f({},[]) = true),
  assert(f({},[{}]) = true),
  assert(f({1,-2},[]) = true),
  assert(f({1,-2},[{}]) = true),
  assert(f({1},[{1}]) = true),
  assert(f({1},[{-1}]) = false),
  assert(f({1},[{1},{1,2}]) = false),
  assert(f({1,2},[{1},{1,2}]) = true),
  assert(f({1,2},[{1,-3},{1,2,3,-4},{},{3,4}]) = true),
  assert(f({1,2,3},[{1,-3},{1,2,3,-4},{},{3,4}]) = true),
  assert(f({1,-2,3},[{1,2,-3},{-1,-2,-3},{3}]) = true),
  true)$

okltest_all_maut_ocs(f) := block(
  assert(f([]) = {{}}),
  assert(f([{}]) = {{}}),
  assert(f([{1}]) = {{},{1}}),
  assert(f([{1},{-1}]) = {{}}),
  assert(f([{1},{2}]) = {{},{1},{2},{1,2}}),
  assert(f([{1},{1,-2}]) = {{},{1,-2},{-2}}),
  assert(f([{1,2},{2,3},{3,4}]) = {{},{1},{1,2},{1,2,3},{1,2,3,4},{1,2,3,-4},{1,2,4},{1,2,4,-3},{3,4},{2,3,4},{-1,2,3,4},{1,3,4},{1,-2,3,4},{4},{4,1}}),
  if oklib_test_level = 0 then return(true),
  block([oklib_test_level : oklib_test_level-1],
    assert(okltest_matchinglean_p(buildq([f],lambda([F],is(f(cs2ocs(F))={{}})))))),
  true)$

okltest_mautmon_ocs(f) := block(
  exm : [
   [], [{}],
   [{1},{2}]
  ],
  for F in exm do
    assert(mon_p(f(F))),
  if oklib_test_level = 0 then return(true),
  exm1 : [
   [{1,2},{2,3},{3,4}]
  ],
  for F in exm1 do
    assert(mon_p(f(F))),
  true)$


/* *****************************
   * Matching-lean clause-sets *
   *****************************
*/

/* Testing whether f decides correctly matching leanness: */
okltest_matchinglean_p(f) := block(
  assert(f({}) = true),
  assert(f({{}}) = true),
  assert(f({{1}}) = false),
  assert(f({{1},{-1}}) = true),
  assert(f({{1},{1,2}}) = false),
  assert(f({{1},{1,2},{2,-1}}) = true),
  assert(f({{1,2},{-1,2},{1,-2}}) = true),
  true)$

okltest_clawfree_mlean_def1(FF) := block(
  assert(FF[1] = setn(8)),
  assert(deficiency_fcs(FF) = 1),
  assert(literal_degrees_list_fcs(FF) = [[2,15],[4,1]]),
  assert(variable_degrees_list_cs(FF[2]) = [[4,7],[6,1]]),
  assert(hitting1rcsp(FF[2]) = true),
  assert(sat_decision_hitting_cs(FF[2]) = true), 
    /* The satisfiability of FF is actually implied, since every unsatisfiable
    hitting clause-set with deficiency 1 must contain a variables with
    (1,1)-occurrence. */
  assert(matchinglean_smax_p(FF[2]) = true),
  true)$

/*!
\endhtmlonly
*/
