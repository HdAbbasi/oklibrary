/* Oliver Kullmann, 29.7.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Autarkies/tests/LeanKernel.mac
  \brief Tests for computations of lean kernels

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Autarkies/tests/LeanKernel.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Autarkies/LeanKernel.mac")$

kill(f)$

/* **************************
   * Generic test functions *
   **************************
*/

/* A generic test-funcion for f(FF), returning the lean kernel
   of FF: */
okltest_lean_kernel_fcs(f) := (
  assert(f([{},{}]) = [{},{}]),
  assert(f([{},{{}}]) = [{},{{}}]),
  assert(f([{1},{}]) = [{},{}]),
  assert(f([{1,2},{{}}]) = [{},{{}}]),
  assert(f([{1},{{1},{-1}}]) = [{1},{{1},{-1}}]),
  assert(f([{1,2},{{1},{-1},{2},{1,2},{}}]) = [{1},{{1},{-1},{}}]),
  assert(f([{1,2,3},{{1,2},{-1,2},{-2},{1,3},{-2,3},{3}}]) = [{1,2},{{1,2},{-1,2},{-2}}]),
  true)$

/* A generic test-function for f(FF), return a non-trivial autarky
   for FF iff possible (using variables from FF), and {} otherwise: 
*/

okltest_find_autarky_cs(f) := block(
  assert(f({}) = {}),
  assert(f({{}}) = {}),
  assert(f({{1}}) = {1}),
  assert(f({{1},{-1}}) = {}),
  assert(f({{1},{-1},{2}}) = {2}),
  assert(f({{1,2},{-2,3},{2,3},{-3}}) = {1}),
  true)$

okltest_find_autarky_fcs(f) := block(
  assert(f([{},{}]) = {}),
  assert(f([{},{{}}]) = {}),
  assert(elementp(f([{1},{}]), {{-1},{1}}) = true),
  assert(elementp(f([{1},{{}}]), {{-1},{1}}) = true),
  assert(f([{1},{{1}}]) = {1}),
  assert(f([{1},{{1},{-1}}]) = {}),
  assert(f([{1,2},{{1},{-1},{2}}]) = {2}),
  assert(okltest_lean_kernel_fcs(buildq([f],lambda([FF],
    lean_kernel_autfind_fcs(FF,f))))),
  assert(okltest_find_autarky_cs(buildq([f],lambda([F],
    f(cs2fcs(F)))))),
  true)$


/* ***********************************
   * Computing the lean kernel bydef *
   ***********************************
*/

okltest_lean_kernel_autfind_fcs(f) := block([af],
  local(af),
  af(FF) := {},
  test_cases : [
    [{},{}], [{},{{}}],[{1.2},{{1},{2}}]
  ],
  for FF in test_cases do
    assert(f(FF,af) = FF),
  true)$

/*!
\endhtmlonly
*/
