/* Matthew Gwynne, 15.12.2009 (Swansea) */
/* Copyright 2009, 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
\file ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/tests/Permutations.mac
  \brief Tests for the analysis functions of permutations as boolean functions

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/tests/Permutations.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/PartialAssignments.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/Permutations.mac")$


kill(f)$

/* *************************************
   * Permutations as boolean functions *
   *************************************
*/

okltest_lex_bv_l(f) := (
  assert(f(0) = [[]]),
  assert(f(1) = [[0],[1]]),
  assert(f(2) = [[0,0],[0,1],[1,0],[1,1]]),
  true)$

okltest_unrank_lex_bv(f) := (
  for k : 0 thru 5 do
    assert(lex_bv_l(k) = create_list(f(i,k),i,1,2^k)),
  true)$

okltest_rank_lex_bv(f) := (
  for k : 0 thru 5 do
    assert(map(f,lex_bv_l(k)) = create_list(i,i,1,2^k)),
  true)$

okltest_bv2c(f) := (
  assert(f([]) = {}),
  assert(f([0]) = {-1}),
  assert(f([1]) = {1}),
  assert(f([1,0,1,0,0]) = {-5,-4,-2,1,3}),
  assert(f([0,0,0,0,0]) = {-5,-4,-3,-2,-1}),
  true)$

okltest_bv2c_wv(f) := block([a,b,c],
  assert(f([],[]) = {}),
  assert(f([0,1,0],[a,b,c]) = {-a,b,-c}),
  assert(okltest_bv2c(buildq([f], lambda([v],f(v,create_list(i,i,1,length(v)))))) = true),
  true)$

okltest_perm2dnffcl(f) := block(
  assert(f([1,2]) = [[1,2],[{-2,-1},{1,2}]]),
  assert(f([2,1]) = [[1,2],[{-1,2},{-2,1}]]),
  assert(f([1,2,3,4]) = [[1,2,3,4],[{-4,-3,-2,-1},{-3,-1,2,4},{-4,-2,1,3},
    {1,2,3,4}]]),
  assert(f([2,1,4,3]) = [[1,2,3,4],[{-3,-2,-1,4},{-4,-3,-1,2},{-2,1,3,4},
    {-4,1,2,3}]]),
  for k : 3 thru 5 do block([m : 2^k, P, FF],
   P : create_list(i,i,1,m),
   FF : f(P),
   assert(FF[1] = create_list(i,i,1,2*k)),
   assert(length(FF[2]) = m),
   assert(setify(FF[2]) = setify(map(union, all_tass_l(setn(k)), all_tass_l(setmn(k+1,2*k)))))
  ),
  assert(okltest_perm2dnffcs(buildq([f], lambda([P], fcl2fcs(f(P))))) = true),
  true)$

okltest_perm2dnffcs(f) := block(
  assert(f([1,2]) = [{1,2},{{-2,-1},{1,2}}]),
  assert(f([2,1]) = [{1,2},{{-1,2},{-2,1}}]),
  assert(f([1,2,3,4]) = [{1,2,3,4},{{-4,-3,-2,-1},{-3,-1,2,4},{-4,-2,1,3},
    {1,2,3,4}}]),
  assert(f([2,1,4,3]) = [{1,2,3,4},{{-3,-2,-1,4},{-4,-3,-1,2},{-2,1,3,4},
    {-4,1,2,3}}]),
  /* XXX */
  true)$

okltest_perm2cnffcs(f) := block(
  assert(f([1,2]) = [{1,2},{{-2,1},{-1,2}}]),
  assert(f([2,1]) = [{1,2},{{-2,-1},{1,2}}]),
  assert(f([1,2,3,4]) = [{1,2,3,4},{{-4,-3,-2,1},{-4,-3,-1,2},{-4,-3,1,2},
    {-4,-2,-1,3},{-4,-1,2,3},{-4,1,2,3},{-3,-2,-1,4},{-3,-2,1,4},{-3,1,2,4},
    {-2,-1,3,4},{-2,1,3,4},{-1,2,3,4}}]),
  /* XXX */
  true)$

/*!
\endhtmlonly
*/
