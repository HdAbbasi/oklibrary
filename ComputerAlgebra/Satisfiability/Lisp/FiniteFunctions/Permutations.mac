/* Matthew Gwynne, 15.12.2009 (Swansea) */
/* Copyright 2009, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/Permutations.mac
  \brief Permutations as boolean functions

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/Permutations.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac")$
oklib_plain_include(eigen)$

/* *************************************
   * Permutations as boolean functions *
   *************************************
*/

/* 
   We consider permutations f of {1,...,m}, where for permutations
   we use the list representations (so that the set of all such
   representations is permutations(setn(m))).
   See ComputerAlgebra/Algebra/Lisp/Groupoids/Groups/SymmetricGroups.mac for
   the symmetric group.
   We represent f as a boolean function, considering f as a relation.

   We assume m = 2^k for natural k >= 1, so that the set {1,...,m} has the
   same cardinality as {0,1}^k. Using a bijection R{1,...,m} -> {0,1}^k for a
   representation, the mapping x -> y represented by the permutation f yields
   the boolean list append(R(x), R(y)) of length 2k.
   These lists are considered as the satisfying assignments of the
   corresponding boolean function.

   We fix R: {1,...,m} -> {0,1}^k, i -> R(i) as the standard representation of
   i-1 in binary, with (left-)padded zeros; in other words, R(i) is the
   unranking of i w.r.t. the lexicographical ordering of binary vectors of
   length k.

   So the transposition [2,1] (here m=2 and k=1), that is, the
   map 1->2, 2->1, yields the satisfying vectors {[0,1],[1,0]}, and thus
   the DNF-clause-set {{-1,2},{1,-2}}.
   And [2,4,1,3] yields the satisfying vectors
   {[0,0,0,1],[0,1,1,1],[1,0,0,0],[1,1,1,0]} and the DNF-clause-set
   {{-1,-2,-3,4},{-1,2,3,4},{1,-2,-3,-4},{1,2,3,-4}}.
   This is computed by the functions below as
     perm2dnffcl([2,1]) = [[1,2],[{-1,2},{-2,1}]]
     perm2dnffcl([2,4,1,3]) =
       [[1,2,3,4],[{-3,-2,-1,4},{-1,2,3,4},{-4,-3,-2,1},{-4,1,2,3}]].
*/

/* The boolean vectors of length k in lexicographical order: */
lex_bv_l(k) := cartesian_product_l(create_list([0,1],i,1,k))$
/* Unranking for 1 <= i <= 2^k: */
unrank_lex_bv(i,k) := if k=0 then [] else int2polyadic_padd(i-1,2,k)$
/* Ranking of boolean vectors: */
rank_lex_bv(x) := polyadic2int(x,2) + 1$

/* Translating boolean vectors into clauses (using the position as variables 
   in bv2c):
*/
bv2c(v) := bv2c_wv(v,create_list(i,i,1,length(v)))$
/* More generally, supplying a vector V of boolean variables (of the same
   length as v):
*/
bv2c_wv(v,V) := setify(map(lambda([x,y], if x=0 then -y else y), v, V))$

/* Translating a transformation T (standardised, as list) into a boolean
   function representing this function as a full dnf.
   Prerequisite: T is a transformation of {1,...,2^k} for k >= 0.
*/
trans2dnffcl(T) := block([m : length(T), k, V, F, R],
  k : fld(m),
  V : create_list(i,i,1,2*k),
  R : lambda([i],unrank_lex_bv(i,k)),
  F : map(append, map(R,create_list(i,i,1,m)), map(R,T)),
  return([V, map(bv2c,F)]))$
trans2dnffcs(P) := fcl2fcs(trans2dnffcl(P))$

/* The special case of a permutation: */
perm2dnffcl(P) := trans2dnffcl(P)$
perm2dnffcs(P) := fcl2fcs(perm2dnffcl(P))$

/* Now representing the transformation as cnf: */
trans2cnffcs(T) := block([m : length(T), FF : trans2dnffcs(T), k],
  k : fld(m),
  return([FF[1], setdifference(all_tass(setn(2*k)), FF[2])]))$

perm2cnffcs(P) := trans2cnffcs(P)$

/* Output of clause-set trans2cnffcs(T) to a file: */
output_trans_fullcnf(T,filename) :=
  output_fcs(
    sconcat("The transformation ", T, " in full CNF representation."),
    trans2cnffcs(T),
    filename)$
output_trans_fullcnf_stdname(T) := output_trans_fullcnf(T,"Transformation_full.cnf")$
/* The special case of a permutation: */
output_perm_fullcnf(P,filename) := output_trans_fullcnf(P,filename)$
output_perm_fullcnf_stdname(P) := output_perm_fullcnf(P,"Permutation_full.cnf")$

/* A linear transformation, given as a square 0-1-matrix M of order n, as a
   boolean function in 2n variables, represented as DNF resp CNF:
*/
m2dnffcl(M) := block([n : matrix_size(M)[1], L],
  if n = 0 then return([[],[{}]]), /* needed since Maxima doesn't have matrices with 0 rows and 1 column */
  L : lex_bv_l(n),
  [create_list(i,i,1,2*n),
   map(bv2c, 
       map(append, 
           L, 
           map(lambda([x], mod(column_m(M.columnvector(x),1),2)), L)))])$
m2dnffcs(M) := fcl2fcs(m2dnffcl(M))$
m2cnffcs(M) := block([n : matrix_size(M)[1], FF : m2dnffcs(M)],
  [FF[1], setdifference(all_tass(setn(2*n)), FF[2])])$

/* Output of clause-set m2cnffcs(M) to a file: */
output_m_fullcnf(M,filename) :=
  output_fcs(
    sconcat("The linear transformation ", M, " in full CNF representation."),
    m2cnffcs(M),
    filename)$
output_m_fullcnf_stdname(M) := output_m_fullcnf(M,"LinearTransformation_full.cnf")$

/*!
\endhtmlonly
*/
