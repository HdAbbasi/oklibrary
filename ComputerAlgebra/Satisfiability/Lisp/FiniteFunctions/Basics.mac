/* Matthew Gwynne, 17.1.2011 (Swansea) */
/* Copyright 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/Basics.mac
  \brief Basic tools for handling boolean and finite functions

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* *******************
   * Boolean vectors *
   *******************
*/

/*
  A "boolean value" is either 0 or 1.
*/

boolval_p(v) := is(v=0) or is(v=1)$


/*
  A "boolean vector" ("bv") of length k (k in NN_0) is a list v of length k
  with entries 0, 1.
*/

bv_p(v) := listp(v) and every_s(boolval_p,v)$


/* The 2^k boolean vectors of length k in lexicographical order: */
lex_bv_l(k) := cartesian_product_l(create_list([0,1],i,1,k))$
/* Unranking for 1 <= i <= 2^k: */
unrank_lex_bv(i,k) := if k=0 then [] else int2polyadic_padd(i-1,2,k)$
/* Ranking of boolean vectors: */
rank_lex_bv(x) := polyadic2int(x,2) + 1$


/* Translating boolean vectors into (standardised) DNF-clauses (using the
   positions as variables):
*/
bv2c(v) := bv2c_wv(v,create_list(i,i,1,length(v)))$
/* More generally, supplying a vector V of boolean variables (of the same
   length as v):
*/
bv2c_wv(v,V) := setify((2*v - 1) * V)$

/*!
\endhtmlonly
*/
