/* Matthew Gwynne, 17.1.2011 (Swansea) */
/* Copyright 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/Basics.mac
  \brief Basic tools for handling boolean and finite functions

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$


/* *******************
   * Boolean vectors *
   *******************
*/

/*
  A "boolean value" is either 0 or 1.
*/

boolval_p(v) := is(v=0) or is(v=1)$


/*
  A "boolean vector" ("bv") of length k (k in NN_0) is a list v of length k
  with entries 0, 1.
*/

bv_p(v) := listp(v) and every_s(boolval_p,v)$

/* The set of all boolean vectors of length k: */
all_bv(k) := apply(cartesian_product, create_list({0,1},i,1,k))$

/* The 2^k boolean vectors of length k in lexicographical order: */
lex_bv_l(k) := cartesian_product_l(create_list([0,1],i,1,k))$
/* Unranking for 1 <= i <= 2^k: */
unrank_lex_bv(i,k) := if k=0 then [] else int2polyadic_padd(i-1,2,k)$
/* Ranking of boolean vectors: */
rank_lex_bv(x) := polyadic2int(x,2) + 1$


/* Translating boolean vectors into (standardised) DNF-clauses (using the
   positions as variables):
*/
bv2c(v) := bv2c_wv(v,create_list(i,i,1,length(v)))$
/* More generally, supplying a vector V of boolean variables (of the same
   length as v):
*/
bv2c_wv(v,V) := setify((2*v - 1) * V)$


/* *********************
   * Boolean functions *
   *********************
*/

/*
  A "boolean function" ("bf") is a function with the following properties:

   - implicitly a size-domain S <= NN_0 is given
   - for every n in S there is an m_n in NN_0 such that for all boolean vectors
     x of length n the term f(x) is a boolean vector of length m_m.

  f is an "n x m bf" if n in S and m_n = m.
*/

/* Testing whether f is a n x m boolean function: */
bf_nm_p(f,n,m) :=
 every_s(lambda([x], 
           block([y:f(x)], listp(y) and is(length(y)=m) and bv_p(y))),
         all_bv(n))$


/* ********************************
   * Some basic boolean functions *
   ********************************
*/

/* Functions with size-domain NN_0 and m=1: */

zero_bf : lambda([x], [0])$
one_bf : lambda([x], [0])$

and_bf : lambda([x], [lmin(x)])$
or_bf : lambda([x], [lmax(x)])$

xor_bf : lambda([x], [mod(apply("+", x),2)])$

/* Functions with size-domain NN_0 and m=n: */

id_bf : identity$
neg_bf : lambda([x], 1-x)$


/* ***************
   * Conversions *
   ***************
*/

/* The "bit-vector presentation" of an n x 1 boolean function f is the boolean
   vector of length 2^n containing all values of f, applied to the 
   lexicographical ordering of inputs:
*/
bf2bv(f_, n) := map(lambda([x], first(f_(x))), lex_bv_l(n))$
bv2bf(fv) := buildq([a : il2ary(fv)], lambda([x], [a[rank_lex_bv(x)]]))$

/*!
\endhtmlonly
*/
