/* Oliver Kullmann, 16.2.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Counting/Degrees.mac
  \brief Functions related to thresholds from SAT to UNSAT related to clause- or variable degrees

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/Counting/Degrees.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$


/* Checks whether clause-set F is satisfiable according to the symmetric
   Lovasz Local Lemma test for clause-degrees.
   If true is returned then F is satisfiable, if false is returned then
   the test did not succeed and F may be satisfiable or unsatisfiable. */
locallemma_sattest_clausedeg(F) := is(max_degree_cvg_cs(F) <= 2^(min_rank_cs(F)) / exp(1) - 1)$

/* Checks whether clause-set F is satisfiable according to the symmetric
   Lovasz Local Lemma test for variable-degrees. */
/* Slightly improved w.r.t. case k = 1. */
locallemma_sattest_vardeg(F) := block([k : min_rank_cs(F)],
 if k = inf then return(true)
 elseif k = 0 then return(false)
 else return(is(max_variable_degree_cs(F) <= 2^k / exp(1) / k)))$

/* Checks whether clause-set F is satisfiable according to the asymmetric
   Lovasz Local Lemma as used by [Hooker, Vinai, 1995].
   Improved with respect to handling of clauses of length <= 1. */
/* Compare with locallemma_satapprox in
   ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac. */
locallemma_sattest_asymmetric(F) := if emptyp(F) then true
 elseif empty_element_p(F) then false else
 block([G : cvg_cs(F), break : false],
  for C in G[1] unless break do
    if gsum_s(lambda([D], 2^(-length(D)), neighbours(C, G))) > 1/4 then 
      break : true,
  return(not break))$

/*!
\endhtmlonly
*/
