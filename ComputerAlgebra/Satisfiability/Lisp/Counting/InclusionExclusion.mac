/* Oliver Kullmann, 3.2.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Counting/InclusionExclusion.mac
  \brief Functions related to counting of satisfying assignments via inclusion/exclusion techniques

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/Counting/InclusionExclusion.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/Conflicts.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Constructions.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$


/* The probability of a satisfying assignment computed via the Iwama-formula
   ([Iwama, 1989, CNF satisfiability test by counting and polynomial average
   time]). 
   Computing the independent sets via the recursive-splitting-transversal
   algorithm. */
satprob_mcind_trrs(F) := block([MI : listify(cind_cs_trrs(F)[2])],
  sum((-1)^(ncl_cs(MI[i])) * 2^(-nvar_cs(MI[i])), i,1,length(MI)))$

/* Computes the full list of approximations of satprob(F) of length
   independence_number_cs(F) + 1 */
/* The first element is always 1, the second element is a lower bound (assuming the
   falsifying assignments for different clauses are different). The last element
   is the true probability. */
satprob_seqap_mcind_trrs(F) := block([MI : cind_cs_trrs(F)[2], r, appr, res],
  r : lmax(map(length,MI)), appr : make_array(fixnum, r+1),
  for S in MI do block([l : length(S)],
    appr[l] : appr[l] + (-1)^(ncl_cs(S)) * 2^(-nvar_cs(S))),
  res : [appr[0]],
  for i : 1 thru r do
    res : endcons(appr[i]+last(res), res),
  return(res))$
/* The second element of that list (compare firstorder_sat_approx) */
satprob_hitting(F) := 1 - weighted_ncl_2n_cs(F)$
satprob_hitting_f(FF) := satprob_hitting(FF[2])$

/* Direct application of inclusion/exclusion to a clause-set represented via
   a list of hitting clause-sets (as their union).
   According to [Dubois 1991, Counting the number of solutions for instances
   of satisfiability, TCS]. */
satprob_incexl_hitting(L) := if emptyp(L) then 1 else
 block([P : powerset(setn(length(L)))],
  P : listify(disjoin({},P)),
  return(sum(
          satprob_hitting(apply(or_cs,create_list(L[i],i,listify(P[p])))) * 
            (-1)^(length(P[p])-1),
          p, 1, length(P))))$

/* Using the partitioning into hitting clause-sets via the maxima
   max-clique function */
satprob_incexl_hitting_hcm(F) := satprob_incexl_hitting(hitting_decomposition_m_cs(F))$

/*!
\endhtmlonly
*/
