/* Oliver Kullmann, 3.2.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Counting/tests/InclusionExclusion.mac
  \brief Tests for counting via inclusion/exclusion

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/Counting/tests/InclusionExclusion.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac");
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$


kill(f)$

/* Testing whether f computes the probability of satisfying assignments for
   clause-sets */
okltest_satprob(f) := block([F],
  assert(f({}) = 1),
  assert(f({{}}) = 0),
  assert(f({{1}}) = 1/2),
  assert(f({{1},{-1}}) = 0),
  assert(f({{1,2}}) = 3/4),
  assert(f({{1,2},{2,3}}) = 5/8),
  assert(f({{1,2},{-1,3}}) = 1/2),
  assert(f({{1,2},{3,4}}) = 9/16),
  assert(f({{1},{2,3},{-3,4}}) = 1/4),
  for n : 0 thru 10 do
    assert(f({setn(n)}) = 1 - 2^(-n)),
  true)$

/* Testing whether f computes the list of approximations of the
    probability of satisfying assignments via inclusion-exclusion */
okltest_satprob_approxlist(f) := block([F],
  assert(f({}) = [1]),
  assert(f({{}}) = [1,0]),
  assert(f({{1}}) = [1,1/2]),
  assert(f({{1},{-1}}) = [1,0]),
  assert(f({{1},{2}}) = [1,0,1/4]),
  assert(f({{1,2},{-2,3},{2,3}}) = [1,1/4,3/8]),
  assert(f({{1,2},{-2,3},{-3},{-1}}) = [1,-1/2,0]),
  assert(f({{1,2},{-2,3},{2,-3},{1,-3}}) = [1,0,3/8,2/8]),
  if oklib_test_level = 0 then return(true),
  block([oklib_test_level : 0],
    okltest_satprob(buildq([f],lambda([F],last(f(F)))))),
  true)$

/*!
\endhtmlonly
*/
