/* Oliver Kullmann, 29.7.2007 (Swansea) */
/* Copyright 2007, 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/BranchingTuples/Basic.mac
  \brief Maxima-implementations for the tau-function

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/BranchingTuples/Basic.mac");

*/

/*!
\htmlonly
*/

/*
 A "branching tuple" is a list of positive numbers, which in case of length
 one can also include 0 (also the empty list is possible).
*/

/* ************************
   * Elementary functions *
   ************************
*/

bt_min(t) := lmin(t)$
bt_max(t) := lmax(t)$
bt_width(t) := length(t)$
bt_sum(t) := apply("+", t)$

/* For the concatenation of branching tuples, "append" is to be used. */

/* Composition of branching tuples at position 1 */
bt_composition(a,b) := if emptyp(a) then [] else append(a[1] + b, rest(a))$
/* Composition of branching tuples at position i */
bt_composition_i(a,b,i) := if emptyp(a) then [] 
  else append(rest(a, -(length(a) - i + 1)), a[i] + b, rest(a,i))$

/*
 A "permutation" in S_n is a list P of length n of all the elements in {1,...,n};
 it stands for the bijection i -> P[i].
*/

/* Apply a permutation (or, more generally, an index selection) */
bt_apply_permutation(perm, t) := makelist(t[perm[i]], i, 1, length(t))$

/* The branching-tuple-hull of a branching tuple t w.r.t. upper-bound
   s on the maximum, together with the set of saturated elements */
bth(t, s) := if s < bt_max(t) then [{},{}] else 
 block([hull : {t}, new_size : 1, old_size : 0, saturated : {}],
  while new_size > old_size do (
    old_size : new_size,
    for a in hull unless new_size > old_size do (
      hull : union(hull, permutations(a), 
               map(lambda([b],bt_composition(a,b)),
                   subset(hull,lambda([b], is(a[1]+bt_max(b) <= s))))),
      new_size : length(hull))),
  return([hull, block([mt:bt_max(t)], subset(hull, lambda([a],is(bt_min(a)+mt>s))))]))$

/* Compute greedily one saturated tuple in the branching-tuple-hull */
bth_saturated_greedy(t,s) := block([m : bt_max(t), ts : sort(t)],
  while ts[1] + m <= s do (
    ts : bt_composition(ts,t),
    ts : sort(ts)
  ),
  return(ts))$

/* the integer sequence corresponding to an integer branching tuple,
   that is, the first n elements */
int_seq_bt(t) := block([m : bt_max(t), l : length(t)], 
  return(buildq([m,l,t],
   lambda([n], block([S : makelist(1,i,1,min(n,m))],
     for i : m thru n-1 do
       S : endcons(sum(S[i-t[j]+1],j,1,l),S),
     return(S)))
   )))$
/* for example with fibi : int_seq_bt([1,2]) we get
   fibi(7) = [1, 1, 2, 3, 5, 8, 13]
   (note that fib is the predefined Fibonacci-function).
*/


/* ***************
   * Power means *
   ***************
*/

/* n-ary arithmetic mean (while the arithmetic mean for branching tuples t
   is just mean(t)) */
meann([t]) := mean(t)$

/* geometric mean */
gmean(t) := apply("*", t)^(1/length(t))$
/* n-ary geometric mean */
gmeann([t]) := gmean(t)$

/* harmonic mean */
hmean(t) := length(t) / apply("+", t^(-1))$
/* n-ary harmonic mean */
hmeann([t]) := hmean(t)$

/* power means with index -inf <= p <= inf */
genmean(t, p) := if p = minf then lmin(t) elseif p = 0 then gmean(t) elseif p = inf then lmax(t) else mean(t^p)^(1/p)$
/* (n+1)-ary power means */
genmeann([u]) := genmean(rest(u,-1), last(u))$
/* binary power mean */
genmean2(x,y,p) := genmeann(x,y,p)$
/* ternary power mean */
genmean3(x,y,z,p) := genmeann(x,y,z,p)$


/* ***********************************************
   * Lower and upper bounds for the tau-function *
   ***********************************************
*/

load (descriptive)$

/* The lower bound given by the arithmetic mean */
tau_lo(t) := length(t)^(1/mean(t))$
/* n-ary version */
tau_lon([t]) := tau_lo(t)$

/* The upper bound given by the power means (defined below) */
tau_up(t) := length(t)^(1/genmean(t,2-length(t)))$
/* n-ary version */
tau_upn([t]) := tau_up(t)$

/* ****************************
   * Comparison of tau-values *
   ****************************
*/

/* bt_comparison(t,alpha) is pos, zero, neg if tau(t) > alpha resp. = alpha resp. < alpha 
   (this decision uses only symbolic means, no numeric ones) */
bt_comparison(t,alpha) := sign(chi(t,alpha) - 1)$


/*
*******************************************************
*   Computing the tau-function                        *
*******************************************************
*/

/* the chi-functional */
chi(t,x) := bt_sum(x^(-t))$

/* For fixed t, compute the Newton-step for chi(t,x)-1 = 0 */
chi_newtonstep(t) := buildq([t],
 lambda([x], block([p : x^(-t)],
  return((apply("+",p)-1) / apply("+",t*p/x)))))$

/* Computing the tau-function by the Newton-method. */
tau_eps(t,eps) := block([l:length(t)],
 if l = 0 then inf elseif l = 1 then 1 else
 block([dxf : chi_newtonstep(t), x : tau_lo(t), dx],
  do (
    dx : dxf(x),
    x : x + dx,
    if dx <= eps then return(true)
  ),
  return(x)))$

/* Given a branching tuple, compute its tau-value (supplying a standard eps) */
tau(t) := tau_eps(float(t), 10^-15)$
/* floatnump(tau(t)) is true */
/* n-ary version (using the standard eps) */
taun([v]) := tau(v)$

/* Binary and ternary versions */
tau2(x,y) := taun(x,y)$
tau3(x,y,z) := taun(x,y,z)$


/* ********************
   * Higher precision *
   ********************
*/

/* Use float(x) to compute a floating-point representation of x. 
   To use higher precision, set fpprec to the required number of
   decimal digits, and convert via bfloat. 
   Or use the following conversion function.
*/
/* convert a number to a number with a given precision */
hp_float(x, decimal_digits) := block([fpprec : fpprec], fpprec : decimal_digits, bfloat(x))$

/* the tau-value with a given precision */
tau_hp(t, decimal_digits) := block(
 [fpprec : fpprec], 
  fpprec : decimal_digits,
  tau_eps(bfloat(t), 10^(-decimal_digits+1)))$


/* ************************
   * Symbolic computation *
   ************************
*/

load(sqdnst)$

/* computes a symbolical solution if possible (otherwise returns false) */
tau_symbolical(t) := block([l : length(t), x, sol, pos_sol, n_pos], 
 if l = 0 then inf elseif l = 1 then 1
 else (sol : map(rhs, solve(chi(t,x)-1, x)), 
       pos_sol : sublist_indices(sol, lambda([x], is(equal(imagpart(x),0)) and is(sign(x) = pos))),
       n_pos : length(pos_sol),
       if n_pos = 1 then 
         return(sqrtdenest(sqrtdenest(sol[pos_sol[1]])))
       elseif n_pos >= 2 then print("INCONSISTENCY with tau_symbolical for ", t)
       else return(false)))$
/* Remark: Apply "optimize" to the result to obtain a representation with
   shared subterms. */

/*
*******************************************************
*   Derivatives of the tau-function                   *
*******************************************************
*/

/* The total differential for the tau-function */
Dtau(t) := block([tv : tau(t)], block([pv : tv^(-t)],
  return((-tv * log(tv) / apply("+", t * pv)) * pv)))$

Dtaun([t]) := Dtau(t)$
Dtau2(x,y) := Dtaun(x,y)$
Dtau3(x,y,z) := Dtaun(x,y,z)$

/* Symbolic differentiation of tau2 */
Dtau2s(x,y) := block( [ tv : tau2s(x,y)], block( [pv : tv^(-[x,y]) ] ,
  return((- tv * log(tv) / apply("+", [x,y] * pv)) * pv)))$

gradef(tau2s(x,y), Dtau2s(x,y)[1], Dtau2s(x,y)[2])$


/*
*******************************************************
*   The induced probability distribution              *
*******************************************************
*/

/* The probability distribution derived from a branching tuple: */
tauprob(t) := block([ts : t / lmin(t)], tau(ts)^(-ts))$
tauprobn([t]) := tauprob(t)$
tauprob2(x,y) := tauprobn(x,y)$
tauprob3(x,y,z) := tauprobn(x,y,z)$

/* Higher precision */
tauprob_hp(t, decimal_digits) := block([fpprec : fpprec], 
  fpprec : decimal_digits, t : bfloat(t),
  block([ts : t / lmin(t)], tau_hp(ts,decimal_digits)^(-ts)))$

/* Symbolical computation (if possible) */
tauprob_symbolical(t) := tau_symbolical(t)^(-t)$
/* Applying factor(expand(r)), radcan(r) or fullratsimp(r) to the result r 
   might help simplifying. */

/* The canonical inversion for tuples p with bt_sum(p) = 1 */
invtauprob(p) := -map(log,p)$
/* tauprob(invtprop(p)) = p and invtprop(tauprob(t)) = t * log(tau(t)) */


/* ****************
   * The tau-mean *
   ****************
*/

/* Auxiliary function to test for zero */
zerop(x) := is(equal(x,0))$
/* Auxiliary function to test for +infinity */
infp(x) := is(equal(x,inf))$

/* the tau-mean for tuples (allowing zero-values) */
taumean(t) := if length(t) <= 1 then inf 
  elseif some(zerop, t) then 0 
  else float(log(length(t))) / log(tau(t))$
/* the n-ary tau-mean */
taumeann([t]) := taumean(t)$
/* the binary tau-mean */
taumean2(x,y) := taumeann(x,y)$
/* the ternary tau-mean */
taumean3(x,y,z) := taumeann(x,y,z)$

/* tau-mean additionally also allowing inf-values */
taumean_inf(t) := if some(infp, t) then 
    block([t : delete(inf, t)], if t = [0] then unknown else taumean(t))
  else taumean(t)$
taumean_infn([t]) := taumean_inf(t)$

/*
*******************************************************
*   Convexity considerations: line versions           *
*******************************************************
*/


/* Considerung for a branching tuple t0 and a direction d0 (a real vector of the same
length as t) the function x -> tau(t0 + x * d0) : */

tau_line(x) := (local(x), tau(t0 + x * d0))$
logtau_line(x) := (local(x), log(tau(t0 + x * d0)))$
loglogtau_line(x) := (local(x), log(logtau_line(x)))$
tauprob_line(x) := (local(x), tauprob(t0 + x * d0)[i0])$
taumean_line(x) := (local(x), taumean(t0 + x * d0))$
/* assume(length(t0) >= 1), assume(t0[i] > 0) */
taumeandiff_line(x) := (local(x, t), 
  block([t : t0 + x * d0], taumean(t) - genmean(t, p0))
)$

/* Returning the interval bounds (for the open interval): */
tau_line_dom() := block(
  [pos : sublist_indices(d0, lambda([x], x > 0)), neg : sublist_indices(d0, lambda([x], x < 0))],
  [lmax(- part(t0, pos) / part(d0,pos)), lmin(- part(t0, neg) / part(d0, neg))]
)$


/* The chi-function on a line (but chi(t,x) only for x > 1): */
chi_line(x) := (local(x), chi(t0 + x * d0, a0 + x * b0))$
/* assume(length(t0) >= 2), assume(t0[i] > 0), assume(a0 > 1) */

chi_line_dom() :=
 block([ts : append(t0, [a0 - 1]), ds : append(d0, [b0])], 
   block(
    [pos : sublist_indices(ds, lambda([x], x > 0)), neg : sublist_indices(ds, lambda([x], x < 0))],
    [lmax(- part(ts, pos) / part(ds,pos)), lmin(- part(ts, neg) / part(ds, neg))]
))$

chin([u]) := (local(u), chi(rest(u,-1), last(u)))$
chi2(t1,t2,x) := (local(t1,t2,x), chin(t1,t2,x))$
chi3(t1,t2,t3,x) := (local(t1,t2,t3,x), chin(t1,t2,t3,x))$

hess_chi2 : hessian(chi2(t1,t2,x),[t1,t2,x])$
/* if for example x has a value, then apply remvalue(x), or, better, kill(x) */

eigen_chi2(a,b,c) := (local(a,b,c), eigens_by_jacobi(at(hess_chi2, [t1=a,t2=b,x=c])))$
/* a, b > 0, c > 1 */
test_posdef_chi2(a,b,c) := (local(a,b,c), lmin(eigen_chi2(a,b,c)[1]))$

/*!
\endhtmlonly
*/
