/* Oliver Kullmann, 5.1.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/BranchingTuples/Trees.mac
  \brief Functions regarding tree probability distributions

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/BranchingTuples/Trees.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/BranchingTuples/Basic.mac")$
oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Basic.mac")$
oklib_include("OKlib/ComputerAlgebra/Trees/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* **********************************************************
   * Rooted trees labelled with probability distributions   *
   **********************************************************
*/

/* 
   A "rooted tree with tree probability distribution (tpd)" is recursively 
   defined as [[p_1, ..., p_n], T_1, ..., T_n] (n >= 0) where p_i are the 
   probabilities attached to subtree T_i (n = 0 is the case of a leaf). 
*/

/* For the following functions the input T is a tree with tpd. */

/* the probability distribution induced on the leaves by a tree with tpd */
tpd_flatten(T) := if T = [[]] then [1] else 
 xreduce(append, T[1] * map(tpd_flatten, rest(T)))$

/* the r-th moment of the random variable prob^-1 */
tpd_moment(T,r) := xreduce("+",tpd_flatten(T)^(1-r))$
/* We have tpd_moment(T,r) = length(tpd_flatten(T)). */

/* the variance of the random variable prob^-1 */
tpd_variance(T) := tpd_moment(T,2) - nlvs_l(T)^2$

/* the lower bound on the number of leaves associated with the random variable prob^-1 */
lower_bound_nlvs(T) := 1 / lmax(tpd_flatten(T))$

/* the upper bound on the number of leaves associated with the random variable prob^-1 */
upper_bound_nlvs(T) := 1 / lmin(tpd_flatten(T))$


/* The induced probability distribution of the random variable prob^-1 
   as a hash-table. */
/* ATTENTION: The hash-map will only work correctly if the expressions
   stored in it (as strings!) are equal iff they are identical. */
ipd_rp(T) := block([P : tpd_flatten(T), h : sm2hm({})],
 for p in P do block([rp : 1/p],
   set_hm(h,rp,ev_hm_d(h,rp,0)+p)),
 return(h))$


/* *******************************************
   * Analysing unlabelled rooted trees       *
   *******************************************
*/

/* For an unlabelled tree T, returns (as a pair) the tree equipped with the 
   canonical tpd together with the number of leaves: */
canonical_tpd(T) := if emptyp(T) then [[[]],1] else
 block([S : map(canonical_tpd,T), s],
  s : sum_l(map(second,S)),
  return([cons(map(second,S)/s, map(first,S)), s]))$

/* Simpler, equip unlabelled tree T with the uniform tpd at each node: */
uniform_tpd(T) := block([l : length(T)],
  cons(create_list(1/l,i,1,l), map(uniform_tpd,T)))$


/* **************************************************
   * Rooted trees labelled with branching tuples    *
   **************************************************
*/

/* A "distance" on a rooted tree is given by a labelling of the nodes
   with branching tuples (of the same width as the branching), while
   a "measure" is given by a node-labelling with numbers.
   Trees with distances are treated here as "trees with branching tuples".
*/

/* Check whether T is "formally" a tree with distances
   (or "with branching tuples"): */
tbtp(T) := if not listp(T) then false else block([l : length(T)],
  is(l > 0) and listp(T[1]) and length(T[1]) = l-1 and
   every_s(tbtp, rest(T)))$


/* Transformations of a tree with distances to a tree with measure */

/* The min-sum of a tree with branching tuples: */
min_sum_tbt(T) := if length(T) = 1 then [0] else
 block([L : map(min_sum_tbt,rest(T))],
  return(cons(lmin(T[1] + map(first,L)), L)))$

/* The max-sum of a tree with branching tuples: */
max_sum_tbt(T) := if length(T) = 1 then [0] else
 block([L : map(max_sum_tbt,rest(T))],
  return(cons(lmax(T[1] + map(first,L)), L)))$


/* Transformation of a tree with measure to a tree with distance: */

/* the differences for a tree with a measure */
delta_tm(T) := block([w : length(T)], if w = 1 then [[]] else
 return(cons(makelist(T[1]-T[i][1],i,2,w), makelist(delta_tm(T[i]),i,2,w))))$


/* Transformation of a tree with distances to a tree with tpd: */
tauprob_tbt(T) := block([w : length(T)], if w = 1 then [[]] else
 return(cons(tauprob(T[1]), makelist(tauprob_tbt(T[i]),i,2,w))))$
/* The same, but with higher precision: */
tauprob_hp_tbt(T,d) := block([w : length(T)], if w = 1 then [[]] else
 return(cons(tauprob_hp(T[1],d), makelist(tauprob_hp_tbt(T[i],d),i,2,w))))$
/* The same, but using symbolical calculations (if possible!): */
tauprob_symbolical_tbt(T) := block([w : length(T)], if w = 1 then [[]] else
 return(cons(tauprob_symbolical(T[1]), 
             makelist(tauprob_symbolical_tbt(T[i]),i,2,w))))$


/* The maximal tau-value for a tree with distances */
maxtau_tbt(T) := block([w : length(T)], if w = 1 then 1 else
 max(tau(T[1]), lmax(makelist(maxtau_tbt(T[i]),i,2,w))))$
/* The minimal tau-value for a tree with distances */
mintau_tbt(T) := block([w : length(T)], if w = inf then 1 else
 min(tau(T[1]), lmin(makelist(mintau_tbt(T[i]),i,2,w))))$

/* The lower bound on nlvs for a tree with distances given by
   the tau-function */
lower_bound_nlvs_tau(T) := mintau_tbt(T)^(min_sum_tbt(T)[1])$
/* The upper bound on nlvs for a tree with distances given by
   the tau-function */
upper_bound_nlvs_tau(T) := maxtau_tbt(T)^(max_sum_tbt(T)[1])$


/*!
\endhtmlonly
*/
