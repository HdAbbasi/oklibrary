/* Oliver Kullmann, 7.5.2008 (Guangzhou) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/BranchingTuples/tests/Trees.mac
  \brief Tests for operations connected with branching analysis of trees

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/BranchingTuples/tests/Trees.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/tests/HashMaps.mac")$

kill(f)$


/* *******************************************
   * Analysing unlabelled rooted trees       *
   *******************************************
*/

okltest_canonical_tpd(f) := (
  assert(f([]) = [[[]],1]),
  assert(f([[]]) = [[[1], [[]]], 1]),
  assert(f([[[]]]) = [[[1], [[1], [[]]]], 1]),
  assert(f([[],[]]) = [[[1/2,1/2], [[]], [[]]], 2]),
  assert(f([[],[],[]]) = [[[1/3,1/3,1/3], [[]], [[]], [[]]], 3]),
  assert(f([[[]],[]]) = [[[1/2,1/2], [[1],[[]]], [[]]], 2]),
  assert(f([[[]],[[]]]) = [[[1/2,1/2], [[1],[[]]], [[1], [[]]]], 2]),
  assert(f([[[],[]], [[],[]], []]) = [[[2/5,2/5,1/5], [[1/2,1/2],[[]],[[]]], [[1/2,1/2],[[]],[[]]], [[]]], 5]),
  true)$

okltest_uniform_tpd(f) := (
  assert(f([]) = [[]]),
  assert(f([[]]) = [[1],[[]]]),
  assert(f([[[]]]) = [[1],[[1],[[]]]]),
  assert(f([[],[]]) = [[1/2,1/2],[[]],[[]]]),
  assert(f([[],[],[]]) = [[1/3,1/3,1/3],[[]],[[]],[[]]]),
  assert(f([[[],[]],[]]) = [[1/2,1/2], [[1/2,1/2],[[]],[[]]], [[]]]),
  true)$


/* **************************************************
   * Rooted trees labelled with branching tuples    *
   **************************************************
*/

okltest_tbtp(f) := (
  assert(f(0) = false),
  assert(f([]) = false),
  assert(f([[]]) = true),
  assert(f([[[]]]) = false),
  assert(f([[0,0], [[]], [[]]]) = true),
  assert(f([[0,0,0], [[]], [[]], [[]]]) = true),
  assert(f([[0,0], [[0,0], [[]], [[]]], [[]]]) = true),
  assert(f([[0,0], [[0,0], [[]], [[]]], [[0],[]]]) = false),
  true)$

okltest_min_sum_tbt(f) := block([x,y],
  assert(f([[]]) = [0]),
  assert(f([[1,2], [[]], [[]]]) = [1, [0], [0]]),
  assert(f([[x],[[y],[[]]]]) = [x+y,[y,[0]]]),
  assert(f([[1,2], [[3,4], [[]], [[]]], [[]]]) = [2, [3,[0],[0]], [0]]),
  true)$

okltest_max_sum_tbt(f) := (
  assert(f([[]]) = [0]),
  assert(f([[1,2], [[]], [[]]]) = [2, [0], [0]]),
  assert(f([[x],[[y],[[]]]]) = [x+y,[y,[0]]]),
  assert(f([[1,2], [[3,4], [[]], [[]]], [[]]]) = [5, [4,[0],[0]], [0]]),
  true)$

okltest_delta_tm(f) := block([x,y,z],
  assert(f([0]) = [[]]),
  assert(f([0,[0]]) = [[0],[[]]]),
  assert(f([x,[y]]) = [[x-y],[[]]]),
  assert(f([x,[y,[z]]]) = [[x-y],[[y-z],[[]]]]),
  assert(f([x,[y],[z]]) = [[x-y,x-z],[[]],[[]]]),
  assert(f([x,[y],[z,[1],[2]]]) = [[x-y,x-z],[[]],[[z-1,z-2],[[]],[[]]]]),
  assert(f([x,[y],[z],[5]]) = [[x-y,x-z,x-5],[[]],[[]],[[]]]),
  true)$

okltest_tauprob_tbt(f) := block([x,res],
  assert(f([[]]) = [[]]),
  assert(f([[0],[[]]]) = [[1],[[]]]),
  assert(f([[x],[[]]]) = [[1],[[]]]),
  for l : 2 thru 4 do
   for v : 1 thru 3 do (
    res : f(cons(create_list(v,i,1,l), create_list([[]],i,1,l))),
    for r in res[1] do
     assert_float_equal(r,1/l)
  ),
  true)$

okltest_tauprob_hp_tbt(f) := block([x,res,d:30],
  assert(f([[]],d) = [[]]),
  assert(f([[0],[[]]],d) = [[1],[[]]]),
  assert(f([[x],[[]]],d) = [[1],[[]]]),
  for l : 2 thru 4 do
   for v : 1 thru 3 do (
    res : f(cons(create_list(v,i,1,l), create_list([[]],i,1,l)), d),
    for r in res[1] do
     assert_bfloat_equal(r,1/l,d)
  ),
  true)$

okltest_tauprob_symbolical_tbt(f) := block([x],
  assert(f([[]]) = [[]]),
  assert(f([[0],[[]]]) = [[1],[[]]]),
  assert(f([[x],[[]]]) = [[1],[[]]]),
  for l : 2 thru 4 do
   for v : 1 thru 3 do
    assert(f(cons(create_list(v,i,1,l), create_list([[]],i,1,l))) = cons(create_list(1/l,i,1,l), create_list([[]],i,1,l))),
  assert(f([[1,1], [[2,2],[[]],[[]]], [[]]]) = [[1/2,1/2], [[1/2,1/2],[[]],[[]]], [[]]]),
  true)$


/* **********************************************************
   * Rooted trees labelled with probability distributions   *
   **********************************************************
*/

okltest_ipd_rp(f) := (
  assert(eq_hmsm_p(f([[]]), {[1,1]}) = true),
  assert(eq_hmsm_p(f([[1/2,1/2],[[]],[[]]]), {[2,1]}) = true),
  assert(eq_hmsm_p(f([[1/3,2/3],[[]],[[]]]), {[3,1/3],[3/2,2/3]}) = true),
  assert(eq_hmsm_p(f([[1/3,2/3],[[1/2,1/2],[[]],[[]]],[[]]]), {[6,1/3],[3/2,2/3]}) = true),
  assert(eq_hmsm_p(f([[1/3,2/3],[[1/2,1/2],[[]],[[]]],[[1/4,3/4],[[]],[[]]]]), {[6,1/2],[2,1/2]}) = true),
  true)$

okltest_maxtau_tbt(f) := block([x,y],
  assert(f([[]]) = 1),
  assert(f([[x],[[]]]) = 1),
  assert(f([[x],[[y],[[]]]]) = 1),
  assert_float_equal(f([[1,1],[[]],[[]]]), 2),
  assert_float_equal(f([[1,1],[[1,1,1],[[]],[[]],[[]]],[[]]]), 3),
  true)$

okltest_mintau_tbt(f) := (
  assert(f([[]]) = inf),
  assert(f([[x],[[]]]) = 1),
  assert(f([[x],[[y],[[]]]]) = 1),
  assert_float_equal(f([[1,1],[[]],[[]]]), 2),
  assert_float_equal(f([[1,1],[[1,1,1],[[]],[[]],[[]]],[[]]]), 2),
  true)$


/*!
\endhtmlonly
*/
