/* Oliver Kullmann, 20.8.2009 (Swansea) */
/* Copyright 2009, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/BranchingTuples/tests/Basic.mac
  \brief Tests for basic operations related to the tau-function

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/BranchingTuples/tests/Basic.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$

kill(f)$

/* ************************
   * Elementary functions *
   ************************
*/

okltest_bt_apply_permutation(f) := block([x,y],
  assert(f([],[]) = []),
  assert(f([1],[x]) = [x]),
  assert(f([1,2],[x,y]) = [x,y]),
  assert(f([2,1],[x,y]) = [y,x]),
  assert(f([3,2,1],[x,y,10]) = [10,y,x]),
  true)$

okltest_int_seq_bt(f) := block([s],
  s : f([5]),
  for n : 0 thru 10 do
    assert(s(n) = create_list(1,i,1,n)),
  s : f([1,2]),
  for n : 0 thru 6 do
    assert(s(n) = create_list(fib(i+1),i,0,n-1)),
  s : f([1,3]),
  assert(s(8) = [1,1,1,2,3,4,6,9]),
  s : f([2,4,3]),
  true)$


/* ***************
   * Power means *
   ***************
*/

okltest_meann(f) := block([x,y,z],
  assert(f(x) = x),
  assert(f(x,y) = (x+y)/2),
  assert(f(x,y,z) = (x+y+z)/3),
  true)$

okltest_gmean(f) := block([x,y,z],
  assert(f([x]) = x),
  assert(f([x,y]) = sqrt(x*y)),
  assert(f([x,y,z]) = (x*y*z)^(1/3)),
  assert(f([0,x,y,z]) = 0),
  true)$

okltest_gmeann(f) := block([x,y,z],
  assert(f(x) = x),
  assert(f(x,y) = sqrt(x*y)),
  assert(f(x,y,z) = (x*y*z)^(1/3)),
  assert(f(0,x,y,z) = 0),
  true)$

okltest_hmean(f) := block([x,y,z],
  assert(f([x]) = x),
  assert(f([x,y]) = 2/(1/x+1/y)),
  assert(f([x,y,z]) = 3/(1/x+1/y+1/z)),
  true)$

okltest_hmeann(f) := block([x,y,z],
  assert(f(x) = x),
  assert(f(x,y) = 2/(1/x+1/y)),
  assert(f(x,y,z) = 3/(1/x+1/y+1/z)),
  true)$


/* ***********************************************
   * Lower and upper bounds for the tau-function *
   ***********************************************
*/

/* ****************************
   * Comparison of tau-values *
   ****************************
*/

/* ********************************
   *   Computing the tau-function *
   ********************************
*/

/* ********************
   * Higher precision *
   ********************
*/

/* ************************
   * Symbolic computation *
   ************************
*/

/* ************************************
   * Derivatives of the tau-function *
   ************************************
*/


/* ****************************************
   * The induced probability distribution *
   ****************************************
*/

okltest_tauprob(f) := block([x,res].
  assert(f([0]) = [1]),
  assert(f([x]) = [1]),
  res : f([1,2]),
  assert_float_equal(res[1], 0.6180339887498948),
  assert_float_equal(res[2], 0.3819660112501052),
  assert(f([1,1]) = [0.5, 0.5]),
  assert(f([2,2]) = [0.5, 0.5]),
  assert(f([3,3]) = [0.5, 0.5]),
  for l : 3 thru 4 do
   for v : 1 thru 3 do block([t : create_list(v,i,1,l)],
    res : f(t),
    for r in res do
      assert_float_equal(r, 1/l)
  ),
  true)$

okltest_tauprob_hp(f) := block([x,res,d:30].
  assert(f([0],d) = [1]),
  assert(f([x],d) = [1]),
  res : f([1,2],d),
  assert_bfloat_equal(res[1], 6.18033988749894848204586834366b-1, d),
  assert_bfloat_equal(res[2], 3.81966011250105151795413165634b-1, d),
  for l : 2 thru 4 do
   for v : 1 thru 3 do block([t : create_list(v,i,1,l)],
    res : f(t,d),
    for r in res do
      assert_bfloat_equal(r, 1/l, d)
  ),
  true)$

okltest_tauprob_symbolical(f) := block([x],
  assert(f([0]) = [1]),
  assert(f([x]) = [1]),
  for l : 2 thru 4 do
   for v : 1 thru 3 do 
    assert(f(create_list(v,i,1,l)) = create_list(1/l,i,1,l)),
  assert(f([1,2]) = [2/(sqrt(5)+1),4/(sqrt(5)+1)^2]),
  true)$


/* ****************
   * The tau-mean *
   ****************
*/

okltest_taumean(f) := (
  assert(f([]) = inf),
  assert(f([1]) = inf),
  assert(f([0]) = inf),
  assert(f([2,0]) = 0),
  assert(f([2,0,2]) = 0),
  /* XXX */
  true)$

okltest_taumean_inf(f) := (
  assert(f([inf]) = inf),
  assert(f([inf,inf]) = inf),
  assert(f([0,inf]) = unknown),
  assert(f([0,0,inf]) = 0),
  assert(okltest_taumean(f) = true),
  /* XXX */
  true)$


/* *********************************************
   *   Convexity considerations: line versions *
   *********************************************
*/

/* ************************************
   * Investigations on approximations *
   ************************************
*/


/*!
\endhtmlonly
*/
