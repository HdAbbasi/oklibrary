/* Oliver Kullmann, 2.12.2007 (Swansea) */
/* Copyright 2007, 2008, 2009, 2017 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ConstraintProblems/Generators.mac
  \brief Generators for constraint problems

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConstraintProblems/Generators.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/BranchingTuples/Basic.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConstraintProblems/Domains.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/ConstraintSatisfaction.mac");
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$


/* ************
   * n Queens *
   ************
*/

/* The domain association for n Queens: */
Queens_dom(n) := block([sn : setn(n)], create_list(sn,i,1,n))$

/* The simplest propagator for n queens, just crossing out values which are
   not compatible with a variable which has a singleton domain: changes its 
   arguments, returns true if a change took place: */
Queens_propagator(dom) := block([n : length(dom), prop : false],
  for i : 1 thru n do 
    if length(dom[i]) = 1 then block([j : listify(dom[i])[1]],
      for k : 1 thru n do if k # i then block([dom_k : dom[k]],
        dom[k] : setdifference(dom_k, {j,j-k+i,j+k-i}),
        if length(dom[k]) < length(dom_k) then prop : true)),
  return(prop))$

/* Iterated propagator for n queens: */
Queens_propagator_it : prop_fixedpoint(Queens_propagator)$

/* The look-ahead version of the iterated propagator: */
Queens_propagator_it_la : look_ahead(Queens_propagator_it)$

/* The look-ahead version iterated: */
Queens_propagator_it_la_it : prop_fixedpoint(Queens_propagator_it_la)$

/* Using the default backtracking algorithm to solve it: */
Queens_constraint_backtracking(n) := constraint_backtracking(Queens_dom(n),Queens_propagator_it,variable_heuristics_tau)$
/* For comparison, using the trivial heuristics: */
Queens_constraint_backtracking_th(n) := constraint_backtracking(Queens_dom(n),Queens_propagator_it,trivial_variable_heuristics)$
/* Counting all solutions: */
Queens_constraint_backtracking_counting(n) := constraint_backtracking_counting(Queens_dom(n),Queens_propagator_it,variable_heuristics_tau)$
/* The first component contains the count; see
   https://en.wikipedia.org/wiki/Eight_queens_puzzle#Counting_solutions
   for an overview on the known values, and see
   https://oeis.org/A000170
   for all known values, which are currently, starting with n=1 (10 per line,
   finishing with n=27):
   1, 0, 0, 2, 10, 4, 40, 92, 352, 724,
   2680, 14200, 73712, 365596, 2279184, 14772512, 95815104, 666090624, 4968057848, 39029188884,
   314666222712, 2691008701644, 24233937684440, 227514171973736, 2207893435808352, 22317699616364044, 234907967154122528
*/


/*!
\endhtmlonly
*/
