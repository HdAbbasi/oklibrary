/* Oliver Kullmann, 27.3.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Resolution/PrimeImplicatesImplicants.mac
  \brief Functions regarding computation of prime implicates/implicants of boolean functions and clause-sets

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/Resolution/PrimeImplicatesImplicants.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Resolution/Basics.mac")$


/* The special case of min_resolution_closure_cs where the input clauses
   are all full (contain all variables). */
min_2resolution_closure_cs(F) := block(
 [levels : [], new_implicates, n : nvar_cs(F)],
  for i : n step -1 thru 0 do (
    new_implicates : F,
    F : two_subsumption_resolvents_cs(new_implicates),
    new_implicates : setdifference(min_elements(union(F,new_implicates)), F),
    levels : cons(new_implicates,levels)),
  return(apply(union, levels)))$


/*!
\endhtmlonly
*/
