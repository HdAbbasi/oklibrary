/* Oliver Kullmann, 27.3.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Resolution/PrimeImplicatesImplicants.mac
  \brief Functions regarding computation of prime implicates/implicants of boolean functions and clause-sets

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/Resolution/PrimeImplicatesImplicants.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Resolution/Basics.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac");


/* The special case of min_resolution_closure_cs where the input clauses
   are all full (contain all variables). */
min_2resolution_closure_cs(F) := block(
 [prime_implicates : {}, new_implicates, n : nvar_cs(F)],
  for i : 0 thru n do (
    if oklib_monitor then (
      print("min_2resolution_closure_cs: entering level =", n - i),
      print("Yet", length(prime_implicates), "prime implicates found.")),
    [F, new_implicates] : two_subsumption_resolvents_rem_cs(F),
    prime_implicates : union(prime_implicates,new_implicates)),
  return(prime_implicates))$


/* Given a clause-set F and a clause C which follows from F, find a prime
   implicate C' <= S with the help of SAT solver S (which must be applicable
   to the closure of {F} under applications of partial assignments). */
contained_prime_implicate(F,C,S) := block([reduced : true],
 while reduced do (
   reduced : false,
   for x in C unless reduced do block([D : disjoin(x,C)],
     if S(apply_pa(comp_sl(D), F)) = false then (
       C : D, reduced : true))),
 return(C))$


/* Replace for a clause-set F each clause C by a prime
   implicate C' <= C, using a SAT solver which works on
   the closure of {F} under the application of partial
   assignments. */
replace_by_prime_implicates(F,S) := block([G : {}],
  for C in F do G : adjoin(contained_prime_implicate(F,C,S), G),
  return(G))$
/* The special case where F is a hitting clause-set. */
replace_by_prime_implicates_hitting(F) := 
  replace_by_prime_implicates(F,sat_decision_hitting_cs)$


/*!
\endhtmlonly
*/
