/* Oliver Kullmann, 27.3.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Resolution/tests/PrimeImplicatesImplicants.mac
  \brief Tests for splitting trees

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Resolution/tests/PrimeImplicatesImplicants.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$


kill(f)$

/* ****************************
   * The Quine/McCluskey case *
   ****************************
*/

okltest_min_2resolution_closure_cs(f) := (
  assert(f({}) = {}),
  assert(f({{}}) = {{}}),
  assert(f({{1}}) = {{1}}),
  assert(f({{1},{-1}}) = {{}}),
  assert(f({{1,2},{-1,-2}}) = {{1,2},{-1,-2}}),
  assert(f({{1,2,3},{1,-2,3},{-1,-2,-3}}) = {{1,3},{-1,-2,-3}}),
  for n : 0 thru 3 do
    assert(f(full_fcs(n)[2]) = {{}}),
  true)$


/* *****************************************************
   * Finding contained prime-implicates by SAT solvers *
   *****************************************************
*/

okltest_contained_prime_implicate(f) := block(
 [S : lambda([F],dll_simplest_trivial1(cs_to_fcs(F)))],
  assert(f({{}},{},lambda([F],false)) = {}),
  assert(f({{}},{1,2,3},lambda([F],false)) = {}),
  for n : 1 thru 3 do block([F : full_fcs(n)[2]],
    assert(f(F, setn(n), S) = {})),
  assert(f({{1}}, {1,2}, S) = {1}),
  assert(f({{2}}, {1,2}, S) = {2}),
  for n : 1 thru 3 do block([F : disjoin(setn(n), full_fcs(n)[2])],
    assert(f(F, comp_sl(setn(n)), S) = {-1})),
  true)$

okltest_replace_by_prime_implicates_hitting(f) := (
  assert(f({}) = {}),
  assert(f({{}}) = {{}}),
  assert(f({{1}}) = {{1}}),
  for n : 0 thru 3 do
    assert(f(full_fcs(n)[2]) = {{}}),
  assert(f({{1,2}}) = {{1,2}}),
  assert(f({{1,2},{-1,-2}}) = {{1,2},{-1,-2}}),
  true)$


/*!
\endhtmlonly
*/
