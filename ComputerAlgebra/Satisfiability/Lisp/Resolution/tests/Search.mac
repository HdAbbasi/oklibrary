/* Oliver Kullmann, 7.10.2011 (Swansea) */
/* Copyright 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Resolution/tests/Search.mac
  \brief Tests related to resolution proofs

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Resolution/tests/Search.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$

kill(f)$

/* *******************
   * Tree resolution *
   *******************
*/

okltest_resolution_closure_treecomp_cs(f) := (
  assert(hm2sm(f({},0)) = {}),
  assert(hm2sm(f({{1},{-1}},0)) = {[{1},1],[{-1},1],[{},3]}),
  assert(hm2sm(f({{1},{-1}},{})) = {[{1},1],[{-1},1],[{},3]}),
  assert(hm2sm(f({{1},{-1}},{1})) = {[{1},1],[{-1},1]}),
  true)$

okltest_treecomp_refutation_cs(f) := (
  assert(f({}) = false),
  assert(f({{}}) = 1),
  assert(f({{1},{-1}}) = 3),
  assert(f({{},{1},{-1}}) = 1),
  assert(f({{1,2},{-1},{-2}}) = 5),
  for n : 0 thru 3 do
    assert(f(full_cs(n)) = 2^(n+1)-1),
  true)$


/* ***********************************
   * Short resolution proofs via SAT *
   ***********************************
*/

okltest_shortresref_fcl2snbfclfd(f) := block([F,n,c,k],
  [n,c,k] : [0,0,1],
  F : f([[],[]],k),
  assert(nvar_fcl(F) = nvar_shortres_snbfclfd(n,c,k)),
  assert(ncl_fcl(F) = ncl_shortresref_snbfclfd(n,c,k)),
  assert(snbfclfd_p(F) = true),
  [n,c,k] : [0,1,1],
  F : f([[],[{}]],k),
  assert(nvar_fcl(F) = nvar_shortres_snbfclfd(n,c,k)),
  assert(ncl_fcl(F) = ncl_shortresref_snbfclfd(n,c,k)),
  assert(snbfclfd_p(F) = true),
  [n,c,k] : [1,2,1],
  F : f([[1],[{1},{-1}]],k),
  assert(nvar_fcl(F) = nvar_shortres_snbfclfd(n,c,k)),
  assert(ncl_fcl(F) = ncl_shortresref_snbfclfd(n,c,k)),
  assert(snbfclfd_p(F) = true),
  [n,c,k] : [2,4,1],
  F : f([[1,2],[{1,2},{1,-2},{-1,2},{-1,-2}]],k),
  assert(nvar_fcl(F) = nvar_shortres_snbfclfd(n,c,k)),
  assert(ncl_fcl(F) = ncl_shortresref_snbfclfd(n,c,k)),
  assert(snbfclfd_p(F) = true),
  [n,c,k] : [2,4,2],
  F : f([[1,2],[{1,2},{1,-2},{-1,2},{-1,-2}]],k),
  assert(nvar_fcl(F) = nvar_shortres_snbfclfd(n,c,k)),
  assert(ncl_fcl(F) = ncl_shortresref_snbfclfd(n,c,k)),
  assert(snbfclfd_p(F) = true),
  /* XXX */
  true)$

okltest_shortresref_aloamo_fcl(f) := block([F,FF,n,c,k],
  [F,n,c,k] : [[[],[]],0,0,1],
  FF : f(F,k),
  assert(FF = [[],[{},{},{}]]),
  assert(nvar_fcl(FF) = nvar_shortres_aloamo(n,c,k)),
  assert(ncl_fcl(FF) = ncl_shortresref_aloamo(n,c,k)),
  [F,n,c,k] : [[[1],[{1},{-1}]],1,2,1],
  FF : f(F,k),
  assert(nvar_fcl(FF) = nvar_shortres_aloamo(n,c,k)),
  assert(ncl_fcl(FF) = ncl_shortresref_aloamo(n,c,k)),
  [F,n,c,k] : [[[1,2],[{1,2},{-1,2},{1,-2},{-1,-2}]],2,4,1],
  FF : f(F,k),
  assert(nvar_fcl(FF) = nvar_shortres_aloamo(n,c,k)),
  assert(ncl_fcl(FF) = ncl_shortresref_aloamo(n,c,k)),
  [F,n,c,k] : [[[1,2],[{1,2},{-1,2},{1,-2},{-1,-2}]],2,4,2],
  FF : f(F,k),
  assert(nvar_fcl(FF) = nvar_shortres_aloamo(n,c,k)),
  assert(ncl_fcl(FF) = ncl_shortresref_aloamo(n,c,k)),
  assert(ncl_fcl(FF) = ncl_shortresref_aloamo(n,c,k)),
  [F,n,c,k] : [[[1,2],[{1,2},{-1,2},{1,-2},{-1,-2},{1}]],2,5,3],
  FF : f(F,k),
  assert(nvar_fcl(FF) = nvar_shortres_aloamo(n,c,k)),
  assert(ncl_fcl(FF) = ncl_shortresref_aloamo(n,c,k)),
  /* XXX */
  true)$


/*!
\endhtmlonly
*/
