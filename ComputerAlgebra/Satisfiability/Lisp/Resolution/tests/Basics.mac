/* Oliver Kullmann, 27.3.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Resolution/tests/Basics.mac
  \brief Tests for splitting trees

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/Resolution/tests/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$

kill(f)$


/* ***************************
   * Single resolution steps *
   ***************************
*/

okltest_two_subsumption_resolvent_p(f) := (
  assert(f({},{}) = []),
  assert(f({1},{-1}) = [{}]),
  assert(f({1},{-1,2}) = []),
  assert(f({1},{2}) = []),
  assert(f({1,2},{-1,2}) = [{2}]),
  assert(f({1,2},{-1,-2}) = []),
  true)$

/* *************************
   * Adding all resolvents *
   *************************
*/

okltest_two_subsumption_resolvents_rem_cs(f) := (
  assert(f({}) = [{},{}]),
  assert(f({{}}) = [{},{{}}]),
  assert(f({{1}}) = [{},{{1}}]),
  assert(f({{1},{-1}}) = [{{}},{}]),
  assert(f({{1,2},{1,-2}}) = [{{1}},{}]),
  assert(f({{1,2},{-1,-2}}) = [{},{{1,2},{-1,-2}}]),
  true)$

/* *****************
   * DP resolution *
   *****************
*/

okltest_dp_operator(f) := (
  assert(f({},1) = {}),
  assert(f({{}},1) = {{}}),
  assert(f({{1}},1) = {}),
  assert(f({{1}},2) = {{1}}),
  assert(f({{1},{-1}},1) = {{}}),
  assert(f({{1},{-1}},2) = {{1},{-1}}),
  block([n : 4, F],
    F : full_fcs(n)[2],
    for v : n thru 1 step -1 do (
      F : f(F,v),
      assert(F = full_fcs(v-1)[2]))),
  true)$

okltest_distribution_min_dp(f) := block(
  assert(f([{},{}]) = [[0,1]]),
  assert(f([{},{{}}]) = [[1,1]]),
  assert(f([{1},{}]) = [[0,1]]),
  assert(f([{1},{{}}]) = [[2,1]]),
  assert(f([{1},{{1}}]) = [[1,1]]),
  assert(f([{1},{{1},{-1}}]) = [[3,1]]),
  assert(f([{1},{{},{1},{-1}}]) = [[4,1]]),
  assert(f([{1,2},{{1,2},{-1,2},{-1,-2}}]) = [[4,2]]),
  assert(f([{1,2},{{1},{1,2},{-1,2},{-1,-2}}]) = [[7,2]]),
  for n : 0 thru if oklib_test_level=0 then 3 else 4 do 
   block([FF : full_fcs(n)],
    assert(f(FF) = [[2^(n+1)-1,n!]])),
  true)$

/*!
\endhtmlonly
*/
