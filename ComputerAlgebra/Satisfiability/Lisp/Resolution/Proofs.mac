/* Oliver Kullmann, 23.9.2011 (Swansea) */
/* Copyright 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Resolution/Proofs.mac
  \brief Components for handling resolution proofs

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Resolution/Proofs.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Trees/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Resolution/Basics.mac")$


/* ******************
   * Basic concepts *
   ******************
*/

/*
  A "resolution tree" ("reslrt") is a labelled rooted tree (lrt) T where T is
  a binary tree such that each inner node is the resolvent of its two children.
  The notion of an lrt is defined in ComputerAlgebra/Trees/Lisp/Basics.mac.

*/

/* Checking that T is a resolution tree: */
reslrt_p(T) := listp(T) and
  if length(T) = 1 then c_p(T[1]) /* Leaves must be clauses */
  else is(length(T) = 3) and c_p(T[1]) and
       reslrt_p(T[2]) and reslrt_p(T[3]) and
       resolvable(T[2][1],T[3][1]) and is(resolvent(T[2][1],T[3][1]) = T[1])$

/*!
\endhtmlonly
*/
