/* Oliver Kullmann, 23.9.2011 (Swansea) */
/* Copyright 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Resolution/Proofs.mac
  \brief Components for handling resolution proofs

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Resolution/Proofs.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Trees/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Resolution/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Resolution/Basics.mac")$


/* ******************
   * Basic concepts *
   ******************
*/

/*

  A "resolution proof as a list" ("resl") is a non-empty list, where each
  entry is either a clause (an "axiom") or a pair consisting of a clause
  (the "resolvent") and a pair of (smaller) indices (the indices of the
  "parent clauses").

  A "resolution tree" ("reslrt") is a labelled rooted tree (lrt) T where T is
  a binary tree such that each inner node is the resolvent of its two children.
  The notion of an lrt is defined in ComputerAlgebra/Trees/Lisp/Basics.mac.

*/


/* ************************************
   * Checking the defining properties *
   ************************************
*/


resl_p(L) := listp(L) and is(length(L) > 0) and block([is_resl : true, L_i],
  for i : 1 thru length(L) while is_resl do (
    L_i : L[i],
    is_resl : c_p(L_i) or
      (listp(L_i) and is(length(L_i) = 2) and
        c_p(L_i[1]) and listp(L_i[2]) and block([ind_l : L_i[2]],
          is(length(ind_l) = 2) and integerp(ind_l[1]) and integerp(ind_l[2])
          and is(0 < ind_l[1]) and is(ind_l[1] < i) and is(0 < ind_l[2]) and
          is(ind_l[2] < i) and resolvable(L[ind_l[1]],L[ind_l[2]]) and
          is(resolvent(L[ind_l[1]],L[ind_l[2]]) = L_i[1])))),
    return(is_resl))$
reslrt_p(T) := listp(T) and
  if length(T) = 1 then c_p(T[1]) /* Leaves must be clauses */
  else is(length(T) = 3) and c_p(T[1]) and
       reslrt_p(T[2]) and reslrt_p(T[3]) and
       resolvable(T[2][1],T[3][1]) and is(resolvent(T[2][1],T[3][1]) = T[1])$

/*!
\endhtmlonly
*/
