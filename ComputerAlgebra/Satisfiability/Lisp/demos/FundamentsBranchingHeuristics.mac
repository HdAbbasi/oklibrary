/* Oliver Kullmann, 21.1.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/demos/FundamentsBranchingHeuristics.mac
  \brief Accompanying OK's SAT-handbook article [Fundaments of Branching Heuristics; Oliver Kullmann 2008]

Use by

oklib_demo("Transitional/ComputerAlgebra/Satisfiability/Lisp/demos/FundamentsBranchingHeuristics.mac");
or
oklib_batch("Transitional/ComputerAlgebra/Satisfiability/Lisp/demos/FundamentsBranchingHeuristics.mac");
or
oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/demos/FundamentsBranchingHeuristics.mac");

*/

/*!
\htmlonly
*/

if oklib_test_demos then
 if oklib_test_demos_level < 3 then return()$

oklib_include("Transitional/ComputerAlgebra/Trees/Lisp/Basics.mac");
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/BranchingTuples/Basic.mac");
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/BranchingTuples/Trees.mac");
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac");
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Reductions/GeneralisedUCP.mac");
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Backtracking/OKsolver2002.mac");
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac");
oklib_include("Transitional/ComputerAlgebra/Numerical/Lisp/Minimisation.mac");
oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac");


/* **************************************
   * Section "A theoretical framework"  *
   **************************************
*/

/* Example 1.2.1 */

for i : -10 thru 10 do print(i,": ", fib(i));
golden_section : solve(x^2=x+1,x);
gs_neg : rhs(golden_section[1]);
gs_pos : rhs(golden_section[2]);
fib_formula(n) := 1/sqrt(5) * (gs_pos^n - gs_neg^n);
for i : -10 thru 10 do print(i,": ", float(fib_formula(i)));
/* round(1/2) = 0, round(3/2) = 2 */
round_cautious(x) := block([fx : floor(x), s],
  s : sign(x - fx - 1/2), 
  if s = zero then error("Ambiguous rounding for ", x)
  else if s = pos then fx + 1 else fx)$
for i : 0 thru 10 do 
  print(i,": ", float(round_cautious(1/sqrt(5) *  gs_pos^i)));


/* ************************************************************
   * Section "Branching tuples and the canonical projection"  *
   ************************************************************
*/

/* Example 1.3.1 */

append([3,4],[3,2,1]);
bt_composition([3,4],[3,2,1]);

/* Example 1.3.2 */

tau_symbolical([1,2]);
tau([1,2]);
tau_hp([1,2],40);
tau_symbolical([2,3,5]);
tau([2,3,5]);
tau_hp([2,3,5],100); 

/* **************************************************************************
   * Section "Associating probability distributions with branching tuples"  *
   **************************************************************************
*/

/* Example 1.3.3 */

tauprob([1,2]);
tauprob_symbolical([1,2]);
factor(expand(tauprob_symbolical([1,2])));
tauprob_hp([1,2],40);
tauprob([2,3,5]);


/* ***********************************
   * Section "Estimating tree sizes  *
   ***********************************
*/

/* Example 1.4.1 */

T_1 : [[[],[]],[]];
T_2 : [[[]]];
T_3 : [[],[],[[],[]]];

nds(T_1);
lvs(T_1);
nnds(T_1);
nlvs(T_1);
height(T_1);
nds(T_2);
lvs(T_2);
nnds(T_2);
nlvs(T_2);
height(T_2);
nds(T_3);
lvs(T_3);
nnds(T_3);
nlvs(T_3);
height(T_3);

dst(T_3,[3]);

lvs(subtree(T_3,[3]));


/* Example 1.4.2 */

T_1_utpd : uniform_tpd(T_1);
T_2_utpd : uniform_tpd(T_2);
T_3_utpd : uniform_tpd(T_3);

tpd_flatten(T_1_utpd);
tpd_flatten(T_2_utpd);
tpd_flatten(T_3_utpd);

hash_table_data(ipd_rp(T_1_utpd));
hash_table_data(ipd_rp(T_2_utpd));
hash_table_data(ipd_rp(T_3_utpd));

lower_bound_nlvs(T_1_utpd);
tpd_moment(T_1_utpd,1);
upper_bound_nlvs(T_1_utpd);

lower_bound_nlvs(T_2_utpd);
tpd_moment(T_2_utpd,1);
upper_bound_nlvs(T_2_utpd);

lower_bound_nlvs(T_3_utpd);
tpd_moment(T_3_utpd,1);
upper_bound_nlvs(T_3_utpd);


/* Example 1.4.3 */

T_1_ctpd : canonical_tpd(T_1)[1];
T_2_ctpd : canonical_tpd(T_2)[1];
T_3_ctpd : canonical_tpd(T_3)[1];

tpd_flatten(T_1_ctpd);
tpd_flatten(T_2_ctpd);
tpd_flatten(T_3_ctpd);


/* Example 1.4.4 */

tpd_moment(T_1_utpd,2);
tpd_variance(T_1_utpd);

tpd_moment(T_2_utpd,2);
tpd_variance(T_2_utpd);

tpd_moment(T_3_utpd,2);
tpd_variance(T_3_utpd);


/* Example 1.4.5 */

T_1_bt : [[1,2], [[1,1],[[]],[[]]], [[]]];
tbtp(T_1_bt);
T_3_bt : [[3,5,2], [[]], [[]], [[2,1],[[]],[[]]]];
tbtp(T_3_bt);
T_1_bt_minsum : min_sum_tbt(T_1_bt);
T_1_bt_maxsum : max_sum_tbt(T_1_bt);
assert(T_1_bt_minsum = T_1_bt_maxsum);
T_3_bt_minsum : min_sum_tbt(T_3_bt);
T_3_bt_maxsum : max_sum_tbt(T_3_bt);
assert(T_1_bt = delta_tm(T_1_bt_minsum));
delta_tm(T_3_bt_minsum);
delta_tm(T_3_bt_maxsum);


/* Example 1.4.6 */

T_1_tpd : tauprob_tbt(T_1_bt);
T_1_stpd: fullratsimp(tauprob_symbolical_tbt(T_1_bt));
T_3_tpd : tauprob_tbt(T_3_bt);


/* Example 1.4.7 */

lower_bound_nlvs_tau(T_1_bt);
lower_bound_nlvs(T_1_tpd);
nlvs_l(T_1_tpd);
upper_bound_nlvs(T_1_tpd);
upper_bound_nlvs_tau(T_1_bt);

lower_bound_nlvs_tau(T_3_bt);
lower_bound_nlvs(T_3_tpd);
nlvs_l(T_3_tpd);
upper_bound_nlvs(T_3_tpd);
upper_bound_nlvs_tau(T_3_bt);


/* ******************************************************************
   * Section "Axiomatising the canonical order on branching tuples" *
   ******************************************************************
*/

/* Example 1.5.1 */

bth([1,2],2)[1];
bth([1,2],3)[1];

/* The saturated tuples are: */
bth([1,2],2)[2];
bth([1,2],3)[2];

/* A single saturated tuple computed greedily: */
satgr8 : bth_saturated_greedy([1,2],8);
length(satgr8);
length(sublist(satgr8, lambda([x],is(x=7))));
length(sublist(satgr8, lambda([x],is(x=8))));
fib(9);
fib(8);
fib(7);

/* In general, the following functions computes the length of saturated tuples
   for integral branching tuples t in two ways: */
sat_length_2_ways(t,s) := [length(bth_saturated_greedy(t,s)),
  last(int_seq_bt(t)(s+1))];


/* **********************************************************
   * Section "Evaluating and optimising distance functions" *
   **********************************************************
*/

/* Example 1.7.1 */

h_T1bt : ipd_rp(T_1_stpd)$
float(hash_table_data(h_T1bt));
tpd_flatten(T_1_stpd);
float(tpd_flatten(T_1_stpd));
fullratsimp(tpd_variance(T_1_stpd));
float(tpd_variance(T_1_stpd));

h_T3bt : ipd_rp(T_3_tpd)$
float(hash_table_data(h_T3bt));
tpd_flatten(T_3_tpd);
tpd_variance(T_3_tpd);


/* Example 1.7.2 */

/* The trivial heuristics */

trivial_ncl_ucp1 : amended_heuristics_lookahead_distances(generalised_ucp1, [trivial_distance], [tau2], trivial_sat_approx, [delta_n,delta_c,delta_l])$
trivial_ncl_ast_54 : dll_red_st_dist(weak_php(5,4), trivial_ncl_ucp1, generalised_ucp1);

assert(nnds_l(trivial_ncl_ast_54) = 103);
assert(height(l2ult(trivial_ncl_ast_54)) = 8);
assert(levelled_height(l2ult(trivial_ncl_ast_54)) = 3);

tbt_t_ast_54 : extract_tbt(trivial_ncl_ast_54, 1);
tbt_n_ast_54 : extract_tbt(trivial_ncl_ast_54, 2);
tbt_c_ast_54 : extract_tbt(trivial_ncl_ast_54, 3);
tbt_l_ast_54 : extract_tbt(trivial_ncl_ast_54, 4);

tpd_t_ast_54 : tauprob_tbt(tbt_t_ast_54);
tpd_n_ast_54 : tauprob_tbt(tbt_n_ast_54);
tpd_c_ast_54 : tauprob_tbt(tbt_c_ast_54);
tpd_l_ast_54 : tauprob_tbt(tbt_l_ast_54);

assert_float_equal(tpd_variance(tpd_t_ast_54), 3336.0);
assert_float_equal(tpd_variance(tpd_n_ast_54), 121710.5758316126);
assert_float_equal(tpd_variance(tpd_c_ast_54), 29857.78137771181);
assert_float_equal(tpd_variance(tpd_l_ast_54), 38701.49861318067);

assert_float_equal(upper_bound_nlvs_tau(tbt_t_ast_54), 256.0);
assert_float_equal(upper_bound_nlvs_tau(tbt_n_ast_54), 1043653.908038483);
assert_float_equal(upper_bound_nlvs_tau(tbt_c_ast_54), 201830.0227763765);
assert_float_equal(upper_bound_nlvs_tau(tbt_l_ast_54), 120414.1082378856);


/* Delta(n) as heuristics */

n_clt_ucp1 : amended_heuristics_lookahead_distances(generalised_ucp1, [delta_n], [tau2], trivial_sat_approx, [delta_c,delta_l,trivial_distance])$
n_clt_ast_54 : dll_red_st_dist(weak_php(5,4), n_clt_ucp1, generalised_ucp1);

assert(nnds_l(n_clt_ast_54) = 71);
assert(height(l2ult(n_clt_ast_54)) = 7);
assert(levelled_height(l2ult(n_clt_ast_54)) = 3);

tbt_nn_ast_54 : extract_tbt(n_clt_ast_54, 1);
tbt_nc_ast_54 : extract_tbt(n_clt_ast_54, 2);
tbt_nl_ast_54 : extract_tbt(n_clt_ast_54, 3);
tbt_nt_ast_54 : extract_tbt(n_clt_ast_54, 4);

tpd_nn_ast_54 : tauprob_tbt(tbt_nn_ast_54);
tpd_nc_ast_54 : tauprob_tbt(tbt_nc_ast_54);
tpd_nl_ast_54 : tauprob_tbt(tbt_nl_ast_54);
tpd_nt_ast_54 : tauprob_tbt(tbt_nt_ast_54);

assert_float_equal(tpd_variance(tpd_nn_ast_54), 21963.20063203072);
assert_float_equal(tpd_variance(tpd_nc_ast_54), 6777.794153245422);
assert_float_equal(tpd_variance(tpd_nl_ast_54), 8703.973094479255);
assert_float_equal(tpd_variance(tpd_nt_ast_54), 1216.0);

assert_float_equal(upper_bound_nlvs_tau(tbt_nn_ast_54), 150923.8661445005);
assert_float_equal(upper_bound_nlvs_tau(tbt_nc_ast_54), 62181.59240217086);
assert_float_equal(upper_bound_nlvs_tau(tbt_nl_ast_54), 41122.97764837247);
assert_float_equal(upper_bound_nlvs_tau(tbt_nt_ast_54), 128.0);


/* Delta(c) as heuristics */

c_nlt_ucp1 : amended_heuristics_lookahead_distances(generalised_ucp1, [delta_c], [tau2], trivial_sat_approx, [delta_n,delta_l,trivial_distance])$
c_nlt_ast_54 : dll_red_st_dist(weak_php(5,4), c_nlt_ucp1, generalised_ucp1);

assert(nnds_l(c_nlt_ast_54) = 49);
assert(height(l2ult(c_nlt_ast_54)) = 7);
assert(levelled_height(l2ult(c_nlt_ast_54)) = 3);

tbt_cc_ast_54 : extract_tbt(c_nlt_ast_54, 1);
tbt_cn_ast_54 : extract_tbt(c_nlt_ast_54, 2);
tbt_cl_ast_54 : extract_tbt(c_nlt_ast_54, 3);
tbt_ct_ast_54 : extract_tbt(c_nlt_ast_54, 4);

tpd_cc_ast_54 : tauprob_tbt(tbt_cc_ast_54);
tpd_cn_ast_54 : tauprob_tbt(tbt_cn_ast_54);
tpd_cl_ast_54 : tauprob_tbt(tbt_cl_ast_54);
tpd_ct_ast_54 : tauprob_tbt(tbt_ct_ast_54);

assert_float_equal(tpd_variance(tpd_cc_ast_54), 7787.909873270139);
assert_float_equal(tpd_variance(tpd_cn_ast_54), 27672.21496842504);
assert_float_equal(tpd_variance(tpd_cl_ast_54), 8632.885062774241);
assert_float_equal(tpd_variance(tpd_ct_ast_54), 591.0);

assert_float_equal(upper_bound_nlvs_tau(tbt_cc_ast_54), 1835346.792423415);
assert_float_equal(upper_bound_nlvs_tau(tbt_cn_ast_54), 2.619514500649467E+7);
assert_float_equal(upper_bound_nlvs_tau(tbt_cl_ast_54), 603346.2305311395);
assert_float_equal(upper_bound_nlvs_tau(tbt_ct_ast_54), 128.0);


/* Delta(l) as heuristics */

l_nct_ucp1 : amended_heuristics_lookahead_distances(generalised_ucp1, [delta_l], [tau2], trivial_sat_approx, [delta_n,delta_c,trivial_distance])$
l_nct_ast_54 : dll_red_st_dist(weak_php(5,4), l_nct_ucp1, generalised_ucp1);

assert(nnds_l(l_nct_ast_54) = 45);
assert(height(l2ult(l_nct_ast_54)) = 9);
assert(levelled_height(l2ult(l_nct_ast_54)) = 3);

tbt_ll_ast_54 : extract_tbt(l_nct_ast_54, 1);
tbt_ln_ast_54 : extract_tbt(l_nct_ast_54, 2);
tbt_lc_ast_54 : extract_tbt(l_nct_ast_54, 3);
tbt_lt_ast_54 : extract_tbt(l_nct_ast_54, 4);

tpd_ll_ast_54 : tauprob_tbt(tbt_ll_ast_54);
tpd_ln_ast_54 : tauprob_tbt(tbt_ln_ast_54);
tpd_lc_ast_54 : tauprob_tbt(tbt_lc_ast_54);
tpd_lt_ast_54 : tauprob_tbt(tbt_lt_ast_54);

assert_float_equal(tpd_variance(tpd_ll_ast_54), 65665.08598951569);
assert_float_equal(tpd_variance(tpd_ln_ast_54), 407777.1493197185);
assert_float_equal(tpd_variance(tpd_lc_ast_54), 47323.01217783934);
assert_float_equal(tpd_variance(tpd_lt_ast_54), 1551.0);

assert_float_equal(upper_bound_nlvs_tau(tbt_ll_ast_54), 9396594.315155165);
assert_float_equal(upper_bound_nlvs_tau(tbt_ln_ast_54), 9.075102530316168E+8);
assert_float_equal(upper_bound_nlvs_tau(tbt_lc_ast_54), 1.243424793136493E+7);
assert_float_equal(upper_bound_nlvs_tau(tbt_lt_ast_54), 512.0);


/* The weighted number of clauses as heuristics */

wnc_nclt_ucp1 : amended_heuristics_lookahead_distances(generalised_ucp1, [wn_newclauses(weightingscheme_OKsolver2002)], [tau2], trivial_sat_approx, [delta_n,delta_c,delta_l,trivial_distance])$
wnc_nclt_ast_54 : dll_red_st_dist(weak_php(5,4), wnc_nclt_ucp1, generalised_ucp1);

assert(nnds_l(wnc_nclt_ast_54) = 47);
assert(height(l2ult(wnc_nclt_ast_54)) = 10);
assert(levelled_height(l2ult(wnc_nclt_ast_54)) = 3);

tbt_wncwnc_ast_54 : extract_tbt(wnc_nclt_ast_54, 1);
tbt_wncn_ast_54 : extract_tbt(wnc_nclt_ast_54, 2);
tbt_wncc_ast_54 : extract_tbt(wnc_nclt_ast_54, 3);
tbt_wncl_ast_54 : extract_tbt(wnc_nclt_ast_54, 4);


/* Delta(l) as heuristics for weak_php(6,5) */

l_nct_ast_65 : dll_red_st_dist(weak_php(6,5), l_nct_ucp1, generalised_ucp1);

assert(nnds_l(l_nct_ast_65) = 219);
assert(height(l2ult(l_nct_ast_65)) = 16);
assert(levelled_height(l2ult(l_nct_ast_65)) = 4);

tbt_ll_ast_65 : extract_tbt(l_nct_ast_65, 1);
tbt_ln_ast_65 : extract_tbt(l_nct_ast_65, 2);
tbt_lc_ast_65 : extract_tbt(l_nct_ast_65, 3);
tbt_lt_ast_65 : extract_tbt(l_nct_ast_65, 4);

tpd_ll_ast_65 : tauprob_tbt(tbt_ll_ast_65);
tpd_ln_ast_65 : tauprob_tbt(tbt_ln_ast_65);
tpd_lc_ast_65 : tauprob_tbt(tbt_lc_ast_65);
tpd_lt_ast_65 : tauprob_tbt(tbt_lt_ast_65);

assert_float_equal(tpd_variance(tpd_ll_ast_65), 3.874019989410695E+8);
assert_float_equal(tpd_variance(tpd_ln_ast_65), 1.401235525398172E+10);
assert_float_equal(tpd_variance(tpd_lc_ast_65), 1.7926669098571474E+8);
assert_float_equal(tpd_variance(tpd_lt_ast_65), 311868.0);

assert_float_equal(upper_bound_nlvs_tau(tbt_ll_ast_65), 1.263199352585657E+14);
assert_float_equal(upper_bound_nlvs_tau(tbt_ln_ast_65), 4.745043472858466E+15);
assert_float_equal(upper_bound_nlvs_tau(tbt_lc_ast_65), 3.227130302471304E+14);
assert_float_equal(upper_bound_nlvs_tau(tbt_lt_ast_65), 65536.0);


/* The weighted number of clauses as heuristics for weak_php(6,5) */

ok2002_ncl234_ucp1 : amended_heuristics_lookahead_distances(
  generalised_ucp1, 
  [wn_newclauses_2(weightingscheme_OKsolver2002), delta_n], 
  [tau2], 
  trivial_sat_approx, 
  [delta_n,delta_c,delta_l,n_newclauses(2),n_newclauses(3),n_newclauses(4)])$
ok2002_ncl234_ast_65 : dll_red_st_dist(
  weak_php(6,5), 
  ok2002_ncl234_ucp1,
  generalised_ucp_ple1);

assert(nnds_l(ok2002_ncl234_ast_65) = 77);
assert(height(l2ult(ok2002_ncl234_ast_65)) = 12);
assert(levelled_height(l2ult(ok2002_ncl234_ast_65)) = 3);

assert(count_inf_branches(ok2002_ncl234_ast_65,6) = 23);
col_ok2002_ncl234_ast_65 : collapse_inf_branches(ok2002_ncl234_ast_65, 6);

assert(nnds_l(col_ok2002_ncl234_ast_65) = 31);
assert(height(l2ult(col_ok2002_ncl234_ast_65)) = 9);
assert(levelled_height(l2ult(col_ok2002_ncl234_ast_65)) = 2);

tbt_wnc_ok2002_ncl234_ast_65 : extract_tbt(col_ok2002_ncl234_ast_65, 1);
tbt_n_ok2002_ncl234_ast_65 : extract_tbt(col_ok2002_ncl234_ast_65, 3);
tbt_c_ok2002_ncl234_ast_65 : extract_tbt(col_ok2002_ncl234_ast_65, 4);
tbt_l_ok2002_ncl234_ast_65 : extract_tbt(col_ok2002_ncl234_ast_65, 5);

tpd_wnc_ok2002_ncl234_ast_65 : tauprob_tbt(tbt_wnc_ok2002_ncl234_ast_65);
tpd_n_ok2002_ncl234_ast_65 : tauprob_tbt(tbt_n_ok2002_ncl234_ast_65);
tpd_c_ok2002_ncl234_ast_65 : tauprob_tbt(tbt_c_ok2002_ncl234_ast_65);
tpd_l_ok2002_ncl234_ast_65 : tauprob_tbt(tbt_l_ok2002_ncl234_ast_65);

assert_float_equal(tpd_variance(tpd_wnc_ok2002_ncl234_ast_65), 242775.8846080581);
assert_float_equal(tpd_variance(tpd_n_ok2002_ncl234_ast_65), 4274916.597124265);
assert_float_equal(tpd_variance(tpd_c_ok2002_ncl234_ast_65), 213026.3762745041);
assert_float_equal(tpd_variance(tpd_l_ok2002_ncl234_ast_65), 307364.6985536006);

assert_float_equal(upper_bound_nlvs_tau(tpd_wnc_ok2002_ncl234_ast_65), 1595.856418802932);
assert_float_equal(upper_bound_nlvs_tau(tpd_n_ok2002_ncl234_ast_65), 61.85207603853764);
assert_float_equal(upper_bound_nlvs_tau(tpd_c_ok2002_ncl234_ast_65), 100.8063825114651);
assert_float_equal(upper_bound_nlvs_tau(tpd_l_ok2002_ncl234_ast_65), 92.08543943298893);



/* Example 1.7.3 */

/* Minimising the variances */

minvarn(x) := tpd_variance(tauprob_tbt(
  x * tbt_wnc_ok2002_ncl234_ast_65 + (1-x) * tbt_n_ok2002_ncl234_ast_65));
plot2d(minvarn, [x,0,1]);
approx_min_varn : min_scanning(minvarn, [[0,1]], 100)[2][1];
assert_float_equal(approx_min_varn, 1);

roundd(x,d) := float(round(x*10^d)/10^d);

minvarc(x) := tpd_variance(tauprob_tbt(
  x * tbt_wnc_ok2002_ncl234_ast_65 + (1-x) * tbt_c_ok2002_ncl234_ast_65));
plot2d(minvarc, [x,0,1]);
approx_min_varc : min_scanning(minvarc, [[0,1]], 100)[2][1];
approx_min_varc : min_scanning(minvarc, [[approx_min_varc-0.1,min(approx_min_varc+0.1,1)]], 100)[2][1];
approx_min_varc : min_scanning(minvarc, [[approx_min_varc-0.01,min(approx_min_varc+0.01,1)]], 100)[2][1];
assert_float_equal(approx_min_varc, 0.9543999999999999);
approx_min_varc : roundd(approx_min_varc, 4);
assert_float_equal(approx_min_varc, 0.9544);

minvarl(x) := tpd_variance(tauprob_tbt(
  x * tbt_wnc_ok2002_ncl234_ast_65 + (1-x) * tbt_l_ok2002_ncl234_ast_65));
plot2d(minvarl, [x,0,1]); 
approx_min_varl : min_scanning(minvarl, [[0,1]], 100)[2][1];
approx_min_varl : min_scanning(minvarl, [[approx_min_varl-0.1,min(approx_min_varl+0.1,1)]], 100)[2][1];
approx_min_varl : min_scanning(minvarl, [[approx_min_varl-0.01,min(approx_min_varl+0.01,1)]], 100)[2][1];
assert_float_equal(approx_min_varl, 0.985);

tpbt_w2_ok2002_ncl234_ast_65 : extract_tbt(col_ok2002_ncl234_ast_65, 6);
tpbt_w3_ok2002_ncl234_ast_65 : extract_tbt(col_ok2002_ncl234_ast_65, 7);
tpbt_w4_ok2002_ncl234_ast_65 : extract_tbt(col_ok2002_ncl234_ast_65, 8);

minvarw23(x,y) := tpd_variance(tauprob_tbt(
  x * tpbt_w2_ok2002_ncl234_ast_65 + y * (1-x) * tpbt_w3_ok2002_ncl234_ast_65 +
  (1 - x - y * (1-x)) * tpbt_w4_ok2002_ncl234_ast_65))$
plot3d(minvarw23, [x,0.1,0.9], [y,0.1,0.9]);
approx_min_varw23 : min_scanning(minvarw23, [[0.1,0.9], [0.1,0.9]], 30)[2];
approx_min_varw23 : min_scanning(minvarw23, 
  [[approx_min_varw23[1]-0.1,approx_min_varw23[1]+0.1], 
  [approx_min_varw23[2]-0.1,approx_min_varw23[2]+0.1]], 
  30)[2];
approx_min_varw23 : min_scanning(minvarw23, 
  [[approx_min_varw23[1]-0.01,approx_min_varw23[1]+0.01], 
  [approx_min_varw23[2]-0.01,approx_min_varw23[2]+0.01]], 
  30)[2];
assert_float_equal(approx_min_varw23[1],0.7146666666666667);
assert_float_equal(approx_min_varw23[2], 0.358);
approx_min_varw23[1] : roundd(approx_min_varw23[1], 4);
assert_float_equal(approx_min_varw23[1],0.7147);

/* For unconstrained optimisation one could use x = exp(lambda)/(1+exp(lambda)) and
   y = exp(mu)/(1+exp(mu)), where now lambda, mu are arbitrary real numbers
   (this also takes care of openness).
*/

approx_min_varw : [
 approx_min_varw23[1], 
 approx_min_varw23[2] * (1-approx_min_varw23[1]),
 1 - approx_min_varw23[1] - approx_min_varw23[2] * (1-approx_min_varw23[1])];
approx_min_varw : approx_min_varw / approx_min_varw[1];
approx_min_varw[2] : roundd(approx_min_varw[2],3);
approx_min_varw[3] : roundd(approx_min_varw[3],3);
assert_float_equal(approx_min_varw[1], 1);
assert_float_equal(approx_min_varw[2], 0.143);
assert_float_equal(approx_min_varw[3], 0.256);



/* Optimised heuristics: clause-weights (using Delta(l) as secondary heuristics) */

weightingscheme_special(k) :=
  if k >= 2 and k <= 4 then approx_min_varw[k-1]
  else error("Only clause-lengths 2,3,4 allowed!")$

ok2002_php65_ucp1 : amended_heuristics_lookahead_distances(
  generalised_ucp1, 
  [wn_newclauses_2(weightingscheme_special), delta_l], 
  [tau2], 
  trivial_sat_approx, 
  [])$
ok2002_php65_ast_65 : dll_red_st_dist(
  weak_php(6,5), 
  ok2002_php65_ucp1,
  generalised_ucp_ple1);

assert(nnds_l(ok2002_php65_ast_65) = 67);
assert(height(l2ult(ok2002_php65_ast_65)) = 12);
assert(levelled_height(l2ult(ok2002_php65_ast_65)) = 3);

assert(count_inf_branches(ok2002_php65_ast_65, 0) = 13);
col_ok2002_php65_ast_65 : collapse_inf_branches(ok2002_php65_ast_65, 0);

assert(nnds_l(col_ok2002_php65_ast_65) = 41);
assert(height(l2ult(col_ok2002_php65_ast_65)) = 11);
assert(levelled_height(l2ult(col_ok2002_php65_ast_65)) = 2);


/* Optimised heuristics: clause-weights (using, as originally, Delta(n) as secondary heuristics) */

ok2002n_php65_ucp1 : amended_heuristics_lookahead_distances(
  generalised_ucp1, 
  [wn_newclauses_2(weightingscheme_special), delta_n], 
  [tau2], 
  trivial_sat_approx, 
  [])$
ok2002n_php65_ast_65 : dll_red_st_dist(
  weak_php(6,5), 
  ok2002n_php65_ucp1,
  generalised_ucp_ple1);

assert(nnds_l(ok2002n_php65_ast_65) = 67);
assert(height(l2ult(ok2002n_php65_ast_65)) = 12);
assert(levelled_height(l2ult(ok2002n_php65_ast_65)) = 3);

assert(count_inf_branches(ok2002n_php65_ast_65, 0) = 13);
col_ok2002n_php65_ast_65 : collapse_inf_branches(ok2002n_php65_ast_65, 0);

assert(nnds_l(col_ok2002n_php65_ast_65) = 41);
assert(height(l2ult(col_ok2002n_php65_ast_65)) = 11);
assert(levelled_height(l2ult(col_ok2002n_php65_ast_65)) = 2);


/* Optimised heuristics: Linear combination of weighted clauses and Delta(l) */

ok2002wl_php65_ucp1 : amended_heuristics_lookahead_distances(
  generalised_ucp1, 
  [lambda([F0,F1], 
    approx_min_varl * wn_newclauses_2(weightingscheme_OKsolver2002)(F0,F1) 
    + (1-approx_min_varl) * delta_l(F0,F1)),
   delta_n], 
  [tau2], 
  trivial_sat_approx, 
  [])$
ok2002wl_php65_ast_65 : dll_red_st_dist(
  weak_php(6,5), 
  ok2002wl_php65_ucp1,
  generalised_ucp_ple1);

assert(nnds_l(ok2002wl_php65_ast_65) = 79);
assert(height(l2ult(ok2002wl_php65_ast_65)) = 9);
assert(levelled_height(l2ult(ok2002wl_php65_ast_65)) = 3);

assert(count_inf_branches(ok2002wl_php65_ast_65, 0) = 25);
col_ok2002wl_php65_ast_65 : collapse_inf_branches(ok2002wl_php65_ast_65, 0);

assert(nnds_l(col_ok2002wl_php65_ast_65) = 29);
assert(height(l2ult(col_ok2002wl_php65_ast_65)) = 6);
assert(levelled_height(l2ult(col_ok2002wl_php65_ast_65)) = 2);


/* Optimised heuristics: Linear combination of weighted clauses and Delta(c) */

ok2002wc_php65_ucp1 : amended_heuristics_lookahead_distances(
  generalised_ucp1, 
  [lambda([F0,F1], 
    approx_min_varc * wn_newclauses_2(weightingscheme_OKsolver2002)(F0,F1) 
    + (1-approx_min_varc) * delta_c(F0,F1)),
   delta_n], 
  [tau2], 
  trivial_sat_approx, 
  [])$
ok2002wc_php65_ast_65 : dll_red_st_dist(
  weak_php(6,5), 
  ok2002wc_php65_ucp1,
  generalised_ucp_ple1);

assert(nnds_l(ok2002wc_php65_ast_65) = 79);
assert(height(l2ult(ok2002wc_php65_ast_65)) = 9);
assert(levelled_height(l2ult(ok2002wc_php65_ast_65)) = 3);

assert(count_inf_branches(ok2002wc_php65_ast_65, 0) = 25);
col_ok2002wc_php65_ast_65 : collapse_inf_branches(ok2002wc_php65_ast_65, 0);

assert(nnds_l(col_ok2002wc_php65_ast_65) = 29);
assert(height(l2ult(col_ok2002wc_php65_ast_65)) = 6);
assert(levelled_height(l2ult(col_ok2002wc_php65_ast_65)) = 2);


/* Example 1.7.4 */

/* Minimising the tau-upper bounds */

mintaun(x) := upper_bound_nlvs_tau(
  x * tbt_wnc_ok2002_ncl234_ast_65 + (1-x) * tbt_n_ok2002_ncl234_ast_65);
plot2d(mintaun, [x,0.1,0.9]);
approx_min_taun : min_scanning(mintaun, [[0,1]], 100)[2][1];
approx_min_taun : min_scanning(mintaun, [[approx_min_taun-0.1,approx_min_taun+0.1]], 100)[2][1];
assert_float_equal(approx_min_taun, 0.492);

mintauc(x) := upper_bound_nlvs_tau(
  x * tbt_wnc_ok2002_ncl234_ast_65 + (1-x) * tbt_c_ok2002_ncl234_ast_65);
plot2d(mintauc, [x,0.2,0.95]);
approx_min_tauc : min_scanning(mintauc, [[0,1]], 100)[2][1];
approx_min_tauc : min_scanning(mintauc, [[approx_min_tauc-0.05,approx_min_tauc+0.05]], 100)[2][1];
assert_float_equal(approx_min_tauc, 0.891);


mintaul(x) := upper_bound_nlvs_tau(
  x * tbt_wnc_ok2002_ncl234_ast_65 + (1-x) * tbt_l_ok2002_ncl234_ast_65);
plot2d(mintaul, [x,0.2,0.99]);
approx_min_taul : min_scanning(mintaul, [[0,1]], 100)[2][1];
approx_min_taul : min_scanning(mintaul, [[approx_min_taul-0.05,approx_min_taul+0.05]], 100)[2][1];
assert_float_equal(approx_min_taul, 0.949);


mintauw23(x,y) := upper_bound_nlvs_tau(
  x * tpbt_w2_ok2002_ncl234_ast_65 + y * (1-x) * tpbt_w3_ok2002_ncl234_ast_65 +
  (1 - x - y * (1-x)) * tpbt_w4_ok2002_ncl234_ast_65)$
plot3d(mintauw23, [x,0.2,0.7], [y,0.2,0.7]);

approx_min_tauw23 : min_scanning(mintauw23, [[0.1,0.9], [0.1,0.9]], 30)[2];
approx_min_tauw23 : min_scanning(mintauw23, 
  [[approx_min_tauw23[1]-0.1,approx_min_tauw23[1]+0.1], 
  [approx_min_tauw23[2]-0.1,approx_min_tauw23[2]+0.1]], 
  30)[2];
approx_min_tauw23 : min_scanning(mintauw23, 
  [[approx_min_tauw23[1]-0.01,approx_min_tauw23[1]+0.01], 
  [approx_min_tauw23[2]-0.01,approx_min_tauw23[2]+0.01]], 
  30)[2];
assert_float_equal(approx_min_tauw23[1],0.384);
assert_float_equal(approx_min_tauw23[2], 0.6233333333333334);
approx_min_tauw23[2] : roundd(approx_min_tauw23[2], 4);
assert_float_equal(approx_min_tauw23[2],0.6233);

approx_min_tauw : [
 approx_min_tauw23[1], 
 approx_min_tauw23[2] * (1-approx_min_tauw23[1]),
 1 - approx_min_tauw23[1] - approx_min_tauw23[2] * (1-approx_min_tauw23[1])];
approx_min_tauw : approx_min_tauw / approx_min_tauw[1];
approx_min_tauw[2] : roundd(approx_min_tauw[2],4);
approx_min_tauw[3] : roundd(approx_min_tauw[3],4);
assert_float_equal(approx_min_tauw[1], 1);
assert_float_equal(approx_min_tauw[2], 0.9999);
assert_float_equal(approx_min_tauw[3], 0.6043);


/* Optimised heuristics: clause-weights (using, as originally, Delta(n) as secondary heuristics) */

weightingscheme_special_t(k) :=
  if k >= 2 and k <= 4 then approx_min_tauw[k-1]
  else error("Only clause-lengths 2,3,4 allowed!")$

ok2002nt_php65_ucp1 : amended_heuristics_lookahead_distances(
  generalised_ucp1, 
  [wn_newclauses_2(weightingscheme_special_t), delta_n], 
  [tau2], 
  trivial_sat_approx, 
  [])$
ok2002nt_php65_ast_65 : dll_red_st_dist(
  weak_php(6,5), 
  ok2002nt_php65_ucp1,
  generalised_ucp_ple1);

assert(nnds_l(ok2002nt_php65_ast_65) = 79);
assert(height(l2ult(ok2002nt_php65_ast_65)) = 9);
assert(levelled_height(l2ult(ok2002nt_php65_ast_65)) = 3);

assert(count_inf_branches(ok2002nt_php65_ast_65, 0) = 25);
col_ok2002nt_php65_ast_65 : collapse_inf_branches(ok2002nt_php65_ast_65, 0);

assert(nnds_l(col_ok2002nt_php65_ast_65) = 29);
assert(height(l2ult(col_ok2002nt_php65_ast_65)) = 6);
assert(levelled_height(l2ult(col_ok2002nt_php65_ast_65)) = 2);


/* Optimised heuristics: Linear combination of weighted clauses and Delta(n) */

ok2002wnt_php65_ucp1 : amended_heuristics_lookahead_distances(
  generalised_ucp1, 
  [lambda([F0,F1], 
    approx_min_taun * wn_newclauses_2(weightingscheme_OKsolver2002)(F0,F1) 
    + (1-approx_min_taun) * delta_c(F0,F1)),
   delta_n], 
  [tau2], 
  trivial_sat_approx, 
  [])$
ok2002wnt_php65_ast_65 : dll_red_st_dist(
  weak_php(6,5), 
  ok2002wnt_php65_ucp1,
  generalised_ucp_ple1);

assert(nnds_l(ok2002wnt_php65_ast_65) = 79);
assert(height(l2ult(ok2002wnt_php65_ast_65)) = 9);
assert(levelled_height(l2ult(ok2002wnt_php65_ast_65)) = 3);

assert(count_inf_branches(ok2002wnt_php65_ast_65, 0) = 25);
col_ok2002wnt_php65_ast_65 : collapse_inf_branches(ok2002wnt_php65_ast_65, 0);

assert(nnds_l(col_ok2002wnt_php65_ast_65) = 29);
assert(height(l2ult(col_ok2002wnt_php65_ast_65)) = 6);
assert(levelled_height(l2ult(col_ok2002wnt_php65_ast_65)) = 2);


/* Optimised heuristics: Linear combination of weighted clauses and Delta(c) */

ok2002wct_php65_ucp1 : amended_heuristics_lookahead_distances(
  generalised_ucp1, 
  [lambda([F0,F1], 
    approx_min_tauc * wn_newclauses_2(weightingscheme_OKsolver2002)(F0,F1) 
    + (1-approx_min_tauc) * delta_c(F0,F1)),
   delta_n], 
  [tau2], 
  trivial_sat_approx, 
  [])$
ok2002wct_php65_ast_65 : dll_red_st_dist(
  weak_php(6,5), 
  ok2002wct_php65_ucp1,
  generalised_ucp_ple1);

assert(nnds_l(ok2002wct_php65_ast_65) = 79);
assert(height(l2ult(ok2002wct_php65_ast_65)) = 9);
assert(levelled_height(l2ult(ok2002wct_php65_ast_65)) = 3);

assert(count_inf_branches(ok2002wct_php65_ast_65, 0) = 25);
col_ok2002wct_php65_ast_65 : collapse_inf_branches(ok2002wct_php65_ast_65, 0);

assert(nnds_l(col_ok2002wct_php65_ast_65) = 29);
assert(height(l2ult(col_ok2002wct_php65_ast_65)) = 6);
assert(levelled_height(l2ult(col_ok2002wct_php65_ast_65)) = 2);


/* Optimised heuristics: Linear combination of weighted clauses and Delta(l) */

ok2002wlt_php65_ucp1 : amended_heuristics_lookahead_distances(
  generalised_ucp1, 
  [lambda([F0,F1], 
    approx_min_taul * wn_newclauses_2(weightingscheme_OKsolver2002)(F0,F1) 
    + (1-approx_min_taul) * delta_l(F0,F1)),
   delta_n], 
  [tau2], 
  trivial_sat_approx, 
  [])$
ok2002wlt_php65_ast_65 : dll_red_st_dist(
  weak_php(6,5), 
  ok2002wlt_php65_ucp1,
  generalised_ucp_ple1);

assert(nnds_l(ok2002wlt_php65_ast_65) = 79);
assert(height(l2ult(ok2002wlt_php65_ast_65)) = 9);
assert(levelled_height(l2ult(ok2002wlt_php65_ast_65)) = 3);

assert(count_inf_branches(ok2002wlt_php65_ast_65, 0) = 25);
col_ok2002wlt_php65_ast_65 : collapse_inf_branches(ok2002wlt_php65_ast_65, 0);

assert(nnds_l(col_ok2002wlt_php65_ast_65) = 29);
assert(height(l2ult(col_ok2002wlt_php65_ast_65)) = 6);
assert(levelled_height(l2ult(col_ok2002wlt_php65_ast_65)) = 2);


/*!
\endhtmlonly
*/

