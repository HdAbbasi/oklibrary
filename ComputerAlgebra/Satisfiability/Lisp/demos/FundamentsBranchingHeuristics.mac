/* Oliver Kullmann, 21.1.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/demos/FundamentsBranchingHeuristics.mac
  \brief Accompanying OK's SAT-handbook article [Fundaments of Branching Heuristics; Oliver Kullmann 2008]

Use by

?? oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/demos/FundamentsBranchingHeuristics.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac");
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/BranchingTuples/Trees.mac");
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Backtracking/OKsolver2002.mac");
oklib_include("Transitional/ComputerAlgebra/Trees/Lisp/Basics.mac");

/* **************************************
   * Section "A theoretical framework"  *
   **************************************
*/

/* Example 1.2.1 */

for i : -10 thru 10 do print(i,": ", fib(i));
golden_section : solve(x^2=x+1,x);
gs_neg : rhs(golden_section[1]);
gs_pos : rhs(golden_section[2]);
fib_formula(n) := 1/sqrt(5) * (gs_pos^n - gs_neg^n);
for i : -10 thru 10 do print(i,": ", float(fib_formula(i)));
/* round(1/2) = 0, round(3/2) = 2 */
round_cautious(x) := block([fx : floor(x), s],
  s : sign(x - fx - 1/2), 
  if s = zero then error("Ambiguous rounding for ", x)
  else if s = pos then fx + 1 else fx)$
for i : 0 thru 10 do 
  print(i,": ", float(round_cautious(1/sqrt(5) *  gs_pos^i)));


/* ************************************************************
   * Section "Branching tuples and the canonical projection"  *
   ************************************************************
*/

/* Example 1.3.1 */

append([3,4],[3,2,1]);
bt_composition([3,4],[3,2,1]);

/* Example 1.3.2 */

tau_symbolical([1,2]);
tau([1,2]);
tau_hp([1,2],40);
tau_symbolical([2,3,5]);
tau([2,3,5]);
tau_hp([2,3,5],100); 

/* **************************************************************************
   * Section "Associating probability distributions with branching tuples"  *
   **************************************************************************
*/

/* Example 1.3.3 */

tauprob([1,2]);
tauprob_symbolical([1,2]);
factor(expand(tauprob_symbolical([1,2])));
tauprob_hp([1,2],40);
tauprob([2,3,5]);


/* ***********************************
   * Section "Estimating tree sizes  *
   ***********************************
*/

* Example 1.4.1 */

T_1 : [[[],[]],[]];
T_2 : [[[]]];
T_3 : [[],[],[[],[]]];

nds(T_1);
lvs(T_1);
nnds(T_1);
nlvs(T_1);
height(T_1);
nds(T_2);
lvs(T_2);
nnds(T_2);
nlvs(T_2);
height(T_2);
nds(T_3);
lvs(T_3);
nnds(T_3);
nlvs(T_3);
height(T_3);

dst(T_3,[3]);

lvs(T_3,[3]);


*/ Example 1.4.2 */

T_1_utpd : uniform_tpd(T_1);
T_2_utpd : uniform_tpd(T_2);
T_3_utpd : uniform_tpd(T_3);

tpd_flatten(T_1_utpd);
tpd_flatten(T_2_utpd);
tpd_flatten(T_3_utpd);

hash_table_data(ipd_rp(T_1_utpd));
hash_table_data(ipd_rp(T_2_utpd));
hash_table_data(ipd_rp(T_3_utpd));

lower_bound_nlvs(T_1_utpd);
tpd_moment(T_1_utpd,1);
upper_bound_nlvs(T_1_utpd);

lower_bound_nlvs(T_2_utpd);
tpd_moment(T_2_utpd,1);
upper_bound_nlvs(T_2_utpd);

lower_bound_nlvs(T_3_utpd);
tpd_moment(T_3_utpd,1);
upper_bound_nlvs(T_3_utpd);


*/ Example 1.4.3 */

T_1_ctpd : canonical_tpd(T_1)[1];
T_2_ctpd : canonical_tpd(T_2)[1];
T_3_ctpd : canonical_tpd(T_3)[1];

tpd_flatten(T_1_ctpd);
tpd_flatten(T_2_ctpd);
tpd_flatten(T_3_ctpd);


*/ Example 1.4.4 */

tpd_moment(T_1_utpd,2);
tpd_variance(T_1_utpd);

tpd_moment(T_2_utpd,2);
tpd_variance(T_2_utpd);

tpd_moment(T_3_utpd,2);
tpd_variance(T_3_utpd);


/* **********************************************************
   * Section "Evaluating and optimising distance functions" *
 * **********************************************************
*/

/* The trivial heuristics */

trivial_ncl_ucp1 : amended_heuristics_lookahead_distances(generalised_ucp1, [trivial_distance], [tau2], trivial_sat_approx, [delta_n,delta_c,delta_l])$
trivial_ncl_ast_54 : dll_red_st_dist(weak_php(5,4), trivial_ncl_ucp1, generalised_ucp1);

nnds_l(trivial_ncl_ast_54); /* 103 */
height(lult(trivial_ncl_ast_54)); /* 8 */
levelled_height(lult(trivial_ncl_ast_54)); /* 3 */

tbt_t_ast_54 : extract_tbt(trivial_ncl_ast_54, 1);
tbt_n_ast_54 : extract_tbt(trivial_ncl_ast_54, 2);
tbt_c_ast_54 : extract_tbt(trivial_ncl_ast_54, 3);
tbt_l_ast_54 : extract_tbt(trivial_ncl_ast_54, 4);

tpd_t_ast_54 : tauprob_tbt(tbt_t_ast_54);
tpd_n_ast_54 : tauprob_tbt(tbt_n_ast_54);
tpd_c_ast_54 : tauprob_tbt(tbt_c_ast_54);
tpd_l_ast_54 : tauprob_tbt(tbt_l_ast_54);

tpd_variance(tpd_t_ast_54); /* 3336.0 */
tpd_variance(tpd_n_ast_54); /* 121710.5758316126 */
tpd_variance(tpd_c_ast_54); /* 29857.78137771181 */
tpd_variance(tpd_l_ast_54); /* 38701.49861318067 */

upper_bound_nlvs_tau(tbt_t_ast_54); /* 256.0 */
upper_bound_nlvs_tau(tbt_n_ast_54); /* 1043653.908038483 */
upper_bound_nlvs_tau(tbt_c_ast_54); /* 201830.0227763765 */
upper_bound_nlvs_tau(tbt_l_ast_54); /* 120414.1082378856 */


/* Delta(n) as heuristics */

n_clt_ucp1 : amended_heuristics_lookahead_distances(generalised_ucp1, [delta_n], [tau2], trivial_sat_approx, [delta_c,delta_l,trivial_distance])$
n_clt_ast_54 : dll_red_st_dist(weak_php(5,4), n_clt_ucp1, generalised_ucp1);

nnds_l(n_clt_ast_54); /* 71 */
height(lult(n_clt_ast_54)); /* 7 */
levelled_height(lult(n_clt_ast_54)); /* 3 */

tbt_nn_ast_54 : extract_tbt(n_clt_ast_54, 1);
tbt_nc_ast_54 : extract_tbt(n_clt_ast_54, 2);
tbt_nl_ast_54 : extract_tbt(n_clt_ast_54, 3);
tbt_nt_ast_54 : extract_tbt(n_clt_ast_54, 4);

tpd_nn_ast_54 : tauprob_tbt(tbt_nn_ast_54);
tpd_nc_ast_54 : tauprob_tbt(tbt_nc_ast_54);
tpd_nl_ast_54 : tauprob_tbt(tbt_nl_ast_54);
tpd_nt_ast_54 : tauprob_tbt(tbt_nt_ast_54);

tpd_variance(tpd_nn_ast_54); /* 21963.20063203072 */
tpd_variance(tpd_nc_ast_54); /* 6777.794153245422 */
tpd_variance(tpd_nl_ast_54); /* 8703.973094479255 */
tpd_variance(tpd_nt_ast_54); /* 1216.0 */

upper_bound_nlvs_tau(tbt_nn_ast_54); /* 150923.8661445005 */
upper_bound_nlvs_tau(tbt_nc_ast_54); /* 62181.59240217086 */
upper_bound_nlvs_tau(tbt_nl_ast_54); /* 41122.97764837247 */
upper_bound_nlvs_tau(tbt_nt_ast_54); /* 128.0 */


/* Delta(c) as heuristics */

c_nlt_ucp1 : amended_heuristics_lookahead_distances(generalised_ucp1, [delta_c], [tau2], trivial_sat_approx, [delta_n,delta_l,trivial_distance])$
c_nlt_ast_54 : dll_red_st_dist(weak_php(5,4), c_nlt_ucp1, generalised_ucp1);

nnds_l(c_nlt_ast_54); /* 49  */
height(l2ult(c_nlt_ast_54)); /* 7 */
levelled_height(l2ult(c_nlt_ast_54)); /* 3 */

tbt_cc_ast_54 : extract_tbt(c_nlt_ast_54, 1);
tbt_cn_ast_54 : extract_tbt(c_nlt_ast_54, 2);
tbt_cl_ast_54 : extract_tbt(c_nlt_ast_54, 3);
tbt_ct_ast_54 : extract_tbt(c_nlt_ast_54, 4);

tpd_cc_ast_54 : tauprob_tbt(tbt_cc_ast_54);
tpd_cn_ast_54 : tauprob_tbt(tbt_cn_ast_54);
tpd_cl_ast_54 : tauprob_tbt(tbt_cl_ast_54);
tpd_ct_ast_54 : tauprob_tbt(tbt_ct_ast_54);

tpd_variance(tpd_cc_ast_54); /* 7787.909873270139 */
tpd_variance(tpd_cn_ast_54); /* 27672.21496842504 */
tpd_variance(tpd_cl_ast_54); /* 8632.885062774241 */
tpd_variance(tpd_ct_ast_54); /* 591.0  */

upper_bound_nlvs_tau(tbt_cc_ast_54); /* 1835346.792423415 */
upper_bound_nlvs_tau(tbt_cn_ast_54); /* 2.619514500649467E+7 */
upper_bound_nlvs_tau(tbt_cl_ast_54); /* 603346.2305311395 */
upper_bound_nlvs_tau(tbt_ct_ast_54); /* 128.0 */


/* Delta(l) as heuristics */

l_nct_ucp1 : amended_heuristics_lookahead_distances(generalised_ucp1, [delta_l], [tau2], trivial_sat_approx, [delta_n,delta_c,trivial_distance])$
l_nct_ast_54 : dll_red_st_dist(weak_php(5,4), l_nct_ucp1, generalised_ucp1);

nnds_l(l_nct_ast_54); /* 45 */
height(l2ult(l_nct_ast_54)); /* 9 */
levelled_height(l2ult(l_nct_ast_54)); /* 3 */

tbt_ll_ast_54 : extract_tbt(l_nct_ast_54, 1);
tbt_ln_ast_54 : extract_tbt(l_nct_ast_54, 2);
tbt_lc_ast_54 : extract_tbt(l_nct_ast_54, 3);
tbt_lt_ast_54 : extract_tbt(l_nct_ast_54, 4);

tpd_ll_ast_54 : tauprob_tbt(tbt_ll_ast_54);
tpd_ln_ast_54 : tauprob_tbt(tbt_ln_ast_54);
tpd_lc_ast_54 : tauprob_tbt(tbt_lc_ast_54);
tpd_lt_ast_54 : tauprob_tbt(tbt_lt_ast_54);

tpd_variance(tpd_ll_ast_54); /* 65665.08598951569 */
tpd_variance(tpd_ln_ast_54); /* 407777.1493197185 */
tpd_variance(tpd_lc_ast_54); /* 47323.01217783934 */
tpd_variance(tpd_lt_ast_54); /* 1551.0 */

upper_bound_nlvs_tau(tbt_ll_ast_54); /* 9396594.315155165 */
upper_bound_nlvs_tau(tbt_ln_ast_54); /* 9.075102530316168E+8 */
upper_bound_nlvs_tau(tbt_lc_ast_54); /* 1.243424793136493E+7 */
upper_bound_nlvs_tau(tbt_lt_ast_54); /* 512.0 */


/* The weighted number of clauses as heuristics */

wnc_nclt_ucp1 : amended_heuristics_lookahead_distances(generalised_ucp1, [wn_newclauses(weightingscheme_OKsolver2002)], [tau2], trivial_sat_approx, [delta_n,delta_c,delta_l,trivial_distance])$
wnc_nclt_ast_54 : dll_red_st_dist(weak_php(5,4), wnc_nclt_ucp1, generalised_ucp1);

nnds_l(wnc_nclt_ast_54); /* 47 */
height(l2ult(wnc_nclt_ast_54)); /* 10 */
levelled_height(l2ult(wnc_nclt_ast_54)); /* 3 */

tbt_wncwnc_ast_54 : extract_tbt(wnc_nclt_ast_54, 1);
tbt_wncn_ast_54 : extract_tbt(wnc_nclt_ast_54, 2);
tbt_wncc_ast_54 : extract_tbt(wnc_nclt_ast_54, 3);
tbt_wncl_ast_54 : extract_tbt(wnc_nclt_ast_54, 4);


/* Delta(l) as heuristics for weak_php(6,5) */

l_nct_ast_65 : dll_red_st_dist(weak_php(6,5), l_nct_ucp1, generalised_ucp1);

nnds_l(l_nct_ast_65); /* 219  */
height(l2ult(l_nct_ast_65)); /* 16 */
levelled_height(l2ult(l_nct_ast_65)); /* 4  */

tbt_ll_ast_65 : extract_tbt(l_nct_ast_65, 1);
tbt_ln_ast_65 : extract_tbt(l_nct_ast_65, 2);
tbt_lc_ast_65 : extract_tbt(l_nct_ast_65, 3);
tbt_lt_ast_65 : extract_tbt(l_nct_ast_65, 4);

tpd_ll_ast_65 : tauprob_tbt(tbt_ll_ast_65);
tpd_ln_ast_65 : tauprob_tbt(tbt_ln_ast_65);
tpd_lc_ast_65 : tauprob_tbt(tbt_lc_ast_65);
tpd_lt_ast_65 : tauprob_tbt(tbt_lt_ast_65);

tpd_variance(tpd_ll_ast_65); /* 3.874019989410695E+8 */
tpd_variance(tpd_ln_ast_65); /* 1.401235525398172E+10 */
tpd_variance(tpd_lc_ast_65); /* 1.7926669098571474E+8 */
tpd_variance(tpd_lt_ast_65); /* 311868.0  */

upper_bound_nlvs_tau(tbt_ll_ast_65); /* 1.263199352585657E+14 */
upper_bound_nlvs_tau(tbt_ln_ast_65); /* 4.745043472858466E+15 */
upper_bound_nlvs_tau(tbt_lc_ast_65); /* 3.227130302471304E+14 */
upper_bound_nlvs_tau(tbt_lt_ast_65); /* 65536.0 */


/* The weighted number of clauses as heuristics for weak_php(6,5) */

ok2002_ncl234_ucp1 : amended_heuristics_lookahead_distances(
  generalised_ucp1, 
  [wn_newclauses_2(weightingscheme_OKsolver2002), delta_n], 
  [tau2], 
  trivial_sat_approx, 
  [delta_n,delta_c,delta_l,n_newclauses(2),n_newclauses(3),n_newclauses(4)])$
ok2002_ncl234_ast_65 : dll_red_st_dist(
  weak_php(6,5), 
  ok2002_ncl234_ucp1,
  generalised_ucp_ple1);

nnds_l(ok2002_ncl234_ast_65); /* 77  */
height(l2ult(ok2002_ncl234_ast_65)); /* 12 */
levelled_height(l2ult(ok2002_ncl234_ast_65)); /* 3 */

check_inf_branches(ok2002_ncl234_ast_65, 6);
count_inf_branches(ok2002_ncl234_ast_65,6); /* 23 */
col_ok2002_ncl234_ast_65 : collapse_inf_branches(ok2002_ncl234_ast_65, 6);

nnds_l(col_ok2002_ncl234_ast_65); /* 31 */
height(l2ult(col_ok2002_ncl234_ast_65)); /* 9 */
levelled_height(l2ult(col_ok2002_ncl234_ast_65)); /* 2 */

tbt_wnc_ok2002_ncl234_ast_65 : extract_tbt(col_ok2002_ncl234_ast_65, 1);
tbt_n_ok2002_ncl234_ast_65 : extract_tbt(col_ok2002_ncl234_ast_65, 3);
tbt_c_ok2002_ncl234_ast_65 : extract_tbt(col_ok2002_ncl234_ast_65, 4);
tbt_l_ok2002_ncl234_ast_65 : extract_tbt(col_ok2002_ncl234_ast_65, 5);

tpd_wnc_ok2002_ncl234_ast_65 : tauprob_tbt(tbt_wnc_ok2002_ncl234_ast_65);
tpd_n_ok2002_ncl234_ast_65 : tauprob_tbt(tbt_n_ok2002_ncl234_ast_65);
tpd_c_ok2002_ncl234_ast_65 : tauprob_tbt(tbt_c_ok2002_ncl234_ast_65);
tpd_l_ok2002_ncl234_ast_65 : tauprob_tbt(tbt_l_ok2002_ncl234_ast_65);

tpd_variance(tpd_wnc_ok2002_ncl234_ast_65); /* 242775.8846080581 */
tpd_variance(tpd_n_ok2002_ncl234_ast_65); /* 4274916.597124265 */
tpd_variance(tpd_c_ok2002_ncl234_ast_65); /* 213026.3762745041 */
tpd_variance(tpd_l_ok2002_ncl234_ast_65); /* 307364.6985536006 */

upper_bound_nlvs_tau(tpd_wnc_ok2002_ncl234_ast_65); /* 1595.856418802932 */
upper_bound_nlvs_tau(tpd_n_ok2002_ncl234_ast_65); /* 61.85207603853764 */
upper_bound_nlvs_tau(tpd_c_ok2002_ncl234_ast_65); /* 100.8063825114651 */
upper_bound_nlvs_tau(tpd_l_ok2002_ncl234_ast_65); /* 92.08543943298893 */

minvarn(x) := tpd_variance(tauprob_tbt(
  x * tbt_wnc_ok2002_ncl234_ast_65 + (1-x) * tbt_n_ok2002_ncl234_ast_65));
plot2d(minvarn, [x,0,1]);

minvarc(x) := tpd_variance(tauprob_tbt(
  x * tbt_wnc_ok2002_ncl234_ast_65 + (1-x) * tbt_c_ok2002_ncl234_ast_65));
plot2d(minvarc, [x,0,1]);
plot2d(minvarc, [x,0.8,1]); /* minimum around 0.985 */

minvarl(x) := tpd_variance(tauprob_tbt(
  x * tbt_wnc_ok2002_ncl234_ast_65 + (1-x) * tbt_l_ok2002_ncl234_ast_65));
plot2d(minvarl, [x,0,1]); /* minimum around 0.985 */

tpbt_w2_ok2002_ncl234_ast_65 : extract_tbt(col_ok2002_ncl234_ast_65, 6);
tpbt_w3_ok2002_ncl234_ast_65 : extract_tbt(col_ok2002_ncl234_ast_65, 7);
tpbt_w4_ok2002_ncl234_ast_65 : extract_tbt(col_ok2002_ncl234_ast_65, 8);

minvarw23(x,y) := tpd_variance(tauprob_tbt(
  x * tpbt_w2_ok2002_ncl234_ast_65 + y * (1-x) * tpbt_w3_ok2002_ncl234_ast_65 +
  (1 - x - y * (1-x)) * tpbt_w4_ok2002_ncl234_ast_65))$
plot3d(minvarw23, [x,0.1,0.9], [y,0.1,0.9]);

/* For unconstrained optimisation one could use x = exp(lambda)/(1+exp(lambda)) and
   y = exp(mu)/(1+exp(mu)), where now lambda, mu are arbitrary real numbers
   (this also takes care of openness).
*/

/* Via the use of min_scanning(minvarw23, [0.1,0.9], [0.1,0.9], 20)
   and stepwise refinements we find a minimum at around 
   x = 0.715, y = 0.358, and so the relative weights for
   clauses of sizes 2,3,4 are 1, 0.1426, 0.2559.
*/


/* Optimised heuristics: clause-weights (using Delta(l) as secondary heuristics) */

weightingscheme_special(k) :=
  if k = 2 then 1
  elseif k = 3 then 0.1426
  elseif k = 4 then 0.2559
  else error("Only clause-lengths 2,3,4 allowed!")$

ok2002_php65_ucp1 : amended_heuristics_lookahead_distances(
  generalised_ucp1, 
  [wn_newclauses_2(weightingscheme_special), delta_l], 
  [tau2], 
  trivial_sat_approx, 
  [])$
ok2002_php65_ast_65 : dll_red_st_dist(
  weak_php(6,5), 
  ok2002_php65_ucp1,
  generalised_ucp_ple1);

nnds_l(ok2002_php65_ast_65); /* 67 */
height(l2ult(ok2002_php65_ast_65)); /* 12 */
levelled_height(l2ult(ok2002_php65_ast_65)); /* 3 */

check_inf_branches(ok2002_php65_ast_65, 0);
count_inf_branches(ok2002_php65_ast_65, 0); /* 13 */
col_ok2002_php65_ast_65 : collapse_inf_branches(ok2002_php65_ast_65, 0);

nnds_l(col_ok2002_php65_ast_65); /* 41 */
height(l2ult(col_ok2002_php65_ast_65)); /* 11 */
levelled_height(l2ult(col_ok2002_php65_ast_65)); /* 2 */


/* Optimised heuristics: clause-weights (using, as originally, Delta(n) as secondary heuristics) */

ok2002n_php65_ucp1 : amended_heuristics_lookahead_distances(
  generalised_ucp1, 
  [wn_newclauses_2(weightingscheme_special), delta_n], 
  [tau2], 
  trivial_sat_approx, 
  [])$
ok2002n_php65_ast_65 : dll_red_st_dist(
  weak_php(6,5), 
  ok2002n_php65_ucp1,
  generalised_ucp_ple1);

nnds_l(ok2002n_php65_ast_65); /* 67 */
height(l2ult(ok2002n_php65_ast_65)); /* 12 */
levelled_height(l2ult(ok2002n_php65_ast_65)); /* 3 */

check_inf_branches(ok2002n_php65_ast_65, 0);
count_inf_branches(ok2002n_php65_ast_65, 0); /* 13 */
col_ok2002n_php65_ast_65 : collapse_inf_branches(ok2002n_php65_ast_65, 0);

nnds_l(col_ok2002n_php65_ast_65); /* 41 */
height(l2ult(col_ok2002n_php65_ast_65)); /* 11 */
levelled_height(l2ult(col_ok2002n_php65_ast_65)); /* 2 */


/* Optimised heuristics: Linear combination of weighted clauses and Delta(l) */

ok2002wl_php65_ucp1 : amended_heuristics_lookahead_distances(
  generalised_ucp1, 
  [lambda([F0,F1], 
    0.985 * wn_newclauses_2(weightingscheme_OKsolver2002)(F0,F1) + (1-0.985) * delta_l(F0,F1)),
   delta_n], 
  [tau2], 
  trivial_sat_approx, 
  [])$
ok2002wl_php65_ast_65 : dll_red_st_dist(
  weak_php(6,5), 
  ok2002wl_php65_ucp1,
  generalised_ucp_ple1);


nnds_l(ok2002wl_php65_ast_65); /*  */
height(l2ult(ok2002wl_php65_ast_65)); /*  */
levelled_height(l2ult(ok2002wl_php65_ast_65)); /*  */

check_inf_branches(ok2002wl_php65_ast_65, 0);
count_inf_branches(ok2002wl_php65_ast_65, 0); /*  */
col_ok2002wl_php65_ast_65 : collapse_inf_branches(ok2002wl_php65_ast_65, 0);

nnds_l(col_ok2002wl_php65_ast_65); /*  */
height(l2ult(col_ok2002wl_php65_ast_65)); /*  */
levelled_height(l2ult(col_ok2002wl_php65_ast_65)); /*  */


/*!
\endhtmlonly
*/

ok2002_ncl234_ast_65 :
[[- php(1, 1), [[0.05, 0.25], [1, 6], [1, 6], [5, 16], [11, 40],
[0, 0], [0, 0], [1, 5]]], [[- php(2, 2),
[[0.2, 0.8], [1, 5], [1, 5], [4, 11], [9, 28], [0, 0], [1, 4], [0, 0]]],
[[- php(3, 3), [[0, inf], [1, 4], [3, 7], [7, 18], [1, 3], [0, 0], [0, 0]]],
[false], [false]], [[- php(2, 3), [[1, 0.8], [1, 5], [1, 5], [4, 11], [9, 27],
[1, 0], [0, 4], [0, 0]]], [[- php(3, 2),
[[0, inf], [1, 4], [3, 7], [7, 18], [1, 3], [0, 0], [0, 0]]], [false],
[false]], [[- php(3, 4), [[0, inf], [1, 10], [4, 22], [9, 52], [0, 3], [1, 0],
[0, 0]]], [false], [[- php(3, 5), [[0, inf], [1, 9], [4, 18], [9, 43], [1, 3],
[0, 0], [0, 0]]], [false], [[- php(4, 2),
[[0, inf], [1, 8], [3, 14], [7, 34], [0, 2], [1, 0], [0, 0]]], [false],
[false]]]]]], [[- php(1, 2), [[0.2, 0.25], [1, 6], [1, 6], [5, 16], [11, 39],
[0, 0], [1, 0], [0, 5]]], [[- php(2, 1),
[[0.2, 0.8], [1, 5], [1, 5], [4, 11], [9, 28], [0, 0], [1, 4], [0, 0]]],
[[- php(3, 3), [[0, inf], [1, 4], [3, 7], [7, 18], [1, 3], [0, 0], [0, 0]]],
[false], [false]], [[- php(2, 3), [[1, 0.8], [1, 5], [1, 5], [4, 11], [9, 27],
[1, 0], [0, 4], [0, 0]]], [[- php(3, 1),
[[0, inf], [1, 4], [3, 7], [7, 18], [1, 3], [0, 0], [0, 0]]], [false],
[false]], [[- php(3, 4), [[0, inf], [1, 10], [4, 22], [9, 52], [0, 3], [1, 0],
[0, 0]]], [false], [[- php(3, 5), [[0, inf], [1, 9], [4, 18], [9, 43], [1, 3],
[0, 0], [0, 0]]], [false], [[- php(4, 1),
[[0, inf], [1, 8], [3, 14], [7, 34], [0, 2], [1, 0], [0, 0]]], [false],
[false]]]]]], [[- php(1, 3), [[1, 0.25], [1, 6], [1, 6], [5, 16], [11, 38],
[1, 0], [0, 0], [0, 5]]], [[- php(2, 1),
[[0.2, 0.8], [1, 5], [1, 5], [4, 11], [9, 28], [0, 0], [1, 4], [0, 0]]],
[[- php(3, 2), [[0, inf], [1, 4], [3, 7], [7, 18], [1, 3], [0, 0], [0, 0]]],
[false], [false]], [[- php(2, 2), [[1, 0.8], [1, 5], [1, 5], [4, 11], [9, 27],
[1, 0], [0, 4], [0, 0]]], [[- php(3, 1),
[[0, inf], [1, 4], [3, 7], [7, 18], [1, 3], [0, 0], [0, 0]]], [false],
[false]], [[- php(3, 4), [[0, inf], [1, 10], [4, 22], [9, 52], [0, 3], [1, 0],
[0, 0]]], [false], [[- php(3, 5), [[0, inf], [1, 9], [4, 18], [9, 43], [1, 3],
[0, 0], [0, 0]]], [false], [[- php(4, 1),
[[0, inf], [1, 8], [3, 14], [7, 34], [0, 2], [1, 0], [0, 0]]], [false],
[false]]]]]], [[- php(2, 4), [[0.05, 0.8], [1, 12], [1, 12], [5, 32],
[11, 75], [0, 0], [0, 4], [1, 0]]], [[- php(3, 1),
[[0, inf], [1, 4], [3, 7], [7, 18], [1, 3], [0, 0], [0, 0]]], [false],
[false]], [[- php(2, 5), [[0.2, 0.8], [1, 11], [1, 11], [5, 27], [11, 64],
[0, 0], [1, 4], [0, 0]]], [[- php(3, 1),
[[0, inf], [1, 4], [3, 7], [7, 18], [1, 3], [0, 0], [0, 0]]], [false],
[false]], [[- php(2, 1), [[1, 0.2], [1, 5], [1, 5], [4, 11], [9, 27], [1, 0],
[0, 0], [0, 4]]], [[- php(3, 4), [[0, inf], [1, 10], [4, 22], [9, 52], [0, 3],
[1, 0], [0, 0]]], [false], [[- php(3, 5),
[[0, inf], [1, 9], [4, 18], [9, 43], [1, 3], [0, 0], [0, 0]]], [false],
[[- php(4, 2), [[0, inf], [1, 8], [3, 14], [7, 34], [0, 2], [1, 0], [0, 0]]],
[false], [false]]]], [[- php(3, 2), [[0.05, .6000000000000001], [1, 10],
[1, 10], [4, 22], [9, 53], [0, 0], [0, 3], [1, 0]]], [false],
[[- php(4, 4), [[0.05, 1.4], [1, 10], [1, 10], [4, 22], [9, 53], [0, 1],
[0, 2], [1, 0]]], [false], [[- php(3, 3),
[[0.2, 1.4], [1, 9], [1, 9], [4, 18], [9, 44], [0, 1], [1, 2], [0, 0]]],
[false], [[- php(4, 5), [[0, inf], [1, 13], [4, 25], [9, 59], [0, 2], [1, 0],
[0, 0]]], [false], [[- php(5, 2), [[0, inf], [1, 12], [3, 21], [7, 50],
[0, 2], [0, 0], [1, 0]]], [false], [[- php(3, 1),
[[0, inf], [1, 4], [3, 7], [7, 18], [1, 3], [0, 0], [0, 0]]], [false],
[false]]]]]]]]]]]]];


ok2002_php65_ast_65 :
[[- php(1, 1), [[0.2559, 1.2795], [11, 40]]],
[[- php(2, 2), [[0.1426, 0.5704], [9, 28]]],
[[- php(3, 3), [[0, inf]]], [false], [false]],
[[- php(2, 3), [[1, 0.5704], [9, 27]]],
[[- php(3, 2), [[0, inf]]], [false], [false]],
[[- php(3, 4), [[0, inf]]], [false], [[- php(3, 5), [[0, inf]]], [false],
[[- php(4, 2), [[0, inf]]], [false], [false]]]]]],
[[- php(2, 2), [[0.2559, 1.1662], [11, 40]]],
[[- php(1, 3), [[1, 0.5704], [9, 27]]],
[[- php(3, 1), [[0, inf]]], [false], [false]],
[[- php(3, 4), [[0, inf]]], [false], [[- php(3, 5), [[0, inf]]], [false],
[[- php(4, 1), [[0, inf]]], [false], [false]]]]],
[[- php(3, 3), [[0.2559, 1.0529], [11, 40]]],
[[- php(1, 4), [[1, 1.4278], [9, 27]]], [false],
[[- php(2, 5), [[0, inf]]], [false], [[- php(4, 1), [[0, inf]]], [false],
[false]]]], [[- php(4, 4), [[0.2559, 0.9396], [11, 40]]],
[[- php(1, 5), [[1, 2.2852], [9, 27]]], [false],
[[- php(2, 3), [[0, inf]]], [false], [false]]],
[[- php(5, 5), [[0.2559, 0.8263], [11, 40]]],
[[- php(1, 2), [[1, 2.1426], [7, 18]]], [false], [false]],
[[- php(6, 1), [[0.2559, 0.5704], [9, 29]]],
[[- php(2, 3), [[1, 2.1426], [7, 18]]], [false], [false]],
[[- php(1, 2), [[0.1426, 0.5704], [9, 28]]],
[[- php(3, 1), [[1, 2.1426], [7, 18]]], [false], [false]],
[[- php(1, 3), [[1, 0.5704], [9, 27]]],
[[- php(2, 1), [[1, 2.1426], [7, 18]]], [false], [false]],
[[- php(4, 5), [[0.1426, 3.1426], [9, 53]]], [false],
[[- php(5, 4), [[0.1426, 3], [9, 44]]], [false],
[[- php(4, 1), [[1, 1.2852], [7, 18]]], [false],
[[- php(2, 3), [[0, inf]]], [false], [false]]]]]]]]]]]]];
