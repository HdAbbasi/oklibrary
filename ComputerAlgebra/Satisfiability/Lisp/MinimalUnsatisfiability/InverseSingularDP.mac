/* Oliver Kullmann, 14.6.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/InverseSingularDP.mac
  \brief Transforming clause-sets by applying inverse singular DP-reduction

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/InverseSingularDP.mac");

*/

/*!
\htmlonly
*/

/* Compute a new variable for a clause-set; likely best suited
   if variables are numeric, but can be applied also in other
   cases. */
new_var_fcs(FF) := if emptyp(FF[1]) then 1 else lmax(FF[1])+1$

/* Returns a sublist obtained from set or list S by including each
   element with probability p. */
random_sublist(S,p) := 
 if p = 1 then listify(S)
 elseif p = 0 then []
 else block([res : []],
   for x in S do
     if random(1.0) < p then res : cons(x,res),
   res)$

/* Perform inverse singular DP-reduction on FF, by adding
   a new clause containing the new singular variable v,
   and replacing the clauses in G by clauses containing -v. */
/* Changes FF in-place, always returns true. */
/* p regulates how many of the possible literals
   are included into the v-clause (as a choice probability).
   while q regulates how many of the choice-literals are included 
   into the (-v)-clauses.
   <ul>
    <li> p=1, q=1 is the case that all clauses as large as possible). </li>
    <li> q=0,p=0 is the case of just introducing new unit-clauses (with
    new variables), while q=0 in general are the marginal extension
    (all clauses minimal). </li>
    <li> p=0 implies q=0. </li>
    <li> p=1, q=0 is an interesting marginal case, where
    the singular clause are as large as possible: it corresponds
    to factoring-out (all) common literals in the given clauses G. </li>
   </ul>
*/
/* Prerequisite: G is a non-empty subset of FF[2];
   p, q are integers or reals with 0 <= p,q <= 1. 
*/
basic_inverse_singulardp_fcs(FF,G,p,q) := block(
 [I : apply(intersection,listify(G)), v : new_var_fcs(FF), C0 : {}],
  FF[1] : adjoin(v,FF[1]),
  C0 : setify(random_sublist(I,p)),
  FF[2] : setdifference(FF[2],G),
  FF[2] : adjoin(adjoin(v,C0),FF[2]),
  for D in G do block([E : setdifference(D,C0)],
    FF[2] : adjoin(adjoin(-v,union(E,setify(random_sublist(C0,q)))),FF[2])),
  return(true))$

/* Find a random subset of a set-system, of size exactly s and 
   with intersection size at least i; return false in case it 
   doesn't exist. */
random_subset_si(S,s,i) := if s=0 then {} else
block([found : false],
  for A in random_permutation(powerset(S,s)) unless found # false do
    if length(apply(intersection,listify(A))) >= i then
      found : A,
  return(found))$

/* Applies inverse singular DP-reduction, where a is the minimal number of 
   literals other than the singular variable for the "singular" clause
   before applying the random selection, and b is the (exact) number of
   negative occurrences. */
/* Changes FF in-place, and returns false in case the transformation
   is impossible, and true otherwise. */
/* Prerequisites: a >= 0, b >= 1 */
si_inverse_singulardp_fcs(FF,p,q,a,b) := block(
 [G : random_subset_si(FF[2],b,a)],
  if G = false then return(false)
  else return(basic_inverse_singulardp_fcs(FF,G,p,q)))$

/* Simply iterating si_inverse_singulardp_fcs N times, aborting in
   case of failure, and returning the number of successful transformations.
*/
it_si_inverse_singulardp_fcs(FF,p,q,a,b,N) := block([aborted : false],
  for i : 1 thru N unless aborted # false do
    if not si_inverse_singulardp_fcs(FF,p,q,a,b) then
      aborted : i-1,
  if aborted # false then return(aborted)
  else return(N))$

/*!
\endhtmlonly
*/
