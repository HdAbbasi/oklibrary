/* Oliver Kullmann, 14.6.2008 (Swansea) */
/* Copyright 2008, 2009, 2013, 2017 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/InverseSingularDP.mac
  \brief Transforming clause-sets by applying inverse singular DP-reduction

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/InverseSingularDP.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac")$


/* ********************************
   * Performing single extensions *
   ********************************
*/

/* Compute a new variable for a clause-set; likely best suited
   if variables are numeric, but can be applied also in other
   cases. */
new_var_fcs(FF) := if emptyp(FF[1]) then 1 else lmax(FF[1])+1$
new_var_cs(F) := new_var_fcs(cs2fcs(F))$

/* Returns a sublist obtained from set or list S by including each
   element with probability p. */
random_sublist(S,p) := 
 if p = 1 then listify(S)
 elseif p = 0 then []
 else block([res : []],
   for x in S do
     if random(1.0) < p then res : cons(x,res),
   res)$

/* Perform inverse singular DP-reduction on FF, by adding
   a new clause containing the new singular variable v,
   and replacing the clauses in G by clauses containing -v. */
/* Changes FF in-place, always returns true. */
/* p regulates how many of the possible literals
   are included into the v-clause (as a choice-probability).
   while q regulates how many of these literals are included
   into the (-v)-clauses (that is, first C0 as as subset of the
   intersection of G is determined, containing each literal of the
   intersection with probability p, and then each clause of FF - G
   is considered, the elements of C0 are removed, and then each
   literal of C0 is added with probability q).
   <ul>
    <li> p=1, q=1 is the case that all clauses are as large as possible.
    These are the "hitting extensions", provided that FF is hitting,
    and that the intersection of the clauses in G clashes with all
    the clauses in FF minus G (see below). </li>
    <li> q=0,p=0 is the case of just introducing new unit-clauses (with
    new variables), while q=0 in general are the marginal extension
    (all clauses minimal). </li>
    <li> p=0 implies q=0. </li>
    <li> p=1, q=0 is an interesting marginal case, where
    the singular clause are as large as possible: it corresponds
    to factoring-out (all) common literals in the given clauses G. </li>
   </ul>
*/
/* Prerequisite: G is a non-empty subset of FF[2];
   p, q are integers or reals with 0 <= p,q <= 1. 
*/
basic_inverse_singulardp_fcs(FF,G,p,q) := block(
 [I : lintersection(G), v : new_var_fcs(FF), C0 : {}],
  FF[1] : adjoin(v,FF[1]),
  C0 : setify(random_sublist(I,p)),
  FF[2] : setdifference(FF[2],G),
  FF[2] : adjoin(adjoin(v,C0),FF[2]),
  for D in G do block([E : setdifference(D,C0)],
    FF[2] : adjoin(adjoin(-v,union(E,setify(random_sublist(C0,q)))),FF[2])),
  return(true))$

hitting_extension_fcs(FF,G) := basic_inverse_singulardp_fcs(FF,G,1,1)$

/* Testing whether G yields a "pre-hitting-extension", that is, G is a 
   non-empty sub-clause-set of FF such that the intersection of G clashes with
   every clause from FF - G.
*/
/* TODO: this should better be called "hitting-divisor". */
pre_hitting_extension_fcs_p(FF,G) := subsetp(G,FF[2]) and not emptyp(G) and
 block([I : lintersection(G)], every_s(lambda([C], clashp(C,I)), setdifference(FF[2],G)))$
hittingdivisor_fcs_p(FF,G) := pre_hitting_extension_fcs_p(FF,G)$

/* For a "hitting extension", G additionally needs to be a hitting clause-set
   (which is automatically fulfilled if FF is hitting):
*/
hitting_extension_fcs_p(FF,G) := pre_hitting_extension_fcs_p(FF,G) and
 hittingcsp(G)$

/* The set of all pre-hitting extensions (as formal clause-sets) of
   formal clause-set FF:
*/
all_pre_hitting_extensions_fcs(FF) := 
 map(lambda([G], block([FF2 : copy(FF)], hitting_extension_fcs(FF2,G), FF2)), 
     subset(disjoin({},powerset(FF[2])), lambda([G], pre_hitting_extension_fcs_p(FF,G))))$

/* The smallest superset of G such that hittingdivisor_fcs_p(cs2fcs(F),G)
   holds, where F is a clause-set, G is a non-empty sub-clause-set of F:
*/
hittingdivisor_extension_cs(F,G) := block([EG, I : lintersection(G)],
  while not emptyp(
    EG : subset(setdifference(F,G), lambda([C], not clashp(C,I)))) do
      (G : union(G,EG), I : intersection(I,lintersection(EG))),
  G)$


/* ********************************
   * Performing random extensions *
   ********************************
*/

/* Find a random subset of a set-system, of size exactly s and 
   with intersection size at least i; return false in case it 
   doesn't exist. */
random_subset_si(S,s,i) := if s=0 then {} else
block([found : false],
  for A in random_permutation(powerset(S,s)) unless found # false do
    if length(apply(intersection,listify(A))) >= i then
      found : A,
  return(found))$

/* Applies inverse singular DP-reduction, where a is the minimal number of 
   literals other than the singular variable for the "singular" clause
   before applying the random selection, and b is the (exact) number of
   negative occurrences. */
/* Changes FF in-place, and returns false in case the transformation
   is impossible, and true otherwise. */
/* Prerequisites: a >= 0, b >= 1 */
si_inverse_singulardp_fcs(FF,p,q,a,b) := block(
 [G : random_subset_si(FF[2],b,a)],
  if G = false then return(false)
  else return(basic_inverse_singulardp_fcs(FF,G,p,q)))$

/* Simply iterating si_inverse_singulardp_fcs N times, aborting in
   case of failure, and returning the number of successful transformations.
*/
it_si_inverse_singulardp_fcs(FF,p,q,a,b,N) := block([aborted : false],
  for i : 1 thru N unless aborted # false do
    if not si_inverse_singulardp_fcs(FF,p,q,a,b) then
      aborted : i-1,
  if aborted # false then return(aborted)
  else return(N))$

/*!
\endhtmlonly
*/
