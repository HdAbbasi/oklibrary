/* Oliver Kullmann, 29.11.2007 (Swansea) */
/* Copyright 2007, 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Basics.mac
  \brief Operations regarding minimally unsatisfiable clause-sets

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac");


/* Returns true iff input FF (formal clause-set) is minimally unsatisfiable.
   The second input, the "solver", shall just return true or false. */
min_unsat_bydef(FF, solver) := not solver(FF) and 
 block([all_sat : true],
  for C in FF[2] unless not all_sat do 
   all_sat : solver([FF[1], disjoin(C, FF[2])]),
  return(all_sat))$
/* More generally, returns true iff input FF (formal clause-set) is 
   irredundant. */
irredundant_bydef(FF, solver) := 
 block([V : FF[1], F : FF[2], redundancy : false],
  for C in F unless redundancy do
   redundancy : not solver([V,apply_pa(comp_sl(C),disjoin(C,F))]),
  return(not redundancy))$


/* Returns the minimum size of a minimally unsatisfiable sub-clause-set
   of clause-set F; uses sat-solver S */
min_size_mus_bydef(F, S) := if S([var_cs(F),F]) then inf else
 block([k : 0, scls : {}],
  while every(lambda([G], S([var_cs(G),G])), scls) do (
   k : k+1, scls : powerset(F, k)),
 return(k))$

/* Decides whether clause-set F contains a (minimally) unsatisfiable 
   sub-clause-set of size at most k; uses sat-solver S */
contains_us_bydef(F, k, S) := 
 not every(lambda([G], S([var_cs(G),G])), powerset(F,k))$

/* Returns some minimally unsatisfiable sub-clause-set of input FF,
   a formal unsatisfiable clause-set (trivial heuristics, removing
   the first possible clause). */
first_mus_fcs(FF, S) := block(
 [V : FF[1], F : FF[2], Core : {}],
  for C in FF[2] do (
      if S([V, disjoin(C,F)]) then 
        Core : adjoin(C,Core) 
      else F : disjoin(C,F)),
  return([V,Core]))$
/* More generally, returns some irredundant sub-clause-set of input FF,
   (trivial heuristics, removing the first possible clause). */
first_irr_fcs(FF, S) := block(
 [V : FF[1], F : FF[2], Core : {}],
    for C in FF[2] do (
      if S([V,apply_pa(comp_sl(C), disjoin(C,F))]) then 
        Core : adjoin(C,Core)
      else F : disjoin(C,F)),
  return([V,Core]))$

/* Returns the set of all irredundant clauses (for unsatisfiable
   clause-sets also called necessary clauses) for input FF. */
all_irr_bydef(FF,S) := block([V : FF[1], F : FF[2], I : {}],
  for C in F do 
    if S([V,apply_pa(comp_sl(C), disjoin(C,F))]) then I : adjoin(C,I),
  return(I))$

/*!
\endhtmlonly
*/
