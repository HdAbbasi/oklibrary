/* Oliver Kullmann, 29.11.2007 (Swansea) */
/* Copyright 2007, 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Basics.mac
  \brief Operations regarding minimally unsatisfiable clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac")$


/* *************************
   * Deciding irredundancy *
   *************************
*/

/* Predicate to decide whether formal clause-set FF implies clause C,
   using solver S. */
impliesp_f(FF,C,S) := not S(apply_pa_f(comp_sl(C),FF))$
/* The variation for clause-sets F. */
impliesp(F,C,S) := not S(cs_to_fcs(apply_pa(comp_sl(C),F)))$

/* Returns true iff input FF (formal clause-set) is minimally unsatisfiable.
   The second input, the "solver", shall just return true or false. */
min_unsat_bydef(FF, solver) := not solver(FF) and 
 block([all_sat : true],
  for C in FF[2] unless not all_sat do 
   all_sat : solver([FF[1], disjoin(C, FF[2])]),
  return(all_sat))$
/* More generally, returns true iff input FF (formal clause-set) is 
   irredundant. */
irredundant_bydef(FF, solver) := 
 block([V : FF[1], F : FF[2], redundancy : false],
  for C in F unless redundancy do
   redundancy : impliesp_f([V,disjoin(C,F)],C,solver),
  return(not redundancy))$


/* *****************************
   * Classification of clauses *
   *****************************
*/

/* Returns the set of all irredundant clauses (for unsatisfiable
   clause-sets also called necessary clauses) for input FF. */
all_irrcl_bydef(FF,S) := block([V : FF[1], F : FF[2], I : {}],
  for C in F do 
    if not impliesp_f([V,disjoin(C,F)],C,S) then I : adjoin(C,I),
  return(I))$

/* Returns true iff input FF is saturated minimally unsatisfiable. */
saturated_min_unsat_bydef(FF, solver) := min_unsat_bydef(FF,solver) and
 every(lambda([x],min_unsat_bydef(apply_pa_f({x},FF),solver)), literals_v(FF[1]))$

/* Return the set of partial assignments of size at most 1 which after
   application do not result in a minimally unsatisfiable clause-set. */
/* So saturated_min_unsat_bydef(FF) = true iff non_saturating_pas_bydef(FF) = {}. */
non_saturating_pas_bydef(FF,solver) := block(
 [assignments : union({{}}, map(set,literals_v(FF[1]))),
  result : {}],
  for phi in assignments do
    if not min_unsat_bydef(apply_pa_f(phi,FF),solver) then
      result : adjoin(phi,result),
  return(result))$


/* ***************************
   * Maximal min-var-degrees *
   ***************************
*/

/* An upper bound on the maximal min-var-degree of a minimally unsatisfiable
   clause-set of deficiency k, according to [OK, XSZ, 2008]. */
/* This bound is sharp at least for 
 - k = 2^n-n (realised by full_fcs(n))
 - k=2 (realised by musatd2_fcs(n))
 - k=3 (realised by minvdegdef3(n))
 - k=4 (realised by minvdegdef4(n)). */
/* I.e., min_unsat_bydef(F) and is(deficiency_cs(F) <= k) -> 
         min_variable_degree_cs(F) <= max_min_var_degree_def[k]. */
/* First the recursive computation: */
max_min_var_degree_def_rec[k] := 
 if k = 1 then 2 else
 lmax(create_list(min(2*i,max_min_var_degree_def_rec[k-i+1]+i),i,2,k))$
/* This is sequence A062289 (http://www.research.att.com/~njas/sequences/),
   and accordingly we have 
   max_min_var_degree_def_rec[k] = max_min_var_degree_def_law(k). */
max_min_var_degree_def_law(k) := k + fld(k+1 + fld(k+1))$


/* *** Checking the uhit_def catalogue: *** */

/* For the uhit-catalogue check for the existence of examples where the
   bound is sharp (these have value 0 in the last component). */
check_uhit_catalogue_maxminvardeg() :=
  apply_uhit(lambda([k,n,i,F], [k, n, i, max_min_var_degree_def_law(k) - min_variable_degree_cs(F)]))$
/* Extract the [k,n,i]-tuples where the bound is sharp, sorted 
   lexicographically. */
sharp_uhit_catalogue_maxminvardeg() :=
  sort(
    map(lambda([t], rest(t,-1)),
      sublist(check_uhit_catalogue_maxminvardeg(), lambda([t],is(t[4]=0)))),
    orderlessp)$

/* For given deficiency, compute the maximal min-var-degree (in the
   uhit-catalogue). */
max_min_var_deg_uhit_def(k) := max_min_var_deg_cs(all_uhit_def(k))$
max_min_var_deg_uhit_def_mem[k] := max_min_var_deg_cs(all_uhit_def(k))$
/* Apply "remarray(max_min_var_deg_uhit_def_mem)" in case an update
   of uhit_def occurred. */



/*!
\endhtmlonly
*/
