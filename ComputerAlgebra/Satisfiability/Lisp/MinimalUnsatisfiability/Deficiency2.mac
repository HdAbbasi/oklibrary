/* Oliver Kullmann, 31.5.2008 (Swansea) */
/* Copyright 2008, 2009, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Deficiency2.mac
  \brief Generators and analysis w.r.t. minimally unsatisfiable clause-sets of deficiency 2

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Deficiency2.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/DP-Reductions.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Substitutions.mac")$
/* Below further files are included (delayed, due to circularity-problems). */


/* *********************************************************************
   * The saturated minimally unsatisfiable clause-sets of deficiency 2 *
   *********************************************************************
*/

/* Standard clauses: */
pos_c(n) := setn(n)$
neg_c(n) := setmn(-n,-1)$
imp_c(i,n) := if i < n then {-i,i+1} else {-n,1}$

/* The standard MUSAT(def=2) non-singular formal clause-sets (where every
   literal occurs at least twice) for n >= 2: */
musatd2_fcs(n) := fcl2fcs(musatd2_fcl(n))$
musatd2_fcl(n) := [create_list(i,i,1,n), append([pos_c(n),neg_c(n)], create_list(imp_c(i,n),i,1,n))]$
/* Statistics: */
nvar_musatd2(n) := n$
ncl_musatd2(n) := n+2$
ncl_list_musatd2(n) := if n=2 then [[2,4]] else
 [[2,n],[n,2]]$
nlitocc_musatd2(n) := n*4$



/* *****************************************************
   * Unsatisfiable hitting clause-sets of deficiency 2 *
   *****************************************************
*/

/* These includes need to be delayed, since data/uhit_def.mac uses musatd2_fcs:
*/
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/data/uhit_def.mac")$

/* Every unsatisfiable hitting clause-set F of deficiency 2 is either of
   type 2 or type 3, depending on whether elimination of singular variables
   yields a clause-set isomorphic to musatd2_fcs(2) or musatd2_fcs(3).
*/

/* Returns 2, 3 or false, where false results iff F is not an unsatisfiable 
   hitting clause-set of deficiency 2, while otherwise its type is returned:
*/
hittingtype_d2_cs(F) := block([F : sdp_reduction_cs(F), T],
 T : classify_candidates_uhit_def([F])[1],
 if T=false or T[2]="new" or T[1][1]#2 then false
 else T[1][2])$

/* The set of all isomorphism-types (i.e., representatives) of unsatisfiable 
   formal hitting clause-sets of deficiency 2 of type t in {2,3} with 
   n variables (where n is an integer):
*/
all_reps_uhitd2_t_fcs(t,n) :=
 all_reps_hitting_extensions_k_fcs({musatd2_fcs(t)},n-t)$

/*The set of all isomorphism-types (i.e., representatives) of unsatisfiable 
   formal hitting clause-sets of deficiency 2 with n variables (with 
   standardised variable names):
*/
all_reps_uhitd2_fcs(n) :=
 union(all_reps_uhitd2_t_fcs(2,n), all_reps_uhitd2_t_fcs(3,n))$

/* All unsatisfiable formal hitting clause-sets of deficiency 2 with
   n variables (standardised):
*/
all_uhitd2_fcs(n) := lunion(map(all_renamings_fcs,all_reps_uhitd2_fcs(n)))$


/*!
\endhtmlonly
*/
