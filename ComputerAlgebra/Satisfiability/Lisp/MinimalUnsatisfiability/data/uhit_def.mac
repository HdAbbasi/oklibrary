/* Oliver Kullmann, 30.4.2008 (Guangzhou) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/data/uhit_def.mac
  \brief Classification of unsatisfiable hitting clause-sets in dependency on the deficiency, only considering clause-sets which are reduced w.r.t. singular DP-reduction

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/data/uhit_def.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Symmetries.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$


kill(uhit_def)$

/* The list of available deficiencies */
uhit_def[0,"info"] : [1,2,3]$

/* For a given deficiency k, the info-field uhit_def[k,"info] contains:
 - true if the classification is complete, and false/unknown otherwise
 - the smallest possible n resp. a lower bound
 - the largest possible n resp. an upper bound
 - the list of available n-values, represented as pairs [n,true/false/unknown],
   stating whether or not for this n the list is complete.
*/
/* Complete means that every possible isomorphism type is
   represented (exactly once). */
/* "false" here means that definitely some cases are missing. */
uhit_def[1,"info"] : [true,0,0,[[0,true]]]$
uhit_def[1,0] : [{{}}]$

uhit_def[2,"info"] : [true,2,3,[[2,true],[3,true]]]$
uhit_def[2,2] : [musatd2(2)[2]]$
uhit_def[2,3] : [musatd2(3)[2]]$

uhit_def[3,"info"] : [false,3,inf,[[3,true],[4,unknown],[5,unknown]]]$
uhit_def[3,3] : [
 {{1,2,3},{-1,2,3},{1,-2,3},{-1,-2,3},{1,-3},{-1,-3}},
 {{-3,-2},{-3,-1,2},{-3,1,2},{-2,-1,3},{-1,2,3},{1,3}},
 {{-3,-2},{-3,-1,2},{-3,1,2},{-2,-1,3},{-2,1,3},{2,3}}
]$
uhit_def[3,4] : [
 {{-4,-3},{-4,-1,2,3},{-4,1,2,3},{-3,-2,4},{-2,-1,3},{-2,1,3},{2,4}},
 {{-4,-3},{-4,-1,2,3},{-4,1,2,3},{-3,4},{-2,-1,3},{-2,1,3},{2,3,4}},
 {{-4,-3},{-4,-1,2,3},{-4,1,3},{-3,-2,-1,4},{-2,-1,3},{-2,1,4},{2,4}},
 {{-4,-3},{-4,2,3},{-3,-2,1,4},{-3,-1,4},{-2,3},{-1,2,3,4},{1,2,4}},
 {{-4,-3},{-4,2,3},{-3,-1,4},{-3,1,4},{-2,-1,3},{-2,1,3},{2,3,4}},
 {{-4,-3,-2},{-4,-2,3},{-3,-2,-1,4},{-3,-2,1,4},{-2,3,4},{-1,2},{1,2}},
 {{-4,-3,-2},{-4,2},{-3,-1,4},{-3,1,4},{-2,-1,3},{-2,1,3},{2,3,4}},
 {{-4,-3,-1},{-4,-3,1,2},{-4,-2,-1,3},{-4,-2,1},{-4,2,3},{-3,4},{3,4}},
 {{1,2,3,4},{-1,2},{-2,3},{-3,1},{-1,-2,-3,4},{-4,1,2,3},{-1,-2,-3,-4}},
 {{-4,-3},{-4,-2,-1,3},{-4,-2,1,3},{-4,-1,2,3},{-4,1,2,3},{-3,4},{3,4}}
]$
uhit_def[3,5] : [
 {{1,2,3},{-1,2,3},{1,-2,4},{-1,-2,4},{2,-3,5},{2,-3,-5},{-2,-4,5},{-2,-4,-5}},
 {{1,2,3},{1,-2,3},{1,2,-3},{1,-2,-3},{-1,4,5},{-1,-4,5},{-1,4,-5},{-1,-4,-5}},
 {{-5,-4,-2},{-5,-2,3,4},{-4,-3,-2,5},{-3,-2,-1,4},{-3,-2,1,4},{-2,3,5},{-1,2},{1,2}},
 {{-5,-4,-2,-1},{-5,-4,-2,1},{-5,-2,-1,4},{-5,-2,1,4},{-5,2,3},{-3,-2,5},{-3,2},{3,5}},
 {{-5,-4},{-5,4},{-4,5},{-3,-2,-1,4,5},{-3,1,4,5},{-2,3,4,5},{-1,2,4,5},{1,2,3,4,5}}
]$


/* For a list of candidate clause-sets, determine whether F is
   reduced unsatisfiable hitting, and in the positive case
   determine whether F is contained in the catalogue or not,
   where in the positive case the index-triple is returned.
*/
classify_candidates_uhit_def(L) := block([result : []],
  for F in L do block([check : check_hitting_nsing_def(F)],
    if length(check) = 0 then result : endcons(false,result)
    else block([element : [check[1], nvar_cs(F)], catalist],
      catalist : uhit_def[element[1], element[2]],
      if not listp(catalist) then result : endcons([element,"new"],result)
      else block([found : false],
        for i : 1 thru length(catalist) unless found do
          if is_isomorphic_cs(F, catalist[i]) then (
            found : true,
            result : endcons([element, i],result)
          ),
        if not found then result : endcons([element,"new"],result)
      )
    )
  ),
  return(result))$

    


/*!
\endhtmlonly
*/
