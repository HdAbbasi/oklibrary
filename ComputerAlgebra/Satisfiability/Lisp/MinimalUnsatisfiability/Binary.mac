/* Oliver Kullmann, 16.6.2018 (Swansea) */
/* Copyright 2018 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Binary.mac
  \brief Generators and analysis w.r.t. minimally unsatisfiable clause-sets containing only clauses of length at most 2

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Binary.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Constructions.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Cores.mac")$


/* ****************************
   * All 2-MUs by brute force *
   ****************************
*/

/* All 2-uniform 2-CNF MUs over variables 1,...,n, n >= 2 (possibly not using
  all variables):
*/
all_ubmu(n) := all_min_usat_cores_bydef_cs(all_ubin_cs(n))$
/* Only those with exactly n variables: */
all_ubmue(n) := subset(all_ubmu(n), lambda([F], is(nvar_cs(F) = n)))$

/* All 2-CNF MUs over variables 1,...,n (including empty and unit-clauses): */
all_bmu(n) := all_min_usat_cores_bydef_cs(all_bin_cs(n))$
/* Only those using all variables: */
all_bmue(n) := subset(all_bmu(n), lambda([F], is(nvar_cs(F) = n)))$

/*
  For all of these sets, representatives of the isomorphism-classes are
  obtained by using representatives_cs, i.e.

    representatives_cs(all_bmue(n));

*/

/*

  For 0 <= n <= 4:

  all_ubmu:                         0     0     1     49    1654
  mod iso:                          0     0     1     5     16    ?

  all_ubmue:                        0     0     1     46    1464
  mod iso:                          0     0     1     4     11    ?

  all_bmu:                          1     2     12    149   2763
  mod iso:                          1     2     5     12    27    2^(n+1)-(n+1) ?!

  all_bmue(n):                      1     1     9     118   2232
  mod iso:                          1     1     3     7     15    2^n-1 ?!


*/


/* ******************************
   * Some small auxiliary 2-CNF *
   ******************************
*/

/* The equivalence of literals x, y: */
equiv_cl(x,y) := [{-x,y}, {-y,x}]$
equiv_cs(x,y) := setify(equiv_cl(x,y))$

/* The list of implications from a to b (natural numbers >= 1): */
impl_cl(a,b) := create_list({-i,i+1},i,a,b-1)$
impl_cs(a,b) := setify(impl_cl(a,b))$
/* The implications b -> b-1 -> ... -> 1 are given by
   comp_cl(impl_cl(a,b)).
*/


/* ***********************
   * The nonsingular B_n *
   ***********************
*/

nonsing_bmu_cl(n) := if n = 0 then [{}] else
 append(lappend(create_list(equiv_cl(i,i+1),i,1,n-1)), equiv_cl(1,-n))$
nonsing_bmu_cs(n) := setify(nonsing_bmu_cl(n))$
nonsing_bmu_fcl(n) := [create_list(i,i,1,n), nonsing_bmu_cl(n)]$
nonsing_bmu_fcs(n) := map(setify,nonsing_bmu_fcl(n))$
/* We have
  nonsing_bmu_cs(n) = union(impl_cs(1,n), comp_cs(impl_cs(1,n)),
                            equiv_cs(1,-n)).
*/


/* **********************
   * Cycle descriptions *
   **********************
*/

/* The valid cycle descriptions: */
valid_triple_bmu(T) := listp(T) and length(T)=3 and naturalp(T[1])
 and naturalp(T[3]) and naturalzp(T[2])$
valid_cycledesc_bmu(T) := listp(T) and length(T) >= 2
 and every_s(valid_triple_bmu, T)$

deficiency_cycledesc(T) := length(T)$
ncl_cycledesc(T) := sum_l(map(sum_l,T))$
nlitocc_cycledesc(T) := 2 * ncl_cycledesc(T)$

/* For inputs T which fulfill valid_cycledesc_bmu(T): */
cycledesc2bmu_fcl(T) := block([c:sum_l(lappend(T)), k:length(T), n, F:[],
 S:map(sum_l,T), max, old_max, beg_int, end_int],
 n:c-k, max:S[1]+T[k][2],
 beg_int : T[1][1]+1, end_int : beg_int + T[1][2],
 F:impl_cl(1,max), F:endcons({-max,1},F),
 for i : 2 thru k-1 do (
   F:endcons({-end_int,max+1}, F),
   F:append(F,impl_cl(max+1,max+S[i]-1)),
   old_max:max, max:max+S[i]-1,
   F:endcons({-max,beg_int},F),
   beg_int:old_max+T[i][1],
   end_int:beg_int+T[i][2]
 ),
 if T[k][1] > 1 then (
   F:endcons({-end_int,max+1},F),
   F:append(F,impl_cl(max+1,max+T[k][1]-1)),
   F:endcons({-(max+T[k][1]-1), -1},F)
 ) else F:endcons({-end_int,-1},F),
 if T[k][3] > 1 then (
   F:endcons({if T[k][2]=0 then 1 else 1+S[1],max+T[k][1]},F),
   F:append(F,impl_cl(max+T[k][1],max+T[k][1]+T[k][3]-2)),
   F:endcons({-(max+T[k][1]+T[k][3]-2), beg_int},F)
 ) else F:endcons({if T[k][2]=0 then 1 else S[1]+1,beg_int},F),
 [create_list(i,i,1,n),F])$

cycledesc2bmu_cs(T) := fcl2cs(cycledesc2bmu_fcl(T))$


/*!
\endhtmlonly
*/
