/* Oliver Kullmann, 16.4.2011 (Guangzhou) */
/* Copyright 2011, 2013 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/MinVarDegrees.mac
  \brief Tests for functions regarding min-var-degrees of minimal unsatisfiable clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/MinVarDegrees.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/MinVarDegrees.mac")$


kill(f)$


/* **************************
   * Number of full clauses *
   **************************
*/

okltest_fullclauses_dmu_lb1(f) := (
  assert(f[1] = 2),
  assert(f[2] = 4),
  assert(f[3] = 4),
  true)$

okltest_index_Sma_S2_rec(f) := block([N],
  N : cokltl(100,1000),
  assert(create_list(2*(k+1-f(k)),k,2,N) = rest(Sma_S2_list(N+1),2)),
  true)$

okltest_Sma_S2_replica(f) := (
  for k : 0 thru cokltl(100,1000) do
    assert(f(k) = Sma_S2_list(k)),
  true)$

okltest_fullclauses_dmu_lb1_gen(f) := block([N],
  for k : 1 thru cokltl(100,1000) do
    assert(f[k,2] = fullclauses_dmu_lb1[k]),
  N : cokltl(100,1000),
  for d : 2 thru cokltl(10,30) do
    assert(create_list(f[k,d],k,1,N) = rest(Sma_list(N+1,d))),
  true)$

okltest_Sma_S2_list(f) := (
  assert(f(0) = []),
  assert(f(21) = [0,2,4,4,6,8,8,8,10,12,12,14,16,16,16,16,18,20,20,22,24]),
  true)$

okltest_Sma_bydef(f) := (
  for k: 0 thru 20 do
    assert(f(k,1) = 0),
  for d : 2 thru cokltl(40,1000) do (
    assert(f(0,d) = 0),
    if primep(d) then
      assert(f(1,d) = d)
    else block([L : ifactors(d), res],
      res : lmax(create_list(f(p[2],p[1]), p,L)),
      assert(f(1,d) = res)
    )
  ),
  assert(create_list(f(k,2),k,0,20) = [0,2,4,4,6,8,8,8,10,12,12,14,16,16,16,16,18,20,20,22,24]),
  assert(create_list(f(k,3),k,0,20) = [0,3,6,9,9,12,15,18,18,21,24,27,27,27,30,33,36,36,39,42,45]),
  assert(create_list(f(k,5),k,0,20) = [0,5,10,15,20,25,25,30,35,40,45,50,50,55,60,65,70,75,75,80,85]),
  true)$

okltest_Sma_start(f) := (
  for d : 2 thru cokltl(100,1000) do
    assert(Sma_bydef(1,d) = f(d)),
  true)$

okltest_Sma_list(f) := block([D,N],
  for k : 0 thru cokltl(100,500) do
    assert(f(k,2) = Sma_S2_list(k)),
  D : cokltl(15,40,100),
  N : cokltl(2,4)*D,
  for d : 2 thru D do
    if primep(d) then
      assert(f(N,d) = create_list(Sma_bydef(k,d), k, 0,N-1)),
  true)$

okltest_Sma_replica(f) := block([D,N],
  D : cokltl(20,100),
  N : cokltl(100,1000),
  for d : 2 thru D do
    assert(f(N,d) = Sma_list(N,d)),
  true)$


/* ***************************
   * Maximal min-var-degrees *
   ***************************
*/

okltest_order_deficiency(f) := (
  assert(map(f,create_list(i,i,1,13)) = [0,2,3,3,3,4,4,4,4,4,4,4,5]),
  for n : 2 thru 10 do
    assert(f(2^n-n) = n),
  true)$

/* **************************************
   * (Generalised) non-Mersenne numbers *
   **************************************
*/

okltest_nonmersenne_rec(f) := (
  assert(f[1] = 2),
  assert(f[2] = 4),
  assert(f[3] = 5),
  assert(f[4] = 6),
  assert(f[5] = 8),
  assert(f[6] = 9),
  assert(f[7] = 10),
  assert(f[8] = 11),
  assert(f[9] = 12),
  assert(f[10] = 13),
  assert(f[11] = 14),
  assert(f[12] = 16),
  for n : 1 thru 6 do
    assert(f[2^n-n] = 2^n),
  true)$

okltest_nonmersenne_law(f) := (
  for k : 1 thru cokltl(30,100,200) do
    assert(f(k) = nonmersenne_rec[k]),
  true)$

okltest_nonmersenne_lb(f) := (
  assert(f(1) = 2),
  assert(f(2) = 3),
  assert(f(3) = 5),
  assert(f(4) = 6),
  true)$

okltest_nonmersenne_ub(f) := (
  assert(f(1) = 2),
  assert(f(2) = 4),
  assert(f(3) = 5),
  assert(f(4) = 7),
  true)$

okltest_nonmersenne_dary_jump0(f) := (
  for k : 1 thru 100 do
    assert(f(k,1) = k),
  for k : 1 thru 100 do
    assert(f(k,2) = nonmersenne(k)),
  assert(create_list(f(k,3),k,1,22) = [3,4,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,27,28]),
  true)$

okltest_nonmersenne_dary_rec(f) := (
  for k : 1 thru 200 do
    assert(f[k,2] = nonmersenne(k)),
  for d : 3 thru cokltl(5,12) do
    for k : 1 thru cokltl(5,50) * d do
      assert(f[k,d] = nonmersenne_dary_jump_bydef(k,d)),
  true)$

okltest_analyse_nonmersenne_rec(f) := (
  assert(f(1) = []),
  assert(f(2) = [[2,1,"ab"]]),
  assert(f(3) = [[3,1,"b"]]),
  assert(f(4) = [[3,"a"],[4,1,"b"]]),
  assert(f(5) = [[4,2,"ab"]]),
  true)$

okltest_index_nonmersenne_rec(f) := (
  assert(f(2) = 2),
  assert(f(3) = 3),
  assert(f(4) = 4),
  assert(f(5) = 4),
  true)$

okltest_step_nonmersenne_rec(f) := (
  assert(f(2) = [1,0,1,0]),
  assert(f(3) = [1,0,1,1]),
  assert(f(4) = [2,2,0,2]),
  true)$

okltest_possible_degree_pairs_nm(f) := (
  assert(f(2,4) = [[[2,2],[1,4,1,4]]]),
  assert(f(3,4) = [[[2,2],[2,6,2,6]]]),
  assert(f(3,5) = [[[2,3],[2,6,1,5]]]),
  assert(f(4,4) = [[[2,2],[3,7,3,7]]]),
  assert(f(4,5) = [[[2,3],[3,7,2,7]]]),
  assert(f(4,6) = [[[2,4],[3,7,1,6]],[[3,3],[2,7,2,7]]]),
  assert(f(6,9) = [[[4,5],[3,9,2,9]]]),
  for k : 2 thru cokltl(30,200) do block(
   [i : index_nonmersenne_rec(k)],
    assert(elementp([nonmersenne(k-i+1),i], setify(map(first,f(k,nonmersenne(k))))) = true),
    assert(f(k,nonmersenne(k)+1) = [])
  ),
  true)$

okltest_possible_degree_pairs_gen(f) := (
  assert(okltest_possible_degree_pairs_nm(buildq([f], lambda([k,m], f(k,m,nonmersenne)))) = true),
  /* XXX */
  true)$

okltest_nonmersenne_op(f) := (
  assert(okltest_nonmersenne_law(buildq([f], lambda([k], f[k,[2]]))) = true),
  /* XXX */
  true)$

okltest_nonmersenne_gen_rec(f) := (
  assert(okltest_nonmersenne_law(buildq([f], lambda([k], f[k,0]))) = true),
  assert(f[6,1] = 8),
  assert(f[13,1] = 16),
  assert(f[28,1] = 32),
  assert(f[59,1] = 64),
  assert(f[14,2] = 17),
  assert(f[29,2] = 33),
  assert(f[60,2] = 65),
  true)$

okltest_epoche_nonmersenne_gen(f) := (
  assert(map(f,create_list(i,i,1,14)) = [-1,0,0,0,0,1,1,1,1,1,1,1,1,2]),
  true)$

okltest_nonmersenne_inf_rec(f) := (
  for k : 1 thru 60 do
    assert(f(k) = nonmersenne_gen_rec[k,k]),
  true)$

okltest_nonmersenne_level(f) := (
  assert(map(f,create_list(i,i,1,12)) = [1,2,2,2,3,3,3,3,3,3,3,4]),
  true)$


/*!
\endhtmlonly
*/
