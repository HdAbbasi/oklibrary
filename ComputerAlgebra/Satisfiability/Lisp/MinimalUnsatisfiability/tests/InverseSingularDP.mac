/* Oliver Kullmann, 14.6.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/InverseSingularDP.mac
  \brief Tests for basic functions regarding minimal unsatisfiability and irredundancy

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/InverseSingularDP.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/DP-Reductions.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Symmetries/Symmetries.mac")$

kill(f)$

/* ********************************
   * Performing single extensions *
   ********************************
*/

okltest_new_var_fcs(f) := (
  assert(f([{},{}]) = 1),
  assert(f([{},{{}}]) = 1),
  assert(f([{1},{}]) = 2),
  assert(f([{3},{{}}]) = 4),
  true)$

okltest_random_sublist(f) := (
  assert(f({},0) = []),
  assert(f({},1) = []),
  assert(f(setn(10),0) = []),
  assert(f(setn(10),1) = makelist(i,i,1,10)),
  assert(subsetp(setify(f(makelist(i,i,1,10),0.5)), setn(10)) = true),
  true)$

okltest_basic_inverse_singulardp_fcs(f) := block([FF],
  FF : [{},{{}}],
  assert(f(FF,{{}},0,0) = true),
  assert(FF = [{1},{{1},{-1}}]),
  assert(f(FF,{{1}},0,0) = true),
  assert(FF = [{1,2},{{2},{1,-2},{-1}}]),
  assert(f(FF,{{2},{-1}},1,1) = true),
  assert(FF = [{1,2,3},{{3},{2,-3},{-1,-3},{1,-2}}]),
  assert(f(FF,{{2,-3},{-1,-3}},1,0) = true),
  assert(FF = [setn(4), {{4,-3},{-4,2},{-4,-1},{3},{1,-2}}]),
  assert(f(FF,{{-4,2},{-4,-1}},1,1) = true),
  assert(FF = [setn(5), {{5,-4},{-5,-4,2},{-5,-4,-1},{4,-3},{3},{1,-2}}]),
  assert(f(FF,{{5,-4},{-5,-4,3}},0.5,0.5) = true),
  FF : full_fcs(3),
  assert(f(FF,{{1,2,3},{1,2,-3}},0.5,0.5) = true),
  assert(cs_to_fcs(singular_dp_reduction(FF[2])) = full_fcs(3)),
  true)$


/* ********************************
   * Performing random extensions *
   ********************************
*/

okltest_random_subset_si(f) := (
  assert(f({},0,0) = {}),
  assert(f({},0,1) = {}),
  assert(f({},1,0) = false),
  assert(f({{1}},1,0) = {{1}}),
  assert(f({{1}},1,1) = {{1}}),
  assert(f({{1}},1,2) = false),
  assert(f({{1}},2,0) = false),
  assert(f({{1}},0,10) = {}),
  assert(f({{1},{2}},2,0) = {{1},{2}}),
  assert(f({{1},{2}},2,1) = false),
  true)$

okltest_si_inverse_singulardp_fcs(f) := block([FF],
  FF : [{},{{}}],
  assert(f(FF,0,0,1,1) = false),
  assert(FF = [{},{{}}]),
  assert(f(FF,0,0,0,1) = true),
  assert(FF = [{1},{{-1},{1}}]),
  assert(f(FF,0,0,2,1) = false),
  assert(FF = [{1},{{-1},{1}}]),
  assert(f(FF,1,1,0,2) = true),
  assert(FF = [{1,2},{{2},{-1,-2},{1,-2}}]),
  assert(f(FF,1,1,1,3) = false),
  assert(f(FF,0.5,0.5,1,2) = true),
  true)$

okltest_it_si_inverse_singulardp_fcs(f) := block([FF],
  FF : [{},{{}}],
  assert(f(FF,1,1,0,1,0) = 0),
  assert(FF =  [{},{{}}]),
  okltest_si_inverse_singulardp_fcs(buildq([f],
    lambda([FF,p,q,a,b],is(f(FF,p,q,a,b,1)=1)))),
  assert(f(FF,1,1,0,1,2) = 2),
  assert(FF[1] = {1,2}),
  assert(is_isomorphic_btr_cs(FF[2],{{1,2},{1,-2},{-1}})),
  FF : [{},{}],
  assert(f(FF,0,0,0,1,1) = 0),
  assert(FF =  [{},{}]),
  true)$

/*!
\endhtmlonly
*/
