/* Oliver Kullmann, 31.5.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/Deficiency2.mac
  \brief Tests for functions related to MUSAT(2)

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/Deficiency2.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Deficiency2.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$


/* *********************************************************************
   * The saturated minimally unsatisfiable clause-sets of deficiency 2 *
   *********************************************************************
*/

/* Testing the characteristic properties of non-singular minimally 
   unsatisfiable formal clause-sets of deficiency 2: */
charprop_nsmusatd2(FF,n) := 
  nvar_fcs(FF) = n and
  FF[1] = setn(n) and
  deficiency_fcs(FF) = 2 and
  min_unsat_bydef(FF,lambda([GG],dll_rk_trivial1(GG,1))) and
  literal_degrees_list_fcs(FF) = [[2,2*n]]$

okltest_charprop_nsmusatd2(f) := (
  assert(f([{},{}],0) = false),
  assert(f([{},{{}}],1) = false),
  assert(f([{1,2},{{},{1},{2},{-1,-2}}],2) = false),
  assert(f([{1,2,3},{{-1,2},{-1,-2},{1,2,-3},{1,2,3},{1,-2}}],3) = false),
  assert(f(full_fcs(2),2) = true),
  assert(f(full_fcs(2),3) = false),
  assert(f([{1,2,3},{{-1,-2,-3},{1,2,3},{-1,2},{-2,3},{-3,1}}],3) = true),
  true)$

okltest_musatd2_fcs(f) := (
  for n : 2 thru 5 do block([FF : f(n)],
    assert(charprop_nsmusatd2(FF,n) = true),
    assert(elementp(setn(n),FF[2]) = true)
  ),
  true)$

okltest_nvar_musatd2(f) := (
  for n : 2 thru 7 do block([nc : f(n)],
    assert(nc = nvar_fcs(musatd2_fcs(n))),
    assert(nc = nvar_fcl(musatd2_fcl(n)))
  ),
  true)$

okltest_ncl_musatd2(f) := (
  for n : 2 thru 7 do block([c : f(n)],
    assert(c = ncl_fcs(musatd2_fcs(n))),
    assert(c = ncl_fcl(musatd2_fcl(n)))
  ),
  true)$

okltest_ncl_list_musatd2(f) := (
  for n : 2 thru 7 do block([cl : f(n)],
    assert(cl = ncl_list_fcs(musatd2_fcs(n))),
    assert(cl = ncl_list_fcl(musatd2_fcl(n)))
  ),
  true)$

okltest_nlitocc_musatd2(f) := (
  for n : 2 thru 7 do block([l : f(n)],
    assert(l = nlitocc_fcs(musatd2_fcs(n))),
    assert(l = nlitocc_fcl(musatd2_fcl(n)))
  ),
  true)$


/* *****************************************************
   * Unsatisfiable hitting clause-sets of deficiency 2 *
   *****************************************************
*/

okltest_hittingtype_d2_cs(f) := (
  assert(f({}) = false),
  assert(f({{}}) = false),
  assert(f({{1},{-1}}) = false),
  assert(f({{1,2},{-1,2},{1,-2},{-1,-2}}) = 2),
  assert(f({{2,3},{-2,3},{2,-3},{-2,-3}}) = 2),
  assert(f({{1,2,3},{-1,-2,-3},{-1,2},{-2,3},{-3,1}}) = 3),
  assert(f({{1,-2,3},{-1,2,-3},{-1,-2},{2,3},{-3,1}}) = 3),
  /* XXX */
  true)$

okltest_all_reps_uhitd2_t_fcs(f) := (
  for t : 2 thru 3 do
   for n : -1 thru 1 do
     assert(f(t,n) = {}),
  assert(f(3,2) = {}),
  assert(f(2,2) = {musatd2_fcs(2)}),
  assert(f(3,3) = {musatd2_fcs(3)}),
  assert(f(2,3) = { [{1,2,3},{{1,2},{1,-2},{-1,2},{-1,-2,-3},{-1,-2,3}}], [{1,2,3},{{1,2},{-1,2},{1,-2,-3},{-1,-2,-3},{-2,3}}], [{1,2,3},{{1,2,-3},{1,-2,-3},{-1,2,-3},{-1,-2,-3},{3}}] }),
  /* XXX */
  true)$

okltest_all_reps_uhitd2_fcs(f) := (
 for n : -1 thru 1 do
   assert(f(n) = {}),
  assert(f(2) = {musatd2_fcs(2)}),
  assert(f(3) = {musatd2_fcs(3), [{1,2,3},{{1,2},{1,-2},{-1,2},{-1,-2,-3},{-1,-2,3}}], [{1,2,3},{{1,2},{-1,2},{1,-2,-3},{-1,-2,-3},{-2,3}}], [{1,2,3},{{1,2,-3},{1,-2,-3},{-1,2,-3},{-1,-2,-3},{3}}] }),
  /* XXX */
  true)$

okltest_all_uhitd2_fcs(f) := (
 for n : -1 thru 1 do
   assert(f(n) = {}),
  assert(f(2) = {musatd2_fcs(2)}),

  /* XXX */
  true)$


/*!
\endhtmlonly
*/
