/* Oliver Kullmann, 8.4.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/Cores.mac
  \brief Tests for functions about finding irredundant cores

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/Cores.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac");
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac");
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac");
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac");
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/Transversals.mac");
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac");


kill(f)$


/* *************************************************
   * Minimally unsatisfiable cores of minimum size *
   *************************************************
*/

okltest_min_size_mus(f) := block([S : dll_simplest_trivial1],
  assert(f({{}},S) = 1),
  assert(f({{1},{-1}},S) = 2),
  assert(f({{1},{-1},{2},{-2}},S) = 2),
  assert(f({{1},{-1},{}},S) = 1),
  true)$

okltest_contains_us(f) := block([S : dll_simplest_trivial1],
  assert(f({},0,S) = false),
  assert(f({},1,S) = false),
  assert(f({},inf,S) = false),
  assert(f({{}},0,S) = false),
  assert(f({{}},1,S) = true),
  assert(f({{}},2,S) = true),
  assert(f({{-1},{1}},0,S) = false),
  assert(f({{-1},{1}},1,S) = false),
  assert(f({{-1},{1}},2,S) = true),
  assert(f({{-1},{1}},inf,S) = true),
  true)$


/* **********************************************
   * Scanning and sampling of irredundant cores *
   **********************************************
*/

okltest_first_mus_fcs(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{{}}],S) = [{},{{}}]),
  assert(f([{1},{{},{1}}],S) = [{1},{{}}]),
  assert(f([{1},{{1},{-1}}],S) = [{1},{{1},{-1}}]),
  assert(f([{1,2},{{1},{-1},{1,2}}],S) = [{1,2},{{1},{-1}}]),
  for n : 0 thru 3 do block([FF : full_fcs(n)],
    assert(f(FF,S) = FF)),
  true)$

okltest_first_irr_fcs(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = [{},{}]),
  assert(f([{1},{{1}}],S) = [{1},{{1}}]),
  assert(f([{1,2},{{1,2},{-1,2}}],S) = [{1,2},{{1,2},{-1,2}}]),
  assert(f([{1,2},{{1},{1,2}}],S) = [{1,2},{{1}}]),
  if oklib_test_level = 0 then return(true),
  block([oklib_test_level : oklib_test_level-1],
    okltest_first_mus_fcs(f)),
  true)$

okltest_all_irr_cores(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = {{}}),
  assert(f([{},{{}}],S) = {{{}}}),
  assert(f([{1},{{1}}],S) = {{{1}}}),
  assert(f([{1},{{1},{}}],S) = {{{}}}),
  assert(f([{1},{{1},{-1}}],S) = {{{1},{-1}}}),
  assert(f([{1},{{1},{-1},{}}],S) = {{{1},{-1}},{{}}}),
  assert(f([{1,2},{{1,2},{-1,2}}],S) = {{{1,2},{-1,2}}}),
  assert(f([{1,2,3},{{1,2},{1,-2},{1},{3}}],S) = {{{1},{3}}, {{1,2},{1,-2},{3}}}),
  assert(f([{1,2},{{-1},{1},{2},{-2}}],S) = {{{-1},{1}},{{-2},{2}}}),
  assert(f([{1,2,3,4},{{1,2},{-1,2},{-2},{3},{4},{-3,-4}}],S) = {{{1,2},{-1,2},{-2}}, {{3},{4},{-3,-4}}}),
  if oklib_test_level = 0 then return(true),
  block([oklib_test_level : oklib_test_level - 1],
    okltest_all_min_usat_cores_bydef(buildq([f],lambda([F,S],f(cs_to_fcs(F),S))))),
  true)$

okltest_all_forced_irr_cores(f) := block(
 [S : dll_simplest_trivial1,
  nf : buildq([f,S],lambda([F,P], block (
   [counter_irr : 0, potentially_unusable_clauses : not emptyp(F)],
    f(F,P,S))))],
  assert(nf({},{}) = {{}}),
  assert(nf({},{{}}) = {{{}}}),
  assert(nf({},{{1}}) = {{{1}}}),
  assert(nf({{1}},{}) = {{{1}}}),
  assert(nf({{1}},{{1,2}}) = {{{1}}}),
  assert(nf({{1,2}},{{-1,2}}) = {{{1,2},{-1,2}}}),
  assert(nf({{1}},{{2},{-2}}) = {}),
  assert(nf({{1}},{{-1},{2},{-2}}) = {{{1},{-1}}}),
  true)$

okltest_all_min_usat_cores(f) := block([S : dll_simplest_trivial1],
  assert(f({{}},S) = {{{}}}),
  assert(f({{1},{-1}},S) = {{{1},{-1}}}),
  assert(f({{1},{-1},{1,2}},S) = {{{1},{-1}}}),
  assert(f({{1},{-1},{}},S) = {{{1},{-1}},{{}}}),
  assert(f({{1},{-1},{2},{-2}},S) = {{{1},{-1}},{{2},{-2}}}),
  assert(f({{1},{-1},{2},{-2},{1,2}},S) = {{{1},{-1}},{{2},{-2}},{{1,2},{-1},{-2}}}),
  true);

okltest_sample_irr_cores(f) := block([Sol,x],
  assert(f([{},{}],Sol,0,x,0) = {}),
  assert(f([{},{{}}],Sol,0,x,0) = {}),
  Sol : dll_simplest_trivial1,
  assert(f([{},{{}}],Sol,1,0,0) = {{{}}}),
  if oklib_test_level = 0 then return(true),
  block([oklib_test_level : oklib_test_level - 1],
    okltest_all_irr_cores_bydef(buildq([f],lambda([FF,S],f(FF,S,inf,1,0)))),
    okltest_all_irr_cores_bydef(buildq([f],lambda([FF,S],f(FF,S,inf,0.5,0)))),
    okltest_all_irr_cores_bydef(buildq([f],lambda([FF,S],f(FF,S,inf,0,0))))
  ),
  true)$


/* ********************************************
   * Maximally non-equivalent sub-clause-sets *
   ********************************************
*/

okltest_all_max_noneq_scs(f) := (
  block([EQp : lambda([F],is(F={}))],
    assert(f({},EQp) = {})
  ),
  block([EQp : lambda([F], not dll_simplest_trivial1(cs_to_fcs(F)))],
    assert(f({},EQp) = {{}}),
    assert(f({{}},EQp) = {{}})
  ),
  true)$

okltest_all_max_sat_scs(f) := block([S : dll_simplest_trivial1],
  assert(f({{}},S) = {{}}),
  assert(f({{1},{-1}},S) = {{{1}},{{-1}}}),
  assert(f({{1},{-1},{}},S) = {{{1}},{{-1}}}),
  assert(f({{1},{-1},{1,2}},S) = {{{1},{1,2}},{{-1},{1,2}}}),
  assert(f({{1},{-1},{2},{-2}},S) = {{{1},{2}},{{1},{-2}},{{-1},{2}},{{-1},{-2}}}),
  if oklib_test_level = 0 then return(true),
  block(
   [oklib_test_level : oklib_test_level - 1,
    muf : buildq([f],lambda([F,S],transversal_hyp_rs(ecomp_hyp([F,f(F,S)]))[2]))],
    okltest_all_min_usat_cores(muf)),
  true)$

okltest_equivalence_checker_scl(f) := block([S : dll_simplest_trivial1],
  assert(f({},S)({}) = true),
  block([EQp : f({{}},S)],
    assert(EQp({}) = false),
    assert(EQp({{}}) = true)
  ),
  true)$

okltest_all_max_neq_scs(f) := block([S : dll_simplest_trivial1],
  assert(f({},S) = {}),
  assert(f({{}},S) = {{}}),
  if oklib_test_level = 0 then return(true),
  block(
   [oklib_test_level : oklib_test_level - 1],
     okltest_all_max_sat_scs(f)),
  if oklib_test_level = 1 then return(true),
  block(
   [oklib_test_level : oklib_test_level - 1,
    irf : buildq([f],lambda([FF,S],transversal_hyp_rs(ecomp_hyp([FF[2],f(FF[2],S)]))[2]))],
    okltest_all_irr_cores(irf)),
  true)$

/*!
\endhtmlonly
*/
