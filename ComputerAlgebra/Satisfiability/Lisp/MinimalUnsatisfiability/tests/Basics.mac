/* Oliver Kullmann, 28.3.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/Basics.mac
  \brief Tests for functions related to MUSAT(1)

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac");
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac");
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac");

kill(f)$


okltest_impliesp_f(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],{1},S) = false),
  assert(f([{},{{}}],{1},S) = true),
  assert(f([{},{{}}],{},S) = true),
  assert(f([{1,2},{{1}}],{1,2},S) = true),
  true)$

okltest_min_unsat_bydef(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = false),
  assert(f([{},{{}}],S) = true),
  assert(f([{1},{{1}}],S) = false),
  assert(f([{1},{{1},{}}],S) = false),
  assert(f([{1},{{}}],S) = true),
  assert(f([{1},{{1},{-1}}],S) = true),
  for n : 0 thru 3 do
    assert(f(full_fcs(n),S) = true),
  if oklib_test_level = 0 then return(true),
  for n : 0 thru 3 do
    assert(f(weak_php(n+1,n),S) = true),
  true)$

okltest_irredundant_bydef(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = true),
  assert(f([{1},{{1}}],S) = true),
  assert(f([{1,2},{{1},{1,2}}],S) = false),
  if oklib_test_level = 0 then return(true),
  block([oklib_test_level : oklib_test_level-1],
    okltest_min_unsat_bydef(buildq([f],lambda([FF,S], is(not S(FF) and f(FF,S)))))),
  true)$

okltest_first_mus_fcs(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{{}}],S) = [{},{{}}]),
  assert(f([{1},{{},{1}}],S) = [{1},{{}}]),
  assert(f([{1},{{1},{-1}}],S) = [{1},{{1},{-1}}]),
  assert(f([{1,2},{{1},{-1},{1,2}}],S) = [{1,2},{{1},{-1}}]),
  for n : 0 thru 3 do block([FF : full_fcs(n)],
    assert(f(FF,S) = FF)),
  true)$

okltest_first_irr_fcs(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = [{},{}]),
  assert(f([{1},{{1}}],S) = [{1},{{1}}]),
  assert(f([{1,2},{{1,2},{-1,2}}],S) = [{1,2},{{1,2},{-1,2}}]),
  assert(f([{1,2},{{1},{1,2}}],S) = [{1,2},{{1}}]),
  block([oklib_test_level : oklib_test_level-1],
    okltest_first_mus_fcs(f)),
  true)$

okltest_all_irrcl_bydef(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = {}),
  assert(f([{},{{}}],S) = {{}}),
  assert(f([{1},{{}}],S) = {{}}),
  assert(f([{1},{{1}}],S) = {{1}}),
  assert(f([{1},{{1},{-1}}],S) = {{1},{-1}}),
  assert(f([{1},{{1},{}}],S) = {{}}),
  assert(f([{1},{{1},{-1},{}}],S) = {}),
  assert(f([{1,2},{{1},{1,2}}],S) = {{1}}),
  true)$

okltest_all_irr_cores_bydef(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = {{}}),
  assert(f([{},{{}}],S) = {{{}}}),
  assert(f([{1},{{1}}],S) = {{{1}}}),
  assert(f([{1},{{1},{}}],S) = {{{}}}),
  assert(f([{1},{{1},{-1}}],S) = {{{1},{-1}}}),
  assert(f([{1},{{1},{-1},{}}],S) = {{{1},{-1}},{{}}}),
  assert(f([{1,2},{{1,2},{-1,2}}],S) = {{{1,2},{-1,2}}}),
  assert(f([{1,2,3},{{1,2},{1,-2},{1},{3}}],S) = {{{1},{3}}, {{1,2},{1,-2},{3}}}),
  assert(f([{1,2},{{-1},{1},{2},{-2}}],S) = {{{-1},{1}},{{-2},{2}}}),
  assert(f([{1,2,3,4},{{1,2},{-1,2},{-2},{3},{4},{-3,-4}}],S) = {{{1,2},{-1,2},{-2}}, {{3},{4},{-3,-4}}}),
  true)$

okltest_all_forced_irr_cores_bydef(f) := block(
 [S : dll_simplest_trivial1,
  nf : buildq([f,S],lambda([F,P], block (
   [counter_irr : 0, potentially_unusable_clauses : not emptyp(F)],
    f(F,P,S))))],
  assert(nf({},{}) = {{}}),
  assert(nf({},{{}}) = {{{}}}),
  assert(nf({},{{1}}) = {{{1}}}),
  assert(nf({{1}},{}) = {{{1}}}),
  assert(nf({{1}},{{1,2}}) = {{{1}}}),
  assert(nf({{1,2}},{{-1,2}}) = {{{1,2},{-1,2}}}),
  assert(nf({{1}},{{2},{-2}}) = {}),
  assert(nf({{1}},{{-1},{2},{-2}}) = {{{1},{-1}}}),
  true)$

okltest_sample_irr_cores(f) := block([S,x],
  assert(f([{},{}],S,0,x,0) = {}),
  assert(f([{},{{}}],S,0,x,0) = {}),
  if oklib_test_level = 0 then return(true),
  block([oklib_test_level : oklib_test_level - 1],
    okltest_all_irr_cores_bydef(buildq([f],lambda([FF,S],f(FF,S,inf,1,0)))),
    okltest_all_irr_cores_bydef(buildq([f],lambda([FF,S],f(FF,S,inf,0.5,0)))),
    okltest_all_irr_cores_bydef(buildq([f],lambda([FF,S],f(FF,S,inf,0,0))))
  ),
  true)$

/*!
\endhtmlonly
*/
