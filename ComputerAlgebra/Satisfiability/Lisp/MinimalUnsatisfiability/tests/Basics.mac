/* Oliver Kullmann, 28.3.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/Basics.mac
  \brief Tests for basic functions regarding minimal unsatisfiability and irredundancy

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/InverseSingularDP.mac")$

kill(f)$


/* *************************
   * Deciding irredundancy *
   *************************
*/

okltest_impliesp_fcs(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],{1},S) = false),
  assert(f([{},{{}}],{1},S) = true),
  assert(f([{},{{}}],{},S) = true),
  assert(f([{1,2},{{1}}],{1,2},S) = true),
  true)$

okltest_impliesp_cs(f) := block([S : dll_simplest_trivial1],
  assert(f({},{},S) = false),
  assert(f({{}},{},S) = true),
  /* XXX */
  true)$

okltest_min_unsat_bydef(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = false),
  assert(f([{},{{}}],S) = true),
  assert(f([{1},{{1}}],S) = false),
  assert(f([{1},{{1},{}}],S) = false),
  assert(f([{1},{{}}],S) = true),
  assert(f([{1},{{1},{-1}}],S) = true),
  for n : 0 thru 3 do
    assert(f(full_fcs(n),S) = true),
  if oklib_test_level = 0 then return(true),
  for n : 0 thru 3 do
    assert(f(weak_php(n+1,n),S) = true),
  true)$

okltest_irredundant_bydef(f) := block([Sol : dll_simplest_trivial1],
  assert(f([{},{}],Sol) = true),
  assert(f([{1},{{1}}],Sol) = true),
  assert(f([{1,2},{{1},{1,2}}],Sol) = false),
  if oklib_test_level = 0 then return(true),
  block([oklib_test_level : oklib_test_level-1],
    okltest_min_unsat_bydef(buildq([f],lambda([FF,Sol], is(not Sol(FF) and f(FF,Sol)))))),
  true)$


/* *****************************
   * Classification of clauses *
   *****************************
*/

okltest_all_irrcl_bydef(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = {}),
  assert(f([{},{{}}],S) = {{}}),
  assert(f([{1},{{}}],S) = {{}}),
  assert(f([{1},{{1}}],S) = {{1}}),
  assert(f([{1},{{1},{-1}}],S) = {{1},{-1}}),
  assert(f([{1},{{1},{}}],S) = {{}}),
  assert(f([{1},{{1},{-1},{}}],S) = {}),
  assert(f([{1,2},{{1},{1,2}}],S) = {{1}}),
  true)$

okltest_saturated_min_unsat_bydef(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = false),
  assert(f([{},{{}}],S) = true),
  assert(f([{1},{{}}],S) = true),
  assert(f([{1},{{1}}],S) = false),
  assert(f([{1},{{1},{-1}}],S) = true),
  assert(f([{1,2},{{}}],S) = true),
  assert(f([{1,2},{{1,2},{-1},{-2}}],S) = false),
  assert(f([{1,2},{{1,2},{-1,2},{-2}}],S) = true),
  assert(f([{1,2},{{1,2},{-1},{-2,1}}],S) = true),
  block([FF : full_fcs(2)],
    assert(basic_inverse_singulardp_fcs(FF,setdifference(FF[2],{{1,2}}),1,1) = true),
    assert(f(FF,S) = false)),
  true)$

okltest_non_saturating_pas_bydef(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = {{}}),
  assert(f([{},{{}}],S) = {}),
  assert(f([{1},{{}}],S) = {}),
  assert(f([{1},{{1}}],S) = {{},{1}}),
  assert(f([{1},{{1},{-1}}],S) = {}),
  assert(f([{1,2},{{}}],S) = {}),
  assert(f([{1,2},{{1,2},{-1},{-2}}],S) = {{1},{2}}),
  assert(f([{1,2},{{1,2},{-1,2},{-2}}],S) = {}),
  assert(f([{1,2},{{1,2},{-1},{-2,1}}],S) = {}),
  true)$

/* ***************************
   * Maximal min-var-degrees *
   ***************************
*/

okltest_nonmersenne_rec(f) := (
  assert(f[1] = 2),
  assert(f[2] = 4),
  assert(f[3] = 5),
  assert(f[4] = 6),
  assert(f[5] = 8),
  assert(f[6] = 9),
  assert(f[7] = 10),
  assert(f[8] = 11),
  assert(f[9] = 12),
  assert(f[10] = 13),
  assert(f[11] = 14),
  assert(f[12] = 16),
  for n : 1 thru 6 do
    assert(f[2^n-n] = 2^n),
  true)$

okltest_nonmersenne_law(f) := (
  for k : 1 thru 100 do
    assert(f(k) = nonmersenne_rec[k]),
  true)$

okltest_nonmersenne_lb(f) := (
  assert(f(1) = 2),
  assert(f(2) = 3),
  assert(f(3) = 5),
  assert(f(4) = 6),
  true)$

okltest_nonmersenne_ub(f) := (
  assert(f(1) = 2),
  assert(f(2) = 4),
  assert(f(3) = 5),
  assert(f(4) = 7),
  true)$

okltest_analyse_nonmersenne_rec(f) := (
  assert(f(1) = []),
  assert(f(2) = [[2,1,"ab"]]),
  assert(f(3) = [[3,1,"b"]]),
  assert(f(4) = [[3,"a"],[4,1,"b"]]),
  assert(f(5) = [[4,2,"ab"]]),
  true)$

okltest_index_nonmersenne_rec(f) := (
  assert(f(2) = 2),
  assert(f(3) = 3),
  assert(f(4) = 4),
  assert(f(5) = 4),
  true)$

okltest_step_nonmersenne_rec(f) := (
  assert(f(2) = [1,0,1,0]),
  assert(f(3) = [1,0,1,1]),
  assert(f(4) = [2,2,0,2]),
  true)$

okltest_possible_degree_pairs_nm(f) := (
  assert(f(2,4) = [[[2,2],[1,4,1,4]]]),
  assert(f(3,4) = [[[2,2],[2,6,2,6]]]),
  assert(f(3,5) = [[[2,3],[2,6,1,5]]]),
  assert(f(4,4) = [[[2,2],[3,7,3,7]]]),
  assert(f(4,5) = [[[2,3],[3,7,2,7]]]),
  assert(f(4,6) = [[[2,4],[3,7,1,6]],[[3,3],[2,7,2,7]]]),
  true)$

okltest_nonmersenne_gen_rec(f) := (
  assert(okltest_nonmersenne_law(buildq([f], lambda([k], f[k,0]))) = true),
  assert(f[6,1] = 8),
  assert(f[13,1] = 16),
  assert(f[28,1] = 32),
  assert(f[59,1] = 64),
  assert(f[14,2] = 17),
  assert(f[29,2] = 33),
  assert(f[60,2] = 65),
  true)$

okltest_epoche_nonmersenne_gen(f) := (
  assert(map(f,create_list(i,i,1,14)) = [-1,0,0,0,0,1,1,1,1,1,1,1,1,2]),
  true)$

okltest_nonmersenne_inf_rec(f) := (
  for k : 1 thru 60 do
    assert(f(k) = nonmersenne_gen_rec[k,k]),
  true)$

okltest_nonmersenne_level(f) := (
  assert(map(f,create_list(i,i,1,12)) = [1,2,2,2,3,3,3,3,3,3,3,4]),
  true)$

/*!
\endhtmlonly
*/
