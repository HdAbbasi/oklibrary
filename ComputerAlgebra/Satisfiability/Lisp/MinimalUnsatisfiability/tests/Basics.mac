/* Oliver Kullmann, 28.3.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011, 2012, 2013, 2017 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/Basics.mac
  \brief Tests for basic functions regarding minimal unsatisfiability and irredundancy

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Pigeonhole.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/InverseSingularDP.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/DeficiencyOne.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac")$


kill(f)$


/* *************************
   * Deciding irredundancy *
   *************************
*/

okltest_impliesp_fcs(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],{1},S) = false),
  assert(f([{},{{}}],{1},S) = true),
  assert(f([{},{{}}],{},S) = true),
  assert(f([{1,2},{{1}}],{1,2},S) = true),
  true)$

okltest_impliesp_cs(f) := block([S : dll_simplest_trivial1],
  assert(f({},{},S) = false),
  assert(f({{}},{},S) = true),
  /* XXX */
  true)$

okltest_min_unsat_bydef(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = false),
  assert(f([{},{{}}],S) = true),
  assert(f([{1},{{1}}],S) = false),
  assert(f([{1},{{1},{}}],S) = false),
  assert(f([{1},{{}}],S) = true),
  assert(f([{1},{{1},{-1}}],S) = true),
  for n : 0 thru 3 do
    assert(f(full_fcs(n),S) = true),
  if oklib_test_level = 0 then return(true),
  for n : 0 thru 3 do
    assert(f(weak_php_fcs(n+1,n),S) = true),
  true)$

okltest_irredundant_bydef(f) := block([Sol : dll_simplest_trivial1],
  assert(f([{},{}],Sol) = true),
  assert(f([{1},{{1}}],Sol) = true),
  assert(f([{1,2},{{1},{1,2}}],Sol) = false),
  if oklib_test_level = 0 then return(true),
  block([oklib_test_level : oklib_test_level-1],
    okltest_min_unsat_bydef(buildq([f],lambda([FF,Sol], is(not Sol(FF) and f(FF,Sol)))))),
  true)$


/* *****************************
   * Classification of clauses *
   *****************************
*/

okltest_all_irrcl_bydef(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = {}),
  assert(f([{},{{}}],S) = {{}}),
  assert(f([{1},{{}}],S) = {{}}),
  assert(f([{1},{{1}}],S) = {{1}}),
  assert(f([{1},{{1},{-1}}],S) = {{1},{-1}}),
  assert(f([{1},{{1},{}}],S) = {{}}),
  assert(f([{1},{{1},{-1},{}}],S) = {}),
  assert(f([{1,2},{{1},{1,2}}],S) = {{1}}),
  true)$


/* **************************************
   * Saturated minimal unsatisfiability *
   **************************************
*/

okltest_saturated_min_unsat_bydef(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = false),
  assert(f([{},{{}}],S) = true),
  assert(f([{1},{{}}],S) = true),
  assert(f([{1},{{1}}],S) = false),
  assert(f([{1},{{1},{-1}}],S) = true),
  assert(f([{1,2},{{}}],S) = true),
  assert(f([{1,2},{{1,2},{-1},{-2}}],S) = false),
  assert(f([{1,2},{{1,2},{-1,2},{-2}}],S) = true),
  assert(f([{1,2},{{1,2},{-1},{-2,1}}],S) = true),
  for n : 0 thru if oklib_test_level=0 then 3 else 5 do
    assert(f(full_fcs(n),S) = true),
  for k : 0 thru if oklib_test_level=0 then 3 else 4 do
    assert(f(cs2fcs(uniform_usat_hitting_min(k)),S) = true),
  block([FF : full_fcs(2)],
    assert(basic_inverse_singulardp_fcs(FF,setdifference(FF[2],{{1,2}}),1,1) = true),
    assert(f(FF,S) = false)),
  true)$

okltest_non_saturating_pas_bydef(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = {{}}),
  assert(f([{},{{}}],S) = {}),
  assert(f([{1},{{}}],S) = {}),
  assert(f([{1},{{1}}],S) = {{},{1}}),
  assert(f([{1},{{1},{-1}}],S) = {}),
  assert(f([{1,2},{{}}],S) = {}),
  assert(f([{1,2},{{1,2},{-1},{-2}}],S) = {{1},{2}}),
  assert(f([{1,2},{{1,2},{-1,2},{-2}}],S) = {}),
  assert(f([{1,2},{{1,2},{-1},{-2,1}}],S) = {}),
  true)$


/* *************************************
   * Marginal minimal unsatisfiability *
   *************************************
*/

okltest_marginal_min_unsat_bydef_fcs(f) := (
  assert(f([{},{}]) = false),
  assert(f([{},{{}}]) = true),
  assert(f([{1},{{1}}]) = false),
  assert(f([{1},{{},{1}}]) = false),
  assert(f([{1},{{1},{-1}}]) = true),
  assert(f([{1,2,3},{{1},{-1,2},{-1,-2,3},{-1,-2,-3}}]) = false),
  assert(f([{1,2,3},{{1},{-1,2},{-2,3},{-3}}]) = true),
  for n : 0 thru if oklib_test_level=0 then 3 else 5 do
    assert(f(full_fcs(n)) = true),
  for k : 0 thru if oklib_test_level=0 then 3 else 5 do
    assert(f(cs2fcs(marginal_musat1(k))) = true),
  true)$

okltest_marginal_min_unsat_bydef_cs(f) := (
  assert(f({}) = false),
  assert(f({{}}) = true),
  assert(f({{1},{-1,2},{-1,-2}}) = false),
  assert(okltest_marginal_min_unsat_bydef_fcs(buildq([f], lambda([FF], f(fcs2cs(FF))))) = true),
  true)$

/*!
\endhtmlonly
*/
