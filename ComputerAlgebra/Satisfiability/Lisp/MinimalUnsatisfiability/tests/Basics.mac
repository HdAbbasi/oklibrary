/* Oliver Kullmann, 28.3.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/Basics.mac
  \brief Tests for basic functions regarding minimal unsatisfiability and irredundancy

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Basics.mac")$


kill(f)$


okltest_impliesp_f(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],{1},S) = false),
  assert(f([{},{{}}],{1},S) = true),
  assert(f([{},{{}}],{},S) = true),
  assert(f([{1,2},{{1}}],{1,2},S) = true),
  true)$

okltest_min_unsat_bydef(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = false),
  assert(f([{},{{}}],S) = true),
  assert(f([{1},{{1}}],S) = false),
  assert(f([{1},{{1},{}}],S) = false),
  assert(f([{1},{{}}],S) = true),
  assert(f([{1},{{1},{-1}}],S) = true),
  for n : 0 thru 3 do
    assert(f(full_fcs(n),S) = true),
  if oklib_test_level = 0 then return(true),
  for n : 0 thru 3 do
    assert(f(weak_php(n+1,n),S) = true),
  true)$

okltest_irredundant_bydef(f) := block([Sol : dll_simplest_trivial1],
  assert(f([{},{}],Sol) = true),
  assert(f([{1},{{1}}],Sol) = true),
  assert(f([{1,2},{{1},{1,2}}],Sol) = false),
  if oklib_test_level = 0 then return(true),
  block([oklib_test_level : oklib_test_level-1],
    okltest_min_unsat_bydef(buildq([f],lambda([FF,Sol], is(not Sol(FF) and f(FF,Sol)))))),
  true)$

okltest_all_irrcl_bydef(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = {}),
  assert(f([{},{{}}],S) = {{}}),
  assert(f([{1},{{}}],S) = {{}}),
  assert(f([{1},{{1}}],S) = {{1}}),
  assert(f([{1},{{1},{-1}}],S) = {{1},{-1}}),
  assert(f([{1},{{1},{}}],S) = {{}}),
  assert(f([{1},{{1},{-1},{}}],S) = {}),
  assert(f([{1,2},{{1},{1,2}}],S) = {{1}}),
  true)$

okltest_saturated_min_unsat_bydef(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = false),
  assert(f([{},{{}}],S) = true),
  assert(f([{1},{{}}],S) = true),
  assert(f([{1},{{1}}],S) = false),
  assert(f([{1},{{1},{-1}}],S) = true),
  assert(f([{1,2},{{}}],S) = true),
  assert(f([{1,2},{{1,2},{-1},{-2}}],S) = false),
  assert(f([{1,2},{{1,2},{-1,2},{-2}}],S) = true),
  assert(f([{1,2},{{1,2},{-1},{-2,1}}],S) = true),
  true)$

okltest_non_saturating_pas_bydef(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = {{}}),
  assert(f([{},{{}}],S) = {}),
  assert(f([{1},{{}}],S) = {}),
  assert(f([{1},{{1}}],S) = {{},{1}}),
  assert(f([{1},{{1},{-1}}],S) = {}),
  assert(f([{1,2},{{}}],S) = {}),
  assert(f([{1,2},{{1,2},{-1},{-2}}],S) = {{1},{2}}),
  assert(f([{1,2},{{1,2},{-1,2},{-2}}],S) = {}),
  assert(f([{1,2},{{1,2},{-1},{-2,1}}],S) = {}),
  true)$

/* ***************************
   * Maximal min-var-degrees *
   ***************************
*/

okltest_max_min_var_degree_def_rec(f) := block(
  assert(f[1] = 2),
  assert(f[2] = 4),
  assert(f[3] = 5),
  assert(f[4] = 6),
  assert(f[5] = 8),
  assert(f[6] = 9),
  assert(f[7] = 10),
  assert(f[8] = 11),
  assert(f[9] = 12),
  assert(f[10] = 13),
  assert(f[11] = 14),
  assert(f[12] = 16),
  true)$

okltest_max_min_var_degree_def_law(f) := block(
  for k : 1 thru 12 do
    assert(f(k) = max_min_var_degree_def_rec[k]))$

/*!
\endhtmlonly
*/
