/* Oliver Kullmann, 20.2.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/DeficiencyOne.mac
  \brief Tests for functions related to MUSAT(1)

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/DeficiencyOne.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/Conflicts.mac")$
oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Basic.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/DeficiencyOne.mac")$

kill(f)$

/* ************************
   * Tree representations *
   ************************
*/

/* ****************************
   * Generating all instances *
   ****************************
*/

okltest_all_smusat1_cs(f) := (
  assert(f(0) = [{{}}]),
  assert(f(1) = [ {{1},{-1}} ]),
  assert(f(2) = [ {{1},{-1,2},{-1,-2}}, {{2},{-2,1},{-2,-1}}, {{-1},{1,2},{1,-2}}, {{-2},{2,1},{2,-1}} ]),
  /* XXX */
  true)$

okltest_num_all_smusat1(f) := (
  for n : 0 thru if oklib_test_level=0 then 3 else 5 do
    assert(f(n) = length(all_smusat1_cs(n))),
  true)$


/* ******************************************************
   * Heuristical approach: removing literal occurrences *
   * to achieve a given maximal variable degree         *
   ******************************************************
*/

okltest_remlitocc_greedy(f) := block(
  assert(f({},inf,0) = [{},minf]),
  assert(f({{}},0,0) = [{{}},minf]),
  assert(f({{1},{-1}},1,1) = [false,inf]),
  assert(f({{1},{-1}},1,2) = [{{1},{-1}},2]),
  for n : 1 thru 3 do (
    F : f(uniform_usat_hitting_min(n),1,2)[1],
    assert(nvar_cs(F) = 2^n - 1),
    assert(deficiency_cs(F) = 1)),
    assert(is_tree(g2mg(cg_cs(F))) = true),
  true)$

okltest_marginal_musat1(f) := block(
  assert(f(0) = {{}}),
  for k : 1 thru 4 do block([F : f(k)],
    assert(length(F) = 2^k),
    assert(max_variable_degree_cs(F) = 2),
    assert(graphiccsp(F) = true),
    assert(is_tree(g2mg(cg_cs(F))) = true)),
  true)$

/*!
\endhtmlonly
*/
