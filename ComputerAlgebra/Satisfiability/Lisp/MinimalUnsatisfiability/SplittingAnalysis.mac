/* Oliver Kullmann, 24.4.2008 (Guangzhou) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/SplittingAnalysis.mac
  \brief Analysing the splitting (via partial assignments) of minimally unsatisfiable clause-sets

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/SplittingAnalysis.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Cores.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Reductions/DP-Reductions.mac")$

/* Compute a sequence of minimally unsatisfiable clause-sets as subsets
   of a given clause-set under random splitting. */
/* The sequence starts with a minimally unsatisfiable sub-clause-set
   of the given clause-set, then one where the first variable is set
   to a random value, etc. */
/* Prerequisite: F is unsatisfiable. */
/* This is a sort of a "random generator" for minimally unsatisfiable
    clause-sets. */
random_splitting_mus(F, seed, solver) := block(
 [FF, V, v, eps,
  generator_state : make_random_state(seed)],
  set_random_state(generator_state),
  FF : first_mus_fcs(cs_to_fcs(F), solver),
  F : FF[2], V : var_cs(F),
  if emptyp(V) then return([F]),
  v : listify(V)[1 + random(length(V))],
  eps : random(2) * 2 - 1,
  return(cons(F,random_splitting_mus(apply_pa({eps * v},F), seed, solver))))$
/* The variation where automatically singular DP-reduction is applied. */
random_splitting_nsing_mus(F, seed, solver) := block(
 [FF, V, v, eps,
  generator_state : make_random_state(seed)],
  set_random_state(generator_state),
  F : singular_dp_reduction(F),
  FF : first_mus_fcs(cs_to_fcs(F), solver),
  F : singular_dp_reduction(FF[2]), V : var_cs(F),
  if emptyp(V) then return([F]),
  v : listify(V)[1 + random(length(V))],
  eps : random(2) * 2 - 1,
  return(cons(F,random_splitting_nsing_mus(apply_pa({eps * v},F), seed, solver))))$


/*!
\endhtmlonly
*/
