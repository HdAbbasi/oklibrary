/* Matthew Gwynne, 27.5.2009 (Swansea) */
/* Copyright 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/tests/NonBooleanTranslations.mac
  \brief Tests for non-boolean translations

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/tests/NonBooleanTranslations.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$


/* ******************************
   * The "standard" translation *
   ******************************
*/

okltest_nbfclud2fcl_core(f) := block([FF],
  assert(f([[],[],[]]) = [[],[]]),
  assert(f([[1],[],[]]) = [[],[]]),
  assert(f([[1],[],[2]]) = [[nbv(1,2)],[]]),
  assert(f([[3,1],[],[4,2]]) = [[nbv(3,4),nbv(3,2),nbv(1,4),nbv(1,2)],[]]),
  assert(f([[],[{}],[]]) = [[],[{}]]),
  assert(f([[],[{},{}],[]]) = [[],[{},{}]]),
  assert(f([[1],[{},{[1,1]},{[1,1]}],[1]]) = [[nbv(1,1)], [{},{-nbv(1,1)},{-nbv(1,1)}]]),
  /* XXX */
  true)$

okltest_nbfcsfd2fcs_core(f) := block([FF,D],
  assert(f([{},{},D]) = [{},{}]),
  /* XXX */
  true)$

okltest_nbfclud2fcl_alo(f) := block(
  assert(f([[],[],[]]) = [[],[]]),
  /* XXX */
  true)$

okltest_nbfcsfd2fcs_alo(f) := block([FF,D],
  assert(f([{},{},D]) = [{},{}]),
  /* XXX */
  true)$

okltest_nbfclud2fcl_aloamo(f) := block(
  assert(f([[],[],[]]) = [[],[]]),
  /* XXX */
  true)$

okltest_nbfcsfd2fcs_aloamo(f) := block([FF,D],
  assert(f([{},{},D]) = [{},{}]),
  /* XXX */
  true)$


/* **************************************
   * The generalised nested translation *
   **************************************
*/


/* ************************************************
   * Tools for the generalised nested translation *
   ************************************************
*/

okltest_add_bincl_nec(f) := (
  for n : 0 thru 4 do block(
   [F : setify(create_list({i},i,1,n)),
    C : setify(create_list(-i,i,1,n))],
    assert(f(F,{C},dll_simplest_trivial2) = powerset(setn(n),2))
  ),
  for n : 0 thru 4 do block(
   [F : full_cs(n)],
    assert(f(F,{},dll_simplest_trivial2) = {})
  ),
  /* XXX */
  true)$

/*!
\endhtmlonly
*/
