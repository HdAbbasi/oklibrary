/* Matthew Gwynne, 27.5.2009 (Swansea) */
/* Copyright 2009, 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/tests/NonBooleanTranslations.mac
  \brief Tests for non-boolean translations

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/tests/NonBooleanTranslations.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/NonBooleanTranslations.mac")$


/* ******************************
   * The "standard" translation *
   ******************************
*/

okltest_nbfclfd2fcl_core(f) := (
  /* XXX */
  true)$

okltest_nbfclud2fcl_core(f) := block([FF],
  assert(f([[],[],[]]) = [[],[]]),
  assert(f([[1],[],[]]) = [[],[]]),
  assert(f([[1],[],[2]]) = [[nbv(1,2)],[]]),
  assert(f([[3,1],[],[4,2]]) = [[nbv(3,4),nbv(3,2),nbv(1,4),nbv(1,2)],[]]),
  assert(f([[],[{}],[]]) = [[],[{}]]),
  assert(f([[],[{},{}],[]]) = [[],[{},{}]]),
  assert(f([[1],[{},{[1,1]},{[1,1]}],[1]]) = [[nbv(1,1)], [{},{-nbv(1,1)},{-nbv(1,1)}]]),
  /* XXX */
  true)$

okltest_nbfcsfd2fcs_core(f) := block([FF,D],
  assert(f([{},{},D]) = [{},{}]),
  /* XXX */
  true)$

okltest_nbfclud2fcl_alo(f) := block(
  assert(f([[],[],[]]) = [[],[]]),
  /* XXX */
  true)$

okltest_nbfcsfd2fcs_alo(f) := block([FF,D],
  assert(f([{},{},D]) = [{},{}]),
  /* XXX */
  true)$

okltest_nbfclud2fcl_aloamo(f) := block(
  assert(f([[],[],[]]) = [[],[]]),
  /* XXX */
  true)$

okltest_nbfcsfd2fcs_aloamo(f) := block([FF,D],
  assert(f([{},{},D]) = [{},{}]),
  /* XXX */
  true)$

okltest_snbfclfd2fcl_core(f) := (
  /* XXX */
  true)$

okltest_snbfclud2fcl_core(f) := block([FF],
  assert(f([[],[],[]]) = [[],[]]),
  assert(f([[1],[],[]]) = [[],[]]),
  assert(f([[1],[],[2]]) = [[nbv(1,2)],[]]),
  assert(f([[3,1],[],[4,2]]) = [[nbv(3,4),nbv(3,2),nbv(1,4),nbv(1,2)],[]]),
  assert(f([[],[{}],[]]) = [[],[{}]]),
  assert(f([[],[{},{}],[]]) = [[],[{},{}]]),
  assert(f([[1],[{},{[1,1,1]},{[1,1,-1]}],[1]]) = [[nbv(1,1)], [{},{nbv(1,1)},{-nbv(1,1)}]]),
  /* XXX */
  true)$

okltest_snbfcsfd2fcs_core(f) := (
  assert(f([{},{},{}]) = [{},{}]),
  assert(f([{1},{},lambda([x],{})]) = [{},{}]),
  /* XXX */
  true)$

okltest_snbfclfd2fcl_aloamo(f) := block([D],
  assert(f([[],[],D]) = [[],[]]),
  /* XXX */
  true)$

okltest_snbfclud2fcl_aloamo(f) := (
  assert(f([[],[],[]]) = [[],[]]),
  assert(f([[1],[],[]]) = [[],[{}]]),
  assert(f([[1],[],[2]]) = [[nbv(1,2)],[{nbv(1,2)}]]),
  assert(f([[3,1],[],[4,2]]) = [[nbv(3,4),nbv(3,2),nbv(1,4),nbv(1,2)],[{nbv(3,4),nbv(3,2)},{nbv(1,4),nbv(1,2)},{-nbv(3,4),-nbv(3,2)},{-nbv(1,4),-nbv(1,2)}]]),
  assert(f([[],[{}],[]]) = [[],[{}]]),
  assert(f([[],[{},{}],[]]) = [[],[{},{}]]),
  assert(f([[1],[{},{[1,1,1]},{[1,1,-1]}],[1]]) = [[nbv(1,1)], [{},{nbv(1,1)},{-nbv(1,1)},{nbv(1,1)}]]),
  /* XXX */
  true)$

okltest_snbfcsfd2fcs_aloamo(f) := block([D],
  assert(f([{},{},D]) = [{},{}]),
  /* XXX */
  true)$


/* **************************************
   * The generalised nested translation *
   **************************************
*/

okltest_gennest_clause_trans(f) := (

  true)$

okltest_gennest_nbfcl2fcl(f) := (

  true)$

okltest_standtrans_T(f) := (

  true)$

okltest_standtrans_fd_weak_TR(f) := (

  true)$

okltest_standtrans_ud_weak_TR(f) := (

  true)$

okltest_standtrans_fd_TV(f) := (

  true)$

okltest_standtrans_ud_TV(f) := (

  true)$

okltest_nbfclfd2fcl_alo_2(f) := (

  true)$

okltest_nbfclud2fcl_alo_2(f) := (

  true)$

okltest_standnest_T(f) := (

  true)$

okltest_standnest_TR(f) := (

  true)$

okltest_standnest_strong_TR(f) := (

  true)$

okltest_standnest_TV(f) := (

  true)$

okltest_nbfclud2fcl_standnest(f) := (

  true)$

okltest_nbfclud2fcl_standnest_strong(f) := (

  true)$

okltest_logarithmic_T(f) := block([t,v,e],
  t : f([3]),
  assert(t(v,3) = {}),
  t : f([4,2]),
  assert(t(v,4) = {-nbv(v,1)}),
  assert(t(v,2) = {nbv(v,1)}),
  t : f([1,3,2]),
  assert(t(v,1) = {-nbv(v,1),-nbv(v,2)}),
  assert(t(v,3) = {-nbv(v,1),nbv(v,2)}),
  assert(t(v,2) = {nbv(v,1),-nbv(v,2)}),
  t : f([-1,3,5,e]),
  assert(t(v,-1) = {-nbv(v,1),-nbv(v,2)}),
  assert(t(v,3) = {-nbv(v,1),nbv(v,2)}),
  assert(t(v,5) = {nbv(v,1),-nbv(v,2)}),
  assert(t(v,e) = {nbv(v,1),nbv(v,2)}),
  t : f([1,2,-3,4,5]),
  assert(t(v,1) = {-nbv(v,1),-nbv(v,2),-nbv(v,3)}),
  assert(t(v,2) = {-nbv(v,1),-nbv(v,2),nbv(v,3)}),
  assert(t(v,-3) = {-nbv(v,1),nbv(v,2),-nbv(v,3)}),
  assert(t(v,4) = {-nbv(v,1),nbv(v,2),nbv(v,3)}),
  assert(t(v,5) = {nbv(v,1),-nbv(v,2),-nbv(v,3)}),
  true)$

okltest_logarithmic_TR(f) := block([t,v,e],
  t : f([3]),
  assert(t(v) = []),
  t : f([4,2]),
  assert(t(v) = []),
  t : f([1,3,2]),
  assert(t(v) = [{nbv(v,1),nbv(v,2)}]),
  t : f([-1,3,5,e]),
  assert(t(v) = []),
  t : f([1,2,-3,4,5]),
  assert(t(v) = [{nbv(v,1),-nbv(v,2),nbv(v,3)},{nbv(v,1),nbv(v,2),-nbv(v,3)},{nbv(v,1),nbv(v,2),nbv(v,3)}]),
  true)$

okltest_logarithmic_TV(f) := block([t,v,e],
  t : f([3]),
  assert(t(v) = []),
  t : f([4,2]),
  assert(t(v) = [nbv(v,1)]),
  t : f([1,3,2]),
  assert(t(v) = [nbv(v,1),nbv(v,2)]),
  t : f([-1,3,5,e]),
  assert(t(v) = [nbv(v,1),nbv(v,2)]),
  t : f([1,2,-3,4,5]),
  assert(t(v) = [nbv(v,1),nbv(v,2),nbv(v,3)]),
  true)$

okltest_nbfclud2fcl_logarithmic(f) := (

  true)$

okltest_reduced_T(f) := (

  true)$

okltest_reduced_TR(f) := (

  true)$

okltest_reduced_strong_TR(f) := (

  true)$

okltest_reduced_TV(f) := (

  true)$

okltest_nbfclud2fcl_reduced(f) := (

  true)$

okltest_nbfclud2fcl_reduced_strong(f) := (

  true)$


/* ************************************************
   * Tools for the generalised nested translation *
   ************************************************
*/

okltest_gennest_nbfcl2fcl_p(f) := block([Du,D],
  /* XXX */
  Du : [1,2,3,4],
  D : lambda([x],Du),
  assert(f([1,2,3,4,5],D,dll_simplest_trivial2, standtrans_T,standtrans_fd_weak_TR(D),standtrans_fd_TV(D)) = true),
  assert(f([1,2,3,4,5],D,dll_simplest_trivial2, standnest_T(Du),standnest_TR(Du),standnest_TV(Du)) = true),
  assert(f([1,2,3,4,5],D,dll_simplest_trivial2, standnest_T(Du),standnest_strong_TR(Du),standnest_TV(Du)) = true),
  assert(f([1,2,3,4,5],D,dll_simplest_trivial2, logarithmic_T(Du),logarithmic_TR(Du),logarithmic_TV(Du)) = true),
  assert(f([1,2,3,4,5],D,dll_simplest_trivial2, reduced_T(Du),reduced_TR(Du),reduced_TV(Du)) = true),
  assert(f([1,2,3,4,5],D,dll_simplest_trivial2, reduced_T(Du),reduced_strong_TR(Du),reduced_TV(Du)) = true),
  true)$

okltest_add_bincl_nec(f) := (
  for n : 0 thru 4 do block(
   [F : setify(create_list({i},i,1,n)),
    C : setify(create_list(-i,i,1,n))],
    assert(f(F,{C},dll_simplest_trivial2) = powerset(setn(n),2))
  ),
  for n : 0 thru 4 do block(
   [F : full_cs(n)],
    assert(f(F,{},dll_simplest_trivial2) = {})
  ),
  /* XXX */
  true)$

/*!
\endhtmlonly
*/
