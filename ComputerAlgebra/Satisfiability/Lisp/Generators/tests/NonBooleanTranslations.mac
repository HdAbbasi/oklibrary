/* Matthew Gwynne, 27.5.2009 (Swansea) */
/* Copyright 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/tests/NonBooleanTranslations.mac
  \brief Tests for non-boolean translations

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/tests/NonBooleanTranslations.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$

okltest_nbfcsfd2fcs_core(f) := block([FF],
  assert(f([{},{},lambda([x],x)]) = [{},{}]),
  assert(dll_simplest(
    standardise_fcs(f([{1,2},{{[1,1]},{[1,2]}},lambda([x],{1,2})]))[1],
    dll_heuristics_first_formal)),
  FF : standardise_fcs(f([{1,2},{},lambda([x],{1,2})]))[1],
  assert(dll_simplest(
    apply_pa_fcs(FF[1],FF),
    dll_heuristics_first_formal)),
  true)$

okltest_nbfcsfd2fcs_alo(f) := block([FF],
  assert(f([{},{},lambda([x],x)]) = [{},{}]),
  assert(not(dll_simplest(
    standardise_fcs(f([{1,2},{{[1,1]},{[1,2]}},lambda([x],{1,2})]))[1],
    dll_heuristics_first_formal))),
  FF : standardise_fcs(f([{1,2},{},lambda([x],{1,2})]))[1],
  assert(dll_simplest(
    apply_pa_fcs(FF[1],FF),
    dll_heuristics_first_formal)),
  true)$


okltest_nbfcsfd2fcs_aloamo(f) := block([FF],
  assert(f([{},{},lambda([x],x)]) = [{},{}]),
  assert(not(dll_simplest(
    standardise_fcs(f([{1,2},{{[1,1]},{[1,2]}},lambda([x],{1,2})]))[1],
    dll_heuristics_first_formal))),
  FF : standardise_fcs(f([{1,2},{},lambda([x],{1,2})]))[1],
  assert(not(dll_simplest(
    apply_pa_fcs(FF[1],FF),
    dll_heuristics_first_formal))),
  true)$

okltest_nbfclud2fcl_core(f) := block([FF],
  assert(f([[],[],[]]) = [[],[]]),
  assert(dll_simplest(
    standardise_fcs(fcl2fcs(f([[1,2],[{[1,1]},{[1,2]}],[1,2]])))[1],
    dll_heuristics_first_formal)),
  FF : standardise_fcs(fcl2fcs(f([[1,2],[],[1,2]])))[1],
  assert(dll_simplest(
    apply_pa_fcs(FF[1],FF),
    dll_heuristics_first_formal)),
  true)$

okltest_nbfclud2fcl_alo(f) := block(
  assert(f([[],[],[]]) = [[],[]]),
  assert(not(dll_simplest(
    standardise_fcs(fcl2fcs(f([[1,2],[{[1,1]},{[1,2]}],[1,2]])))[1],
    dll_heuristics_first_formal))),
  FF : standardise_fcs(fcl2fcs(f([[1,2],[],[1,2]])))[1],
  assert(dll_simplest(
    apply_pa_fcs(FF[1],FF),
    dll_heuristics_first_formal)),
  true)$

okltest_nbfclud2fcl_aloamo(f) := block(
  assert(f([[],[],[]]) = [[],[]]),
  assert(not(dll_simplest(
    standardise_fcs(fcl2fcs(f([[1,2],[{[1,1]},{[1,2]}],[1,2]])))[1],
    dll_heuristics_first_formal))),
  FF : standardise_fcs(fcl2fcs(f([[1,2],[],[1,2]])))[1],
  assert(not(dll_simplest(
    apply_pa_fcs(FF[1],FF),
    dll_heuristics_first_formal))),
  true)$

/*!
\endhtmlonly
*/
