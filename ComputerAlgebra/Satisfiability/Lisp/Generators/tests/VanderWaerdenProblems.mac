/* Oliver Kullmann, 20.9.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/tests/VanderWaerdenProblems.mac
  \brief Tests for clause-sets related to van der Waerden problems

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/tests/VanderWaerdenProblems.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Substitutions.mac")$

kill(f)$


/* **************************************************
   * Arithmetic progressions in the natural numbers *
   **************************************************
*/

okltest_vanderwaerden2_fcs(f) := (
  assert(f(0,0) = [{},{{}}]),
  assert(f(0,1) = [{1},{{}}]),
  assert(f(1,0) = [{},{}]),
  assert(f(1,1) = [{1},{{1},{-1}}]),
  assert(f(2,0) = [{},{}]),
  assert(f(2,1) = [{1},{}]),
  assert(f(2,2) = [{1,2},{{1,2},{-1,-2}}]),
  assert(f(2,3) = [{1,2,3},{{1,2},{1,3},{2,3},{-1,-2},{-1,-3},{-2,-3}}]),
  assert(f(3,0) = [{},{}]),
  assert(f(3,1) = [{1},{}]),
  assert(f(3,2) = [{1,2},{}]),
  assert(f(3,3) = [{1,2,3},{{1,2,3},{-1,-2,-3}}]),
  assert(f(3,4) = [{1,2,3,4},{{1,2,3},{2,3,4},{-1,-2,-3},{-2,-3,-4}}]),
  true)$

okltest_vanderwaerden2nd_fcs(f) := block(
  assert(okltest_vanderwaerden2_fcs(buildq([f], lambda([k,n],f(k,k,n))))),
  assert(f(3,4,4) = [{1,2,3,4},{{-1,-2,-3},{-2,-3,-4},{1,2,3,4}}]),
  true)$

okltest_vanderwaerden_nbfclud(f) := (
  assert(f([],0) = [[],[],[]]),
  assert(okltest_vanderwaerden_nbfcsud(buildq([f],lambda([L,n],fcl2fcs(f(L,n))))) = true),
  /* XXX */
  true)$

okltest_vanderwaerden_nbfcsud(f) := block(
  assert(f([],0) = [{},{},{}]),
  assert(f([],1) = [{1},{},{}]),
  assert(f([],2) = [{1,2},{},{}]),
  assert(f([1],0) = [{},{},{1}]),
  assert(f([1],1) = [{1},{{[1,1]}},{1}]),
  assert(f([1],2) = [{1,2},{{[1,1]},{[2,1]}},{1}]),
  assert(f([1,1],0) = [{},{},{1,2}]),
  assert(f([1,1],1) = [{1},{{[1,1]},{[1,2]}},{1,2}]),
  assert(f([1,1],2) = [{1,2},{{[1,1]},{[1,2]},{[2,1]},{[2,2]}},{1,2}]),
  assert(f([2],0) = [{},{},{1}]),
  assert(f([2],1) = [{1},{},{1}]),
  assert(f([2],2) = [{1,2},{{[1,1],[2,1]}},{1}]),
  assert(f([1,2],0) = [{},{},{1,2}]),
  assert(f([1,2],1) = [{1},{{[1,1]}},{1,2}]),
  assert(f([1,2],2) = [{1,2},{{[1,1]},{[2,1]},{[1,2],[2,2]}},{1,2}]),
  assert(f([2,2],0) = [{},{},{1,2}]),
  assert(f([2,2],1) = [{1},{},{1,2}]),
  assert(f([2,2],2) = [{1,2},{{[1,1],[2,1]},{[1,2],[2,2]}},{1,2}]),
  assert(f([2,2],3) = [{1,2,3},{{[1,1],[2,1]},{[1,1],[3,1]},{[2,1],[3,1]},{[1,2],[2,2]},{[1,2],[3,2]},{[2,2],[3,2]}},{1,2}]),
  assert(f([2,3],0) = [{},{},{1,2}]),
  assert(f([2,3],1) = [{1},{},{1,2}]),
  assert(f([2,3],2) = [{1,2},{{[1,1],[2,1]}},{1,2}]),
  assert(f([2,3],3) = [{1,2,3},{{[1,1],[2,1]},{[1,1],[3,1]},{[2,1],[3,1]},{[1,2],[2,2],[3,2]}},{1,2}]),
  assert(f([3,3],0) = [{},{},{1,2}]),
  assert(f([3,3],1) = [{1},{},{1,2}]),
  assert(f([3,3],2) = [{1,2},{},{1,2}]),
  assert(f([3,3],3) = [{1,2,3},{{[1,1],[2,1],[3,1]},{[1,2],[2,2],[3,2]}},{1,2}]),
  assert(f([3,3],4) = [{1,2,3,4},{{[1,1],[2,1],[3,1]},{[1,2],[2,2],[3,2]},{[2,1],[3,1],[4,1]},{[2,2],[3,2],[4,2]}},{1,2}]),
  assert(f([3,3,3],0) = [{},{},{1,2,3}]),
  assert(f([3,3,3],1) = [{1},{},{1,2,3}]),
  assert(f([3,3,3],2) = [{1,2},{},{1,2,3}]),
  assert(f([3,3,3],3) = [{1,2,3},{{[1,1],[2,1],[3,1]},{[1,2],[2,2],[3,2]},{[1,3],[2,3],[3,3]}},{1,2,3}]),
  assert(f([1,3,3,3],3) = [{1,2,3},{{[1,1]},{[2,1]},{[3,1]},{[1,2],[2,2],[3,2]},{[1,3],[2,3],[3,3]},{[1,4],[2,4],[3,4]}},{1,2,3,4}]),
  true)$

okltest_vanderwaerden_aloamo_fcl(f) := (
  assert(f([],0) = [[],[]]),
  for k : 0 thru 5 do
    assert(f([k],0) = [[], if k=0 then [{}] else []]),
  for n : 0 thru 5 do
    assert(f([],n) = [[], create_list({},i,1,n)]),
  assert(f([3,3],3) = [[nbv(1,1),nbv(1,2),nbv(2,1),nbv(2,2),nbv(3,1),nbv(3,2)], [{-nbv(1,1),-nbv(2,1),-nbv(3,1)},{-nbv(1,2),-nbv(2,2),-nbv(3,2)},{nbv(1,1),nbv(1,2)},{nbv(2,1),nbv(2,2)},{nbv(3,1),nbv(3,2)},{-nbv(1,1),-nbv(1,2)},{-nbv(2,1),-nbv(2,2)},{-nbv(3,1),-nbv(3,2)}]]),
  assert(okltest_vanderwaerden_aloamo_fcs(buildq([f],lambda([L,n],fcl2fcs(f(L,n))))) = true),
  assert(okltest_vanderwaerden_aloamo_stdfcl(buildq([f],lambda([L,n],standardise_fcl(f(L,n))[1])))),
  /* XXX */
  true)$

okltest_vanderwaerden_aloamo_fcs(f) := (
  assert(f([],0) = [{},{}]),
  for k : 0 thru 5 do
    assert(f([k],0) = [{}, if k=0 then {{}} else {}]),
  for n : 0 thru 5 do
    assert(f([],n) = [{}, if n=0 then {} else {{}}]),
  assert(f([3,3],3) = [{nbv(1,1),nbv(1,2),nbv(2,1),nbv(2,2),nbv(3,1),nbv(3,2)}, {{-nbv(1,1),-nbv(2,1),-nbv(3,1)},{-nbv(1,2),-nbv(2,2),-nbv(3,2)},{nbv(1,1),nbv(1,2)},{nbv(2,1),nbv(2,2)},{nbv(3,1),nbv(3,2)},{-nbv(1,1),-nbv(1,2)},{-nbv(2,1),-nbv(2,2)},{-nbv(3,1),-nbv(3,2)}}]),
  /* XXX */
  true)$

okltest_vanderwaerden_aloamo_stdfcl(f) := (
    assert(f([],0) = [[],[]]),
  for k : 0 thru 5 do
    assert(f([k],0) = [[], if k=0 then [{}] else []]),
  for n : 0 thru 5 do
    assert(f([],n) = [[], create_list({},i,1,n)]),
  assert(okltest_vanderwaerden_aloamo_stdfcs(buildq([f],lambda([L,n],fcl2fcs(f(L,n))))) = true),
  /* XXX */
  true)$

okltest_vanderwaerden_aloamo_stdfcs(f) := (
  assert(f([],0) = [{},{}]),
  for k : 0 thru 5 do
    assert(f([k],0) = [{}, if k=0 then {{}} else {}]),
  for n : 0 thru 5 do
    assert(f([],n) = [{}, if n=0 then {} else {{}}]),
  /* XXX */
  true)$

okltest_standardise_vanderwaerden_aloamo(f) := block([s],
  for k : 0 thru 5 do
    s : f([k],0),
  for n : 0 thru 5 do
    s : f([],n),
  for n : 0 thru 5 do (
    s : f([1],n),
    for i : 1 thru n do
      assert(s(nbv(i,1)) = i)
  ),
  /* XXX */
  true)$

okltest_invstandardise_vanderwaerden_aloamo(f) := block([invs],
  for k : 0 thru 5 do
    invs : f([k],0),
  for n : 0 thru 5 do
    invs : f([],n),
  for n : 0 thru 5 do (
    invs : f([1],n),
    for i : 1 thru n do
      assert(invs(i) = nbv(i,1))
  ),
  /* XXX */
  true)$


/* *****************************************
   * Arithmetic progressions in the primes *
   *****************************************
*/

okltest_greentao2_fcs(f) := (
  assert(f(0,0) = [{},{{}}]),
  assertf((0,1) = [{2},{{}}]),
  assert(f(1,0) = [{},{}]),
  assert(f(1,1) = [{2},{{2},{-2}}]),
  assert(f(2,0) = [{},{}]),
  assert(f(2,1) = [{2},{}]),
  assert(f(2,2) = [{2,3},{{2,3},{-2,-3}}]),
  assert(f(2,3) = [{2,3,5},{{2,3},{2,5},{3,5},{-2,-3},{-2,-5},{-3,-5}}]),
  assert(f(3,0) = [{},{}]),
  assert(f(3,1) = [{2},{}]),
  assert(f(3,2) = [{2,3},{}]),
  assert(f(3,3) = [{2,3,5},{}]),
  assert(f(3,4) = [{2,3,5,7},{{3,5,7},{-3,-5,-7}}]),
  true)$

okltest_greentao2_sb_fcs(f) := (
  /* XXX */
  true)$

okltest_greentao2nd_fcs(f) := (
  okltest_greentao2_fcs(buildq([f], lambda([k,n], f(k,k,n)))),
  assert(f(3,4,5) = [{2,3,5,7,11}, {{3,5,7},{3,7,11}}]),
  assert(f(3,4,9) = [{2,3,5,7,11,13,17,19,23}, {{3,5,7},{3,7,11},{3,11,19},{3,13,23},{5,11,17},{7,13,19},{11,17,23},{-5,-11,-17,-23}}]),
  true)$

okltest_greentao_nbfcsud(f) := (
    assert(f([],0) = [{},{},{}]),
  assert(f([],1) = [{2},{},{}]),
  assert(f([],2) = [{2,3},{},{}]),
  assert(f([1],0) = [{},{},{1}]),
  assert(f([1],1) = [{2},{{[2,1]}},{1}]),
  assert(f([1],2) = [{2,3},{{[2,1]},{[3,1]}},{1}]),
  assert(f([1,1],0) = [{},{},{1,2}]),
  assert(f([1,1],1) = [{2},{{[2,1]},{[2,2]}},{1,2}]),
  assert(f([1,1],2) = [{2,3},{{[2,1]},{[2,2]},{[3,1]},{[3,2]}},{1,2}]),
  assert(f([2],0) = [{},{},{1}]),
  assert(f([2],1) = [{2},{},{1}]),
  assert(f([2],2) = [{2,3},{{[2,1],[3,1]}},{1}]),
  assert(f([1,2,3],3) = [{2,3,5}, {
   {[2,1]},{[3,1]},{[5,1]},
   {[2,2],[3,2]},{[2,2],[5,2]},{[3,2],[5,2]}}, {1,2,3}]),
  assert(f([1,1,2,2,3,3],4) = [{2,3,5,7}, {
   {[2,1]},{[3,1]},{[5,1]},{[7,1]},
   {[2,2]},{[3,2]},{[5,2]},{[7,2]},
   {[2,3],[3,3]},{[2,3],[5,3]},{[2,3],[7,3]},{[3,3],[5,3]},{[3,3],[7,3]},{[5,3],[7,3]},
   {[2,4],[3,4]},{[2,4],[5,4]},{[2,4],[7,4]},{[3,4],[5,4]},{[3,4],[7,4]},{[5,4],[7,4]},
   {[3,5],[5,5],[7,5]},
   {[3,6],[5,6],[7,6]}
  }, {1,2,3,4,5,6}]),
  /* XXX */
  true)$

okltest_greentao_sb_fcs(f) := (
  assert(f([],2) = [{},{{}}]),
  assert(f([],3) = [{},{{}}]),
  assert(f([1],2) = [{nbv(2,1),nbv(3,1)},{{-nbv(2,1)},{-nbv(3,1)},{nbv(2,1)},{nbv(3,1)}}]),
  assert(f([1,1],2) = [
 {nbv(2,1),nbv(3,1),nbv(2,2),nbv(3,2)},
 {{-nbv(2,1)},{-nbv(3,1)}, {-nbv(2,2)},{-nbv(3,2)},
  {nbv(2,1),nbv(2,2)},{nbv(3,1),nbv(3,2)},
  {-nbv(2,1),-nbv(2,2)},{-nbv(3,1),-nbv(3,2)}, 
  {nbv(3,1)}}]),
  assert(f([1,1,2,2],2) = [
 {nbv(2,1),nbv(3,1),nbv(2,2),nbv(3,2),nbv(2,3),nbv(3,3),nbv(2,4),nbv(3,4)},
 {{-nbv(2,1)},{-nbv(3,1)}, {-nbv(2,2)},{-nbv(3,2)},
  {-nbv(2,3),-nbv(3,3)}, {-nbv(2,4),-nbv(3,4)},
  {nbv(2,1),nbv(2,2),nbv(2,3),nbv(2,4)},{nbv(3,1),nbv(3,2),nbv(3,3),nbv(3,4)},
 {-nbv(2,1),-nbv(2,2)},{-nbv(2,1),-nbv(2,3)},{-nbv(2,1),-nbv(2,4)},{-nbv(2,2),-nbv(2,3)},{-nbv(2,2),-nbv(2,4)},{-nbv(2,3),-nbv(2,4)},
 {-nbv(3,1),-nbv(3,2)},{-nbv(3,1),-nbv(3,3)},{-nbv(3,1),-nbv(3,4)},{-nbv(3,2),-nbv(3,3)},{-nbv(3,2),-nbv(3,4)},{-nbv(3,3),-nbv(3,4)},
 {nbv(3,1),nbv(3,3)}}]),
  /* XXX */
  true)$

okltest_greentaod_nbfcsud(f) := (
  /* XXX */
  true)$

okltest_greentaod_sb_nbfcsud(f) := (
  /* XXX */
  true)$


/*!
\endhtmlonly
*/
