/* Oliver Kullmann, 1.2.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/tests/Generators.mac
  \brief Tests for clause-set-generators

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/tests/Generators.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$

kill(f)$

/* ********************
   * Full clause-sets *
   ********************
*/

okltest_full_fcs_v(f) := (
  assert(f([]) = [{},{{}}]),
  assert(f({}) = [{},{{}}]),
  assert(f([1,3]) = [{1,3},{{-1,-3},{1,-3},{-1,3},{1,3}}]),
  assert(f({1,3,5}) = [{1,3,5},{{-1,-3,-5},{1,-3,-5},{-1,3,-5},{1,3,-5},{-1,-3,5},{1,-3,5},{-1,3,5},{1,3,5}}]),
  assert(okltest_full_fcs(buildq([f], lambda([n], f(setn(n))))) = true),
  true)$

okltest_full_cs_v(f) := (
  assert(f([]) = {{}}),
  assert(f({}) = {{}}),
  assert(okltest_full_fcs_v(buildq([f], lambda([V], cs2fcs(f(V))))) = true),
  true)$

okltest_full_fcl_v(f) := (
  assert(f([]) = [[],[{}]]),
  assert(f([1,2]) = [[1,2],[{-1,-2},{-1,2},{1,-2},{1,2}]]),
  assert(f({1,2}) = [[1,2],[{-1,-2},{-1,2},{1,-2},{1,2}]]),
  assert(f([3,1]) = [[3,1],[{-1,-3},{1,-3},{-1,3},{1,3}]]),
  assert(okltest_full_fcs_v(buildq([f], lambda([V], fcl2fcs(f(V))))) = true),
  assert(okltest_full_cl_v(buildq([f], lambda([V], fcl2cl(f(V))))) = true),
  true)$

okltest_full_cl_v(f) := (
  assert(f([]) = [{}]),
  assert(f([2,3,4]) = [{-2,-3,-4},{-2,-3,4},{-2,3,-4},{-2,3,4},{2,-3,-4},{2,-3,4},{2,3,-4},{2,3,4}]),
  assert(okltest_full_cs_v(buildq([f], lambda([V], cl2cs(f(V))))) = true),
  true)$

okltest_full_fcs(f) := (
  assert(f(0) = [{},{{}}]),
  assert(f(1) = [{1},{{-1},{1}}]),
  assert(f(2) = [{1,2},{{-1,-2},{-1,2},{1,-2},{1,2}}]),
  true)$

okltest_full_cs(f) := (
  assert(f(0) = {{}}),
  assert(okltest_full_fcs(buildq([f], lambda([n], [setn(n),f(n)]))) = true),
  true)$

okltest_full_fcl(f) := (
  assert(f(0) = [[],[{}]]),
  assert(okltest_full_fcs(buildq([f], lambda([n], fcl2fcs(f(n))))) = true),
  true)$

okltest_full_cl(f) := (
  assert(f(0) = [{}]),
  assert(okltest_full_fcl(buildq([f], lambda([n], [create_list(i,i,1,n),f(n)]))) = true),
  true)$

okltest_nvar_full_fcs(f) := block(
 for n : 0 thru 4 do
   assert(f(n) = nvar_f(full_fcs(n))),
 true)$

okltest_ncl_list_full_fcs(f) := block(
 for n : 0 thru 4 do
   assert(f(n) = ncl_list_fcs(full_fcs(n))),
 true
)$

okltest_ncl_full_fcs(f) := block(
 for n : 0 thru 4 do
   assert(f(n) = ncl_fcs(full_fcs(n))),
 true
)$

okltest_deficiency_full_fcs(f) := block(
 for n : 0 thru 4 do
   assert(f(n) = deficiency_fcs(full_fcs(n))),
 true
)$


/* ***********************
   * Pigeonhole formulas *
   ***********************
*/

/* Measures */

okltest_nvar_php(f) := block(
 for m : 0 thru 6 do
  for n : 0 thru 6 do
   assert(f(m,n) = nvar_f(weak_php(m,n))),
 true)$

okltest_ncl_list_weak_php(f) := block(
 for m : 0 thru 6 do
  for n : 0 thru 6 do
   assert(f(m,n) = ncl_list_fcs(weak_php(m,n))),
 true
)$

okltest_ncl_weak_php(f) := block(
 for m : 0 thru 6 do
  for n : 0 thru 6 do
   assert(f(m,n) = ncl_fcs(weak_php(m,n))),
 true
)$

okltest_deficiency_weak_php(f) := block(
 for m : 0 thru 6 do
  for n : 0 thru 6 do
   assert(f(m,n) = deficiency_fcs(weak_php(m,n))),
 true
)$

/* Extended Resolution */

okltest_php_induction_step_cl(f) := block(
  for i in [0,1] do
      assert(f(i) = []),
  assert(f(2) =
    [{php_ext(2,1,1),-php_ext(3,1,1)},{php_ext(2,1,1),-php_ext(3,1,2),
     -php_ext(3,3,1)},{-php_ext(2,1,1),php_ext(3,1,1),php_ext(3,1,2)},
     {-php_ext(2,1,1),php_ext(3,1,1),php_ext(3,3,1)},{php_ext(2,2,1),
     -php_ext(3,2,1)},{php_ext(2,2,1),-php_ext(3,2,2),-php_ext(3,3,1)},
     {-php_ext(2,2,1),php_ext(3,2,1),php_ext(3,2,2)},{-php_ext(2,2,1),
     php_ext(3,2,1),php_ext(3,3,1)}]),
  true)$

okltest_php_induction_cl(f) := block(
  for i in [0,1,2] do
    assert(f(i) = []),
  assert(f(3) =
    [{php_ext(2,1,1),-php(1,1)},{php_ext(2,1,1),-php(1,2),-php(3,1)},
     {-php_ext(2,1,1),php(1,1),php(1,2)},{-php_ext(2,1,1),php(1,1),php(3,1)},
     {php_ext(2,2,1),-php(2,1)},{php_ext(2,2,1),-php(2,2),-php(3,1)},
     {-php_ext(2,2,1),php(2,1),php(2,2)},{-php_ext(2,2,1),php(2,1),php(3,1)}]),
  true)$

okltest_weak_php_unsat_ext_fcs(f) := block(
  for i in [1,2] do
    assert(f(i) = weak_php_fcs(i,i-1)),
  assert(f(3) =
    [{php(1,1),php(1,2),php(2,1),php_ext(2,1,1),php(2,2),php_ext(2,2,1),
      php(3,1),php(3,2)},
     {{-php(1,1),-php(2,1)},{-php(1,1),php_ext(2,1,1)},{-php(1,1),-php(3,1)},
      {php(1,1),php(1,2)},{php(1,1),php(1,2),-php_ext(2,1,1)},
      {php(1,1),-php_ext(2,1,1),php(3,1)},{-php(1,2),php_ext(2,1,1),-php(3,1)},
      {-php(1,2),-php(2,2)},{-php(1,2),-php(3,2)},{-php(2,1),php_ext(2,2,1)},
      {-php(2,1),-php(3,1)},{php(2,1),php(2,2)},{php(2,1),php(2,2),
       -php_ext(2,2,1)}, {php(2,1),-php_ext(2,2,1),php(3,1)},{-php(2,2),
       php_ext(2,2,1),-php(3,1)},{-php(2,2),-php(3,2)},{php(3,1),php(3,2)}}]),
  true)$


/* ************************
   * Parity formulas      *
   ************************
*/


okltest_even_parity_cl(f) := block(
  assert(f(0) = []),
  assert(f(1) = [{-1}]),
  assert(f(2) = [{-2,1},{-1,2}]),
  true)$

okltest_odd_parity_cl(f) := block(
  assert(f(0) = [{}]),
  assert(f(1) = [{1}]),
  assert(f(2) = [{-1,-2},{2,1}]),
  true)$


/* ************************
   * Matrix formulas      *
   ************************
*/


okltest_boolm_mul2cnf_fcl(f) := block(
  assert(f(matrix()) = [[],[]]),
  assert(f(matrix([1])) = [[1,2],[{1,-2},{-1,2}]]),
  assert(f(matrix([1,0],[0,1])) =
      [[1,2,3,4],[{-3,1,2},{-2,1,3},{-1,2,3},{-3,-2,-1},{-4,1,2},{-2,1,4},
       {-1,2,4},{-4,-2,-1}]]),
  assert(f(matrix([1,1],[1,1])) =
    [[1,2,3,4],[{-3,1,2},{-2,1,3},{-1,2,3},{-3,-2,-1},{-4,1,2},{-2,1,4},
     {-1,2,4},{-4,-2,-1}]]),
  assert(f(matrix([1,1,1])) =
    [[1,2,3,4],
        [{-4,1,2,3},{-3,1,2,4},{-2,1,3,4},{-4,-3,-2,1},{-1,2,3,4},
         {-4,-3,-1,2},{-4,-2,-1,3},{-3,-2,-1,4}]]),
  true)$

okltest_boolm_mul2cnf_wv_fcl(f) := block(
  assert(okltest_boolm_mul2cnf_fcl(
      buildq([f], lambda([m],
          f(m, create_list(i,i,1,length(matrixcolumns(m))+length(m))))))),
  assert(f(matrix([1,0],[0,1]),[5,6,7,8]) =
      [[5,6,7,8],[{-7,5,6},{-6,5,7},{-5,6,7},{-7,-6,-5},{-8,5,6},{-6,5,8},
       {-5,6,8},{-8,-6,-5}]]),
  true)$


/*!
\endhtmlonly
*/
