/* Oliver Kullmann, 1.2.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/tests/Generators.mac
  \brief Tests for clause-set-generators

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/tests/Generators.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$

kill(f)$

/* ********************
   * Full clause-sets *
   ********************
*/

/* Measures */

okltest_full_fcs(f) := (
  assert(f(0) = [{},{{}}]),
  assert(f(1) = [{1},{{-1},{1}}]),
  assert(f(2) = [{1,2},{{-1,-2},{-1,2},{1,-2},{1,2}}]),
  true)$

okltest_nvar_full_fcs(f) := block(
 for n : 0 thru 4 do
   assert(f(n) = nvar_f(full_fcs(n))),
 true)$

okltest_ncl_list_full_fcs(f) := block(
 for n : 0 thru 4 do
   assert(f(n) = ncl_list_f(full_fcs(n))),
 true
)$

okltest_ncl_full_fcs(f) := block(
 for n : 0 thru 4 do
   assert(f(n) = ncl_f(full_fcs(n))),
 true
)$

okltest_deficiency_full_fcs(f) := block(
 for n : 0 thru 4 do
   assert(f(n) = deficiency_fcs(full_fcs(n))),
 true
)$


/* ***********************
   * Pigeonhole formulas *
   ***********************
*/

/* Measures */

okltest_nvar_php(f) := block(
 for m : 0 thru 6 do
  for n : 0 thru 6 do
   assert(f(m,n) = nvar_f(weak_php(m,n))),
 true)$

okltest_ncl_list_weak_php(f) := block(
 for m : 0 thru 6 do
  for n : 0 thru 6 do
   assert(f(m,n) = ncl_list_f(weak_php(m,n))),
 true
)$

okltest_ncl_weak_php(f) := block(
 for m : 0 thru 6 do
  for n : 0 thru 6 do
   assert(f(m,n) = ncl_f(weak_php(m,n))),
 true
)$

okltest_deficiency_weak_php(f) := block(
 for m : 0 thru 6 do
  for n : 0 thru 6 do
   assert(f(m,n) = deficiency_fcs(weak_php(m,n))),
 true
)$


/* ********************
   * Ramsey's problem *
   ********************
*/

okltest_ramsey2_ofcs(f) := (
  assert(f(0,0,0) = [[colv({})], [{colv({})},{-colv({})}]]),
  assert(f(1,0,0) = [[colv({})], []]),
  assert(f(0,1,0) = [[], []]),
  assert(f(0,0,1) = [[colv({})], [{colv({})},{-colv({})}]]),
  true)$


/* **************************************************
   * Translated minimally unsatisfiable clause-sets *
   **************************************************
*/

okltest_usat_musat_repo_sat() := [
 [{},{}],
 [{1},{{-1}}],
 [{1},{{1}}],
 [{1,2},{{1},{2}}]
]$

okltest_usat_musat_repo_usat() := [
 [{},{{}}],
 [{1},{{1},{-1}}],
 [{1},{{},{1}}],
 [{1},{{},{1},{-1}}]
]$

okltest_n_var_usat_musat(f) := block(
  for FF in okltest_usat_musat_repo_sat() do
    assert(f(FF) = nvar_f(usat_musat(FF))),
  for FF in okltest_usat_musat_repo_Usat() do
    assert(f(FF) = nvar_f(usat_musat(FF))),
  for n : 0 thru 3 do block([FF : full_fcs(n)],
    assert(f(FF) = nvar_f(usat_musat(FF)))),
  true)$

okltest_n_cl_usat_musat(f) := block(
  for FF in okltest_usat_musat_repo_sat() do
    assert(f(FF) = ncl_f(usat_musat(FF))),
  for FF in okltest_usat_musat_repo_usat() do
    assert(f(FF) = ncl_f(usat_musat(FF))),
  for n : 0 thru 3 do block([FF : full_fcs(n)],
    assert(f(FF) = ncl_f(usat_musat(FF)))),
  true)$

okltest_deficiency_usat_musat(f) := block(
  for FF in okltest_usat_musat_repo_sat() do
    assert(f(FF) = deficiency_fcs(usat_musat(FF))),
  for FF in okltest_usat_musat_repo_usat() do
    assert(f(FF) = deficiency_fcs(usat_musat(FF))),
  for n : 0 thru 3 do block([FF : full_fcs(n)],
    assert(f(FF) = deficiency_fcs(usat_musat(FF)))),
  true)$

okltest_ncl_list_usat_musat(f) := block(
  for FF in okltest_usat_musat_repo_sat() do
    assert(f(FF) = ncl_list_f(usat_musat(FF))),
  for FF in okltest_usat_musat_repo_Usat() do
    assert(f(FF) = ncl_list_f(usat_musat(FF))),
  for n : 0 thru 3 do block([FF : full_fcs(n)],
    assert(f(FF) = ncl_list_f(usat_musat(FF)))),
  true)$

okltest_n_var_sat_musat(f) := block(
  for FF in okltest_sat_musat_repo_sat() do
    assert(f(FF) = nvar_f(sat_musat(FF))),
  for FF in okltest_sat_musat_repo_Usat() do
    assert(f(FF) = nvar_f(sat_musat(FF))),
  for n : 0 thru 3 do block([FF : full_fcs(n)],
    assert(f(FF) = nvar_f(sat_musat(FF)))),
  true)$

okltest_n_cl_sat_musat(f) := block(
  for FF in okltest_sat_musat_repo_sat() do
    assert(f(FF) = ncl_f(sat_musat(FF))),
  for FF in okltest_sat_musat_repo_usat() do
    assert(f(FF) = ncl_f(sat_musat(FF))),
  for n : 0 thru 3 do block([FF : full_fcs(n)],
    assert(f(FF) = ncl_f(sat_musat(FF)))),
  true)$

okltest_deficiency_sat_musat(f) := block(
  for FF in okltest_sat_musat_repo_sat() do
    assert(f(FF) = deficiency_fcs(sat_musat(FF))),
  for FF in okltest_sat_musat_repo_usat() do
    assert(f(FF) = deficiency_fcs(sat_musat(FF))),
  for n : 0 thru 3 do block([FF : full_fcs(n)],
    assert(f(FF) = deficiency_fcs(sat_musat(FF)))),
  true)$

okltest_ncl_list_sat_musat(f) := block(
  for FF in okltest_sat_musat_repo_sat() do
    assert(f(FF) = ncl_list_f(sat_musat(FF))),
  for FF in okltest_sat_musat_repo_Usat() do
    assert(f(FF) = ncl_list_f(sat_musat(FF))),
  for n : 0 thru 3 do block([FF : full_fcs(n)],
    assert(f(FF) = ncl_list_f(sat_musat(FF)))),
  true)$


/*!
\endhtmlonly
*/
