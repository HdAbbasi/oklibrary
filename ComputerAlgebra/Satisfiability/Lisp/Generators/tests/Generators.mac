/* Oliver Kullmann, 1.2.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011, 2013, 2018 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/tests/Generators.mac
  \brief Tests for clause-set-generators

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/tests/Generators.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac")$

kill(f)$


/* ********************
   * Full clause-sets *
   ********************
*/

okltest_full_fcs_v(f) := (
  assert(f([]) = [{},{{}}]),
  assert(f({}) = [{},{{}}]),
  assert(f([1,3]) = [{1,3},{{-1,-3},{1,-3},{-1,3},{1,3}}]),
  assert(f({1,3,5}) = [{1,3,5},{{-1,-3,-5},{1,-3,-5},{-1,3,-5},{1,3,-5},{-1,-3,5},{1,-3,5},{-1,3,5},{1,3,5}}]),
  assert(okltest_full_fcs(buildq([f], lambda([n], f(setn(n))))) = true),
  true)$

okltest_full_cs_v(f) := (
  assert(f([]) = {{}}),
  assert(f({}) = {{}}),
  assert(okltest_full_fcs_v(buildq([f], lambda([V], cs2fcs(f(V))))) = true),
  true)$

okltest_full_fcl_v(f) := (
  assert(f([]) = [[],[{}]]),
  assert(f([1,2]) = [[1,2],[{-1,-2},{-1,2},{1,-2},{1,2}]]),
  assert(f({1,2}) = [[1,2],[{-1,-2},{-1,2},{1,-2},{1,2}]]),
  assert(f([3,1]) = [[3,1],[{-1,-3},{1,-3},{-1,3},{1,3}]]),
  assert(okltest_full_fcs_v(buildq([f], lambda([V], fcl2fcs(f(V))))) = true),
  assert(okltest_full_cl_v(buildq([f], lambda([V], fcl2cl(f(V))))) = true),
  true)$

okltest_full_cl_v(f) := (
  assert(f([]) = [{}]),
  assert(f([2,3,4]) = [{-2,-3,-4},{-2,-3,4},{-2,3,-4},{-2,3,4},{2,-3,-4},{2,-3,4},{2,3,-4},{2,3,4}]),
  assert(okltest_full_cs_v(buildq([f], lambda([V], cl2cs(f(V))))) = true),
  true)$

okltest_full_fcs(f) := (
  assert(f(0) = [{},{{}}]),
  assert(f(1) = [{1},{{-1},{1}}]),
  assert(f(2) = [{1,2},{{-1,-2},{-1,2},{1,-2},{1,2}}]),
  true)$

okltest_full_cs(f) := (
  assert(f(0) = {{}}),
  assert(okltest_full_fcs(buildq([f], lambda([n], [setn(n),f(n)]))) = true),
  true)$

okltest_full_fcl(f) := (
  assert(f(0) = [[],[{}]]),
  assert(okltest_full_fcs(buildq([f], lambda([n], fcl2fcs(f(n))))) = true),
  true)$

okltest_full_cl(f) := (
  assert(f(0) = [{}]),
  assert(okltest_full_fcl(buildq([f], lambda([n], [create_list(i,i,1,n),f(n)]))) = true),
  true)$

okltest_nvar_full_fcs(f) := block(
 for n : 0 thru 4 do
   assert(f(n) = nvar_f(full_fcs(n))),
 true)$

okltest_ncl_list_full_fcs(f) := block(
 for n : 0 thru 4 do
   assert(f(n) = ncl_list_fcs(full_fcs(n))),
 true
)$

okltest_ncl_full_fcs(f) := block(
 for n : 0 thru 4 do
   assert(f(n) = ncl_fcs(full_fcs(n))),
 true
)$

okltest_deficiency_full_fcs(f) := block(
 for n : 0 thru 4 do
   assert(f(n) = deficiency_fcs(full_fcs(n))),
 true
)$


/* ***********************************
   * All clauses of a certain length *
   ***********************************
*/

okltest_all_bin_cs(f) := (
  assert(f(-1) = {{}}),
  assert(f(0) = {{}}),
  assert(f(1) = {{},{1},{-1}}),
  assert(f(2) = {{},{1},{-1},{2},{-2},{1,2},{-1,2},{1,-2},{-1,-2}}),
  true)$

okltest_all_clauses_cs(f) := (
  assert(okltest_all_bin_cs(buildq([f], lambda([n], f(n,2)))) = true),
  assert(okltest_full_cs(buildq([f], lambda([n], setdifference(f(n,n), f(n,n-1))))) = true),
  true)$


/* ********************
   * Order principles *
   ********************
*/

okltest_gt_var(f) := block([x,y].
  assert(f(x,y) = gt(x,y)),
  true)$

okltest_var_ordergt(f) := (
  assert(f(0) = []),
  assert(f(1) = []),
  assert(f(2) = [gt(1,2),gt(2,1)]),
  assert(f(3) = [gt(1,2),gt(2,1),gt(1,3),gt(3,1),gt(2,3),gt(3,2)]),
  true)$

okltest_ordergt_transitivity_ocs(f) := (
  assert(f(0) = []),
  assert(f(1) = []),
  assert(f(2) = []),
  assert(f(3) = [{-gt(1,2),-gt(2,3),gt(1,3)},{-gt(1,3),-gt(3,2),gt(1,2)},{-gt(2,1),-gt(1,3),gt(2,3)},{-gt(2,3),-gt(3,1),gt(2,1)},{-gt(3,1),-gt(1,2),gt(3,2)},{-gt(3,2),-gt(2,1),gt(3,1)}]),
  true)$

okltest_ordergt_nocycles_ocs(f) := (
  assert(f(0) = []),
  assert(f(1) = []),
  assert(f(2) = [{-gt(1,2),-gt(2,1)}]),
  assert(f(3) = [{-gt(1,2),-gt(2,1)},{-gt(1,3),-gt(3,1)},{-gt(2,3),-gt(3,2)}]),
  true)$

okltest_ordergt_nosource_ocs(f) := (
  assert(f(0) = []),
  assert(f(1) = [{}]),
  assert(f(2) = [{gt(2,1)},{gt(1,2)}]),
  assert(f(3) = [{gt(2,1),gt(3,1)},{gt(1,2),gt(3,2)},{gt(1,3),gt(2,3)}]),
  true)$

okltest_ordergt_ofcs(f) := (
  assert(f(0) = [[],[]]),
  assert(f(1) = [[],[{}]]),
  assert(f(2) = [[gt(1,2),gt(2,1)],[{-gt(1,2),-gt(2,1)},{gt(2,1)},{gt(1,2)}]]),
  true)$

/*!
\endhtmlonly
*/
