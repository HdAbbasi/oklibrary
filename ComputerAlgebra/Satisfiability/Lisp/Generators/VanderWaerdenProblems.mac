/* Oliver Kullmann, 20.9.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/VanderWaerdenProblems.mac
  \brief %Generators for clause-sets related to Van der Waerden problems

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/VanderWaerdenProblems.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Colouring.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Constructions.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/NonBooleanTranslations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/NonBoolean.mac")$


/* **************************************************
   * Arithmetic progressions in the natural numbers *
   **************************************************
*/

/* Boolean formal clause-sets, whose solutions are the partitionings of 
   {1,...,n} into two parts such that none of them contains an arithmetic 
   progression of size k. */
/* (We are using "trivially generalised partitionings here, where the
    parts can be empty.) */
vanderwaerden2_fcs(k,n) := tcol2sat_stdhg2stdfcs(arithprog_hg(k,n))$
/* The general non-diagonal form (the above case has k=k1=k2): */
vanderwaerden2nd_fcs(k1,k2,n) := union_hg(comp_fcs(arithprog_hg(k1,n)),arithprog_hg(k2,n))$
/* Now the general form, where L is a vdW-parameter-tuple: */
vanderwaerden_nbfcsud(L,n) := 
 if emptyp(L) then [setn(n),{},{}] else
  nbfclud2nbfcsud(gcol2sat_stdohg2stdnbfclud(
   map(lambda([k], arithprog_ohg(k,n)), L),
   create_list(i,i,1,length(L))
  ))$

output_vanderwaerden2(k,n,filename) := 
  output_fcs(
    sconcat("Van der Waerden problem: 2 parts, arithmetic progressions of size ", k, ", and ", n, " elements."), 
    vanderwaerden2_fcs(k,n),
    filename)$
/* Providing a standard name: "VanDerWaerden_2-k-k_n.cnf": */
output_vanderwaerden2_stdname(k,n) := output_vanderwaerden2(k,n,
  sconcat("VanDerWaerden_2-",k,"-",k,"_",n,".cnf"))$

output_vanderwaerden2nd(k1,k2,n,filename) := 
  output_fcs(
    sconcat("Van der Waerden problem: 2 parts, arithmetic progressions of size ", k1, " and ", k2, ", and ", n, " elements."), 
    vanderwaerden2nd_fcs(k1,k2,n),
    filename)$
/* Providing a standard name: "VanDerWaerden_2-k1-k2_n.cnf": */
output_vanderwaerden2nd_stdname(k1,k2,n) := output_vanderwaerden2nd(k1,k2,n,
  sconcat("VanDerWaerden_2-",k1,"-",k2,"_",n,".cnf"))$

output_vanderwaerden(L,n,filename) := block(
 [FF : standardise_fcs(nbfcsfd2fcs_aloamo(nbfcsud2nbfcsfd(vanderwaerden_nbfcsud(L,n))))],
  output_fcs_v(
    sconcat("Van der Waerden problem: ", length(L), " parts with arithmetic progressions of sizes ", L, ", and ", n, " elements."), 
    FF[1],
    filename,
    FF[2]))$
output_vanderwaerden_stdname(L,n) := output_vanderwaerden(L,n,
  sconcat("VanDerWaerden_",length(L),apply(sconcat,map(sconcat,create_list("-",i,1,length(L)),L)),"_",n,".cnf"))$


/* *****************************************
   * Arithmetic progressions in the primes *
   *****************************************
*/

/* Boolean formal clause-sets, whose solutions are the partitionings of 
   the set of the first n prime numbers into two parts such that none of them 
   contains an arithmetic progression of size k.
   The variables are the first n prime numbers.
*/
greentao2_fcs(k,n) := tcol2sat_stdhg2stdfcs(arithprog_primes_hg(k,n))$

/* More generally, create boolean formal clause-sets encoding the 
   partitionings of the first n prime numbers into two parts such that the
   first part (value 0) does not contain an arithmetic progression of size k1,
   whiel the second part (value 1) does not contain an arithmetic progression
   of size k2 ("nd" for "non-diagonal"):
*/
greentao2nd_fcs(k1,k2,n) := block(
 [G1 : arithprog_primes_hg(k1,n), G2 : arithprog_primes_hg(k2,n)],
  [G1[1], union(G1[2], comp_cs(G2[2]))])$

/* Output in Dimacs format (together with statistics and variable meanings):
*/

output_greentao2(k,n,filename) := block(
 [FFGT : standardise_fcs(greentao2_fcs(k,n))],
  output_fcs_v(
    sconcat("Green-Tao problem (diagonal form), 
c created by the OKlibrary at ", timedate(),":
c 2 parts, arithmetic progressions of size ", k, ", and ", n, " prime numbers.
", standard_statistics_fcs(FFGT[1]), "
c Variables and associated prime numbers:"), 
    FFGT[1],
    filename,
    FFGT[2]))$
/* Providing a standard name: "GreenTao_2-k-k_n.cnf": */
output_greentao2_stdname(k,n) := output_greentao2(k,n,
  sconcat("GreenTao_2-",k,"-",k,"_",n,".cnf"))$

output_greentao2nd(k1,k2,n,filename) := block(
 [FFGT : standardise_fcs(greentao2nd_fcs(k1,k2,n))],
  output_fcs_v(
    sconcat("Green-Tao problem (non-diagonal form),
c created by the OKlibrary at ", timedate(),": 
c 2 parts, arithmetic progressions of size ", k1, " and ", k2, ", and ", n, " prime numbers.
", standard_statistics_fcs(FFGT[1]), "
c Variables and associated prime numbers:"), 
    FFGT[1],
    filename,
    FFGT[2]))$
/* Providing a standard name: "GreenTao_2-k1-k2_n.cnf": */
output_greentao2nd_stdname(k1,k2,n) := output_greentao2nd(k1,k2,n,
  sconcat("GreenTao_2-",k1,"-",k2,"_",n,".cnf"))$


/*!
\endhtmlonly
*/
