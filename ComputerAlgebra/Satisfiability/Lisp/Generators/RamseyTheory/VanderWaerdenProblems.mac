/* Oliver Kullmann, 20.9.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/RamseyTheory/VanderWaerdenProblems.mac
  \brief %Generators for clause-sets related to Van der Waerden problems

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/RamseyTheory/VanderWaerdenProblems.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/GreenTao.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Colouring.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Constructions.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/NonBooleanTranslations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/NonBoolean.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* **************************************************
   * Arithmetic progressions in the natural numbers *
   **************************************************
*/

/* Boolean formal clause-sets, whose solutions are the partitionings of 
   {1,...,n} into two parts such that none of them contains an arithmetic 
   progression of size k. */
/* (We are using "trivially generalised partitionings here, where the
    parts can be empty.) */
/* Prerequisites: k, n natural numbers >= 0. */
vanderwaerden2_fcs(k,n) := tcol2sat_stdhg2stdfcs(arithprog_hg(k,n))$
/* The general non-diagonal form (the above case has k=k1=k2). */
/* Prerequisites: k1, k2, n natural numbers >= 0. */
vanderwaerden2nd_fcs(k1,k2,n) := union_hg(comp_fcs(arithprog_hg(k1,n)),arithprog_hg(k2,n))$

/* Now the general form, where L is a vdW-parameter-tuple. */
/* Prerequisite: vanderwaerden_p(L) is true, n natural number >= 0. */
vanderwaerden_nbfclud(L,n) :=
 if emptyp(L) then [create_list(i,i,1,n),[],[]] else
  gcol2sat_stdohg2stdnbfclud(
   map(lambda([k], arithprog_ohg(k,n)), L),
   create_list(i,i,1,length(L)))$
vanderwaerden_nbfcsud(L,n) := nbfclud2nbfcsud(vanderwaerden_nbfclud(L,n))$


/* Translating the general forms into boolean clause-sets: */
vanderwaerden_aloamo_fcl(L,n) :=
  nbfclud2fcl_aloamo(vanderwaerden_nbfclud(L,n))$
vanderwaerden_aloamo_fcs(L,n) := fcl2fcs(vanderwaerden_aloamo_fcl(L,n))$

/* Standardising these boolean clause-sets: */
vanderwaerden_aloamo_stdfcl(L,n) := block([m : length(L)],
  [block([s : standardise_vanderwaerden_aloamo(L,n)],
     s(vanderwaerden_aloamo_fcl(L,n))),
   block([invs : invstandardise_vanderwaerden_aloamo(L,n)],
     create_list(invs(i), i,1,n*m))])$
/* We have vanderwaerden_aloamo_stdfcl(L,n) =
   standardise_fcl(vanderwaerden_aloamo_fcl(L,n)).
*/
vanderwaerden_aloamo_stdfcs(L,n) := block(
 [FF : vanderwaerden_aloamo_stdfcl(L,n)],
  [fcl2fcs(FF[1]), FF[2]])$

/* Computing translation functions for standardising resp. de-standardising
   terms resp. individual variables:
*/
standardise_vanderwaerden_aloamo(L,n) := block([m : length(L)],
  buildq([m], lambda([t], ev(t, nbv(v,i):=(v-1)*m+i, nbv))))$
invstandardise_vanderwaerden_aloamo(L,n) := block([m : length(L)],
  buildq([m], lambda([i], block([d : divide(i-1,m)+1],
    nbv_var(d[1], d[2])))))$


/* Statistics functions */

nvar_vanderwaerden2(k,n) := n$
nvar_vanderwaerden2nd(k1,k2,n) := n$
nvar_vanderwaerden(L,n) := n$
nvar_vanderwaerden_aloamo(L,n) := length(L)*n$
/* nvar_vanderwaerden_aloamo is also valid for the standardised forms. */

nhyp_vanderwaerden2_cs(k,n) := if k=0 then nhyp_arithprog_hg(0,n) 
 else 2 * nhyp_arithprog_hg(k,n)$
nhyp_vanderwaerden2nd_cs(k1,k2,n) := 
 if k1=0 and k2=0 then nhyp_arithprog_hg(0,n)
 else nhyp_arithprog_hg(k1,n) + nhyp_arithprog_hg(k2,n)$
nhyp_vanderwaerden_cl(L,n) := sum_l(create_list(nhyp_arithprog_hg(k,n),k,L))$
nhyp_vanderwaerden_cs(L,n) := sum_l(create_list(nhyp_arithprog_hg(k,n),k,L))$
nhyp_vanderwaerden_aloamo_cl(L,n) :=
  nhyp_vanderwaerden_cl(L,n) + n + n*binomial(length(L),2)$
nhyp_vanderwaerden_aloamo_cs(L,n) := block([l:length(L)],
  if l=0 then if n=0 then 0 else 1 else
  nhyp_vanderwaerden_cl(L,n) + n + n*binomial(l,2))$
/* These two functions are also valid for the standardised forms. */

/* Output functions */

output_vanderwaerden2(k,n,filename) := 
  output_fcs_v(
    sconcat("Van der Waerden problem: 2 parts, arithmetic progressions of size ", k, ", and ", n, " elements."), 
    vanderwaerden2_fcs(k,n),
    filename, [])$
/* Providing a standard name: "VanDerWaerden_2-k-k_n.cnf": */
output_vanderwaerden2_stdname(k,n) := output_vanderwaerden2(k,n,
  sconcat("VanDerWaerden_2-",k,"-",k,"_",n,".cnf"))$

output_vanderwaerden2nd(k1,k2,n,filename) := 
  output_fcs_v(
    sconcat("Van der Waerden problem: 2 parts, arithmetic progressions of size ", k1, " and ", k2, ", and ", n, " elements."), 
    vanderwaerden2nd_fcs(k1,k2,n),
    filename, [])$
/* Providing a standard name: "VanDerWaerden_2-k1-k2_n.cnf": */
output_vanderwaerden2nd_stdname(k1,k2,n) := output_vanderwaerden2nd(k1,k2,n,
  sconcat("VanDerWaerden_2-",k1,"-",k2,"_",n,".cnf"))$

/* Standardising the variables according to lexicographical order 
   nbv(1,1),...,nbv(1,m),nbv(2,1), ..., nbv(n,m):
*/
output_vanderwaerden(L,n,filename) := block(
 [FF : vanderwaerden_aloamo_stdfcl(L,n)],
  output_fcl_v(
    sconcat("Van der Waerden problem: ", length(L), " parts with arithmetic progressions of sizes ", L, ", and ", n, " elements."), 
    FF[1],
    filename,
    FF[2]))$
output_vanderwaerden_stdname(L,n) := output_vanderwaerden(L,n,
  sconcat("VanDerWaerden_",length(L),apply(sconcat,map(sconcat,create_list("-",i,1,length(L)),L)),"_",n,".cnf"))$


/* *****************************************
   * Arithmetic progressions in the primes *
   *****************************************
*/

/* Boolean formal clause-sets, whose solutions are the partitionings of 
   the set of the first n prime numbers into two parts such that none of them 
   contains an arithmetic progression of size k.
   The variables are the first n prime numbers.
*/
greentao2_fcs(k,n) := tcol2sat_stdhg2stdfcs(arithprog_primes_hg(k,n))$
/* Symmetry breaking for n >= 2, forcing prime 3 into the first block: */
greentao2_sb_fcs(k,n) := block([G : greentao2_fcs(k,n)],
 [G[1], adjoin({-3}, G[2])])$


/* More generally, create boolean formal clause-sets encoding the 
   partitionings of the first n prime numbers into two parts such that the
   first part (value 0) does not contain an arithmetic progression of size k1,
   whiel the second part (value 1) does not contain an arithmetic progression
   of size k2 ("nd" for "non-diagonal"):
*/
greentao2nd_fcs(k1,k2,n) := block(
 [G1 : arithprog_primes_hg(k1,n), G2 : arithprog_primes_hg(k2,n)],
  [G1[1], union(G1[2], comp_cs(G2[2]))])$
greentao2nd_fcl(k1,k2,n) := block(
 [G1 : arithprog_primes_ohg(k1,n), G2 : arithprog_primes_ohg(k2,n)],
  [G1[1], append(G1[2], comp_cs(G2[2]))])$

/* Now the general form, where L is a vdW-parameter-tuple: */
greentao_nbfcsud(L,n) := 
 if emptyp(L) then [setify(primes_first(n)),{},{}] else
 block([LG : [], old_k : 0, old_hg : []],
  for i : 1 thru length(L) do block([k : L[i]],
    if k > old_k then (
      old_hg : arithprog_primes_ohg(k,n),
      old_k : k
    ),
    LG : endcons(old_hg,LG)
  ),
  return(nbfclud2nbfcsud(
    gcol2sat_stdohg2stdnbfclud(LG,create_list(i,i,1,length(L))))))$

/* Symmetry breaking for n >= 2, forcing prime 3 into the first blocks
   of sections of equal progression lengths: */
greentao_sb_fcs(L,n) := block(
 [FF : nbfcsfd2fcs_aloamo(nbfcsud2nbfcsfd(greentao_nbfcsud(L,n))), 
  sbC : {}, old_k : 0],
  for i : 1 thru length(L) do block([k : L[i]],
    if k > old_k then (
      sbC : adjoin(nbv_var(3,i), sbC),
      old_k : k
  )),
  return([FF[1], adjoin(sbC,FF[2])]))$


/* The diagonal case (m parts, arithmetic progressions of size k): */
greentaod_nbfcsud(m,k,n) := 
 if m=0 then [setify(primes_first(n)),{},{}] else
 block([G : arithprog_primes_ohg(k,n)],
  nbfclud2nbfcsud(
    gcol2sat_stdohg2stdnbfclud(create_list(G,i,1,m),create_list(i,i,1,m))))$
/* Symmetry breaking for n >= 2, forcing prime 3 into the first block: */
greentaod_sb_nbfcsud(m,k,n) := block([G : greentaod_nbfcsud(m,k,n)],
 [G[1], union(setify(create_list({[3,i]},i,2,m)), G[2]), G[3]])$


/* Output in Dimacs format (together with statistics and variable meanings):
*/

/* The 2-colour diagonal version: */
output_greentao2(k,n,filename) := block(
 [FFGT : standardise_fcs(greentao2_fcs(k,n))],
  output_fcs_v(
    sconcat("Green-Tao problem (diagonal form), 
c created by the OKlibrary at ", timedate(),":
c 2 parts, arithmetic progressions of size ", k, ", and ", n, " prime numbers.
", standard_statistics_fcs(FFGT[1]), "
c Variables and associated prime numbers:"), 
    FFGT[1],
    filename,
    FFGT[2]))$
/* Providing a standard name: "GreenTao_2-k-k_n.cnf": */
output_greentao2_stdname(k,n) := output_greentao2(k,n,
  sconcat("GreenTao_2-",k,"-",k,"_",n,".cnf"))$

/* The 2-colour non-diagonal version: */
output_greentao2nd(k1,k2,n,filename) := block(
 [FFGT : standardise_fcl(greentao2nd_fcl(k1,k2,n))],
  output_fcl_v(
    sconcat("Green-Tao problem (non-diagonal form),
c created by the OKlibrary at ", timedate(),": 
c 2 parts, arithmetic progressions of size ", k1, " and ", k2, ", and ", n, " prime numbers.
", standard_statistics_fcs(FFGT[1]), "
c Variables and associated prime numbers:"), 
    FFGT[1],
    filename,
    FFGT[2]))$
/* Providing a standard name: "GreenTao_2-k1-k2_n.cnf": */
output_greentao2nd_stdname(k1,k2,n) := output_greentao2nd(k1,k2,n,
  sconcat("GreenTao_2-",k1,"-",k2,"_",n,".cnf"))$

/* The general form: */
output_greentao(L,n,filename) := block(
 [FF : standardise_fcs(nbfcsfd2fcs_aloamo(nbfcsud2nbfcsfd(greentao_nbfcsud(L,n))))],
  output_fcs_v(
    sconcat("Green-Tao problem (general form),
c created by the OKlibrary at ", timedate(),": 
c ", length(L), " parts with arithmetic progressions of sizes ", L, "
c and ", n, " prime numbers.
", standard_statistics_fcs(FF[1]), "
c Variables and associated prime numbers and \"colours\":"),
    FF[1],
    filename,
    FF[2]))$
output_greentao_stdname(L,n) := output_greentao(L,n,
  sconcat("GreenTao_",length(L),apply(sconcat,map(sconcat,create_list("-",i,1,length(L)),L)),"_",n,".cnf"))$

/* The general form with symmetry breaking: */
output_greentao_sb(L,n,filename) := block(
 [FF : standardise_fcs(greentao_sb_fcs(L,n))],
  output_fcs_v(
    sconcat("Green-Tao problem (general form),
c created by the OKlibrary at ", timedate(),": 
c ", length(L), " parts with arithmetic progressions of sizes ", L, "
c and ", n, " prime numbers.
c Symmetry breaking by putting prime 3 into the first parts
c   of constant segments of progression lengths.
c Variables and associated prime numbers and \"colours\":"),
    FF[1],
    filename,
    FF[2]))$
output_greentao_sb_stdname(L,n) := output_greentao_sb(L,n,
  sconcat("GreenTao_sb_",length(L),apply(sconcat,map(sconcat,create_list("-",i,1,length(L)),L)),"_",n,".cnf"))$


/* The diagonal case (m is the number of parts, k the length or arithmetic
   progressions): */
output_greentaod(m,k,n,filename) := block(
 [FF : standardise_fcs(nbfcsfd2fcs_aloamo(nbfcsud2nbfcsfd(greentaod_nbfcsud(m,k,n))))],
  output_fcs_v(
    sconcat("Green-Tao problem (diagonal form),
c created by the OKlibrary at ", timedate(),": 
c ", m, " parts with arithmetic progressions of sizes ", k, "
c and ", n, " prime numbers.
", standard_statistics_fcs(FF[1]), "
c Variables and associated prime numbers and \"colours\":"),
    FF[1],
    filename,
    FF[2]))$
output_greentaod_stdname(m,k,n) := output_greentaod(m,k,n,
  sconcat("GreenTao_",m,"-",k,"_",n,".cnf"))$

output_greentaod_sb(m,k,n,filename) := block(
 [FF : standardise_fcs(nbfcsfd2fcs_aloamo(nbfcsud2nbfcsfd(greentaod_sb_nbfcsud(m,k,n))))],
  output_fcs_v(
    sconcat("Green-Tao problem (diagonal form),
c created by the OKlibrary at ", timedate(),": 
c ", m, " parts with arithmetic progressions of sizes ", k, "
c and ", n, " prime numbers. Symmetry breaking by putting prime 3 into part 1.
", standard_statistics_fcs(FF[1]), "
c Variables and associated prime numbers and \"colours\":"),
    FF[1],
    filename,
    FF[2]))$
output_greentaod_sb_stdname(m,k,n) := output_greentaod_sb(m,k,n,
  sconcat("GreenTao_sb_",m,"-",k,"_",n,".cnf"))$


/*!
\endhtmlonly
*/
