/* Oliver Kullmann, 12.7.2009 (Swansea) */
/* Copyright 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/RamseyTheory/HindmanProblems.mac
  \brief %Generators for clause-sets related to Hindman problems

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/RamseyTheory/HindmanProblems.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Colouring.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/NonBooleanTranslations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/NonBoolean.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/Hindman.mac")$


/* ********************
   * Hindman problems *
   ********************
*/

/* The non-boolean formal clause-set expressing the Hindman problem for k=2
   with r parts and n vertices.
   Reminder: The hyperedges are of the form {x,y,x+y,x*y} for x <> y.
   Prerequisites: r, n natural numbers, n, r >= 0.
*/
hindmani_a1k2_nbfcsud(r,n) := 
 nbfclud2nbfcsud(col2sat_stdohg2stdnbfclud(hindmani_a1k2_ohg(n), create_list(i,i,1,r)))$

/* Now allowing x = y: */
hindman_a1k2_nbfcsud(r,n) := 
 nbfclud2nbfcsud(col2sat_stdohg2stdnbfclud(hindman_a1k2_ohg(n), create_list(i,i,1,r)))$

/* Fixing r=2 (thus obtaining boolean clause-sets); 
   again x <> y, but considering only x,y >= a: */
hindmani_r2k2_ofcs(a,n) :=
 tcol2sat_stdohg2stdofcs(hindmani_k2_ohg(a,n))$

/* The non-injective versions (allowing x = y): */
hindman_r2k2_ofcs(a,n) :=
 tcol2sat_stdohg2stdofcs(hindman_k2_ohg(a,n))$

/* Adding symmetry-breaking clauses (regarding the parts (colours), forcing
   vertex 1 to be in part 1); now we must have n >= 1: */
hindman2_sb_nbfcsud(r,n) := block([S : hindmani_a1k2_nbfcsud(r,n)],
 [S[1], union(setify(create_list({[1,i]},i,2,r)), S[2]), S[3]])$


/* Output facilities */

/* Output the boolean clause-set (standard translation) to a file: */
output_hindmani_a1k2(r,n,filename) := block(
 [FF : standardise_fcs(nbfcsfd2fcs_aloamo(nbfcsud2nbfcsfd(hindmani_a1k2_nbfcsud(r,n))))],
  output_fcs_v(
    sconcat("Hindman problem (injective form) for k=2 with ", r, " parts and ", n, " elements."), 
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "Hindmani_a1k2_r_n.cnf": */
output_hindmani_a1k2_stdname(r,n) := output_hindmani_a1k2(r,n,
  sconcat("Hindmani_a1k2_",r,"_",n,".cnf"))$

/* Allowing x=y: */
output_hindman_a1k2(r,n,filename) := block(
 [FF : standardise_fcs(nbfcsfd2fcs_aloamo(nbfcsud2nbfcsfd(hindman_a1k2_nbfcsud(r,n))))],
  output_fcs_v(
    sconcat("Hindman problem for k=2 with ", r, " parts and ", n, " elements."), 
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "Hindman_a1k2_r_n.cnf": */
output_hindman_a1k2_stdname(r,n) := output_hindman_a1k2(r,n,
  sconcat("Hindman_a1k2_",r,"_",n,".cnf"))$

/* RENAMING needed */
output_hindman2_sb(r,n,filename) := block(
 [FF : standardise_fcs(nbfcsfd2fcs_aloamo(nbfcsud2nbfcsfd(hindman2_sb_nbfcsud(r,n))))],
  output_fcs_v(
    sconcat("Hindman problem for k=2 with ", r, " parts and ", n, " elements; symmetry breaking by putting element 1 into part 1."), 
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "Hindman2_r_n.cnf": */
output_hindman2_sb_stdname(r,n) := output_hindman2_sb(r,n,
  sconcat("Hindman2_sb_",r,"_",n,".cnf"))$


/* Output the 2-colour cases (no translation needed) to a file: */

output_hindmani_r2k2(a,n,filename) := block(
 [FF :  hindmani_r2k2_ofcs(a,n)],
  output_fcs_v(
    sconcat("Hindman problem (injective form) for k=2 with 2 parts and ", n, " elements, starting with ", a, "."), 
    FF,
    filename,[]))$
/* Providing a standard name: "Hindmani_r2k2_a_n.cnf": */
output_hindmani_r2k2_stdname(a,n) := output_hindmani_r2k2(a,n,
  sconcat("Hindmani_r2k2_",a,"_",n,".cnf"))$

output_hindman_r2k2(a,n,filename) := block(
 [FF :  hindman_r2k2_ofcs(a,n)],
  output_fcs_v(
    sconcat("Hindman problem for k=2 with 2 parts and ", n, " elements, starting with ", a, "."), 
    FF,
    filename,[]))$
/* Providing a standard name: "Hindman_r2k2_a_n.cnf": */
output_hindman_r2k2_stdname(a,n) := output_hindman_r2k2(a,n,
  sconcat("Hindman_r2k2_",a,"_",n,".cnf"))$


/*!
\endhtmlonly
*/
