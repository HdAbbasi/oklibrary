/* Oliver Kullmann, 20.9.2008 (Swansea) */
/* Copyright 2008, 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/RamseyTheory/tests/VanderWaerdenProblems.mac
  \brief Tests for clause-sets related to van der Waerden problems

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/RamseyTheory/tests/VanderWaerdenProblems.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Substitutions.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$

kill(f)$


/* **************************************************
   * Arithmetic progressions in the natural numbers *
   **************************************************
*/

okltest_vanderwaerden2_fcl(f) := (
  assert(f(0,0) = [[],[{},{}]]),
  assert(f(0,1) = [[1],[{},{}]]),
  assert(f(1,0) = [[],[]]),
  assert(f(1,1) = [[1],[{1},{-1}]]),
  assert(f(3,5) = [[1,2,3,4,5], [{1,2,3},{2,3,4},{1,3,5},{3,4,5},{-1,-2,-3},{-2,-3,-4},{-1,-3,-5},{-3,-4,-5}]]),
  true)$

okltest_vanderwaerden2_fcs(f) := (
  assert(f(0,0) = [{},{{}}]),
  assert(f(0,1) = [{1},{{}}]),
  assert(f(1,0) = [{},{}]),
  assert(f(1,1) = [{1},{{1},{-1}}]),
  assert(f(2,0) = [{},{}]),
  assert(f(2,1) = [{1},{}]),
  assert(f(2,2) = [{1,2},{{1,2},{-1,-2}}]),
  assert(f(2,3) = [{1,2,3},{{1,2},{1,3},{2,3},{-1,-2},{-1,-3},{-2,-3}}]),
  assert(f(3,0) = [{},{}]),
  assert(f(3,1) = [{1},{}]),
  assert(f(3,2) = [{1,2},{}]),
  assert(f(3,3) = [{1,2,3},{{1,2,3},{-1,-2,-3}}]),
  assert(f(3,4) = [{1,2,3,4},{{1,2,3},{2,3,4},{-1,-2,-3},{-2,-3,-4}}]),
  true)$

okltest_vanderwaerden2nd_fcl(f) := block(
  assert(okltest_vanderwaerden2_fcl(buildq([f], lambda([k,n],f(k,k,n))))),
  assert(f(3,4,5) = [[1,2,3,4,5], [{1,2,3},{2,3,4},{1,3,5},{3,4,5},{-1,-2,-3,-4},{-2,-3,-4,-5}]]),
  true)$

okltest_vanderwaerden2nd_fcs(f) := block(
  assert(okltest_vanderwaerden2_fcs(buildq([f], lambda([k,n],f(k,k,n))))),
  assert(f(3,4,4) = [{1,2,3,4},{{1,2,3},{2,3,4},{-1,-2,-3,-4}}]),
  true)$

okltest_vanderwaerden_nbfclud(f) := (
  assert(f([],0) = [[],[],[]]),
  assert(f([1],3) = [[1,2,3], [{[1,1]},{[2,1]},{[3,1]}], [1]]),
  assert(f([2],3) = [[1,2,3], [{[1,1],[2,1]},{[1,1],[3,1]},{[2,1],[3,1]}], [1]]),
  assert(f([1,1,1],4) = [[1,2,3,4], [{[1,1]},{[2,1]},{[3,1]},{[4,1]},{[1,2]},{[2,2]},{[3,2]},{[4,2]},{[1,3]},{[2,3]},{[3,3]},{[4,3]}], [1,2,3]]),
  assert(f([1,2,3],3) = [[1,2,3], [{[1,1]},{[2,1]},{[3,1]},{[1,2],[2,2]},{[1,2],[3,2]},{[2,2],[3,2]},{[1,3],[2,3],[3,3]}], [1,2,3]]),
  assert(okltest_vanderwaerden_nbfcsud(buildq([f],lambda([L,n],fcl2fcs(f(L,n))))) = true),
  true)$

okltest_vanderwaerden_nbfcsud(f) := block(
  assert(f([],0) = [{},{},{}]),
  assert(f([],1) = [{1},{},{}]),
  assert(f([],2) = [{1,2},{},{}]),
  assert(f([1],0) = [{},{},{1}]),
  assert(f([1],1) = [{1},{{[1,1]}},{1}]),
  assert(f([1],2) = [{1,2},{{[1,1]},{[2,1]}},{1}]),
  assert(f([1,1],0) = [{},{},{1,2}]),
  assert(f([1,1],1) = [{1},{{[1,1]},{[1,2]}},{1,2}]),
  assert(f([1,1],2) = [{1,2},{{[1,1]},{[1,2]},{[2,1]},{[2,2]}},{1,2}]),
  assert(f([2],0) = [{},{},{1}]),
  assert(f([2],1) = [{1},{},{1}]),
  assert(f([2],2) = [{1,2},{{[1,1],[2,1]}},{1}]),
  assert(f([1,2],0) = [{},{},{1,2}]),
  assert(f([1,2],1) = [{1},{{[1,1]}},{1,2}]),
  assert(f([1,2],2) = [{1,2},{{[1,1]},{[2,1]},{[1,2],[2,2]}},{1,2}]),
  assert(f([2,2],0) = [{},{},{1,2}]),
  assert(f([2,2],1) = [{1},{},{1,2}]),
  assert(f([2,2],2) = [{1,2},{{[1,1],[2,1]},{[1,2],[2,2]}},{1,2}]),
  assert(f([2,2],3) = [{1,2,3},{{[1,1],[2,1]},{[1,1],[3,1]},{[2,1],[3,1]},{[1,2],[2,2]},{[1,2],[3,2]},{[2,2],[3,2]}},{1,2}]),
  assert(f([2,3],0) = [{},{},{1,2}]),
  assert(f([2,3],1) = [{1},{},{1,2}]),
  assert(f([2,3],2) = [{1,2},{{[1,1],[2,1]}},{1,2}]),
  assert(f([2,3],3) = [{1,2,3},{{[1,1],[2,1]},{[1,1],[3,1]},{[2,1],[3,1]},{[1,2],[2,2],[3,2]}},{1,2}]),
  assert(f([3,3],0) = [{},{},{1,2}]),
  assert(f([3,3],1) = [{1},{},{1,2}]),
  assert(f([3,3],2) = [{1,2},{},{1,2}]),
  assert(f([3,3],3) = [{1,2,3},{{[1,1],[2,1],[3,1]},{[1,2],[2,2],[3,2]}},{1,2}]),
  assert(f([3,3],4) = [{1,2,3,4},{{[1,1],[2,1],[3,1]},{[1,2],[2,2],[3,2]},{[2,1],[3,1],[4,1]},{[2,2],[3,2],[4,2]}},{1,2}]),
  assert(f([3,3,3],0) = [{},{},{1,2,3}]),
  assert(f([3,3,3],1) = [{1},{},{1,2,3}]),
  assert(f([3,3,3],2) = [{1,2},{},{1,2,3}]),
  assert(f([3,3,3],3) = [{1,2,3},{{[1,1],[2,1],[3,1]},{[1,2],[2,2],[3,2]},{[1,3],[2,3],[3,3]}},{1,2,3}]),
  assert(f([1,3,3,3],3) = [{1,2,3},{{[1,1]},{[2,1]},{[3,1]},{[1,2],[2,2],[3,2]},{[1,3],[2,3],[3,3]},{[1,4],[2,4],[3,4]}},{1,2,3,4}]),
  true)$


/* ****************************************
   * Translation into boolean clause-sets *
   ****************************************
*/

okltest_vanderwaerden_aloamo_fcl(f) := block(
  assert(f([],0) = [[],[]]),
  for k : 0 thru 5 do
    assert(f([k],0) = [[], if k=0 then [{}] else []]),
  for n : 0 thru 5 do
    assert(f([],n) = [[], create_list({},i,1,n)]),
  assert(f([3,3],3) = [[nbv(1,1),nbv(1,2),nbv(2,1),nbv(2,2),nbv(3,1),nbv(3,2)], [{-nbv(1,1),-nbv(2,1),-nbv(3,1)},{-nbv(1,2),-nbv(2,2),-nbv(3,2)},{nbv(1,1),nbv(1,2)},{nbv(2,1),nbv(2,2)},{nbv(3,1),nbv(3,2)},{-nbv(1,1),-nbv(1,2)},{-nbv(2,1),-nbv(2,2)},{-nbv(3,1),-nbv(3,2)}]]),
  assert(okltest_vanderwaerden_aloamo_fcs(buildq([f],lambda([L,n],fcl2fcs(f(L,n))))) = true),
  assert(okltest_vanderwaerden_aloamo_stdfcl(buildq([f],lambda([L,n],standardise_fcl(f(L,n))))) = true),
  /* XXX */
  true)$

okltest_vanderwaerden_aloamo_fcs(f) := (
  assert(f([],0) = [{},{}]),
  for k : 0 thru 5 do
    assert(f([k],0) = [{}, if k=0 then {{}} else {}]),
  for n : 0 thru 5 do
    assert(f([],n) = [{}, if n=0 then {} else {{}}]),
  assert(f([3,3],3) = [{nbv(1,1),nbv(1,2),nbv(2,1),nbv(2,2),nbv(3,1),nbv(3,2)}, {{-nbv(1,1),-nbv(2,1),-nbv(3,1)},{-nbv(1,2),-nbv(2,2),-nbv(3,2)},{nbv(1,1),nbv(1,2)},{nbv(2,1),nbv(2,2)},{nbv(3,1),nbv(3,2)},{-nbv(1,1),-nbv(1,2)},{-nbv(2,1),-nbv(2,2)},{-nbv(3,1),-nbv(3,2)}}]),
  /* XXX */
  true)$

okltest_vanderwaerden_aloamo_stdfcl(f) := (
  assert(f([],0) = [[[],[]],[]]),
  for k : 0 thru 5 do
    assert(f([k],0) = [[[], if k=0 then [{}] else []], []]),
  for n : 0 thru 5 do
    assert(f([],n) = [[[], create_list({},i,1,n)],[]]),
  assert(f([2,3],4) = [[[1,2,3,4,5,6,7,8], [{-1,-3},{-1,-5},{-3,-5},{-1,-7},{-3,-7},{-5,-7},{-2,-4,-6},{-4,-6,-8},{1,2},{3,4},{5,6},{7,8},{-1,-2},{-3,-4},{-5,-6},{-7,-8}]], [nbv(1,1),nbv(1,2),nbv(2,1),nbv(2,2),nbv(3,1),nbv(3,2),nbv(4,1),nbv(4,2)]]),
  assert(okltest_vanderwaerden_aloamo_stdfcs(buildq([f],lambda([L,n],block([FF:f(L,n)], [fcl2fcs(FF[1]),FF[2]])))) = true),
  /* XXX */
  true)$

okltest_vanderwaerden_aloamo_stdfcs(f) := (
  assert(f([],0) = [[{},{}],[]]),
  for k : 0 thru 5 do
    assert(f([k],0) = [[{}, if k=0 then {{}} else {}], []]),
  for n : 0 thru 5 do
    assert(f([],n) = [[{}, if n=0 then {} else {{}}], []]),
  /* XXX */
  true)$

okltest_standardise_vanderwaerden_aloamo(f) := block([s],
  for k : 0 thru 5 do
    s : f([k],0),
  for n : 0 thru 5 do
    s : f([],n),
  for n : 0 thru 5 do (
    s : f([1],n),
    for i : 1 thru n do
      assert(s(nbv(i,1)) = i)
  ),
  for m : 0 thru 3 do
    for n : 0 thru 5 do (
      s : f(create_list(1,i,1,m),n),
      assert(s(create_list(nbv(i,j), i,1,n, j,1,m)) = create_list(i,i,1,m*n))
  ),
  true)$

okltest_invstandardise_vanderwaerden_aloamo(f) := block([invs],
  for k : 0 thru 5 do
    invs : f([k],0),
  for n : 0 thru 5 do
    invs : f([],n),
  for n : 0 thru 5 do (
    invs : f([1],n),
    for i : 1 thru n do
      assert(invs(i) = nbv(i,1))
  ),
  /* XXX */
  true)$


/* ************************
   * Statistics functions *
   ************************
*/

okltest_nvar_vanderwaerden2(f) := (
  for k : 0 thru 3 do
    for n : 0 thru k+3 do
      assert(f(k,n) = length(vanderwaerden2_fcs(k,n)[1])),
  true)$

okltest_nvar_vanderwaerden2nd(f) := (
  for k1 : 0 thru 3 do
    for k2 : 0 thru 3 do
    for n : 0 thru 5 do
      assert(f(k1,k2,n) = length(vanderwaerden2nd_fcs(k1,k2,n)[1])),
  true)$

okltest_nvar_vanderwaerden(f) := block([K,N],
  if oklib_test_level = 0 then (K : 2, N : 3)
  else (K : 4, N : 5),
  for L in map(sort,all_transformations_l(setn(K))) do
    for n : 0 thru N do block([v : f(L,n)],
      assert(v = length(vanderwaerden_nbfclud(L,n)[1])),
      assert(v = length(vanderwaerden_nbfcsud(L,n)[1]))
  ),
  true)$

okltest_nvar_vanderwaerden_aloamo(f) := block([K,N],
  if oklib_test_level = 0 then (K : 2, N : 3)
  else (K : 4, N : 5),
  for L in map(sort,all_transformations_l(setn(K))) do
    for n : 0 thru N do block([v : f(L,n)],
      assert(v = length(vanderwaerden_aloamo_fcl(L,n)[1])),
      assert(v = length(vanderwaerden_aloamo_fcs(L,n)[1])),
      assert(v = length(vanderwaerden_aloamo_stdfcl(L,n)[1][1])),
      assert(v = length(vanderwaerden_aloamo_stdfcs(L,n)[1][1]))
  ),
  true)$

okltest_ncl_vanderwaerden2_cs(f) := (
  for k : 0 thru 3 do
    for n : 0 thru k+3 do
      assert(f(k,n) = length(vanderwaerden2_fcs(k,n)[2])),
  true)$

okltest_ncl_vanderwaerden2nd_cs(f) := (
  for k1 : 0 thru 3 do
    for k2 : 0 thru 3 do
    for n : 0 thru 5 do
      assert(f(k1,k2,n) = length(vanderwaerden2nd_fcs(k1,k2,n)[2])),
  true)$

okltest_ncl_vanderwaerden_cl(f) := block([K,N],
  if oklib_test_level = 0 then (K : 2, N : 3)
  else (K : 4, N : 5),
  for L in map(sort,all_transformations_l(setn(K))) do
    for n : 0 thru N do block([c : f(L,n)],
      assert(c = length(vanderwaerden_nbfclud(L,n)[2]))
  ),
  true)$

okltest_ncl_vanderwaerden_cs(f) := block([K,N],
  if oklib_test_level = 0 then (K : 2, N : 3)
  else (K : 4, N : 5),
  for L in map(sort,all_transformations_l(setn(K))) do
    for n : 0 thru N do block([c : f(L,n)],
      assert(c = length(vanderwaerden_nbfcsud(L,n)[2]))
  ),
  true)$

okltest_ncl_vanderwaerden_aloamo_cl(f) := block([K,N],
  if oklib_test_level = 0 then (K : 2, N : 3)
  else (K : 4, N : 5),
  for L in map(sort,all_transformations_l(setn(K))) do
    for n : 0 thru N do block([c : f(L,n)],
      assert(c = length(vanderwaerden_aloamo_fcl(L,n)[2])),
      assert(c = length(vanderwaerden_aloamo_stdfcl(L,n)[1][2]))
  ),
  true)$

okltest_ncl_vanderwaerden_aloamo_cs(f) := block([K,N],
  if oklib_test_level = 0 then (K : 2, N : 3)
  else (K : 4, N : 5),
  for L in map(sort,all_transformations_l(setn(K))) do (
    for n : 0 thru N do block([c : f(L,n)],
      assert(c = length(vanderwaerden_aloamo_fcs(L,n)[2])),
      assert(c = length(vanderwaerden_aloamo_stdfcs(L,n)[1][2]))
  )),
  true)$


/* ********************
   * Output functions *
   ********************
*/


/*!
\endhtmlonly
*/
