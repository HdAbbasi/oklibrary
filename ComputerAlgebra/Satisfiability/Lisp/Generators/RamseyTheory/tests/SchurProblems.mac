/* Oliver Kullmann, 19.4.2009 (Swansea) */
/* Copyright 2009, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/RamseyTheory/tests/SchurProblems.mac
  \brief Tests for clause-sets related to Schur problems

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/RamseyTheory/tests/SchurProblems.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/RamseyTheory/SchurProblems.mac")$


kill(f)$

/* *****************
   * Schur triples *
   *****************
*/

okltest_schur_nbfcsud(f) := (
  assert(f(0,0) = [{},{},{}]),
  assert(f(0,1) = [{1},{},{}]),
  assert(f(0,2) = [{1,2},{},{}]),
  assert(f(0,3) = [{1,2,3},{},{}]),
  assert(f(1,0) = [{},{},{1}]),
  assert(f(1,1) = [{1},{},{1}]),
  assert(f(1,2) = [{1,2},{{[1,1],[2,1]}},{1}]),
  assert(f(1,3) = [{1,2,3},{{[1,1],[2,1]},{[1,1],[2,1]}},{1}]),
  assert(f(2,0) = [{},{},{1,2}]),
  assert(f(2,1) = [{1},{},{1,2}]),
  assert(f(2,2) = [{1,2},{{[1,1],[2,1]},{[1,2],[2,2]}},{1,2}]),
  assert(f(2,3) = [{1,2,3},{{[1,1],[2,1]},{[1,2],[2,2]}},{1,2}]),
  assert(f(3,0) = [{},{},{1,2,3}]),
  assert(f(3,1) = [{1},{},{1,2,3}]),
  assert(f(3,2) = [{1,2},{{[1,1],[2,1]},{[1,2],[2,2]},{[1,3],[2,3]}},{1,2,3}]),
  assert(f(3,3) = [{1,2,3},{{[1,1],[2,1]},{[1,2],[2,2]},{[1,3],[2,3]}},{1,2,3}]),
  true)$

okltest_nvar_schur_nbfcsud(f) := (
  for r : 0 thru cokltl(6,10) do
   for n : 0 thru cokltl(6,10) do block([F : schur_nbfcsud(r,n)],
    assert(f(r,n) = length(F[1]))
  ),
  true)$

okltest_nval_schur_nbfcsud(f) := (
  for r : 0 thru cokltl(6,10) do
   for n : 0 thru cokltl(6,10) do block([F : schur_nbfcsud(r,n)],
    assert(f(r,n) = length(F[3]))
  ),
  true)$

okltest_ncl_list_schur_nbfcsud(f) := (
  for r : 0 thru cokltl(6,10) do
   for n : 0 thru cokltl(6,10) do block([F : schur_nbfcsud(r,n)],
    assert(f(r,n) = ncl_list_fcs(F))
  ),
  true)$

okltest_ncl_schur_nbfcsud(f) := (
  for r : 0 thru cokltl(6,10) do
   for n : 0 thru cokltl(6,10) do block([F : schur_nbfcsud(r,n)],
    assert(f(r,n) = ncl_fcs(F))
  ),
  true)$

okltest_nvar_pd_schur_nbfcsud(f) := (
  for r : 0 thru cokltl(6,10) do
   for n : 0 thru cokltl(6,10) do block([F : pd_schur_nbfcsud(r,n)],
    assert(f(r,n) = length(F[1]))
  ),
  true)$

okltest_nvar_pd_wschur_nbfcsud(f) := (
  for r : 0 thru cokltl(6,10) do
   for n : 0 thru cokltl(6,10) do block([F : pd_wschur_nbfcsud(r,n)],
    assert(f(r,n) = length(F[1]))
  ),
  true)$


/* *********************
   * Symmetry breaking *
   *********************
*/

okltest_schur_sb_nbfcsud(f) := (
  assert(f(0,1) = [{1},{},{}]),
  assert(f(0,2) = [{1,2},{},{}]),
  assert(f(0,3) = [{1,2,3},{},{}]),
  assert(f(1,1) = [{1},{},{1}]),
  assert(f(1,2) = [{1,2},{{[1,1],[2,1]}},{1}]),
  assert(f(1,3) = [{1,2,3},{{[1,1],[2,1]},{[1,1],[2,1]}},{1}]),
  assert(f(2,1) = [{1},{{[1,2]}},{1,2}]),
  assert(f(2,2) = [{1,2},{{[1,2]},{[1,1],[2,1]},{[1,2],[2,2]}},{1,2}]),
  assert(f(2,3) = [{1,2,3},{{[1,2]},{[1,1],[2,1]},{[1,2],[2,2]}},{1,2}]),
  assert(f(3,1) = [{1},{{[1,2]},{[1,3]}},{1,2,3}]),
  assert(f(3,2) = [{1,2},{{[1,2]},{[1,3]},{[1,1],[2,1]},{[1,2],[2,2]},{[1,3],[2,3]}},{1,2,3}]),
  assert(f(3,3) = [{1,2,3},{{[1,2]},{[1,3]},{[1,1],[2,1]},{[1,2],[2,2]},{[1,3],[2,3]}},{1,2,3}]),
  /* XXX */
  true)$


/* ****************************
   * Heuristical restrictions *
   ****************************
*/

okltest_schur_fullsb_nbcl(f) := (
  assert(f(0,inf) = []),
  assert(f(1,inf) = []),
  assert(f(2,inf) = [{[1,2]},{[2,1]}]),
  assert(f(3,inf) = [{[1,2]},{[1,3]},{[2,1]},{[2,3]},{[5,1]},{[5,2]}]),
  assert(f(4,inf) = [{[1,2]},{[1,3]},{[1,4]},{[2,1]},{[2,3]},{[2,4]},{[5,1]},{[5,2]},{[5,4]},{[14,1]},{[14,2]},{[14,3]}]),
  assert(f(4,14) = [{[1,2]},{[1,3]},{[1,4]},{[2,1]},{[2,3]},{[2,4]},{[5,1]},{[5,2]},{[5,4]},{[14,1]},{[14,2]},{[14,3]}]),
  assert(f(4,13) = [{[1,2]},{[1,3]},{[1,4]},{[2,1]},{[2,3]},{[2,4]},{[5,1]},{[5,2]},{[5,4]}]),
  true)$

okltest_wschur_fullsb_nbcl(f) := (
  assert(f(0,inf) = []),
  assert(f(1,inf) = []),
  assert(f(2,inf) = [{[1,2]},{[3,1]}]),
  assert(f(3,inf) = [{[1,2]},{[1,3]},{[3,1]},{[3,3]},{[9,1]},{[9,2]}]),
  assert(f(4,inf) = [{[1,2]},{[1,3]},{[1,4]},{[3,1]},{[3,3]},{[3,4]},{[9,1]},{[9,2]},{[9,4]},{[24,1]},{[24,2]},{[24,3]}]),
  assert(f(4,24) = [{[1,2]},{[1,3]},{[1,4]},{[3,1]},{[3,3]},{[3,4]},{[9,1]},{[9,2]},{[9,4]},{[24,1]},{[24,2]},{[24,3]}]),
  assert(f(4,23) = [{[1,2]},{[1,3]},{[1,4]},{[3,1]},{[3,3]},{[3,4]},{[9,1]},{[9,2]},{[9,4]}]),
  true)$

okltest_schur_rm_nbfclud(f) := (
  assert(f(1,1,0) = [[1],[],[1]]),
  assert(f(1,1,1) = [[1],[{[1,1]}],[1]]),
  assert(f(1,2,0) = [[1,2],[{[1,1],[2,1]}],[1]]),
  assert(f(1,2,1) = [[1,2],[{[1,1]},{[1,1],[2,1]}],[1]]),
  assert(f(1,2,2) = [[1,2],[{[1,1]},{[2,1]},{[1,1],[2,1]}],[1]]),
  /* XXX */
  true)$


/* ****************************************
   * Translation into boolean clause-sets *
   ****************************************
*/

okltest_schur_aloamo_fcl(f) := (
  assert(f(0,0) = [[],[]]),
  for n : 0 thru 4 do
    assert(f(0,n) = [[],create_list({},i,1,n)]),
  for n : 0 thru 1 do
    assert(f(1,n) = [create_list(nbv(i,1),i,1,n),create_list({nbv(i,1)},i,1,n)]),
  /* XXX */
  true)$

okltest_nvar_schur_aloamo_fcl(f) := (
  for r : 0 thru 6 do
   for n : 0 thru 6 do
    assert(f(r,n) = nvar_fcl(schur_aloamo_fcl(r,n))),
  true)$

okltest_nvar_schur_aloamo_fcs(f) := (
  for r : 0 thru 6 do
   for n : 0 thru 6 do
    assert(f(r,n) = nvar_fcs(schur_aloamo_fcs(r,n))),
  true)$

okltest_ncl_list_schur_aloamo_fcl(f) := (
  for r : 0 thru 6 do
   for n : 0 thru 6 do
    assert(f(r,n) = ncl_list_fcl(schur_aloamo_fcl(r,n))),
  true)$

okltest_ncl_list_schur_aloamo_fcs(f) := (
  for r : 0 thru 6 do
   for n : 0 thru 6 do
    assert(f(r,n) = ncl_list_fcs(schur_aloamo_fcs(r,n))),
  true)$


/* *******************
   * Standardisation *
   *******************
*/

okltest_schur_aloamo_stdfcl(f) := (
  assert(f(0,0) = [[[],[]],[]]),
  for n : 0 thru cokltl(4,10) do
    assert(f(0,n) = [[[],create_list({},i,1,n)],[]]),
  for n : 0 thru 1 do
    assert(f(1,n) = [[create_list(i,i,1,n),create_list({i},i,1,n)],create_list(nbv(i,1),i,1,n)]),
  for r : 0 thru cokltl(4,10) do
   for n : 0 thru cokltl(4,10) do
    assert(f(r,n) = standardise_fcl(schur_aloamo_fcl(r,n))),
  true)$

okltest_pd_schur_aloamo_stdfcl(f) := (
  assert(f(0,0) = [[[],[]],[]]),
  assert(f(0,1) = [[[],[{}]],[]]),
  assert(f(0,2) = [[[],[{},{}]],[]]),
  for n : 0 thru 1 do
    assert(f(1,n) = [[create_list(i,i,1,n),create_list({i},i,1,n)],create_list(nbv(i,1),i,1,n)]),
  for r : 0 thru cokltl(4,10) do
   for n : 0 thru cokltl(4,10) do
    assert(f(r,n) = standardise_fcl(pd_schur_aloamo_fcl(r,n))),
  true)$

okltest_pd_schur_fullsb_aloamo_stdfcl(f) := (
  assert(f(0,0) = [[[],[]],[]]),
  /* XXX */
  for r : 0 thru cokltl(4,10) do
   for n : 0 thru cokltl(4,10) do
    assert(f(r,n) = standardise_fcl(pd_schur_fullsb_aloamo_fcl(r,n))),
  true)$

okltest_pd_wschur_fullsb_aloamo_stdfcl(f) := (
  assert(f(0,0) = [[[],[]],[]]),
  /* XXX */
  for r : 0 thru cokltl(4,10) do
   for n : 0 thru cokltl(4,10) do
    assert(f(r,n) = standardise_fcl(pd_wschur_fullsb_aloamo_fcl(r,n))),
  true)$

okltest_schur_rm_aloamo_stdfcl(f) := (
  assert(f(0,0,0) = [[[],[]],[]]),
  /* XXX */
  for r : 1 thru cokltl(4,10) do
   for n : 0 thru cokltl(4,10) do
    for k : 0 thru n do
     assert(f(r,n,k) = standardise_fcl(schur_rm_aloamo_fcl(r,n,k))),
  true)$

okltest_pd_schur_rm_aloamo_stdfcl(f) := (
  assert(f(0,0,0) = [[[],[]],[]]),
  /* XXX */
  for r : 1 thru cokltl(4,10) do
   for n : 0 thru cokltl(4,10) do
    for k : 0 thru ceiling(n/2) do
     assert(f(r,n,k) = standardise_fcl(pd_schur_rm_aloamo_fcl(r,n,k))),
  true)$

okltest_pd_schur_fullsb_rm_aloamo_stdfcl(f) := (
  assert(f(0,0,0) = [[[],[]],[]]),
  /* XXX */
  for r : 1 thru cokltl(4,10) do
   for n : 0 thru cokltl(4,10) do
    for k : 0 thru ceiling(n/2) do
     assert(f(r,n,k) = standardise_fcl(pd_schur_fullsb_rm_aloamo_fcl(r,n,k))),
  true)$

okltest_schur_standnest_stdfcl(f) := (
  for n : 0 thru 1 do
    assert(f(1,n) = [[[],[]],[]]),
  for r : 0 thru cokltl(4,10) do
   for n : 0 thru cokltl(4,10) do
    assert(f(r,n) = standardise_fcl(schur_standnest_fcl(r,n))),
  true)$

/*!
\endhtmlonly
*/
