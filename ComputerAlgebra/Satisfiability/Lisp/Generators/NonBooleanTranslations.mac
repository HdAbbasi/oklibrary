/* Oliver Kullmann, 16.4.2009 (Swansea) */
/* Copyright 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/NonBooleanTranslations.mac
  \brief Translations from non-boolean clause-sets to boolean clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/NonBooleanTranslations.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/NonBoolean.mac")$


/* ******************************
   * The "standard" translation *
   ******************************
*/

/* Variables are "nbv(v,e)", meaning that variable v has value number e: */
kill(nbv)$
declare(nbv, noun)$
declare(nbv, posfun)$
nbv_var(v,e) := nounify(nbv)(v,e)$

/* Just translating the clauses: */
/* Variables are returned in lexicographical order when considering first the
   original variables and then the elements in an ordered pair. */
nbfclfd2fcl_core(FF) := 
 [create_list(nbv_var(v,x), v,FF[1], x,FF[3](v)),
  map(lambda([C],map(lambda([x],-apply(nbv_var,x)),C)),FF[2])]$
nbfclud2fcl_core(FF) := nbfclfd2fcl_core(nbfclud2nbfclfd(FF))$
nbfcsfd2fcs_core(FF) := fcl2fcs(nbfclfd2fcl_core(nbfcsfd2nbfclfd(FF)))$

/* The "weak" translation, allowing that a variable gets multiple values: */
nbfclfd2fcl_alo(FF) := block([GG : nbfclfd2fcl_core(FF)],
 [GG[1], append(GG[2], 
    create_list(setify(create_list(nbv_var(v,p), p,FF[3](v))), v,FF[1]))])$
nbfclud2fcl_alo(FF) := nbfclfd2fcl_alo(nbfclud2nbfclfd(FF))$
nbfcsfd2fcs_alo(FF) := fcl2fcs(nbfclfd2fcl_alo(nbfcsfd2nbfclfd(FF)))$

/* The "strong" translation, establishing a 1-1 correspondence between the
   sets of satisfying assignments before and after translation:
*/
nbfclfd2fcl_aloamo(FF) := block([GG : nbfclfd2fcl_alo(FF)],
 [GG[1], append(GG[2],
    create_list({-nbv_var(v,first(p)), -nbv_var(v,second(p))},
                v,FF[1], p,powerset_l(FF[3](v),2)))])$
nbfclud2fcl_aloamo(FF) := nbfclfd2fcl_aloamo(nbfclud2nbfclfd(FF))$
nbfcsfd2fcs_aloamo(FF) := fcl2fcs(nbfclfd2fcl_aloamo(nbfcsfd2nbfclfd(FF)))$


/*!
\endhtmlonly
*/
