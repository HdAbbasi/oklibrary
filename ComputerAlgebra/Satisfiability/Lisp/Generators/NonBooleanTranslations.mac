/* Oliver Kullmann, 16.4.2009 (Swansea) */
/* Copyright 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/NonBooleanTranslations.mac
  \brief Translations from non-boolean clause-sets to boolean clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/NonBooleanTranslations.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/NonBoolean.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* ******************************
   * The "standard" translation *
   ******************************
*/

/* Variables are "nbv(v,e)", meaning that variable v has value e: */
kill(nbv)$
declare(nbv, noun)$
declare(nbv, posfun)$
nbv_var(v,e) := nounify(nbv)(v,e)$

/* Just translating the clauses: */
/* Variables are returned in lexicographical order when considering first the
   original variables and then the elements in an ordered pair. */
nbfclfd2fcl_core(FF) := 
 [create_list(nbv_var(v,x), v,FF[1], x,FF[3](v)),
  map(lambda([C],map(lambda([x],-apply(nbv_var,x)),C)),FF[2])]$
nbfclud2fcl_core(FF) := nbfclfd2fcl_core(nbfclud2nbfclfd(FF))$
nbfcsfd2fcs_core(FF) := fcl2fcs(nbfclfd2fcl_core(nbfcsfd2nbfclfd(FF)))$

/* The "weak" translation, allowing that a variable gets multiple values: */
nbfclfd2fcl_alo(FF) := block([GG : nbfclfd2fcl_core(FF)],
 [GG[1], append(GG[2], 
    create_list(setify(create_list(nbv_var(v,p), p,FF[3](v))), v,FF[1]))])$
nbfclud2fcl_alo(FF) := nbfclfd2fcl_alo(nbfclud2nbfclfd(FF))$
nbfcsfd2fcs_alo(FF) := fcl2fcs(nbfclfd2fcl_alo(nbfcsfd2nbfclfd(FF)))$

/* The "strong" translation, establishing a 1-1 correspondence between the
   sets of satisfying assignments before and after translation:
*/
nbfclfd2fcl_aloamo(FF) := block([GG : nbfclfd2fcl_alo(FF)],
 [GG[1], append(GG[2],
    create_list({-nbv_var(v,first(p)), -nbv_var(v,second(p))},
                v,FF[1], p,powerset_l(FF[3](v),2)))])$
nbfclud2fcl_aloamo(FF) := nbfclfd2fcl_aloamo(nbfclud2nbfclfd(FF))$
nbfcsfd2fcs_aloamo(FF) := fcl2fcs(nbfclfd2fcl_aloamo(nbfcsfd2nbfclfd(FF)))$


/* **************************************
   * The generalised nested translation *
   **************************************
*/

/* The same variables nbv(v,e) are used, but now in the form nbv(v,i),
   where i is an index. */

/* Consider a non-boolean formal clause-set FF = [V,F,D]; so
   D is the function-domain, and for a variable v the set D(v) is the
   set of values of v. We assume that V does not contain variables of the
   form nbv(x,y). And we assume that all domains are non-empty.
   We consider FF as CNF (so we use "SAT-terminology").

   We assume further that T(v) is an (arbitrary) labelled ordered boolean 
   unsatisfiable clause-set where the label set contains D(v),
   while all variables are of the form nbv(v,i) for in principal arbitrary i.
   The clauses of T(v) associated to values e in D(v) are denoted by
   T(v,e), while TR(v) := T(v) - {T(v,e) : e in D(v)} is the (possibly
   empty) clause-set containing the remaining clauses.

   We assume that all clauses in T(v) - TR(v) are necessary, that is,
   for every e in D(v) there is a total assignment phi for the variables
   in T(v) such that all clauses except of T(v,e) are satisfied.

   The standard nested translation uses 1 <= i < |D(v)| (while for the
   above standard translation we have 1 <= i <= D(v)).

   The translation now replaces every clause C in F by the clause which
   is the union of the clauses T(v,e) for the literals [v,e] in C, and
   adds furthermore all clauses in T'(v) for all v in V.

   Let D(v) = {e_1, ..., e_k} (k >= 1).

   We obtain the above weak standard translation by letting
     T(v) = { {-nbv(v,e_1)}, ..., {-nbv(v,e_k)} } + 
            { {nbv(v,e_1), ..., nbv(v,e_k)} }
   where T(v,e_i) = {-nbv(v,e_i)}.
   For the strong standard translation we just add the binary clauses
   {-nbv(v,e_i), -nbv(v,e_j)} for i <> j.

   The standard nested translation uses
     T(v) = smusat_horn_stdfcl(k-1)
   where T(v,e_i) uses some permutation of the clause-list (which is of
   length k), and where the variables 1, ..., k-1 are replaced by nbv(v,i).

*/

/* For a map T(v,e), depending on variables and their values and computing
   a clause-set, translate a non-boolean clause C into a new clause which is 
   the union of the results of applying T to the elements of C:
*/
gennest_clause_trans(C,T) := lunion(map(lambda([x],apply(T,x)), C))$

/* Given a non-boolean formal clause-list FF, a map T(v,e) which associates
   to every variable v and its values e a boolean clause in the
   variables nbv(v,i), a map TR(v) which associates to every variable v
   a clause-list (the "remaining" clauses), and a map TV(v) which associates
   to every variable v the list of variables of T(v,e), compute the
   boolean clause-set as specified above:
*/
gennest_nbfcl2fcl(FF,T,TR,TV) := [
 lappend(map(TV,FF[1])),
 append(
   map(lambda([C], gennest_clause_trans(C,T)), FF[2]),
   lappend(map(TR,FF[1]))
 )]$
/* Remark: See gennest_nbfcl2fcl_p below for checking correctness. */


/* The standard translation */

standtrans_T(v,e) := {-nbv_var(v,e)}$
standtrans_fd_weak_TR(D) := buildq([D],
 lambda([v], [setify(create_list(nbv_var(v,e), e, D(v)))]))$
standtrans_ud_weak_TR(D) := buildq([D],
 lambda([v], [setify(create_list(nbv_var(v,e), e, D))]))$
standtrans_fd_TV(D) := buildq([D],
 lambda([v], create_list(nbv_var(v,e), e, D(v))))$
standtrans_ud_TV(D) := buildq([D],
 lambda([v], create_list(nbv_var(v,e), e, D)))$

nbfclfd2fcl_alo_2(FF) := gennest_nbfcl2fcl(rest(FF,-1), standtrans_T, standtrans_fd_weak_TR(FF[3]), standtrans_fd_TV(FF[3]))$
nbfclud2fcl_alo_2(FF) := gennest_nbfcl2fcl(rest(FF,-1), standtrans_T, standtrans_ud_weak_TR(FF[3]), standtrans_ud_TV(FF[3]))$


/* The standard nested translation */

/* Using a uniform non-empty domain D, and ordering the saturated Horn clause
   in the same way (from smallest to largest):
*/
standnest_T(D) := block([k : length(D), h : osm2hm(l2osm_inv(D))],
 buildq([k,h],
  lambda([v,e], block([i : ev_hm(h,e)],
   if i < k then setify(cons(nbv_var(v,i),create_list(-nbv_var(v,j),j,1,i-1)))
   else setify(create_list(-nbv_var(v,j),j,1,i-1))))))$
standnest_TR(D) := lambda([v], [])$
standnest_strong_TR(D) := buildq([Vt : standnest_TV(D)],
 lambda([v], listify(powerset(setify(Vt(v)),2))))$
standnest_TV(D) := buildq([l:length(D)],
 lambda([v], create_list(nbv_var(v,i), i,1,l-1)))$

nbfclud2fcl_standnest(FF) := gennest_nbfcl2fcl(rest(FF,-1), standnest_T(FF[3]), standnest_TR(FF[3]), standnest_TV(FF[3]))$
nbfclud2fcl_standnest_strong(FF) := gennest_nbfcl2fcl(rest(FF,-1), standnest_T(FF[3]), standnest_strong_TR(FF[3]), standnest_TV(FF[3]))$


/* ************************************************
   * Tools for the generalised nested translation *
   ************************************************
*/

/* Checking for correctness of the arguments T,TR,TV of gennest_nbfcl2fcl:
   V is the list of variables, D is the functional domain (yielding for
   every variable in V a repetition-free list of values), S is a
   SAT solver (input a boolean formal clause-set, output true/false).
*/
gennest_nbfcl2fcl_p(V,D_,S_, T_,TR_,TV_) := block([counterexample : false],
  for v in V unless counterexample do block(
   [Fv : map(lambda([e],T_(v,e)),D_(e)), Fr : TR_(v), F,Vv],
    if not cl_p(Fv) or not cl_p(Fr) then (counterexample : true, return()),
    F : setify(append(Fv, Fr)), Vv : var_cs(F),
    if not subsetp(Vv, setify(TV_(v))) or 
        S_([Vv,F]) # false or
        some_s(lambda([E], impliesp_cs(disjoin(E,F),E,S_)), Fv)
    then counterexample : true
  ),
  if counterexample then return(false),
  for P in powerset(setify(V),2) unless counterexample do
    if not apply(disjointp, map(setify,map(TV_, listify(P)))) then counterexample : true,
  return(not counterexample))$
    

/* Find a maximal set of binary clauses (without new variables) which
   can be added to the union of F1, F2 while maintaining that all clauses
   in F1 are necessary.
   Prerequisites: F1, F2 are clause-sets, S is some SAT-solver (input a
   boolean formal clause-set, output true/false).
*/
add_bincl_nec(F1,F2,S) := block(
 [U : union(F1,F2), V],
  V : var_cs(U),
  for C in random_permutation(setdifference(all_pass_n(V,2),U)) do block(
   [new_U : adjoin(C,U)],
    if every_s(lambda([D], not impliesp_cs(disjoin(D,new_U),D,S)), F1) then
      U : new_U
  ),
  return(setdifference(U,union(F1,F2))))$
/* Remarks: For a variable v with domain D the meaning of F1, F2
   w.r.t. the above description is
     F1 = {T(v,e) : e in D}
     F2 = TR(v).
   add_bincl_nec(F1,F2,S) then computes some maximal set of binary clauses
   which can be added to TR(v).
*/

/*!
\endhtmlonly
*/
