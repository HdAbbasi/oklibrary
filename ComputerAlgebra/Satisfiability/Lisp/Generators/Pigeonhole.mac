/* Matthew Gwynne, 26.8.2011 (Swansea) */
/* Copyright 2011, 2012, 2013, 2016 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/Pigeonhole.mac
  \brief Generators for the pigeonhole formulas

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Pigeonhole.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Substitutions.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/NonBooleanTranslations.mac")$


/* ************************
   * Pigeon-hole formulas *
   ************************
*/

/* TODO: The following needs to be updated, so that the list-forms
   are the basic forms, and the set-forms are derived. See todo
   "Update the php-functions" in the plans-file.
   See also the non-boolean list form below for the order-issue.
   Also the improved output-functions should be used.
*/

/* Encoding all injective maps from {1,...,m} to {1,...,n}
   (putting pigeon i in {1,...,m} into hole in {1,...,n}).
*/

/* Variables are "php(i,j)", meaning that pigeon i is in hole j: */
kill(php)$
declare(php, noun)$
declare(php, posfun)$
php_var(i,j) := nounify(php)(i,j)$

/* The set of variables for the pigeonhole formulas with m pigeons and
   n holes (order is lexicographical):
*/
var_php_l(m,n) := create_list(php_var(i,j), i,1,m, j,1,n)$
var_php(m,n) := setify(var_php_l(m,n))$

/* In the following m denotes the number of pigeons, n the number of holes. */

/* No two pigeons in the same hole (order is first holes k, then the two
   pigeons i, j lexicographically):
*/
pigeons_different_holes_cl(m,n) :=
 create_list({-php_var(i,k), -php_var(j,k)}, k,1,n, i,1,m-1, j,i+1,m)$
pigeons_different_holes_cs(m,n) := setify(pigeons_different_holes_cl(m,n))$

/* Every pigeon in one hole (order by pigeons): */
pigeons_in_holes_cl(m,n) :=
 create_list(setify(create_list(php_var(i,j), j,1,n)), i,1,m)$
pigeons_in_holes_cs(m,n) := setify(pigeons_in_holes_cl(m,n))$

/* In the following, "weak" refers to not using the AMO-constraints for the
   pigeons.
*/

/* The weak pigeon formula as formal clause-set: */
weak_php_fcs(m,n) := [var_php(m,n),
 union(pigeons_different_holes_cs(m,n), pigeons_in_holes_cs(m,n))]$
weak_php_cs(m,n) := fcs2cs(weak_php_fcs(m,n))$

output_weak_php(m,n,filename) := block(
 [FF : standardise_fcs(weak_php_fcs(m,n))],
  output_fcs_v(
    sconcat("The pigeonhole principle (weak form): ", m, " pigeons, ", n, " holes."),
    FF[1], filename, FF[2]))$
output_weak_php_stdname(m,n) := output_weak_php(m,n,
  sconcat("PHP_weak_",m,"_",n,".cnf"))$


/* Additional clauses: */


/* No pigeon in more than one hole: */
pigeon_unique_hole(m,n) := setify(create_list({-php_var(i,k1), -php_var(i,k2)},
  i,1,m, k1,1,n-1, k2,k1+1,n))$

/* Every hole carries a pigeon: */
holes_occupied(m,n) :=
 setify(create_list(setify(create_list(php_var(i,j), i, 1, m)), j,1,n))$

/* Remark: The clauses of pigeon_unique_hole(m,n) as well as of
   pigeon_unique_hole(m,n) are totally blocked for weak_php_cs(m,n) (except
   possibly for degenerations) *on their own*, but not together.
*/

/* The "strong" pigeonhole formula as formal clause-set: */
strong_php_fcs(m,n) := block([FF : weak_php_fcs(m,n)],
  [FF[1], union(FF[2], pigeon_unique_hole(m,n))])$
strong_php_cs(m,n) := fcs2cs(strong_php_fcs(m,n))$
/* Remark: "strong" comes from our general terminology regarding boolean
   translation of non-boolean clause-sets; especially for the PHP the
   term "functional" is used.
*/

output_strong_php(m,n,filename) := block(
 [FF : standardise_fcs(strong_php_fcs(m,n))],
  output_fcs_v(
    sconcat("The pigeonhole principle (strong (i.e., functional) form): ", m, " pigeons, ", n, " holes."),
    FF[1], filename, FF[2]))$
output_strong_php_stdname(m,n) := output_strong_php(m,n,
  sconcat("PHP_strong_",m,"_",n,".cnf"))$


/* The "dual_strong" pigeonhole formula as formal clause-set: */
dual_strong_php_fcs(m,n) := block([FF : weak_php_fcs(m,n)],
  [FF[1], union(FF[2], holes_occupied(m,n))])$
dual_strong_php_cs(m,n) := fcs2cs(dual_strong_php_fcs(m,n))$
/* Remark: "dual strong" comes from our general terminology regarding boolean
   translation of non-boolean clause-sets; especially for the PHP the
   term "onto" is used.
*/

output_dual_strong_php(m,n,filename) := block(
 [FF : standardise_fcs(dual_strong_php_fcs(m,n))],
  output_fcs_v(
    sconcat("The pigeonhole principle (dual strong (i.e., onto-) form): ", m, " pigeons, ", n, " holes."),
    FF[1], filename, FF[2]))$
output_dual_strong_php_stdname(m,n) := output_dual_strong_php(m,n,
  sconcat("PHP_dual_strong_",m,"_",n,".cnf"))$


/* The "special" pigeonhole formula as formal clause-set: */
special_php_fcs(m,n) := block([FF : weak_php_fcs(m,n)],
  [FF[1], union(FF[2], pigeon_unique_hole(m,n), holes_occupied(m,n))])$
special_php_cs(m,n) := fcs2cs(special_php_fcs(m,n))$
/* Remark: special_php_fcs(m,n) is satisfiable iff m=n.
   "Special" comes from our general terminology regarding boolean
   translation of non-boolean clause-sets; especially for the PHP the
   term "onto-functional" is used (in case m>n).
*/

output_special_php(m,n,filename) := block(
 [FF : standardise_fcs(special_php_fcs(m,n))],
  output_fcs_v(
    sconcat("The pigeonhole principle (special (i.e., bijective) form): ", m, " pigeons, ", n, " holes."),
    FF[1], filename, FF[2]))$
output_special_php_stdname(m,n) := output_special_php(m,n,
  sconcat("PHP_special_",m,"_",n,".cnf"))$


/* Standardisation:
   One can just use standardise_fcs (resp. standardise_fcl).
   TODO: provide explicit standardisation (that is faster).
*/

/* Measures */

nvar_php(m,n) := m * n$

/* List of clause-counts for weak_php as with ncl_list_fcs: */
ncl_list_weak_php(m,n) :=
  if m = 0 then []
  elseif n = 0 then [[0,1]]
  elseif m = 1 then [[n,m]]
  elseif n = 1 then [[n,m], [2,n*binomial(m,2)]]
  elseif n = 2 then [[2,n*binomial(m,2)+m]]
  else [[2,n*binomial(m,2)], [n,m]]$
ncl_weak_php(m,n) := block([L : ncl_list_weak_php(m,n)],
 return(sum(L[i][2], i, 1, length(L))))$

deficiency_weak_php(m,n) := ncl_weak_php(m,n) - nvar_php(m,n)$

/* The probability that a random assignment is satisfiable: */
satprob_weak_php(m,n) := sum(binomial(n,i) * stirling2(i,m) * m! ,i,m,n) / 2^nvar_php(m,n)$


/* *********************
   * Non-boolean forms *
   *********************
*/

/*
   The non-boolean forms just states the AMO-constraint for the n holes via
   binary clauses.
   Expressing the ALO-constraint for the m pigeons, and possibly the
   AMO-constraint for them is up to the translation (while the ALO-constraint
   for the holes in case of m > n is an infererence-problem).

   Variables are 1,...,m, values are 1,...,n. The order of the binary
   clauses is anti-lexicographic, so that the list is monotonic in m.
*/

php_nbfclud(m,n) := [
 create_list(i,i,1,m),
 create_list({[i,e],[j,e]}, j,2,m, i,1,j-1, e,1,n),
 create_list(i,i,1,n)
]$

/* The translations: */

/* The direct (or standard) translations (using variables nbv(i,j), which
   correspond to php(i,j)):
*/
php_alo_fcl(m,n) :=
  nbfclud2fcl_alo(php_nbfclud(m,n))$
php_aloamo_fcl(m,n) :=
  nbfclud2fcl_aloamo(php_nbfclud(m,n))$

/* We have
  standardise_fcs(weak_php_fcs(m,n))[1] = fcl2fcs(standardise_fcl(php_alo_fcl(m,n))[1]))
  standardise_fcs(strong_php_fcs(m,n))[1] = fcl2fcs(standardise_fcl(php_aloamo_fcl(m,n))[1]))

TODO: Provide explicit standardisation.
TODO: Provide output-functions.

*/

/* The nested translations:
*/

php_standnest_fcl(m,n) :=
  nbfclud2fcl_standnest(php_nbfclud(m,n))$
php_standnest_strong_fcl(m,n) :=
  nbfclud2fcl_standnest_strong(php_nbfclud(m,n))$

/*
TODO: Provide explicit standardisation.
TODO: Provide output-functions.
*/

/* The dual form, using positive non-boolean literals, with holes as variables
   and pigeons as values, with the clauses stating that every pigeon i sits
   in some hole (i.e., the mapping is surjective, while the standard form, from
   pigeons to holes, states the injectivity of the mapping).
*/
dualphp_snbfclud(m,n) := [
 create_list(j,j,1,n),
 create_list(setify(create_list([j,i,+1],j,1,n)), i,1,m),
 create_list(i,i,1,m)
]$




/* *********************************
   * Extended pigeon-hole formulas *
   *********************************
*/

/* PHP formulas with additional clauses from the Extended Resolution
   refutation given in [A short proof of the pigeon hole principle using
   extended resolution"; Stephen Cook].

   Additional clauses, using new variables, allow polynomial size
   resolution proofs.
*/

/* Variables are "php_ext(n,i,j)", meaning that pigeon i is in hole j in the
   map from {1,...,n} to {1,...,n-1}.  */
kill(php_ext)$
declare(php_ext, noun)$
declare(php_ext, posfun)$
php_ext_var(n,i,j) := nounify(php_ext)(n,i,j)$

/* Clauses enforcing that if the variables
     php_ext_var(mp+1,i,j) for i in {1,...,mp+2}, j in {1,...,mp+1}
   represent an injective map phi : {1,...,mp+2} -> {1,...,mp+1} then variables
     php_ext_var(mp,i,j) for i in {1,...,mp+1}, j in {1,...,mp}
   represent the map phi_mp :  {1,...,mp+1} -> {1,...,mp}:
     phi_mp(i) = phi(i) if phi(i) # mp
                 phi(mp+2) if phi(i) = mp.
*/
php_induction_step_cl(mp) :=
    lappend(create_list(
      [{php_ext_var(mp,i,j), -php_ext_var(mp+1,i,j)},
       {php_ext_var(mp,i,j), -php_ext_var(mp+1,i,mp+1), -php_ext_var(mp+1,mp+2,j)},
       {-php_ext_var(mp,i,j), php_ext_var(mp+1,i,j), php_ext_var(mp+1,i,mp+1)},
       {-php_ext_var(mp,i,j), php_ext_var(mp+1,i,j), php_ext_var(mp+1,mp+2,j)}],
      i,1,mp+1,j,1,mp))$
/* Extended pigeon-hole induction clauses (using uniform variable names): */
php_induction_uni_cl(m) :=
  lappend(
    create_list(php_induction_step_cl(mp), mp,1,m-1))$
php_induction_cl(m) :=
  substitute_cl(php_induction_uni_cl(m),sm2hm(var_ephp2php_sm(m)))$

/* For m >= 0, yields weak_php_fcs(m+1,m) with Extended Resolution clauses
   as given in
   [A short proof of the pigeon hole principle using extended resolution;
   Stephen Cook]: */
weak_php_unsat_ext_fcs(m) := block([F : weak_php_unsat_ext_uni_fcs(m)],
  [listify(substitute_cs({F[1]},sm2hm(var_ephp2php_sm(m))))[1],
   substitute_cs(F[2],sm2hm(var_ephp2php_sm(m)))])$
/* Using now php_ext_var(m+1,i,j) for php_var(i,j) for uniformity: */
weak_php_unsat_ext_uni_fcs(m) := block([F : weak_php_fcs(m+1,m)],
  [setify(create_list(php_ext_var(mp,i,j), mp, 1, m, i, 1, mp+1, j, 1, mp)),
   union(setify(php_induction_uni_cl(m)),
     substitute_cs(F[2],sm2hm(var_php2ephp_sm(m))))])$

/* Standardisation */

standardise_weak_php_unsat_ext_uni(m) :=
 lambda([t], ev(t, php_ext(l,i,j):=l^3/3+i*l-4*l/3+j, php_ext))$
/* We have that:
     1) php_ext(l,i,j) := sum((lp+1) * lp, lp, 1, l-1) + (i-1) * l + j,
        that is: php_ext(1,1,1) -> 1, php_ext(1,2,1) -> 2,
                 php_ext(2,1,1) -> 3, php_ext(2,1,2) -> 4,
                 php_ext(2,2,1) -> 5, etc;
     2) the standardisation is independent of m, and m is only taken
     for consistency with other standardisation functions.
*/

invstandardise_weak_php_unsat_ext_uni(m) :=
 lambda([t], block([l: 1,i,j],
     while l^3 - l + 3 <= 3 * t do l : l +1,
     l : l -1,
     t : t - ((l^3 - 4*l)/3),
     i : ceiling(t / l) - 1,
     t : t - i * l,
     php_ext_var(l,i,t)))$

weak_php_unsat_ext_stdfcs(m) :=
  standardise_weak_php_unsat_ext_uni(m)(weak_php_unsat_ext_uni_fcs(m))$

/* Mapping the standard pigeon hole variables to their counter-parts in
   the extended-pigeon-hole clause-set weak_php_unsat_ext_uni_fcs(m): */
var_php2ephp_sm(m) :=
  setify(lappend(
      create_list(
        if l = m then
          [[ php_var(i,j), php_ext_var(m,i,j)  ],
          [ -php_var(i,j), -php_ext_var(m,i,j) ]]
        else
          [[ php_ext(l,i,j), php_ext_var(l,i,j) ],
          [ -php_ext(l,i,j), -php_ext_var(l,i,j) ]],
        l, 1, m,i,1,l+1,j,1,l)))$
/* Renaming the extended-pigeon-hole variables to their counter-parts in
   the original pigeon-hole clause-set: */
var_ephp2php_sm(m) :=
    setify(lappend(
        create_list(
          if l = m then
            [[ php_ext_var(m,i,j), php_var(i,j)  ],
            [ -php_ext_var(m,i,j), -php_var(i,j) ]]
          else
            [[ php_ext(l,i,j), php_ext_var(l,i,j) ],
            [ -php_ext(l,i,j), -php_ext_var(l,i,j) ]],
          l, 1, m,i,1,l+1,j,1,l)))$

/* Output */

output_weak_php_unsat_ext(m, filename) := block(
  [FF : weak_php_unsat_ext_stdfcs(m)],
  output_fcs_v(
    sconcat("The extended pigeonhole formulas: ", m+1, " pigeons, ", m, " holes."),
    FF, filename,
    create_list(php_ext_var(mp,i,j), mp, 1, m, i, 1, mp+1, j, 1, mp)))$
output_weak_php_unsat_ext_stdname(m) :=
  output_weak_php_unsat_ext(m, sconcat("EPHP_",m,".cnf"))$

/* Measures */

nvar_weak_php_unsat_ext(m) := m^3/3+m^2+2*m/3$
/* This is: (m+1) * m + sum((l+1) * l, l, 1, m-1), simpsum, expand, simp; */
ncl_weak_php_unsat_ext(m) := 11*m^3/6+m^2/2-m/3+1$
/* This is: (m+1) + binomial(m+1,2) * m + sum(4*l*(l-1),l,1,m),
            simpsum, expand,simp; */





/*!
\endhtmlonly
*/
