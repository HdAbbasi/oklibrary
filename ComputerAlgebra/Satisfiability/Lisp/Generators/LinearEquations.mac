/* Oliver Kullmann, 11.5.2013 (Swansea) */
/* Copyright 2013 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/LinearEquations.mac
  \brief Generators for clause-sets related to linear equations

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/LinearEquations.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/PartialAssignments.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Substitutions.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Pigeonhole.mac")$


/* *********************
   * Parity conditions *
   *********************
*/

/* The repetition-free clause-list of full clauses over variables 1, ..., n,
   such that the satisfying assignments are given by the condition that the
   sum over the values is even resp. odd, that is, the list of full clauses
   having an odd resp. even number of negative literals; the order is
   lexicographical:
*/
even_parity_cl(n) :=
  sublist(all_tass_l(setn(n)),
          lambda([C], oddp(sum_l(map(negsignum, listify(C))))))$
/* Now supplying the list V of variables: */
even_parity_wv_cl(V) :=
  sublist(all_tass_l(setify(V)),
          lambda([C], oddp(sum_l(map(negsignum, listify(C))))))$
/* As formal clause-list: */
even_parity_fcl(n) := [create_list(i,i,1,n),even_parity_cl(n)]$

odd_parity_cl(n) :=
  sublist(all_tass_l(setn(n)),
          lambda([C], evenp(sum_l(map(negsignum, listify(C))))))$
/* Now supplying the list V of variables: */
odd_parity_wv_cl(V) :=
  sublist(all_tass_l(setify(V)),
          lambda([C], evenp(sum_l(map(negsignum, listify(C))))))$
/* As formal clause-list: */
odd_parity_fcl(n) := [create_list(i,i,1,n),odd_parity_cl(n)]$


/* **********************
   * Parity constraints *
   **********************
*/

/*
  A "(boolean) parity-constraint" ("prt") is a list L of literals with
  different underlying variables, with meaning "sum_{x in L} x = 0",
  where the sum takes places in the 2-element field {0,1} (i.e., the sum
  is xor).
  A "general (boolean) parity-constraint" ("gprt") is a pair [L,e], where
  L is a list of literals (arbitrary) and e in {0,1}. Again, the meaning is
  "sum_{x in L} x = 0".
*/

prt2gprt(P) := [P,0]$

/* Simplifying a general parity-constraint P to a parity-constraint or to
   false iff P is unsatisfiable, sorted in ascending order by absolute values,
   and such that at most one literal is negative, which then is the first
   literal:
*/
gprt2prt(P) := block([L:first(P), e:second(P), res:{}],
 for x in L do
   if elementp(x,res) then res : disjoin(x,res)
   elseif elementp(-x,res) then (res : disjoin(-x,res), e : 1-e)
   else
     if pos_l(x) then res : adjoin(x,res)
     else (res : adjoin(-x,res), e : 1-e),
 res : listify(res),
 if e=1 then
   if emptyp(res) then false
   else cons(-first(res), rest(res))
 else res)$
/* Remark: gprt2prt(P) is a normalform for P, with two general
   parity-constraints P1, P2 being equivalent (having the same satisfying
   assignments) iff gprt2prt(P1) = gprt2prt(P2).
*/

/* Equivalence of (general) parity constaints: */
equiv_gprt(P1,P2) := is(gprt2prt(P1) = gprt2prt(P2))$
equiv_prt(P1,P2) := is(gprt2prt([P1,0]) = gprt2prt([P2,0]))$


/* Adding together a list of (general) parity-constraints and simplifying the
   result:
*/
addgprt2prt(L) :=
 gprt2prt([lappend(map(first,L)), mod(sum_l(map(second,L)),2)])$
addprt2prt(L) := addgprt2prt(map(prt2gprt,L))$


/* **********************************
   * Translating parity constraints *
   **********************************
*/

/* Direct translation: */
prt2cl_0(P) :=
 if evenp(sum_l(map(negsignum, listify(P)))) then
   even_parity_wv_cl(map(var_l,P))
 else odd_parity_wv_cl(map(var_l,P))$
/* Remark: this directly generalises even_parity_wv_cl(V). */

/* Translating the sequence of partial equations, using the list aux of
   auxiliary variables fulfilling length(aux) >= length(P)-2:
*/
prt2cl_aux_1(P,aux) := if length(P) <= 2 then prt2cl_0(P)
 else block([F : prt2cl_0([P[1],P[2],aux[1]])],
  P : rest(P,2),
  while length(P) > 1 do (
    F : append(F, prt2cl_0([P[1],aux[1],aux[2]])),
    P : rest(P), aux : rest(aux)
  ),
  append(F, prt2cl_0([P[1],aux[1]])))$

/* A generator for unsatisfiable clause-sets of hardness n and w-hardness 2
   (for n >= 2), via translating the prt's [1,...,n], and [1,...,n-1,-n]:
*/
gen_2xor_fcl(n) := if n<=2 then full_fcl(n) else
 [listn(3*n-4),
  append(prt2cl_aux_1(listn(n), listmn(n+1,2*n-2)),
         prt2cl_aux_1(endcons(-n,listn(n-1)), listmn(2*n-1,3*n-4)))]$

output_gen_2xor_fcl(n,filename) :=
 outputext_fcl(
   sconcat("2 xor-clauses with contradiction, ", n, " basic variables.
c Created by the OKlibrary at ", timedate(), "."),
   gen_2xor_fcl(n),
   filename)$

output_gen_2xor_stdname(n) := output_gen_2xor_fcl(n,
 sconcat("TwoXORclauses-",n,".cnf"))$


/* Translating equalities. */

/* For a set S of literals, translate the condition that they all shall be
   equal:
*/
seteqlit2cl(S) := if emptyp(S) then []
 elseif not emptyp(intersection(S,comp_sl(S))) then [{}]
 else block([x],
  S:listify(S), x:first(S),
  lappend(map(lambda([y], prt2cl_0([x,y])), rest(S))))$


/* Translation of two xor-clauses. */

/* Using the UC-translation for the two parity-constraints, plus the
   UC-translation for the sum of the two parity constraints, where actually
   general parity-constraints are allowed:
*/
gprt2s2cl_aux_2(P1,aux1,P2,aux2,aux3) :=
 block([S1:gprt2prt(P1), S2:gprt2prt(P2), S3],
  S3 : addgprt2prt([P1,P2]),
  if S1=false or S2=false or S3=false then [{}]
  else append(prt2cl_aux_1(S1,aux1), prt2cl_aux_1(S2,aux2), prt2cl_aux_1(S3,aux3)))$


/* An improved translation, not using the third (derived) constraint, but
   "sharing common sub-expressions", that is, the value of the common part
   is used via the appropriate (auxiliary) variable in the larger constraint:
*/
gprt2s2cl_aux_s(P1,aux1,P2,aux2) :=
 block([S1:gprt2prt(P1), S2:gprt2prt(P2)],
  if S1=false or S2=false or addgprt2prt([[S1,0],[S2,0]])=false then [{}]
  elseif emptyp(S2) or S1=S2 then prt2cl_aux_1(S1,aux1)
  elseif emptyp(S1) then prt2cl_aux_1(S2,aux2)
  else block([e1:0, e2:0, I],
   if neg_l(first(S1)) then (e1:1, S1:cons(-first(S1),rest(S1))),
   if neg_l(first(S2)) then (e2:1, S2:cons(-first(S2),rest(S2))),
   S1:setify(S1), S2:setify(S2),
   I : intersection(S1, S2),
   if emptyp(I) then
     return(append(prt2cl_aux_1(gprt2prt([S1,e1]),aux1), prt2cl_aux_1(gprt2prt([S2,e2]),aux2))),
   if length(S1)>length(S2) then block([S:S2,a:aux2],S2:S1,S1:S,aux2:aux1,aux1:a),
   S1 : append(listify(I), listify(setdifference(S1,I))),
   S2 : listify(setdifference(S2,I)),
   if length(I)=length(S1) then (
     e2 : e2 + e1,
     return(append(prt2cl_aux_1(gprt2prt([S1,e1]),aux1), prt2cl_aux_1(gprt2prt([S2,e2]),aux2)))
   )
   elseif length(I)=1 then S2 : cons(first(S1), S2)
   else S2 : cons(aux1[length(I)-1], S2),
   if e1=1 then S1 : endcons(-last(S1),rest(S1,-1)),
   return(append(prt2cl_aux_1(S1,aux1), prt2cl_aux_1(gprt2prt([S2,e2]),aux2)))
  ))$
/* Remark: The order of clauses is as given by gprt2prt and prt2cl_aux_1. */

/* A generator for unsatisfiable clause-sets, with p >= 1 the common
   "parity part", and q >= 0 the "pigeonhole part":
   The main variables are 1,...,p and the variables php(i,j) of weak_php(m,n)
   with n=2*q and m=n+1.
   We have two parity-constraints, namely that, using v_1,...,v_p for
   the variables 1,...,p, "+" for xor, and S = v_1+...+v_{p-1}:
     S + v_p + php(1,1) + ... + php(1,q) = 0
     S - v_p + php(1,q+1) + ... + php(1,n) = 0.
   From this follows that
     php(1,1) + ... + php(1,n) = 1.
   And then we have weak_php_cs(m,n) minus the clause
     {php(1,1), ... php(1,n)}
   (which enforces, that php(1,1) = ... = php(1,n) = 0).
   For s=0 the translation sprt2cl_aux_1 is used, for s=1 the translation
   gprt2s2cl_aux_s.
*/
/* TODO: the natural-number-variables should be numbered without gap (
   currently this is not the case for aux2). */
/* TODO: we need the ordered version. */
/* TODO: we need the standardised version. */
/* TODO: for s=2 the two parity-constraints are replaced by
   php(1,1) + ... + php(1,n) = 1.
*/
parityphp_cs(p,q,s) := block([n:2*q, m:2*q+1, PH, C, P1,P2,aux1,a,aux2,P],
 PH : weak_php_cs(m,n),
 C : create_list(php_var(1,j),j,1,n),
 PH : disjoin(setify(C), PH),
 P1 : append(listn(p),rest(C,-q)),
 P2 : append(listn(p-1),[-p],rest(C,q)),
 a : p+1+length(P1)-2,
 aux1 : listmn(p+1, a-1),
 aux2 : listmn(a, a + length(P2)-2 -1),
 if s=0 then
  P : sprt2cl_aux_1([[P1,aux1],[P2,aux2]])
 else
  P : gprt2s2cl_aux_s([P1,0],aux1,[P2,0],aux2),
 union(PH,cl2cs(P)))$
parityphp_fcl(p,q,s) := cs2fcl(parityphp_cs(p,q,s))$

output_parityphp_cs(p,q,s,filename) := block(
 [FF : standardise_fcl(parityphp_fcl(p,q,s))],
  output_fcl_v(
    sconcat("2 parity-constraints plus PHP, p=", p, ", q=", q, ", s=", s, ".
c Created by the OKlibrary at ", timedate(), "."),
    FF[1], filename, FF[2]))$

output_parityphp_stdname(p,q,s) := output_parityphp_cs(p,q,s,
 sconcat("ParityPHP-",p,"_",q,"_",s,".cnf"))$


/* Finally general systems of parity constraints ("sprt"). */


/* For a list L of parity constraints the prime implicates per constraint: */
sprt2cl_0(L) := lappend(map(prt2cl_0,L))$


/* For a list of pairs [P,aux], where aux is the list of auxiliary variables
   (or literals; all new), applying translation prt2cl_aux_1 per pair:
*/
sprt2cl_aux_1(L) := lappend(map(lambda([p],apply(prt2cl_aux_1,p)), L))$

/* Adding to sprt2cl_aux_1(L) all (valid) equalities between auxiliary
   variables and their complements (using seteqlit2cl to produce the
   equality between sets C of literals, where the C are taken in (built-in)
   lexicographical order):
*/
sprt2cl_aux_1e(L) := block([h:sm2hm({}), V:{}, E],
  for p in L do block([i:2, x:first(p), a:second(p)],
    if length(x) >= 3 then
      for y in take_l(length(x)-2, a) do (
        V : adjoin(y,V), V : adjoin(-y,V),
        set_hm(h,y,gprt2prt([take_l(i,x),0])),
        set_hm(h,-y,gprt2prt([take_l(i,x),1])),
        i:i+1
      )
    ),
    E : equiv_classes(V, lambda([y1,y2], is(ev_hm(h,y1)=ev_hm(h,y2)))),
    E : equiv_classes(E, lambda([C,D], is(comp_sl(C)=D))),
    E : listify(map(first_element, E)),
    append(sprt2cl_aux_1(L), lappend(map(seteqlit2cl, E))))$


/* Extending a set SP of parity-constraints by all xor-clauses (modulo
   equivalence, without the empty parity-constraint) which follow, replacing
   the original xor-clauses by their standardisation:
*/
closure_sprt(SP) := block(
 [E : disjoin([],map(lambda([s], addprt2prt(listify(s))), disjoin({},powerset(SP))))],
  if elementp(false,E) then {false} else E)$


/*!
\endhtmlonly
*/
