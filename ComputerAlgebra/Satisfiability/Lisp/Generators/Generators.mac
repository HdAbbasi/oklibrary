/* Oliver Kullmann, 29.11.2007 (Swansea) */
/* Copyright 2007, 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac
  \brief Functions for basic operations with clause-sets

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/Generators.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$

/* ********************
   * Full clause-sets *
   ********************
*/

/* a formal full clause set with variable set {1,...,n} and all possible (full) clauses */
full_fcs(n) := if n=0 then [{}, {{}}] else [setn(n), map(setify, apply(cartesian_product, makelist({-i,i},i,1,n)))]$


/* ************************
   * Pigeon-hole formulas *
   ************************
*/

/* Encoding all injective maps from {1,...,m} to {1,...,n}
   (putting pigeon i in {1,...,m} into hole in {1,...,n}).
*/

/* Variables are "php(i,j)", meaning that pigeon i is in hole j */
kill(php)$
declare(php, noun)$
declare(php, posfun)$
php_var(i,j) := nounify(php)(i,j)$

/* The set of variables for the pigeonhole formulas with m pigeons and n holes */
var_php(m,n) := setify(create_list(php_var(i,j), i,1,m, j,1,n))$

/* In the following m denotes the number of pigeons, n the number of holes */

/* no two pigeon in the same hole */
pigeons_different_holes(m,n) := setify(create_list({- php_var(i,k), - php_var(j,k)}, 
  i,1,m-1, j,i+1,m, k,1,n))$

/* every pigeon in one hole */
pigeons_in_holes(m,n) := setify(
  makelist(setify(makelist(php_var(i,j), j, 1, n)), i,1,m))$

/* the weak pigeon formula as formal clause-set */
weak_php(m,n) := [var_php(m,n), 
 union(pigeons_different_holes(m,n), pigeons_in_holes(m,n))]$

output_weak_php(m,n,filename) := block([FF : standardise_fcs(weak_php(m,n))],
  output_cs_f_v(
    sconcat("The pigeonhole principle (weak form): ", m, " pigeons, ", n, " holes."), 
    FF[1], filename, FF[2]))$


/* no pigeon in more than one hole */
pigeon_unique_hole(m,n) := setify(create_list({-php_var(i,k1), -php_var(i,k2)},
  i,1,m, k1,1,n-1, k2,k1+1,n))$

/* every hole carries a pigeon */
holes_occupied(m,n) := if m < n then {} else
  setify(makelist(setify(makelist(php_var(i,j), i, 1, m)), j,1,n))$

/* the strong pigeon formula as formal clause-set */
strong_php(m,n) := block([FF : weak_php(m,n)],
  [FF[1], union(FF[2], pigeon_unique_hole(m,n), holes_occupied(m,n))])$

output_strong_php(m,n,filename) := block([FF : standardise_fcs(strong_php(m,n))],
  output_cs_f_v(
    sconcat("The pigeonhole principle (strong form): ", m, " pigeons, ", n, " holes."), 
    FF[1], filename, FF[2]))$

/* Measures */

nvar_php(m,n) := m * n$

/* List of clause-counts for weak_php as with ncl_list_f */
ncl_list_weak_php(m,n) :=
  if m = 0 then []
  elseif n = 0 then [[0,1]]
  elseif m = 1 then [[n,m]]
  elseif n = 1 then [[n,m], [2,n*binom(m,2)]]
  elseif n = 2 then [[2,n*binom(m,2)+m]]
  else [[2,n*binom(m,2)], [n,m]]$


/* ***************************
   * Van der Waerden problem *
   ***************************
*/

/* Boolean clause-sets, whose solutions are the partitionings of {1,...,n}
 into two parts such that none of them contains an arithmetic progression
 of size k */
VanDerWaerden2_cs_f(k,n) := block([G : ArithmeticProgressions(k,n)], 
  [G[1], union(G[2], comp_cs(G[2]))])$
/* VanDerWaerden2_cs_f(k,n) is isomorphic to 
   tcol2sat(ArithmeticProgressions(k,n). */


output_VanDerWaerden2_cs_f(k,n,filename) := 
  output_cs_f(
    sconcat("Van der Waerden problem: 2 parts, arithmetic progressions of size ", k, ", ", n, " elements."), 
    VanDerWaerden2_cs_f(k,n),
    filename)$


/* *******************************************************
   * Minimally unsatisfiable clause-sets of deficiency 2 *
   *******************************************************
*/

/* The standard MUSAT(def=2) formulas where every literal occurs at least twice,
   for n >= 2 */
musatd2(n) := [setn(n), union({setify(makelist(i,i,1,n)), setify(makelist(-i,i,1,n))},
 setify(makelist({-i,i+1},i,1,n-1)), {{-n,1}})]$


/* **************************************************
   * Translated minimally unsatisfiable clause-sets *
   **************************************************
*/

/* The translations into MUSAT according to [Papadimitriou, Wolfe 1988] */

/* New variables are "mupw(i)", where i is the index of the clause in F */
kill(mupw)$
declare(mupw, noun)$
declare(mupw, posfun)$
mupw_var(i) := nounify(mupw)(i)$

/* Input a formal clause-set F, returns a formal clause-set G such that
   if F is satisfiable then G is satisfiable, while if F is unsatisfiable
   then G is minimally unsatisfiable.
   Thus USAT is reduced to MUSAT. */
usat_musat(FF) := if not freeof(mupw, FF) then error("usat_musat[ERROR]: input contains variable scheme mupw!") else
 block([L : listify(FF[2]), m : length(FF[2]), Y],
  Y : setify(makelist(mupw_var(i), i, 1, m)),
  return(
    [union(FF[1], Y), setify(append(
      makelist(union(L[i], disjoin(mupw_var(i), Y)), i, 1, m),
      create_list(union({-listify(L[i])[j], -mupw_var(i)}, disjoin(mupw_var(i), Y)), i,1,m, j,1,length(L[i])),
      create_list({-mupw_var(i), -mupw_var(j)}, i,1,m-1, j,i+1,m)))]
  ))$

/* Input a formal clause-set F, returns a formal clause-set GP such that
   if F is satisfiable then GP is minimally unsatisfiable, 
   while if F is unsatisfiable then GP is unsatisfiable but not minimally
   unsatisfiable. Thus SAT is reduced to MUSAT. */
sat_musat(FF) := block([m : length(FF[2]), Y, G],
 Y : setify(makelist(mupw_var(i), i, 1, m)),
 G : usat_musat(FF),
 return([G[1], union(G[2],{Y})]))$


/* ********************************************************
   * Max-Clique translated to "SHORT RES" and "SMALL MUS" *
   ********************************************************
*/

/* According to [Fellows, Szeider, Wrightson; 2006]. */

/* Variables are "srfswx(i)", "srfswy(i,j)" and "srfswz(v,i)" for natural
   numbers i,j and vertices v. */
kill(srfswx,srfswy,srfswz)$
declare(srfswx, noun, srfswy, noun, srfswz, noun)$
declare(srfswx, posfun, srfswy, posfun, srfswz, posfun)$
srfswx_var(i) := nounify(srfswx)(i)$
srfswy_var(i,j) := nounify(srfswy)(i,j)$
srfswz_var(v,i) := nounify(srfswz)(v,i)$

new_k(k) := binom(k,2) + 2 * k$

/* Input a graph G and k >= 0, output a formal clause-set FF 
   which contains a minimally unsatisfiable sub-clause-set of size 
     at most new_k(k) + 1 iff
   FF has a resolution-dag with at most new_k(k) non-source-nodes iff
   G contains a clique of size k. 

   Thus contains_us_bydef(maxclique_mures(G,k), new_k(k)+1, Solver) is true
   iff G contains a clique of size k.

   Furthermore FF is unsatisfiable iff G has at least one edge.
*/
/* Auxiliary functions: */
maxclique_start(k) := {setify(append(makelist(srfswx_var(i),i,1,k), create_list(srfswy_var(i,j), i,1,k-1, j,i+1,k)))}$
maxclique_edges(E,k) := setify(create_list({-srfswy_var(i,j), srfswz_var(listify(E[e])[1],i), srfswz_var(listify(E[e])[2],j)}, i,1,k-1, j,i+1,k, e,1,length(E)))$
/* Remark to maxclique_edges: the underlying paper is ambiguous here whether to use
the orientation of the edges or not (we do). */
maxclique_vertices(V,k) := setify(create_list({-srfswx_var(i), srfswz_var(V[v],i)}, i,1,k, v,1,length(V)))$
maxclique_cleanup(V,k) := setify(create_list({-srfswz_var(V[v],i)}, i,1,k, v,1,length(V)))$
/* The main function: */
maxclique_mures(G,k) := block([V : listify(G[1]), E : listify(G[2])],
 [union(setify(makelist(srfswx_var(i),i,1,k)), 
        setify(create_list(srfswy_var(i,j), i,1,k-1, j,i+1,k)),
        setify(create_list(srfswz_var(V[v],i), v,1,length(V), i,1,k))),
  union(maxclique_start(k),maxclique_edges(E,k),maxclique_vertices(V,k),maxclique_cleanup(V,k))])$

/* Measures for the translated formulas */

/* Number of variables */
n_var_maxclique_mures(G,k) := k + binom(k,2) + length(G[1]) * k$

/* List of clause-counts as with ncl_list_f */
ncl_list_maxclique_mures(G,k) := block([n : length(G[1]), m : length(G[2])],
 if k = 0 then [[0,1]]
 elseif k = 1 then [[1, n + 1], [2, n * k]]
 elseif k = 2 then [[1, n * k], [2, n * k], [3, binom(k,2) * m + 1]] else
 [[1, n * k], [2, n * k], [3, binom(k,2) * m ], [k + binom(k,2), 1]])$

/*!
\endhtmlonly
*/
