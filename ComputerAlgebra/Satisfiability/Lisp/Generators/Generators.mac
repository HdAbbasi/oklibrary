/* Oliver Kullmann, 29.11.2007 (Swansea) */
/* Copyright 2007, 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac
  \brief Functions for basic operations with clause-sets

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/Generators.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Constructions.mac")$
oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/Colouring.mac")$

/* ********************
   * Full clause-sets *
   ********************
*/

/* The full clause-set over variable set or list V: */
full_fcs_v(V) := [V,all_tass(V)]$
/* The formal full clause set with variable set {1,...,n} and all
   possible (full) clauses (also known as "canonical CNF/DNF") */
full_fcs(n) := full_fcs_v(setn(n))$

/* Measures */

nvar_full_fcs(n) := n$

/* List of clause-counts for full_fcs as with ncl_list_f */
ncl_list_full_fcs(n) := [[n,2^n]]$
ncl_full_fcs(n) := 2^n$

deficiency_full_fcs(n) := ncl_full_fcs(n) - nvar_full_fcs(n)$


/* ************************
   * Pigeon-hole formulas *
   ************************
*/

/* Encoding all injective maps from {1,...,m} to {1,...,n}
   (putting pigeon i in {1,...,m} into hole in {1,...,n}).
*/

/* Variables are "php(i,j)", meaning that pigeon i is in hole j */
kill(php)$
declare(php, noun)$
declare(php, posfun)$
php_var(i,j) := nounify(php)(i,j)$

/* The set of variables for the pigeonhole formulas with m pigeons and n holes */
var_php(m,n) := setify(create_list(php_var(i,j), i,1,m, j,1,n))$

/* In the following m denotes the number of pigeons, n the number of holes */

/* No two pigeon in the same hole: */
pigeons_different_holes(m,n) := setify(create_list({- php_var(i,k), - php_var(j,k)}, 
  i,1,m-1, j,i+1,m, k,1,n))$

/* Every pigeon in one hole: */
pigeons_in_holes(m,n) := setify(
  create_list(setify(create_list(php_var(i,j), j, 1, n)), i,1,m))$

/* The weak pigeon formula as formal clause-set: */
weak_php(m,n) := [var_php(m,n), 
 union(pigeons_different_holes(m,n), pigeons_in_holes(m,n))]$

output_weak_php(m,n,filename) := block([FF : standardise_fcs(weak_php(m,n))],
  output_cs_f_v(
    sconcat("The pigeonhole principle (weak form): ", m, " pigeons, ", n, " holes."), 
    FF[1], filename, FF[2]))$


/* No pigeon in more than one hole: */
pigeon_unique_hole(m,n) := setify(create_list({-php_var(i,k1), -php_var(i,k2)},
  i,1,m, k1,1,n-1, k2,k1+1,n))$

/* Every hole carries a pigeon: */
holes_occupied(m,n) := if m < n then {} else
  setify(create_list(setify(create_list(php_var(i,j), i, 1, m)), j,1,n))$

/* The strong pigeon formula as formal clause-set: */
strong_php(m,n) := block([FF : weak_php(m,n)],
  [FF[1], union(FF[2], pigeon_unique_hole(m,n), holes_occupied(m,n))])$

output_strong_php(m,n,filename) := block([FF : standardise_fcs(strong_php(m,n))],
  output_cs_f_v(
    sconcat("The pigeonhole principle (strong form): ", m, " pigeons, ", n, " holes."), 
    FF[1], filename, FF[2]))$

/* Measures */

nvar_php(m,n) := m * n$

/* List of clause-counts for weak_php as with ncl_list_f */
ncl_list_weak_php(m,n) :=
  if m = 0 then []
  elseif n = 0 then [[0,1]]
  elseif m = 1 then [[n,m]]
  elseif n = 1 then [[n,m], [2,n*binom(m,2)]]
  elseif n = 2 then [[2,n*binom(m,2)+m]]
  else [[2,n*binom(m,2)], [n,m]]$
ncl_weak_php(m,n) := block([L : ncl_list_weak_php(m,n)],
 return(sum(L[i][2], i, 1, length(L))))$

deficiency_weak_php(m,n) := ncl_weak_php(m,n) - nvar_php(m,n)$

/* The probability that a random assignment is satisfiable */
satprob_weak_php(m,n) := sum(binom(n,i) * stirling2(i,m) * m! ,i,m,n) / 2^nvar_php(m,n)$


/* ***************************
   * Van der Waerden problem *
   ***************************
*/

/* Boolean formal clause-sets, whose solutions are the partitionings of 
   {1,...,n} into two parts such that none of them contains an arithmetic 
   progression of size k. */
/* RENAME: vanderwaerden2_fcs */
VanDerWaerden2_cs_f(k,n) := block([G : ArithmeticProgressions(k,n)], 
  [G[1], union(G[2], comp_cs(G[2]))])$
/* VanDerWaerden2_cs_f(k,n) is isomorphic to 
   tcol2sat(ArithmeticProgressions(k,n). */

/* RENAME: output_vanderwaerden2 */
output_VanDerWaerden2_cs_f(k,n,filename) := 
  output_cs_f(
    sconcat("Van der Waerden problem: 2 parts, arithmetic progressions of size ", k, ", ", n, " elements."), 
    VanDerWaerden2_cs_f(k,n),
    filename)$

/* ********************
   * Ramsey's problem *
   ********************
*/

/* The boolean ordered formal clause-sets expressing that NR([q,q],r) < n; 
   a satisfying assignments yields a 2-colouring of the hypergraph with
   vertices all r-subsets of {1,...,n}, while the hyperedges are all
   obtained from the q-subsets of {1,...,n} by taking the set of all 
   r-subsets.
   In other words, the clause-set is satisfiable iff one can assign 0 and
   1 to the r-element subsets (the "vertices") of {1,...,n} such that for 
   every q-element subset of {1,...,n} there are two vertices which are
   subsets and which have different values assigned.
*/
ramsey2_ofcs(q,r,n) := tcol2sat_ohg2ofcs(ramsey_ohg(q,r,n))$

output_ramsey2(q,r,n,filename) := block(
 [FFR : standardise_ofcs(ramsey2_ofcs(q,r,n))],
  output_ofcs_v(
    sconcat("Ramsey problem: 2 colours, hypergraph edges of size ", r, ", (monochromatic) subsets of size ", q, ", and ", n, " elements."), 
    FFR[1],
    filename,
    FFR[2]))$
output_ramsey2_stdname(q,r,n) := 
 output_ramsey2(q,r,n,sconcat("Ramsey_",q,"_",r,"_",n,".cnf"))$


/* **************************************************
   * Translated minimally unsatisfiable clause-sets *
   **************************************************
*/

/* The translations into MUSAT according to [Papadimitriou, Wolfe 1988] */

/* New variables are "mupw(i)", where i is the index of the clause in F */
kill(mupw)$
declare(mupw, noun)$
declare(mupw, posfun)$
mupw_var(i) := nounify(mupw)(i)$

/* Input a formal clause-set F, returns a formal clause-set G such that
   if F is satisfiable then G is satisfiable, while if F is unsatisfiable
   then G is minimally unsatisfiable.
   Thus USAT is reduced to MUSAT. */
usat_musat(FF) := if not freeof(mupw, FF) then error("usat_musat[ERROR]: input contains variable scheme mupw!") else
 block([L : listify(FF[2]), m : length(FF[2]), Y],
  Y : setify(create_list(mupw_var(i), i, 1, m)),
  return(
    [union(FF[1], Y), setify(append(
      create_list(union(L[i], disjoin(mupw_var(i), Y)), i, 1, m),
      create_list(union({-listify(L[i])[j], -mupw_var(i)}, disjoin(mupw_var(i), Y)), i,1,m, j,1,length(L[i])),
      create_list({-mupw_var(i), -mupw_var(j)}, i,1,m-1, j,i+1,m)))]
  ))$

/* Measures for the translated formulas */

/* Number of variables: */
n_var_usat_musat(FF) := nvar_f(FF) + ncl_f(FF)$

/* Number of clauses: */
n_cl_usat_musat(FF) := block([l : nlitocc(FF[2]), c : ncl_f(FF)],
  c + l + c*(c-1)/2)$

/* Deficiency: */
deficiency_usat_musat(FF) := block(
 [l : nlitocc(FF[2]), c : ncl_f(FF), n : nvar_f(FF)],
  l + c*(c-1)/2 - n)$

/* List of clause-counts as with ncl_list_f: */
ncl_list_usat_musat(FF) := block(
 [l : nlitocc(FF[2]), c : ncl_f(FF), h : sm2hm({})],
  if l # 0 then set_hm(h, 1+c, l),
  if c >= 2 then set_hm(h, 2, ev_hm_d(h,2,0) + c*(c-1)/2),
  for P in ncl_list_f(FF) do block([cl : P[1]+c-1],
    set_hm(h, cl, ev_hm_d(h,cl,0) + P[2])),
  return(listify(hm2sm(h))))$


/* Input a formal clause-set F, returns a formal clause-set GP such that
   if F is satisfiable then GP is minimally unsatisfiable, 
   while if F is unsatisfiable then GP is unsatisfiable but not minimally
   unsatisfiable. Thus SAT is reduced to MUSAT. */
sat_musat(FF) := block([m : length(FF[2]), Y, G],
 Y : setify(create_list(mupw_var(i), i, 1, m)),
 G : usat_musat(FF),
 return([G[1], union(G[2],{Y})]))$

/* Measures for the translated formulas */

/* Number of variables: */
n_var_sat_musat(FF) := n_var_usat_musat(FF)$

/* Number of clauses: */
n_cl_sat_musat(FF) := n_cl_usat_musat(FF) + 1$

/* Deficiency: */
deficiency_sat_musat(FF) := deficiency_usat_musat(FF) + 1$

/* List of clause-counts as with ncl_list_f: */
ncl_list_sat_musat(FF) := block(
 [l : nlitocc(FF[2]), c : ncl_f(FF), h : sm2hm({})],
  if l # 0 then set_hm(h, 1+c, l),
  set_hm(h,c,1), /* this is additional, compared to ncl_list_usat_musat(FF) */
  if c >= 2 then set_hm(h, 2, ev_hm_d(h,2,0) + c*(c-1)/2),
  for P in ncl_list_f(FF) do block([cl : P[1]+c-1],
    set_hm(h, cl, ev_hm_d(h,cl,0) + P[2])),
  return(listify(hm2sm(h))))$


/* ********************************************************
   * Max-Clique translated to "SHORT RES" and "SMALL MUS" *
   ********************************************************
*/

/* According to [Fellows, Szeider, Wrightson; 2006]. */

/* Variables are "srfswx(i)", "srfswy(i,j)" and "srfswz(v,i)" for natural
   numbers i,j and vertices v. */
kill(srfswx,srfswy,srfswz)$
declare(srfswx, noun, srfswy, noun, srfswz, noun)$
declare(srfswx, posfun, srfswy, posfun, srfswz, posfun)$
srfswx_var(i) := nounify(srfswx)(i)$
srfswy_var(i,j) := nounify(srfswy)(i,j)$
srfswz_var(v,i) := nounify(srfswz)(v,i)$

new_k(k) := binom(k,2) + 2 * k$

/* Input a graph G and k >= 0, output a formal clause-set FF 
   which contains a minimally unsatisfiable sub-clause-set of size 
     at most new_k(k) + 1 iff
   FF has a resolution-dag with at most new_k(k) non-source-nodes iff
   G contains a clique of size k. 

   Thus contains_us_bydef(maxclique_mures(G,k), new_k(k)+1, Solver) is true
   iff G contains a clique of size k.

   Furthermore FF is unsatisfiable iff G has at least one edge.
*/
/* Auxiliary functions: */
maxclique_start(k) := {setify(append(makelist(srfswx_var(i),i,1,k), create_list(srfswy_var(i,j), i,1,k-1, j,i+1,k)))}$
maxclique_edges(E,k) := setify(create_list({-srfswy_var(i,j), srfswz_var(listify(E[e])[1],i), srfswz_var(listify(E[e])[2],j)}, i,1,k-1, j,i+1,k, e,1,length(E)))$
/* Remark to maxclique_edges: the underlying paper is ambiguous here whether to use
the orientation of the edges or not (we do). */
maxclique_vertices(V,k) := setify(create_list({-srfswx_var(i), srfswz_var(V[v],i)}, i,1,k, v,1,length(V)))$
maxclique_cleanup(V,k) := setify(create_list({-srfswz_var(V[v],i)}, i,1,k, v,1,length(V)))$
/* The main function: */
maxclique_mures(G,k) := block([V : listify(G[1]), E : listify(G[2])],
 [union(setify(makelist(srfswx_var(i),i,1,k)), 
        setify(create_list(srfswy_var(i,j), i,1,k-1, j,i+1,k)),
        setify(create_list(srfswz_var(V[v],i), v,1,length(V), i,1,k))),
  union(maxclique_start(k),maxclique_edges(E,k),maxclique_vertices(V,k),maxclique_cleanup(V,k))])$

/* Measures for the translated formulas */

/* Number of variables */
n_var_maxclique_mures(G,k) := k + binom(k,2) + length(G[1]) * k$

/* List of clause-counts as with ncl_list_f */
ncl_list_maxclique_mures(G,k) := block([n : length(G[1]), m : length(G[2])],
 if k = 0 then [[0,1]]
 elseif k = 1 then [[1, n + 1], [2, n * k]]
 elseif k = 2 then [[1, n * k], [2, n * k], [3, binom(k,2) * m + 1]] else
 [[1, n * k], [2, n * k], [3, binom(k,2) * m ], [k + binom(k,2), 1]])$

/*!
\endhtmlonly
*/
