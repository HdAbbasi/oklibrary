/* Oliver Kullmann, 29.11.2007 (Swansea) */
/* Copyright 2007, 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac
  \brief Basic generators for clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Constructions.mac")$

/* ********************
   * Full clause-sets *
   ********************
*/

/* The full clause-set over variable set or list V: */
full_fcs_v(V) := [if listp(V) then setify(V) else V, all_tass(V)]$
full_cs_v(V) := all_tass(V)$
/* We have full_fcs_v(V) = expand_fcs([V,{{}}]) for sets V. */
/* The formal full clause set with variable set {1,...,n} and all
   possible (full) clauses (also known as "canonical CNF/DNF") */
full_fcs(n) := full_fcs_v(setn(n))$
full_cs(n) := full_cs_v(setn(n))$

/* Measures */

nvar_full_fcs(n) := n$

/* List of clause-counts for full_fcs as with ncl_list_f */
ncl_list_full_fcs(n) := [[n,2^n]]$
ncl_full_fcs(n) := 2^n$

deficiency_full_fcs(n) := ncl_full_fcs(n) - nvar_full_fcs(n)$


/* ************************
   * Pigeon-hole formulas *
   ************************
*/

/* Encoding all injective maps from {1,...,m} to {1,...,n}
   (putting pigeon i in {1,...,m} into hole in {1,...,n}).
*/

/* Variables are "php(i,j)", meaning that pigeon i is in hole j */
kill(php)$
declare(php, noun)$
declare(php, posfun)$
php_var(i,j) := nounify(php)(i,j)$

/* The set of variables for the pigeonhole formulas with m pigeons and n holes */
var_php(m,n) := setify(create_list(php_var(i,j), i,1,m, j,1,n))$

/* In the following m denotes the number of pigeons, n the number of holes */

/* No two pigeon in the same hole: */
pigeons_different_holes(m,n) := setify(create_list({- php_var(i,k), - php_var(j,k)}, 
  i,1,m-1, j,i+1,m, k,1,n))$

/* Every pigeon in one hole: */
pigeons_in_holes(m,n) := setify(
  create_list(setify(create_list(php_var(i,j), j, 1, n)), i,1,m))$

/* The weak pigeon formula as formal clause-set: */
/* RENAME: weak_php_fcs */
weak_php(m,n) := [var_php(m,n), 
 union(pigeons_different_holes(m,n), pigeons_in_holes(m,n))]$
weak_php_fcs(m,n) := weak_php(m,n)$

output_weak_php(m,n,filename) := block([FF : standardise_fcs(weak_php(m,n))],
  output_fcs_v(
    sconcat("The pigeonhole principle (weak form): ", m, " pigeons, ", n, " holes."), 
    FF[1], filename, FF[2]))$
output_weak_php_stdname(m,n) := output_weak_php(m,n,
  sconcat("PHP_weak_",m,"_",n,".cnf"))$


/* No pigeon in more than one hole: */
pigeon_unique_hole(m,n) := setify(create_list({-php_var(i,k1), -php_var(i,k2)},
  i,1,m, k1,1,n-1, k2,k1+1,n))$

/* Every hole carries a pigeon: */
holes_occupied(m,n) := if m < n then {} else
  setify(create_list(setify(create_list(php_var(i,j), i, 1, m)), j,1,n))$

/* The strong pigeon formula as formal clause-set: */
/* RENAME: strong_php_fcs */
strong_php(m,n) := block([FF : weak_php(m,n)],
  [FF[1], union(FF[2], pigeon_unique_hole(m,n), holes_occupied(m,n))])$
strong_php_fcs(m,n) := strong_php(m,n)$

output_strong_php(m,n,filename) := block([FF : standardise_fcs(strong_php(m,n))],
  output_fcs_v(
    sconcat("The pigeonhole principle (strong form): ", m, " pigeons, ", n, " holes."), 
    FF[1], filename, FF[2]))$
output_strong_php_stdname(m,n) := output_strong_php(m,n,
  sconcat("PHP_weak_",m,"_",n,".cnf"))$

/* Measures */

nvar_php(m,n) := m * n$

/* List of clause-counts for weak_php as with ncl_list_f */
ncl_list_weak_php(m,n) :=
  if m = 0 then []
  elseif n = 0 then [[0,1]]
  elseif m = 1 then [[n,m]]
  elseif n = 1 then [[n,m], [2,n*binomial(m,2)]]
  elseif n = 2 then [[2,n*binomial(m,2)+m]]
  else [[2,n*binomial(m,2)], [n,m]]$
ncl_weak_php(m,n) := block([L : ncl_list_weak_php(m,n)],
 return(sum(L[i][2], i, 1, length(L))))$

deficiency_weak_php(m,n) := ncl_weak_php(m,n) - nvar_php(m,n)$

/* The probability that a random assignment is satisfiable: */
satprob_weak_php(m,n) := sum(binomial(n,i) * stirling2(i,m) * m! ,i,m,n) / 2^nvar_php(m,n)$


/*!
\endhtmlonly
*/
