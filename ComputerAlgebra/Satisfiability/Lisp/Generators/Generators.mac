/* Oliver Kullmann, 29.11.2007 (Swansea) */
/* Copyright 2007, 2008, 2009, 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac
  \brief Basic generators for clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/PartialAssignments.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Substitutions.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/Basics.mac")$



/* ********************
   * Full clause-sets *
   ********************
*/

/* The full clause-set over variable set or list V: */
full_fcs_v(V) := [if listp(V) then setify(V) else V, all_tass(V)]$
full_cs_v(V) := all_tass(V)$
full_fcl_v(V) := [listify(V), all_tass_l(listify(V))]$
full_cl_v(V) := all_tass_l(listify(V))$
/* We have full_fcs_v(V) = expand_fcs([V,{{}}]) for sets V. */

/* The formal full clause-set with variable set {1,...,n} and all
   possible (full) clauses (also known as "canonical CNF/DNF"): */
full_fcs(n) := full_fcs_v(setn(n))$
full_cs(n) := full_cs_v(setn(n))$
full_fcl(n) := full_fcl_v(setn(n))$
full_cl(n) := full_cl_v(setn(n))$

/* Measures */

nvar_full_fcs(n) := n$

/* List of clause-counts for full_fcs as with ncl_list_f */
ncl_list_full_fcs(n) := [[n,2^n]]$
ncl_full_fcs(n) := 2^n$

deficiency_full_fcs(n) := ncl_full_fcs(n) - nvar_full_fcs(n)$


/* ************************
   * Parity formulas      *
   ************************
*/

/* Returns the formal CNF clause-set without new variables which is
   satisfiable if the variables 1 to n are assigned values such that they have
   even parity. */
even_parity_cl(n) :=
   map(lambda([D], map("-",bv2c_wv(D,create_list(i,i,1,n)))),
     sublist(
       listify(apply(cartesian_product, create_list({0,1},i,1,n))),
       lambda([C], is(mod(sum_l(C),2) # 0))))$
even_parity_fcl(n) :=
  [create_list(i,i,1,n),even_parity_cl(n)]$

/* Returns the formal CNF clause-set without new variables which is
   satisfiable if the variables 1 to n are assigned values such that they have
   odd parity. */
odd_parity_cl(n) :=
  remove_elements(even_parity_fcl(n)[2],all_tass_l(setn(n)))$
odd_parity_fcl(n) :=
 [create_list(i,i,1,n),odd_parity_cl(n)]$


/* ************************
   * Matrix formulas      *
   ************************
*/

/* Takes a boolean matrix and returns a DNF representing
   the multiplication of the matrix by a bit vector.
   The (input) bits in the bit vector are represented by
   the variables 1 to length(m), and the output bits are
   represented by length(m)+1 to 2*length(m). */
boolm_mul2cnf_fcl(m) := block(
  [IV,OV,F : [],nc : length(matrixcolumns(m)),count : 0],
  IV : create_list(i,i,1,nc),
  OV : create_list(i,i,nc+1, nc+length(m)),
  return([
    append(IV,OV),
    lappend(map(
        lambda([R],
          fcl2cl(rename_fcl(even_parity_fcl(length(R)+1),
              endcons(nc + count : count + 1, IV)))),args(m)))]))$
boolm_mul2cnf_wv_fcl(m,V) := rename_fcl(boolm_mul2cnf_fcl(m),V)$


/*!
\endhtmlonly
*/
