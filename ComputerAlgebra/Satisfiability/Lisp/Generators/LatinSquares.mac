/* Matthew Henderson, 1.10.2008 (Berea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/LatinSquares.mac
  \brief Generation of Latin square completion problems.

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/LatinSquares.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$

/* *************************
   * Latin square problems *
   *************************
*/

/* Variables are "ls(i,j,k)", meaning that field (i,j) carries number k */
kill(ls)$
declare(ls, noun)$
declare(ls, posfun)$
ls_var(i,j,k) := nounify(ls)(i,j,k)$

/* The set of variables for latin square formulas of dimension p */
var_ls(p) := block([N : p],
 setify(create_list(ls_var(i,j,k), i,1,N, j,1,N, k,1,N)))$

/* In the following p denotes the dimension */

/* different numbers in each row */
ls_different_rows(p) := block([N : p],
 setify(create_list({- ls_var(i,j1,k), - ls_var(i,j2,k)}, i,1,N, k,1,N, j1,1,N-1, j2,j1+1,N)))$

/* different numbers in each column */
ls_different_columns(p) := block([N : p],
 setify(create_list({- ls_var(i1,j,k), - ls_var(i2,j,k)}, j,1,N, k,1,N, i1,1,N-1, i2,i1+1,N)))$


/* Given box coordinates 1 <= i,j <= p, the list of coordinates of fields */
ls_positions_box(i,j,p) := block(
 [row_offset : p * (i-1), column_offset : p * (j-1)],
 create_list([row_offset + r, column_offset + c], r,1,p, c,1,p))$

/* every field carries a number */
ls_all_fields(p) := block([N : p],
 setify(create_list(setify(makelist(ls_var(i,j,k), k, 1, N)), i,1,N, j,1,N)))$

/* the latin square problem (weak form) as formal clause-set */
weak_ls(p) := [var_ls(p), 
 union(ls_different_rows(p), ls_different_columns(p), ls_all_fields(p))]$

output_weak_ls(p,filename) := block([FF : standardise_fcs(weak_ls(p))],
  output_fcs_v(
    sconcat("The Latin square problem (weak form) with dimension ", p, "."), 
    FF[1],
    filename,
    FF[2]))$

/* every row contains all numbers */
ls_all_rows(p) := block([N : p],
 setify(create_list(setify(makelist(ls_var(i,j,k),j,1,N)), i,1,N, k,1,N)))$

/* every column contains all numbers */
ls_all_columns(p) := block([N : p],
 setify(create_list(setify(makelist(ls_var(i,j,k),i,1,N)), j,1,N, k,1,N)))$

/* every field carries a different number */
ls_different_fields(p) := block([N : p],
  setify(create_list({-ls_var(i,j,k1), -ls_var(i,j,k2)}, i,1,N, j,1,N, k1,1,N-1, k2,k1+1,N)))$

/* the latin square problem (dual weak form) as formal clause-set */
dual_weak_ls(p) := [var_ls(p), 
 union(ls_all_rows(p), ls_all_columns(p), ls_different_fields(p))]$

output_dual_weak_ls(p,filename) := block([FF : standardise_fcs(dual_weak_ls(p))],
  output_fcs_v(
    sconcat("The Latin square problem (dual weak form) with dimension ", p, "."), 
    FF[1],
    filename,
    FF[2]))$


/* the strong Latin square problem as formal clause-set */
strong_ls(p) := [var_ls(p), 
 union(weak_ls(p)[2], dual_weak_ls(p)[2])]$

output_strong_ls(p,filename) := block([FF : standardise_fcs(strong_ls(p))],
  output_fcs_v(
    sconcat("The Latin square problem (strong form) with dimension ", p, "."), 
    FF[1],
    filename,
    FF[2]))$

/*!
\endhtmlonly
*/

