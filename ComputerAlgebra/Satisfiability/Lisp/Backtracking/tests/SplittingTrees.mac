/* Oliver Kullmann, 31.1.2008 (Swansea) */
/* Copyright 2008, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Backtracking/tests/SplittingTrees.mac
  \brief Tests for splitting trees

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/tests/SplittingTrees.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Pigeonhole.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Constructions.mac")$

kill(f)$


/* ***************************"""""""""
   * The notion of a "splitting tree" *
   ************************************
*/

okltest_fst_p(f) := (
  assert(f(0) = false),
  assert(f([]) = false),
  assert(f([[]]) = true),
  assert(f([true]) = true),
  assert(f([false]) = true),
  assert(f([0]) = false),
  assert(f([0,[[]]]) = false),
  assert(f([0,[[]],[[]]]) = true),
  assert(f([0,[1],[[]]]) = false),
  assert(f([0,[1,[[]],[[]]],[[]]]) = true),
  assert(f([0,[1,[false],[true]],[false]]) = true),
  assert(f([0,[1,[false],[true]],[false],[[]]]) = false),
  true)$

okltest_st_p(f) := (
  assert(f([[]],{}) = true),
  assert(f([true],{}) = true),
  assert(f([false],{}) = false),
  assert(f([[]],{{}}) = true),
  assert(f([true],{{}}) = false),
  assert(f([false],{{}}) = true),
  assert(f([[]],{{1}}) = true),
  assert(f([false],{{1}}) = false),
  assert(f([true],{{1}}) = false),
  assert(f([2,[[]],[[]]],{{1}}) = false),
  assert(f([1,[[]],[[]]],{{1}}) = true),
  assert(f([1,[true],[[]]],{{1}}) = false),
  assert(f([1,[false],[[]]],{{1}}) = true),
  assert(f([1,[false],[false]],{{1}}) = false),
  assert(f([1,[false],[true]],{{1}}) = true),
  assert(f([1,[false],[false]],{{1},{}}) = false),
  assert(f([1,[2,[[]],[[]]],[2,[[]],[[]]]], {{1,2},{1,-2}}) = false),
  assert(f([1,[2,[[]],[[]]],[[]]], {{1,2},{1,-2}}) = true),
  assert(f([1,[2,[[]],[[]]],[false]], {{1,2},{1,-2}}) = false),
  assert(f([1,[2,[[]],[[]]],[true]], {{1,2},{1,-2}}) = true),
  true)$

okltest_est_p(f) := (
    assert(f([[]],{}) = true),
  assert(f([true],{}) = true),
  assert(f([false],{}) = false),
  assert(f([[]],{{}}) = true),
  assert(f([true],{{}}) = false),
  assert(f([false],{{}}) = true),
  assert(f([[]],{{1}}) = true),
  assert(f([false],{{1}}) = false),
  assert(f([true],{{1}}) = false),
  assert(f([2,[[]],[[]]],{{1}}) = true),
  assert(f([2,[true],[[]]],{{1}}) = false),
  assert(f([2,[[]],[false]],{{1}}) = false),
  assert(f([1,[[]],[[]]],{{1}}) = true),
  assert(f([1,[true],[[]]],{{1}}) = false),
  assert(f([1,[false],[[]]],{{1}}) = true),
  assert(f([1,[false],[false]],{{1}}) = false),
  assert(f([1,[false],[true]],{{1}}) = true),
  assert(f([1,[false],[false]],{{1},{}}) = true),
  assert(f([1,[2,[[]],[[]]],[2,[[]],[[]]]], {{1,2},{1,-2}}) = true),
  assert(f([1,[2,[[]],[[]]],[[]]], {{1,2},{1,-2}}) = true),
  assert(f([1,[2,[[]],[[]]],[false]], {{1,2},{1,-2}}) = false),
  assert(f([1,[2,[[]],[[]]],[true]], {{1,2},{1,-2}}) = true),
  assert(f([1,[2,[false],[false]],[true]], {{1,2},{1,-2}}) = true),
  assert(f([1,[2,[3,[[]],[false]],[false]],[true]], {{1,2},{1,-2}}) = true),
  assert(f([1,[2,[3,[true],[false]],[false]],[true]], {{1,2},{1,-2}}) = false),
  assert(f([1,[2,[3,[false],[false]],[false]],[true]], {{1,2},{1,-2}}) = true),
  true)$

okltest_complete_stp(f) := (
  assert(f([[]]) = false),
  assert(f([false]) = true),
  assert(f([true]) = true),
  assert(f([1,[[]],[false]]) = false),
  assert(f([1,[true],[false]]) = true),
  true)$


/* ********************************
   * Manipulating splitting trees *
   ********************************
*/

okltest_negate_st(f) := block(
  assert(f([true]) = [false]),
  assert(f([false]) = [true]),
  true)$

okltest_condense_st(f) := block(
  assert(f([true]) = [true]),
  assert(f([false]) = [false]),
  assert(f([1,[false],[false]]) = [false]),
  assert(f([1,[false],[true]]) = [1,[false],[true]]),
  assert(f([1,[true],[false]]) = [1,[true],[false]]),
  assert(f([1,[true],[true]]) = [true]),
  assert(f([1,[2,[false],[false]],[2,[true],[true]]]) = [1,[false],[true]]),
  assert(f([1,[2,[false],[false]],[2,[false],[false]]]) = [false]),
  true)$

/* ***************************
   * Finding splitting trees *
   ***************************
*/

okltest_optimal_splitting_tree(f) := block(
  assert(f({}) = [[true],1]),
  assert(f({{}}) = [[false],1]),
  assert(f({{1}}) = [[1,[false],[true]],3]),
  assert(f({{1},{-1}}) = [[1,[false],[false]],3]),
  assert(f({{1},{2},{-1,-2}})[2] = 5),
  assert(f({{1},{2},{-1,-2},{}}) = [[false],1]),
  for n : 0 thru 4 do
    assert(f(full_fcs(n)[2])[2] = 2^(n+1)-1),
  if oklib_test_level = 0 then return(true),
  true)$

okltest_optimal_r_splitting_tree(f) := block(
  okltest_optimal_splitting_tree(buildq([f],lambda([F],f(F,0)))),
  for k : 1 thru 5 do (
    assert(f({},k) = [[true],1]),
    assert(f({{}},k) = [[false],1]),
    assert(f({{1}},k) = [[true],1]),
    assert(f({{1},{-1}},k) = [[false],1])),
  if oklib_test_level = 0 then return(true),
  for k : 1 thru 3 do
    assert(f(weak_php(k+1,k)[2],k-1)[2] = if k=1 then 5 else 3),
  if oklib_test_level = 1 then return(true),
  for k : 4 thru 4 do
    assert(f(weak_php(k+1,k)[2],k-1)[2] = if k=1 then 5 else 3),
  true)$


/* ******************************
   * Evaluating splitting trees *
   ******************************
*/

okltest_sat_pass_st(f) := block(
  assert(f([true]) = [{}]),
  assert(f([false]) = []),
  assert(f([1,[false],[false]]) = []),
  assert(f([1,[true],[false]]) = [{-1}]),
  assert(f([1,[true],[true]]) = [{-1},{1}]),
  if oklib_test_level = 0 then return(true),
  block([oklib_test_level : min(oklib_test_level - 1, 2)],
    okltest_usat_clauses_st(buildq([f],lambda([T], comp_cs(f(negate_st(T))))))
  ),
  true)$

okltest_usat_clauses_st(f) := block(
  assert(f([false]) = [{}]),
  assert(f([true]) = []),
  assert(f([1,[false],[false]]) = [{1},{-1}]),
  assert(f([1,[true],[false]]) = [{-1}]),
  assert(f([1,[true],[true]]) = []),
  if oklib_test_level = 0 then return(true),
  block([oklib_test_level : min(oklib_test_level - 1, 2)],
    okltest_sat_pass_st(buildq([f],lambda([T], comp_cs(f(negate_st(T))))))
  ),
  true)$


/* ***********************************
   * Generators for splitting trees  *
   ***********************************
*/

/* ***********************
   * r_k splitting trees *
   ***********************
*/

/* **********
   * Output *
   **********
*/

/*!
\endhtmlonly
*/
