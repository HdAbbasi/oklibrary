/* Oliver Kullmann, 21.11.2009 (Swansea) */
/* Copyright 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Backtracking/tests/ConstraintSatisfaction.mac
  \brief Tests related to solving constraint problems by backtracking

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/tests/ConstraintSatisfaction.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/ConstraintSatisfaction.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConstraintProblems/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$

kill(f)$


/* ***************
   * Propagators *
   ***************
*/

okltest_constraint_backtracking(f) := block(
  assert(f([{}],trivial_propagator,trivial_variable_heuristics) = [false,1]),
  assert(f(Queens_dom(1),Queens_propagator_it,trivial_variable_heuristics) = [[1],1]),
  assert(f(Queens_dom(2),Queens_propagator_it,trivial_variable_heuristics) = [false,1]),
  assert(f(Queens_dom(3),Queens_propagator_it,trivial_variable_heuristics) = [false,1]),
  assert(f(Queens_dom(4),Queens_propagator_it,trivial_variable_heuristics) = [[2,4,1,3],2]),
  /* XXX */
  true)$


/* ***********
   * Solvers *
   ***********
*/



/* **************
   * Heuristics *
   **************
*/

/* Removes the first element from the first domain with at least two elements:
*/
test_propagator(D) := block([i:1], for d in D do
  if length(d) >= 2 then 
    (D[i] : disjoin(first_element(d),d), return(done))
  else i : i+1
)$

okltest_test_propagator(f) := block([D],
  D:[],f(D),assert(D = []),
  D:[{}],f(D),assert(D = [{}]),
  D:[{1}],f(D),assert(D = [{1}]),
  D:[{1,2}],f(D),assert(D = [{2}]),
  D:[{1,2},{1,3}],f(D),assert(D = [{2},{1,3}]),
  D:[{1},{},{1,2},{1,3}],f(D),assert(D = [{1},{},{2},{1,3}]),
  true)$

okltest_variable_heuristics_tau(f) := block(
  assert(f([{1,2}],identity) = [1,[1,2]]),
  assert(f([{1,2},{1,2}],identity) = [1,[1,2]]),
  assert(f([{1,2},{1,2,3}],identity) = [1,[1,2]]),
  assert(f([{1,2,3},{1,2,3,4}],identity) = [1,[1,2,3]]),
  assert(f([{1,2,3,4},{1,2,3}],identity) = [1,[1,2,3,4]]),
  assert(f([{1,2}],test_propagator) = [1,[1,2]]),
  assert(f([{1,2},{1,2}],test_propagator) = [1,[1,2]]),
  assert(f([{1,2},{1}],test_propagator) = [1,[1,2]]),
  assert(f([{1},{1,2},{1}],test_propagator) = [2,[1,2]]),
  assert(f([{1,2,3},{1,2}],test_propagator) = [1,[1,2,3]]),
  assert(f([{1,2},{1},{1,2,3},{1,2,3}],test_propagator) = [3,[1,2,3]]),
  /* XXX */
  true)$

/*!
\endhtmlonly
*/
