/* Oliver Kullmann, 17.2.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Backtracking/tests/DLL_solvers.mac
  \brief Tests for splitting trees

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/tests/DLL_solvers.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Counting/InclusionExclusion.mac")$


kill(f)$

/* ********************************
   * Generic test for SAT solvers *
   ********************************
*/

/* Input is (just) a formal clause-set. */

/* Just returning true/false: */
okltest_SATsolver(f) := block(
  assert(f([{},{}]) = true),
  assert(f([{},{{}}]) = false),
  assert(f([{1},{}]) = true),
  assert(f([{1},{{}}]) = false),
  assert(f([{1},{{1}}]) = true),
  assert(f([{1},{{1},{-1}}]) = false),
  for n : 0 thru 3 do
    assert(f(full_fcs(n)) = false),
  for n : 0 thru 3 do (
    assert(f(weak_php(n,n)) = true),
    assert(f(weak_php(n+1,n)) = false)
  ),
  true)$

/* Instead of "true" a satisfying partial assignment is returned: */
okltest_SATsolver_spa(f) := block(
  assert(okltest_SATsolver(buildq([f],lambda([FF],block([res:f(FF)],
    if setp(res) then true else false))))),
  assert(f([{},{}]) = {}),
  assert(f([{1},{{1}}]) = {1}),
  assert(f([{1,2},{{1,2},{1,-2},{-1,2}}]) = {1,2}),
  true)$

/* **********************************
   * Backtracking without reduction *
   **********************************
*/

okltest_dll_simplest(f) := block(
  okltest_SATsolver(buildq([f],lambda([FF],f(FF,dll_heuristics_first_formal)))),
  true)$

okltest_dll_simplest_spa(f) := block(
  okltest_SATsolver_spa(buildq([f],lambda([FF],f(FF,dll_heuristics_first_formal)))),
  true)$


/* ***********************************
   * Backtracking with r_k-reduction *
   ***********************************
*/


/* *****************************************
   * Backtracking with arbitrary reduction *
   *****************************************
*/


/* *******************************
   * Simple heuristics for DLL   *
   *******************************
*/

okltest_choose_most_sat_literal_h(f) := (
  block([h : f(lambda([FF], 1))],
   assert(h([{1},{}]) = -1),
   assert(h([{1},{{}}]) = -1),
   assert(h([{1,2},{{}}]) = -2),
   assert(h([{1,2},{{1,2}}]) = -2)
  ),
  block([h : f(lambda([FF],satprob_mcind_trrs(FF[2])))],
   assert(h([{1},{}]) = -1),
   assert(h([{1},{{}}]) = -1),
   assert(h([{1,2},{{}}]) = -2),
   assert(h([{1,2},{{1,2}}]) = 1),
   assert(h([{1,2},{{1},{1,2}}]) = 1)
  ),
  true)$

okltest_johnson_heuristic(f) := (
  assert(f([{1},{}]) = -1),
  assert(f([{1},{{}}]) = -1),
  assert(f([{1},{{1}}]) = 1),
  assert(f([{1},{{1},{-1}}]) = -1),
  assert(f([{1,2},{{1,2},{1}}]) = 1),
  true)$

okltest_dll_heuristics_max_lit_tb(f) := block(
  for n : 0 thru 3 do
    for m : 0 thru 3 do
      assert(f(n,m)(cs_to_fcs({{1,2},{1},{1,2,3}})) = 1),
  for n : 1 thru 3 do
    for m : 2 thru 3 do
      assert(not f(n,m)(cs_to_fcs({{-1,-2,-3},{1,-2,-3},{1,2,3}})) = 1),
true)$


/* ****************************
   * Heuristics via distances *
   ****************************
*/

okltest_ast2tbt(f) := block([L,i,x],
  assert(f([L],i) = [L]),
  assert(f([[x,[[1,2]]], [L], [L]], 1) = [ [1,2], [L], [L] ]),
  assert(f([[x,[[3,8],[4,5]]], [L], [L]], 2) = [ [4,5], [L],[L]]),
  assert(f([[x,[[3,8],[4,5]]], [[x,[[1,2],[55,66]]], [L], [false]], [true]], 1) = [ [3,8], [[1,2],[L],[false]], [true] ]),
  true)$

okltest_check_inf_branches_ast(f) := block([L,x,m,d],
  assert(f([L],m) = []),
  assert(f([[x, [[inf,d],[d,inf]]], [L], [L]], 0) = false),
  assert(f([[x, [[inf,d],[d,inf]]], [L], [L]], 1) = []),
  assert(f([[x, [[d,d]]], [L], [L]],0) = []),
  assert(f([[x, [[d,inf]]], [L], [[x,[[d,d]]], [L],[L]]],0) = [[x,[[d,inf]]], [2], 3]),
  assert(f([[x, [[inf,inf]]], [L], [[x,[[d,d]]], [L],[L]]],0) = [[x,[[d,inf]]], [1,2], 1, 3]),
  /* XXX */
  true)$


/* *************
   * Distances *    
   *************
*/


/* ***************
   * Projections *
   ***************
*/


/* *********************************
   * Satisfiability approximations *
   *********************************
*/

okltest_locallemma_satapprox(f) := block(
  assert(f({}) = inf),
  assert(f({{}}) = minf),
  assert(f({{1}}) = inf),
  assert(f({{1},{2}}) = inf),
  assert(f({{},{1},{2}}) = minf),
  assert(f({{1},{-1}}) = 2),
  assert(f({{1,2}}) = inf),
  assert(f({{1,2},{-1,2}}) = inf),
  assert(f({{1,2},{-1,2},{1,-2}}) = 2),
  assert(f({{1,2},{-1,2},{1,-2},{-1,-2}}) = 4/3),
  assert(f({{1,2,3}}) = inf),
  assert(f({{1,2,3},{-1,2,3}}) = inf),
  assert(f({{1,2,3},{-1,2,3},{1,-2,3}}) = inf),
  assert(f({{1,2,3},{-1,2,3},{1,-2,3},{1,2,-3}}) = 8/3),
  assert(f({{-1,-2,-3,-4},{1,4},{2,4},{3,4}}) = 4/3),
  for n : 0 thru 4 do
    assert(f(full_fcs(n)[2]) = if n = 0 then minf else  1 / ((2^n - 1) * 2^(-n))),
  true)$

okltest_locallemmasum_satapprox(f) := block(
  /* XXX */
  true)$

/*!
\endhtmlonly
*/
