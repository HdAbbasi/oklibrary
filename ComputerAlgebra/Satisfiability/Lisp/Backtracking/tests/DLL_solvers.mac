/* Oliver Kullmann, 17.2.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Backtracking/tests/DLL_solvers.mac
  \brief Tests for splitting trees

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/Backtracking/tests/DLL_solvers.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Counting/InclusionExclusion.mac")$


kill(f)$

/* *******************************
   * Simple heuristics for DLL   *
   *******************************
*/

okltest_choose_most_sat_literal_h(f) := (
  block([h : f(lambda([FF], 1))],
   assert(h([{1},{}]) = -1),
   assert(h([{1},{{}}]) = -1),
   assert(h([{1,2},{{}}]) = -2),
   assert(h([{1,2},{{1,2}}]) = -2)
  ),
  block([h : f(lambda([FF],satprob_mcind_trrs(FF[2])))],
   assert(h([{1},{}]) = -1),
   assert(h([{1},{{}}]) = -1),
   assert(h([{1,2},{{}}]) = -2),
   assert(h([{1,2},{{1,2}}]) = 1),
   assert(h([{1,2},{{1},{1,2}}]) = 1)
  ),
  true)$

okltest_johnson_heuristic(f) := (
  assert(f([{1},{}]) = -1),
  assert(f([{1},{{}}]) = -1),
  assert(f([{1},{{1}}]) = 1),
  assert(f([{1},{{1},{-1}}]) = -1),
  assert(f([{1,2},{{1,2},{1}}]) = 1),
  true)$

okltest_dll_heuristics_max_lit_tb(f) := block(
  for n : 0 thru 3 do
    for m : 0 thru 3 do
      assert(f(n,m)(cs_to_fcs({{1,2},{1},{1,2,3}})) = 1),
  for n : 1 thru 3 do
    for m : 2 thru 3 do
      assert(not f(n,m)(cs_to_fcs({{-1,-2,-3},{1,-2,-3},{1,2,3}})) = 1),
true)$


/* *********************************
   * Satisfiability approximations *
   *********************************
*/

okltest_locallemma_satapprox(f) := block(
  assert(f({}) = inf),
  assert(f({{}}) = minf),
  assert(f({{1}}) = inf),
  assert(f({{1},{2}}) = inf),
  assert(f({{},{1},{2}}) = minf),
  assert(f({{1},{-1}}) = 2),
  assert(f({{1,2}}) = inf),
  assert(f({{1,2},{-1,2}}) = inf),
  assert(f({{1,2},{-1,2},{1,-2}}) = 2),
  assert(f({{1,2},{-1,2},{1,-2},{-1,-2}}) = 4/3),
  assert(f({{1,2,3}}) = inf),
  assert(f({{1,2,3},{-1,2,3}}) = inf),
  assert(f({{1,2,3},{-1,2,3},{1,-2,3}}) = inf),
  assert(f({{1,2,3},{-1,2,3},{1,-2,3},{1,2,-3}}) = 8/3),
  assert(f({{-1,-2,-3,-4},{1,4},{2,4},{3,4}}) = 4/3),
  for n : 0 thru 4 do
    assert(f(full_fcs(n)[2]) = if n = 0 then minf else  1 / ((2^n - 1) * 2^(-n))),
  true)$

/*!
\endhtmlonly
*/
