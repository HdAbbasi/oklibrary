/* Oliver Kullmann, 1.12.2007 (Swansea) */
/* Copyright 2007, 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Backtracking/ConstraintSatisfaction.mac
  \brief Functions for solving constraint satisfaction problems via backtracking

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/ConstraintSatisfaction.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/BranchingTuples/Basic.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConstraintProblems/Domains.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$


/* ***************
   * Propagators *
   ***************
*/

/*
  See ComputerAlgebra/Satisfiability/Lisp/ConstraintProblems/Domains.mac
  for the notion of "domain association".
*/
/*
 A "propagator" is a function which potentially removes values from domains
 in a domain association. It changes the domain association in-place,
 and returns true iff some change (i.e., reduction) happened.
*/
trivial_propagator(dom) := false;

/* A new propagator which iterates the given one until a fixed point is 
   reached:
*/
prop_fixedpoint(prop) := buildq([prop], lambda([dom], block([p : false],
  for i : 1 thru inf do if prop(dom) then p : true else return(p))))$

/* Another propagator transformer (constructing a new propagator from prop),
   removing values which lead to a contradiction by propagation:
*/
look_ahead(prop) := buildq([prop], lambda([dom],
  block([n : length(dom), p : prop(dom)],
    for i : 1 thru n do block([dom_i : dom[i]],
      if length(dom_i) > 1 then
      for e in dom_i do block([copy_dom : copylist(dom)],
        copy_dom[i] : {e},
        prop(copy_dom),
        if min_dom_size(copy_dom) = 0 then
          (dom[i] : disjoin(e, dom_i), p : true))),
    return(p))))$


/* ***********
   * Solvers *
   ***********
*/

/* For a constraint satisfaction problem given by domain association and
   a propagator, return [sol,size], where size is the number of nodes
   in the search tree, while sol is a solution as a list of values or false 
   iff no solution exists.
   The heuristics heur(dom,prop) computes a pair [variable, [list of values]]
   for given domain assocation and propagator. dom does not contain empty
   domains, and at least one domain has length at least 2. */
/* Termination is guaranteed if the propagator always either removes
   some value or produces some empty domain, or yields a domain association
   where all domains are singleton sets.
   Correctness is guaranteed if the propagator makes sure that in case
   a domain association with all singletons is returned, this actually
   represents a solution.
*/
constraint_backtracking(dom,prop,heur) := block([size : 1],
   (prop_fixedpoint(look_ahead(prop)))(dom),
   if min_dom_size(dom) = 0 then [false,size]
   elseif max_dom_size(dom) = 1 then [map(single_element,dom),size] else (
     block([v,val,res,loopbreak : false],
     [v, val] : heur(dom,prop),
     for e in val do (
       block([new_dom : copylist(dom)],
       new_dom[v] : {e}, res : constraint_backtracking(new_dom,prop,heur)),
       size : size + res[2],
       if listp(res[1]) then (loopbreak : true, return(true))),
     if loopbreak then return([res[1],size]) else return([false,size])))
)$

/* Variation for counting solutions; outputs the number of solutions and the 
   size of the search tree. */
constraint_backtracking_counting(dom,prop,heur) := (
   (prop_fixedpoint(look_ahead(prop)))(dom),
   if min_dom_size(dom) = 0 then [0,1]
   elseif max_dom_size(dom) = 1 then [1,1] else (
     block([v,val, count : 0, size : 1],
     [v, val] : heur(dom,prop),
     for e in val do (
       block([new_dom : copylist(dom), c, s],
       new_dom[v] : {e},
       [c,s] : constraint_backtracking_counting(new_dom,prop,heur),
       count : count + c,
       size : size + s
     )),
     return([count,size])
     )
   )
)$


/* **************
   * Heuristics *
   **************
*/

/* For a constraint satisfaction problem given by domain association and
   a propagator, compute the best variable as the variable with minimal
   tau-value, where the branching tuple is given by the measure differences
   applied to the domain association before and after propagation,
   where the measure is the logarithm of the product of domain sizes. */
variable_heuristics_tau(dom,prop) := (local(dom,prop,opt_tau,opt_v,opt_dist,mu,new_dom),
 opt_tau : inf, mu : sum_log_dom_size(dom), 
 for v : 1 thru length(dom) do block([dist : [], dom_v : dom[v]],
   if length(dom_v) > 1 then (
     for e in dom_v do block([new_dom : copylist(dom), tau_value],
       new_dom[v] : {e}, prop(new_dom), dist : endcons(mu - sum_log_dom_size(new_dom), dist)),
     tau_value : tau(dist),
     if tau_value < opt_tau then (opt_tau : tau_value, opt_v : v, opt_dist : dist))
   ),
 block([dom_v : dom[opt_v]],
  block([L : makelist(i,i,1,length(dom_v)), comp : lambda([i,j], is(opt_dist[i] <= opt_dist[j]))], 
    L : sort(L, comp),
    return([opt_v, makelist((listify(dom_v))[i], i, L)])))
)$

/* The trivial heuristics, which just returns the first variable with
  domain-size at least two and the list of its values:
*/
trivial_variable_heuristics(dom,prop) := block([v : 1],
 for D in dom do
   if length(D) >= 2 then return([v,listify(D)])
   else v : v + 1)$


/*!
\endhtmlonly
*/
