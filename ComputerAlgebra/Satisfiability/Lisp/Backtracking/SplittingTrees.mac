/* Oliver Kullmann, 29.11.2007 (Swansea) */
/* Copyright 2007, 2008, 2009, 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Backtracking/SplittingTrees.mac
  \brief Functions for handling of splitting trees

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/SplittingTrees.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/GeneralisedUCP.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Resolution/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Trees/Lisp/Basics.mac")$


/* ************************************
   * The notion of a "splitting tree" *
   ************************************
*/

/*

 A "boolean splitting tree" ("st") for a clause-set F is either
  - [[]] for "nothing done",
  - or [false] in case F contains the empty clause,
  - or [true] in case F is empty,
  - or [x, T0, T1], where x is a boolean literal and
    T0/1 is a splitting tree of <x -> 0/1> * F.

 Thus boolean splitting trees are labelled binary rooted trees, where inner
 nodes are labelled by literals, and leaves are labelled by true, false or [].
 Splitting trees can be seen as exactly boolean decision trees.

 A boolean splitting tree is complete iff no leaf labelled by [].

 More precisely we speak of
  - "formal splitting trees" (no relation to a clause-set)
  - "splitting trees"
  - "extended splitting trees" (splitting can always continue).
 We can refer to them all via "st", if however a distinction is needed, then
 "fst" resp. "est" is used. See below for precise definitions.

*/

/* Whether T is a formal splitting tree: */
fst_p(T) := lrt_p(T) and rt2_p(lrt2rt(T)) and
 subsetp(ll_lrt(T), {true, false,[]})$

/* Whether T is a splitting tree for clause-set F: */
st_p(T,F) := fst_p(T) and subsetp(il_lrt(T), flit_cs(F)) and st0_p(T,F)$
/* Whether rooted tree T, which fulfills the formal requirements for being
   a splitting tree for F, fulfills the splitting requirements, that is,
   a leaf is exactly reached when either we have [] or when the clause-set
   has been decided (by creating the empty clause-set resp. the empty clause):
*/
st0_p(T,F) := if length(T)=1 then
   if T=[true] then is(F={})
   elseif T=[false] then elementp({},F)
   else true
 elseif F={} or elementp({},F) then false
 else block([x,T1,T2],
   [x,T0,T1] : T,
   st0_p(T0,apply_pa_cs({-x},F)) and st0_p(T1,apply_pa_cs({x},F)))$

/* Testing for "extended splitting tree for clause-set F", where now there are
   no requirements on the splitting literals (they don't need to be literals
   of F), and also further splitting is possible in case one arrived already
   at the empty clause(-set):
*/
est_p(T,F) := fst_p(T) and est0_p(T,F)$
est0_p(T,F) := if length(T)=1 then
   if T=[true] then is(F={})
   elseif T=[false] then elementp({},F)
   else true
 else block([x,T1,T2],
   [x,T0,T1] : T,
   est0_p(T0,apply_pa_cs({-x},F)) and est0_p(T1,apply_pa_cs({x},F)))$

/* Whether the formal splitting tree T is complete: */
complete_stp(T) := not elementp([], ll_lrt(T))$


/* ********************************
   * Manipulating splitting trees *
   ********************************
*/

/* Negate a splitting tree, i.e., negate the leaves: */
negate_st(T) := if length(T) = 1 then [not T[1]] else
[T[1], negate_st(T[2]), negate_st(T[3])]$

/* Condense a splitting tree to a splitting tree representing the same
   boolean function, but where every inner node has one satisfiable
   and one unsatisfiable successor:
*/
condense_st(T) := if length(T) = 1 then T else block(
 [x : T[1], T1 : condense_st(T[2]), T2 : condense_st(T[3])],
 if T1 = [false] and T2 = [false] then return([false])
 elseif T1 = [true] and T2 = [true] then return([true])
 else return([x, T1, T2]))$


/* ***************************
   * Finding splitting trees *
   ***************************
*/

monitorcheck_osl(name) := if oklib_monitor then (
  if depth <= oklib_monitor_level then (
    print(sconcat("M[",name,"]:"), "ENTRY (depth =", depth, ")."),
    print("F: ", statistics_cs(F))))$
monitorcheck_osl_v(name) := if oklib_monitor then (
  if depth + 1 <= oklib_monitor_level then (
    print(sconcat("M[",name,"]:"), "depth:", depth,
          ", new best variable:", v, ", new min size:", min_size)))$

/* For input F (a clause-set) returns a pair consisting of a splitting
   tree of minimum size, and its size (the number of nodes).
   The labels of inner nodes are variables.

   Monitoring shows the statistics of the input-clause-sets for the recursive
   calls of the procedure up to the depth given by oklib_monitor_level,
   and some basic information on the current best tree (for the recursive
   calls) once a branch was finished for depths up to oklib_monitor_level-1.
*/
/* RENAME: optimal_st_cs */
optimal_splitting_tree(F) :=
  optimal_splitting_tree_rec(F,0,2^(nvar_cs(F)+1)-1)$
/* The recursive procedure, which also supplies an upper bound (an
   integer) which has to be improved, and if this is not possible
   then the empty list is returned. */
optimal_splitting_tree_rec(F,depth,upperb) :=
 if upperb <= 0 then return([])
 elseif emptyp(F) then [[true],1]
 elseif has_empty_element(F) then [[false],1] else
  block([best_tree : [[]], min_size : inf, V : var_cs(F), break : false],
   monitorcheck_osl("optimal_splitting_tree"),
    for v in V unless break do
     block([osp0, osp1],
      if upperb <= 2 then (break : true, return()),
      osp0 : optimal_splitting_tree_rec(apply_pa({-v},F), depth+1, upperb-2),
      if osp0 = [] then return(),
      osp1 : optimal_splitting_tree_rec(apply_pa({v}, F), depth+1,
                                        upperb - osp0[2] - 1),
      if osp1 = [] then return(),
      block([new_size : osp0[2] + osp1[2] + 1],
       if new_size < min_size then (
         best_tree : [v, osp0[1], osp1[1]],
         min_size : new_size, upperb : min(upperb, min_size-1),
         monitorcheck_osl_v("optimal_splitting_tree")))),
    if best_tree = [[]] then return([]) else
      return([best_tree, min_size]))$


/* ******************************
   * Evaluating splitting trees *
   ******************************
*/

/* Counting the satisfying assignments in a splitting tree (relative to the set
   V of variables):
*/
count_sat_st(st,V) := if st = [true] then 2^(length(V))
  elseif st = [false] then 0 else
  block([nV : disjoin(var_l(st[1]), V)],
    return(count_sat_st(st[2],nV) + count_sat_st(st[3],nV)))$

/* Compute the satisfying (*partial*) assignments in a splitting tree.
   Returns a list which scans the true-leaves from left to right.
   If T is a splitting tree for clause-set F (as CNF), then the returned
   clause-set G (the setification of the returned list) is a hitting
   clause-set which as DNF is equivalent to F.
*/
sat_pass_st(st) := sat_pass_st_a(st,{})$
sat_pass_st_a(st,phi) := if st = [true] then [phi]
  elseif st = [false] then [] else
  append(sat_pass_st_a(st[2], adjoin(-st[1],phi)), sat_pass_st_a(st[3], adjoin(st[1],phi)))$
/* Dually, compute the hitting clause-set (as a clause-list, scanning the
   tree from left to right) which (as CNF) represents the falsifying
   assignments.
*/
usat_clauses_st(st) := usat_clauses_st_a(st,{})$
usat_clauses_st_a(st,C) := if st = [false] then [C]
  elseif st = [true] then [] else
  append(usat_clauses_st_a(st[2], adjoin(st[1],C)), usat_clauses_st_a(st[3], adjoin(-st[1],C)))$


/* Given a complete extended splitting tree for an unsatisfiable clause-set F,
   return a resolution tree (see Satisfiability/Lisp/Resolution/Proofs.mac for
   the definition of a resolution tree ("reslrt")):
*/
st2reslrt_cs(st,F) := st2reslrt_cs_rel(st,{},F)$
st2reslrt_cs_rel(st,phi,F) :=
  if length(st) = 1 then [first_element(analyse_pa(phi,F)[2])]
  else block([left_t : st2reslrt_cs_rel(st[2],adjoin(-st[1],phi),F),
              right_t : st2reslrt_cs_rel(st[3],adjoin(st[1],phi),F)],
    if elementp(st[1], left_t[1]) then
      if elementp(-st[1], right_t[1]) then
        [resolvent_l(left_t[1], right_t[1], st[1]), left_t, right_t]
      else right_t
    else left_t)$

/* For a resolution-tree T compute the corresponding splitting-tree, using
   the resolution-literals as splitting literals, and positing false at
   the leaves:
*/
reslrt2st(R) := if length(R)=1 then [false]
 else [resolution_literal(R[2][1],R[3][1]), reslrt2st(R[2]), reslrt2st(R[3])];

/* Pruning a splitting-tree T w.r.t. a clause-set F, pruning unneccesary
   splittings: */
treepruning_st(T,F) := reslrt2st(st2reslrt_cs(T,F))$


/* ***********************************
   * Generators for splitting trees  *
   ***********************************
*/

/* "Tree-variables": terms trv(path), where path is a path in a tree. */
kill(trv)$
declare(trv,noun)$
declare(trv,posfun)$
trv_var(v) := nounify(trv)(v)$

/* The complete splitting tree of height k which is complete as tree and which
   has different tree-variables at each inner node.
   The corresponding tree-hitting clause-sets are exactly the uniform saturated
   minimally unsatisfiable clause-sets of deficiency 1; equivalently, exactly
   the unsatisfiable uniform regular hitting clause-sets.
*/
complete_st_alldifferent(k) := complete_st_alldifferent_pref(k,[])$
complete_st_alldifferent_pref(k,prefix) := if k = 0 then [false] else
  [trv_var(reverse(prefix)),
     complete_st_alldifferent_pref(k-1, cons(1,prefix)),
     complete_st_alldifferent_pref(k-1, cons(2,prefix))]$

/* The complete splitting tree of height k and levelled height <= 1.
   The splitting-literals are variables trv(P), where P is the path to the
   current node; the false branches are the first branches.
   The corresponding tree-hitting clause-sets are exactly (up to isomorphism)
   the saturated minimally unsatisfiable Horn clause-sets.
*/
/* RENAME: input_st */
horn_st(k) := horn_st_pref(k,[])$
horn_st_pref(k,prefix) := if k = 0 then [false] else
  [trv_var(reverse(prefix)), [false], horn_st_pref(k-1, cons(2,prefix))]$
/* The variation where the list L of splitting-literals, starting from the
   root, together with the base-tree b, is given: */
input_list_st(L,b) := if emptyp(L) then b else
  [first(L), [false], input_list_st(rest(L),b)]$

/* More generally, the complete splitting tree of height k >= 0 and levelled
   height l >= 0 (if l=0 then k=0, else k is arbitrary), using different
   variables for all (inner) nodes:
*/
genhorn_st(k,l) := genhorn_st_pref(k,l,[])$
genhorn_st_pref(k,l,prefix) := if l=0 or k=0 then [false]
 elseif l=1 then horn_st_pref(k,prefix)
 else [trv_var(reverse(prefix)),
       genhorn_st_pref(k-1,l-1,cons(1,prefix)),
       genhorn_st_pref(k-1, l, cons(2,prefix))]$
/* Remark: For the corresponding tree-hitting clause-sets see smusat_genhorn_cs
   in Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac.
*/
/* The satisfiable extensions, extending each leaf of genhorn_st(k,l) by
   one sat-branch:
*/
genhornsat_st(k,l) := genhornsat_st_pref(k,l,[])$
genhornsat_st_pref(k,l,prefix) :=
 if l=0 or k=0 then [trv_var(reverse(prefix)),[false],[true]]
 else [trv_var(reverse(prefix)),
       genhornsat_st_pref(k-1,l-1,cons(1,prefix)),
       genhornsat_st_pref(k-1, l, cons(2,prefix))]$


/* ***********************
   * r_k splitting trees *
   ***********************
*/

/*
 A "boolean r_k-splitting tree" for a clause-set F is either
  - [[]] for "nothing done",
  - or [false] in case r_k(F) = {{}},
  - or [true] in case r_k(F) = {},
  - or [x, T0, T1], where x is a boolean literal and
    T0/1 is a r_k-splitting tree of <x -> 0/1> * r_k(F).
*/
/*
 So splitting trees are exactly the r_0-splitting trees.
*/

/*
 A boolean r_k-splitting tree is complete iff no leaf is [[]].
*/

/* For input F (a clause-set) returns a pair consisting of a r_k-splitting
   tree of minimum size, and its size.
   Splitting literals are always splitting variables.
*/
optimal_r_splitting_tree(F,k) := block(
 [name : sconcat("optimal_r_splitting_tree(",k,")")],
 optimal_r_splitting_tree_rec(F,k,0,2^(nvar_cs(F)+1)-1))$
optimal_r_splitting_tree_rec(F,k,depth,upperb) :=
 if upperb <= 0 then return([]) else
 block([Fr : generalised_ucp(F,k)],
  if Fr = {} then return([[true],1])
  elseif Fr = {{}} then return([[false],1]) else
   block([best_tree : [[]], min_size : inf, V : var_cs(Fr), break : false],
    monitorcheck_osl(name),
     for v in V unless break do
      block([osp0, osp1],
       if upperb <= 2 then (break : true, return()),
       osp0 : optimal_r_splitting_tree_rec(apply_pa({-v}, Fr),k, depth+1,
                                           upperb-2),
       if osp0 = [] then return(),
       osp1 : optimal_r_splitting_tree_rec(apply_pa({v}, Fr),k,depth+1,
                                           upperb - osp0[2] - 1),
       if osp1 = [] then return(),
       block([new_size : osp0[2] + osp1[2] + 1],
        if new_size < min_size then (
          best_tree : [v, osp0[1], osp1[1]],
          min_size : new_size, upperb : min(upperb, min_size-1),
          monitorcheck_osl_v(name)))),
    if best_tree = [[]] then return([]) else
      return([best_tree, min_size])))$

/*
 An "amended r_k-splitting tree" has as labels for the non-leaf-nodes
 pairs [x,phi], where phi is the partial assignment yielding the
 reduced clause-set associated to the node, that is, phi applied to the
 unreduced clause-set associated with the node yields
 the reduced clause-set.
 The unreduced clause-set associated with the root is the input,
 while otherwise it is the branching assignment (just one variable
 involving) applied to the reduced clause-set associated with the
 parent node.
 Accordingly leaf-nodes are labelled with pairs [true/false,phi].
*/

/* Given a clause-set F and an r_k-splitting tree T for F, compute
   the amended r_k-splitting tree.
*/
amend_r_splitting_tree(F,T,k) := block(
  [x : T[1], Fr : generalised_ucp_pa(F,k)],
  if length(T) = 1 then return([[x,Fr[2]]])
  else block([
    T0 : amend_r_splitting_tree(apply_pa({-x},Fr[1]), T[2], k),
    T1 : amend_r_splitting_tree(apply_pa({x},Fr[1]), T[3], k)],
    return([[x,Fr[2]], T0, T1])))$

/* Transforming an an r_k-splitting tree T for F into a splitting tree for F:
*/
unfold_r_splitting_tree(F,T,k) :=
 if k=0 then T
 elseif k=1 then block([x : T[1], redres : ucp_lpa_0_cs(F), Fr, phi],
   Fr : redres[1],
   phi : lappend(map(listify,redres[2])),
   if length(T)=1 then input_list_st(phi, [x]) else
   input_list_st(phi, [x,unfold_r_splitting_tree(apply_pa_cs({-x},Fr),T[2],k),
                        unfold_r_splitting_tree(apply_pa_cs({x},Fr),T[3],k)]))
 else unknown$ /* not yet implemented */


/* **********
   * Output *
   **********
*/

oklib_plain_include("stringproc")$

/* Output a splitting tree st as latex-ps-tree to stream s: */
tex_st(s,st) := if st = [true] then printf(s, "~a", "\\TC")
  elseif st = [false] then printf(s, "~a", "\\Tdot")
  else (
     printf(s, "~a~a~a", "\\pstree{\\TR{$", st[1], "$}}"),
     printf(s, "{"), tex_st(s, st[2]), tex_st(s, st[3]), printf(s, "}")
)$

/* Output a splitting tree st as latex-ps-tree to a file with name n: */
tex_st_f(n, st) := (block[s : openw(n)], tex_st(s, st), close(s))$

/* Output a resolution tree rt as latex-ps-tree to stream s: */
tex_rt(s,rt) := if length(rt) = 1 then printf(s, "~a~a~a", "\\TR{$\\set", rt[1], "$}")
  else (
     printf(s, "~a~a~a", "\\pstree{\\TR{$\\set", rt[1], "$}}"),
     printf(s, "{"), tex_rt(s, rt[2]), tex_rt(s, rt[3]), printf(s, "}")
)$

/* Output a resolution tree st as latex-ps-tree to a file with name n: */
tex_rt_f(n, rt) := (block[s : openw(n)], tex_rt(s, rt), close(s))$

/*!
\endhtmlonly
*/
