/* Oliver Kullmann, 29.11.2007 (Swansea) */
/* Copyright 2007, 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Backtracking/SplittingTrees.mac
  \brief Functions for handling of splitting trees

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/Backtracking/SplittingTrees.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Reductions/GeneralisedUCP.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Resolution/Basics.mac")$


/*
 A "boolean splitting tree" for a clause-set F is either 
  - [[]] for "nothing done",
  - or [false] in case F contains the empty clause,
  - or [true] in case F is empty,
  - or [x, T0, T1], where x is a boolean literal and
    T0/1 is a splitting tree of <x -> 0/1> * F.
*/

/* So splitting tree can be seen as exactly boolean decision trees. */

/*
 A boolean splitting tree is complete iff no leaf is [[]].
*/


/* ********************************
   * Manipulating splitting trees *
   ********************************
*/

/* Negate a splitting tree, i.e., negate the leaves. */
negate_st(T) := if length(T) = 1 then [not T[1]] else
[T[1], negate_st(T[2]), negate_st(T[3])]$


/* ***************************
   * Finding splitting trees *
   ***************************
*/

monitorcheck_osl(name) := if oklib_monitor then (
  if depth <= oklib_monitor_level then (
    print(sconcat("M[",name,"]:"), "ENTRY (depth =", depth, ")."),
    print("F: ", statistics_cs(F))))$
monitorcheck_osl_v(name) := if oklib_monitor then (
  if depth + 1 <= oklib_monitor_level then (
    print(sconcat("M[",name,"]:"), "depth:", depth,  
          ", new best variable:", v, ", new min size:", min_size)))$

/* For input F (a clause-set) returns a pair consisting of a splitting
   tree of minimum size, and its size (the number of nodes).
   The labels of inner nodes are variables. */
optimal_splitting_tree(F) := 
  optimal_splitting_tree_rec(F,0,2^(nvar_cs(F)+1)-1)$
/* The recursive procedure, which also supplies an upper bound (an
   integer) which has to be improved, and if this is not possible
   then the empty list is returned. */
optimal_splitting_tree_rec(F,depth,upperb) := 
 if upperb <= 0 then return([])
 elseif is_empty(F) then [[true],1]
 elseif has_empty_element(F) then [[false],1] else
  block([best_tree : [[]], min_size : inf, V : var_cs(F), break : false], 
   monitorcheck_osl("optimal_splitting_tree"),
    for v in V unless break do 
     block([osp0, osp1],
      if upperb <= 2 then (break : true, return()),
      osp0 : optimal_splitting_tree_rec(apply_pa({-v},F), depth+1, upperb-2),
      if osp0 = [] then return(),
      osp1 : optimal_splitting_tree_rec(apply_pa({v}, F), depth+1, 
                                        upperb - osp0[2] - 1),
      if osp1 = [] then return(),
      block([new_size : osp0[2] + osp1[2] + 1],
       if new_size < min_size then (
         best_tree : [v, osp0[1], osp1[1]], 
         min_size : new_size, upperb : min(upperb, min_size-1),
         monitorcheck_osl_v("optimal_splitting_tree")))),
    if best_tree = [[]] then return([]) else
      return([best_tree, min_size]))$


/* ******************************
   * Evaluating splitting trees *
   ******************************
*/

/* Counting the satisfying assignments in a splitting tree (relative to the set
   V of variables) */
count_sat_st(st,V) := if st = [true] then 2^(length(V)) 
  elseif st = [false] then 0 else
  block([nV : disjoin(var_l(st[1]), V)],
    return(count_sat_st(st[2],nV) + count_sat_st(st[3],nV)))$

/* Compute the satisfying (*partial*) assignments in a splitting tree.
   Returns a list which scans the true-leaves from left to right.
   If T is a splitting tree for clause-set F (as CNF), then the returned
   clause-set G (the setification of the returned list) is a tree hitting 
   clause-set which as DNF is equivalent to F. */
sat_pass_st(st) := sat_pass_st_a(st,{})$
sat_pass_st_a(st,phi) := if st = [true] then [phi] 
  elseif st = [false] then [] else
  append(sat_pass_st_a(st[2], adjoin(-st[1],phi)), sat_pass_st_a(st[3], adjoin(st[1],phi)))$
/* Dually, compute the hitting clause-set (as a clause-list, scanning the
   tree from left to right) which (as CNF) represents the falsifying
   assignments. */
usat_clauses_st(st) := usat_clauses_st_a(st,{})$
usat_clauses_st_a(st,C) := if st = [false] then [C] 
  elseif st = [true] then [] else
  append(usat_clauses_st_a(st[2], adjoin(st[1],C)), usat_clauses_st_a(st[3], adjoin(-st[1],C)))$


/* Given a complete splitting tree for a clause-set F, return a resolution
   tree */
splitting2resolution_tree_rel(st,phi,F) := 
  if length(st) = 1 then
    block([falsified : analyse_pa(phi,F)[2]], return([listify(falsified)[1]]))
  else block([left_t : splitting2resolution_tree_rel(st[2],adjoin(-st[1],phi),F),
              right_t : splitting2resolution_tree_rel(st[3],adjoin(st[1],phi),F)],
    if elementp(st[1], left_t[1]) then
      if elementp(-st[1], right_t[1]) then
        return([resolvent_l(left_t[1], right_t[1], st[1]), left_t, right_t])
      else return(right_t)
    else return(left_t))$
splitting2resolution_tree(st,F) := splitting2resolution_tree_rel(st,{},F)$


/* ***********************************
   * Generators for splitting trees  *
   ***********************************
*/

/* "Tree-variables": terms trv(path), where path is a path in a tree. */
kill(trv)$
declare(trv,noun)$
declare(trv,posfun)$
trv_var(v) := nounify(trv)(v)$

/* The complete splitting tree of height k which is complete as tree and which has
   different tree-variables at each inner node. */
/* The corresponding tree-hitting clause-sets are exactly the uniform saturated
   minimally unsatisfiable clause-sets of deficiency 1; equivalently, exactly
   the unsatisfiable uniform regular hitting clause-sets. */
complete_st_alldifferent(k) := complete_st_alldifferent_pref(k,[])$
complete_st_alldifferent_pref(k,prefix) := if k = 0 then [false] else
  [trv_var(prefix), 
     complete_st_alldifferent_pref(k-1, cons(1,prefix)),
     complete_st_alldifferent_pref(k-1, cons(2,prefix))]$
  


/* ***********************
   * r_k splitting trees *
   ***********************
*/

/*
 A "boolean r_k-splitting tree" for a clause-set F is either 
  - [[]] for "nothing done",
  - or [false] in case r_k(F) = {{}},
  - or [true] in case r_k(F) = {},
  - or [x, T0, T1], where x is a boolean literal and
    T0/1 is a r_k-splitting tree of <x -> 0/1> * r_k(F).
*/
/*
 So splitting trees are exactly the r_0-splitting trees. 
*/

/*
 A boolean r_k-splitting tree is complete iff no leaf is [[]].
*/

/* For input F (a clause-set) returns a pair consisting of a r_k-splitting
   tree of minimum size, and its size. 
   Splitting literals are always splitting variables. */
optimal_r_splitting_tree(F,k) := block(
 [name : sconcat("optimal_r_splitting_tree(",k,")")],
 optimal_r_splitting_tree_rec(F,k,0,2^(nvar_cs(F)+1)-1))$
optimal_r_splitting_tree_rec(F,k,depth,upperb) := 
 if upperb <= 0 then return([]) else
 block([Fr : generalised_ucp(F,k)],
  if Fr = {} then return([[true],1])
  elseif Fr = {{}} then return([[false],1]) else
   block([best_tree : [[]], min_size : inf, V : var_cs(Fr), break : false],
    monitorcheck_osl(name),  
     for v in V unless break do 
      block([osp0, osp1],
       if upperb <= 2 then (break : true, return()),
       osp0 : optimal_r_splitting_tree_rec(apply_pa({-v}, Fr),k, depth+1, 
                                           upperb-2),
       if osp0 = [] then return(),
       osp1 : optimal_r_splitting_tree_rec(apply_pa({v}, Fr),k,depth+1,
                                           upperb - osp0[2] - 1),
       if osp1 = [] then return(),
       block([new_size : osp0[2] + osp1[2] + 1],
        if new_size < min_size then (
          best_tree : [v, osp0[1], osp1[1]], 
          min_size : new_size, upperb : min(upperb, min_size-1),
          monitorcheck_osl_v(name)))),
    if best_tree = [[]] then return([]) else
      return([best_tree, min_size])))$

/*
 An "amended r_k-splitting tree" has as labels for the non-leaf-nodes
 pairs [x,phi], where phi is the partial assignment yielding the
 reduced clause-set associated to the node, that is, phi applied to the 
 unreduced clause-set associated with the node yields
 the reduced clause-set.
 The unreduced clause-set associated with the root is the input,
 while otherwise it is the branching assignment (just one variable
 involving) applied to the reduced clause-set associated with the
 parent node.
 Accordingly leaf-nodes are labelled with pairs [true/false,phi].
*/

/* Given a clause-set F and an r_k-splitting tree T for F, compute
   the amended r_k-splitting tree. */
amend_r_splitting_tree(F,T,k) := block(
  [x : T[1], Fr : generalised_ucp_pa(F,k)],
  if length(T) = 1 then 
    return([[x,Fr[2]]])
  else block([
    T0 : amend_r_splitting_tree(apply_pa({-x},Fr[1]), T[2], k),
    T1 : amend_r_splitting_tree(apply_pa({x},Fr[1]), T[3], k)],
    return([[x,Fr[2]], T0, T1])))$


/* **********
   * Output *
   **********
*/

load("stringproc")$

/* Output a splitting tree st as latex-ps-tree to stream s */
tex_st(s,st) := if st = [true] then printf(s, "~a", "\\TC")
  elseif st = [false] then printf(s, "~a", "\\Tdot")
  else (
     printf(s, "~a~a~a", "\\pstree{\\TR{$", st[1], "$}}"),
     printf(s, "{"), tex_st(s, st[2]), tex_st(s, st[3]), printf(s, "}")
)$

/* Output a splitting tree st as latex-ps-tree to file with name n */
tex_st_f(n, st) := (block[s : openw(n)], tex_st(s, st), close(s))$
 
/* Output a resolution tree rt as latex-ps-tree to stream s */
tex_rt(s,rt) := if length(rt) = 1 then printf(s, "~a~a~a", "\\TR{$\\set", rt[1], "$}")
  else (
     printf(s, "~a~a~a", "\\pstree{\\TR{$\\set", rt[1], "$}}"),
     printf(s, "{"), tex_rt(s, rt[2]), tex_rt(s, rt[3]), printf(s, "}")
)$

/* Output a resolution tree st as latex-ps-tree to file with name n */
tex_rt_f(n, rt) := (block[s : openw(n)], tex_rt(s, rt), close(s))$

/*!
\endhtmlonly
*/
