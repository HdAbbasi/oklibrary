/* Oliver Kullmann, 8.6.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Backtracking/Learning.mac
  \brief SAT algorithms mostly based on learning

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/Backtracking/Learning.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/Reductions/GeneralisedUCP.mac")$


/* The most basic learning algorithm for SAT, without conflict analysis,
   and with complete restart after each conflict. */
/* The heuristics is as for DLL algorithms. */
/* The reduction r must be at least as strong as r_1. */
basic_learning(r,h) := buildq([r,h], lambda([FF],
 block([F0 : FF[2], result : unknown],
   unless result # unknown do block([F : r(F0)],
     if emptyp(F) then result : true
     elseif empty_element_p(F) then result : false
     else block([phi : {}],
       unless result # unknown do block([x : h(cs2fcs(F))],
         phi : adjoin(x,phi),
         F : r(apply_pa_cs({x},F)),
         if emptyp(F) then result : true
         elseif empty_element_p(F) then result : false
       ),
       if result = false then ( /* Learning: */
         F0 : adjoin(comp_sl(phi),F0), result : unknown
     ))),
 return(result))))$

/*!
\endhtmlonly
*/
