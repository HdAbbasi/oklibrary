/* Oliver Kullmann, 24.12.2007 (Swansea) */
/* Copyright 2007, 2008, 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac
  \brief D(P)LL-like solver schemes

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac");

*/


/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac")$
oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Basic.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Counting/InclusionExclusion.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/GeneralisedUCP.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Trees/Lisp/Basics.mac")$


/* **********************************
   * Backtracking without reduction *
   **********************************
*/

/* The simplest scheme: input is a formal clause-set, and the return value
   is true or false.
   The heuristics has to return a literal for input a formal clause-set,
   and this literal is first set to true. */

dll_simplest(FF, h) := if emptyp(FF[2]) then true
 elseif empty_element_p(FF[2]) then false
 else block([x : h(FF)], 
    return(dll_simplest(apply_pa_fcs({x}, FF), h) or 
           dll_simplest(apply_pa_fcs({-x}, FF), h)))$

/* The variation where instead of "true" a satisfying partial assignment is
   returned: */
dll_simplest_spa(FF,h) := if emptyp(FF[2]) then {}
 elseif empty_element_p(FF[2]) then false
 else block([x : h(FF), res], 
    res : dll_simplest_spa(apply_pa_fcs({x}, FF), h),
    if res # false then return(adjoin(x,res)),
    res : dll_simplest_spa(apply_pa_fcs({-x}, FF), h),
    if res # false then return(adjoin(-x,res)) else 
      return(false))$

/* The variation where the return value is the computed splitting tree: */
dll_simplest_st(FF, h) := if emptyp(FF[2]) then [true]
 elseif empty_element_p(FF[2]) then [false]
 else block([x : h(FF)], 
    return([-x,
            dll_simplest_st(apply_pa_fcs({x}, FF), h),
            dll_simplest_st(apply_pa_fcs({-x}, FF), h)]))$


/* ***********************************
   * Backtracking with r_k-reduction *
   ***********************************
*/

monitorcheck_dll(name,red) := if oklib_monitor then (
  print(sconcat("M[",name,"]:"), "Entry (reduction =", red, ")."),
    print("F: ", statistics_fcs(FF)),
    print("Fr: ", statistics_fcs(cs_to_fcs(Fr))))$

dll_rk(FF, h, k) := block([Fr : generalised_ucp(FF[2],k)],
  monitorcheck_dll("dll_rk",k),
  if emptyp(Fr) then true
  elseif empty_element_p(Fr) then false
  else block([V : var_cs(Fr)], block([x : h([V,Fr])],
    return(dll_rk(apply_pa_f({x}, [V,Fr]), h, k) 
           or dll_rk(apply_pa_f({-x}, [V,Fr]), h, k)))))$

/* The variation where the return value is the computed r_k-splitting tree. */
dll_rk_st(FF, h, k) := block([Fr : generalised_ucp(FF[2],k)],
  monitorcheck_dll("dll_rk_st",k),
  if emptyp(Fr) then [true]
  elseif empty_element_p(Fr) then [false]
  else block([V : var_cs(Fr)], block([x : h([V,Fr])], 
    return([-x,
            dll_rk_st(apply_pa_f({x}, [V,Fr]), h, k),
            dll_rk_st(apply_pa_f({-x}, [V,Fr]), h, k)]))))$


/* *****************************************
   * Backtracking with arbitrary reduction *
   *****************************************
*/


/* the reduction takes a clause-set and returns a clause-set */
dll_red(FF, h, red) := block([Fr : red(FF[2])],
  monitorcheck_dll("dll_red", red),
  if emptyp(Fr) then true
  elseif empty_element_p(Fr) then false
  else block([V : var_cs(Fr)], block([x : h([V,Fr])], 
    return(dll_red(apply_pa_f({x}, [V,Fr]), h, red) 
           or dll_red(apply_pa_f({-x}, [V,Fr]), h, red)))))$

/* dll_red(FF, h, lambda([F], generalised_ucp(F,k))) = dll_rk(FF, h, k) */

/* The variation where the return value is the computed r-splitting tree. */
dll_red_st(FF, h, red) := block([Fr : red(FF[2])],
  monitorcheck_dll("dll_red_st", red),
  if emptyp(Fr) then [true]
  elseif empty_element_p(Fr) then [false]
  else block([V : var_cs(Fr)], block([x : h([V,Fr])], 
    return([-x,
            dll_red_st(apply_pa_f({x}, [V,Fr]), h, red),
            dll_red_st(apply_pa_f({-x}, [V,Fr]), h, red)]))))$

/* Amend the splitting tree with the distances used by the heuristics;
   so this time the "amended heuristics" returns a pair [x,L],
   and non-leaf-nodes a labelled with pairs [x,L], while
   leaf-nodes are still just labelled with [true] or [false].
   Here L is the list of distance-pairs used by the heuristic.

   So such an "amended splitting tree" ("ast") has as labels at
   inner nodes pairs [x,L], where x is the splitting literal, while L is the
   list of pairs of distances (each pair handling the two branches) for the
   distance functions (used for tie-breaking: if the projections
   of the first pairs are equal, consider the second pair etc.).
*/
dll_red_st_dist(FF, ah, red) := block([Fr : red(FF[2])],
  monitorcheck_dll("dll_red_st_dist", red),
  if emptyp(Fr) then [true]
  elseif empty_element_p(Fr) then [false]
  else block([V : var_cs(Fr)], block([H : ah([V,Fr]), x], 
    x : H[1],
    return([[-x, map(reverse, H[2])],
            dll_red_st_dist(apply_pa_f({x}, [V,Fr]), ah, red),
            dll_red_st_dist(apply_pa_f({-x}, [V,Fr]), ah, red)]))))$


/* *******************************
   * Simple heuristics for DLL   *
   *******************************
*/

/* *** Heuristics aiming at small trees *** */

/* The simplest heuristics: return the first variable. */
dll_heuristics_first_formal(FF) := first(FF[1])$

/* Instantiations of SAT solvers: */
dll_simplest_trivial1(FF) := dll_simplest(FF, dll_heuristics_first_formal)$
dll_simplest_spa_trivial1(FF) := dll_simplest_spa(FF, dll_heuristics_first_formal)$
dll_simplest_st_trivial1(FF) := dll_simplest_st(FF, dll_heuristics_first_formal)$
dll_rk_trivial1(FF,k) := dll_rk(FF, dll_heuristics_first_formal, k)$
dll_rk_st_trivial1(FF,k) := dll_rk_st(FF, dll_heuristics_first_formal, k)$


/* The second-simplest heuristics: return the literal of the first
   literal-occurrence. */
dll_heuristics_first_real(FF) := first(first(FF[2]))$

/* Instantiations of SAT solvers: */
dll_simplest_trivial2(FF) := dll_simplest(FF, dll_heuristics_first_real)$
dll_simplest_spa_trivial2(FF) := dll_simplest_spa(FF, dll_heuristics_first_real)$
dll_simplest_st_trivial2(FF) := dll_simplest_st(FF, dll_heuristics_first_real)$
dll_rk_trivial2(FF,k) := dll_rk(FF, dll_heuristics_first_real, k)$
dll_rk_st_trivial2(FF,k) := dll_rk_st(FF, dll_heuristics_first_real, k)$


/* Heuristics: first literal in first shortest clause */
dll_heuristics_first_shortest_clause(FF) := block([ml : inf, x],
 for C in FF[2] do if length(C) < ml then (ml : length(C), x : first(C)),
  return(x))$

/* Instantiations of SAT solvers: */
dll_simplest_first_shortest_clause(FF) := dll_simplest(FF, dll_heuristics_first_shortest_clause)$
dll_simplest_st_first_shortest_clause(FF) := dll_simplest_st(FF, dll_heuristics_first_shortest_clause)$
dll_rk_first_shortest_clause(FF,k) := dll_rk(FF, dll_heuristics_first_shortest_clause, k)$
dll_rk_st_first_shortest_clause(FF,k) := dll_rk_st(FF, dll_heuristics_first_shortest_clause, k)$


/* Heuristics: choose a variable occurring most often, and choose the sign
   first which satisfies most clauses. */

dll_heuristics_max_var(FF) := block(
 [v : max_variable_degree_v_cs(FF[2])[2]],
 if literal_degree_cs(FF[2],v) >= literal_degree_cs(FF[2],-v) then
   return(v) else return(-v))$

/* Instantiations of SAT solvers: */
dll_simplest_max_var(FF) := dll_simplest(FF, dll_heuristics_max_var)$
dll_simplest_st_max_var(FF) := dll_simplest_st(FF, dll_heuristics_max_var)$
dll_rk_max_var(FF,k) := dll_rk(FF, dll_heuristics_max_var, k)$
dll_rk_st_max_var(FF,k) := dll_rk_st(FF, dll_heuristics_max_var, k)$


/* *** Heuristics for a good representation of the set of satisfying
   assignments (thus "satisfiability-driven"). *** */

/* Given an approximation A for SAT-probability, returns the heuristics,
   which chooses the literal maximising A(<x -> 1> * FF). At least one 
   literal x must yield a value A > minf. */
/* MG: Could some of this not be generalised to some sort of  maximise(f) 
   function? */
choose_most_sat_literal_h(A) := buildq([A], lambda([FF],
  block([L : literals_v(FF[1]), opta : minf, optx],
    for x in L do block([a : A(apply_pa_f({x}, FF))],
      if a > opta then (opta : a, optx : x)),
    return(optx))))$

johnson_heuristic : choose_most_sat_literal_h(satprob_hitting_f)$


/* Heuristics: choose a literal occurring most often;
   in case of ties, the return value is implementation-defined. */
dll_heuristics_max_lit(FF) := max_literal_degree_l_cs(FF[2])[2]$

dll_simplest_max_lit(FF) := dll_simplest(FF, dll_heuristics_max_lit)$
dll_simplest_st_max_lit(FF) := dll_simplest_st(FF, dll_heuristics_max_lit)$
dll_rk_max_lit(FF,k) := dll_rk(FF, dll_heuristics_max_lit, k)$
dll_rk_st_max_lit(FF,k) := dll_rk_st(FF, dll_heuristics_max_lit, k)$


/* Heuristics: choose a literal occurring most often and do additional
   "lookahead" to try to avoid ties (hence tb "tie break"). */
/* Returns a literal with the maximum literal degree from the given clause-set
   using lookahead up to depth d, considering n tied literals at each stage if
   ties occur for a maximum literal. */
dll_heuristics_max_lit_tb(d,n) :=
  buildq([d,n],lambda([FF],max_literal_degree_tb_l_cs(FF,d,n)[1]))$


/* ****************************
   * Heuristics via distances *
   ****************************
*/

/* Heuristics scheme given by a list of distances and projections (for 
   lexicographical ordering in case of ties) and an approximation of
    satisfiability probability; look-ahead by reduction r (a map from
    clause-sets to clause-sets). */
/* If the distance yields <= 0 then the whole branching is disqualified,
   if the distance yields infinity, then this branching is chosen 
   immediately. */
/* A projection is the better the smaller. Inputs are positive and
   not infinity, and the same for the output. */
/* If there are less projections than distances, then the last projection
   is reused. */

/* A helper-function which determines whether a value evaluates to inf.
   Ignores presence of minf; Maxima evaluates 0*inf to 0. */
equivinfp(x) := is(not freeof(inf, x))$

/* A helper-function for evaluating a branching variable:
   Using dynamic binding for F, F1, F0 and v. */
evaluating_branching_variable(d) := block([x,d0,d1],
  x : v, d1 : d(F, F1),
  if equivinfp(d1) then return([x])
  elseif d1 <= 0 then return([]) else (
    x : -v, d0 : d(F, F0),
    if equivinfp(d0) then (return([x]))
    elseif d0 <= 0 then return([])
    else return([d1,d0])))$

/* Helper-function for lexicographical ordering of lists:
   returns true if A < B */
lexicographical_orderp(A,B) :=
  if A = [] then if B = [] then false else true
  elseif B = [] then false
  elseif A[1] < B[1] then true
  elseif A[1] > B[1] then false
  else lexicographical_orderp(rest(A),rest(B))$

monitorcheck_hld(name) := if oklib_monitor then (
  print(sconcat("M[",name,"]:"), "immediate:", immediate, ", best_proj:", best_proj))$
monitorcheck_hld_v(name) := if oklib_monitor then (
  if oklib_monitor_level >= 1 then (
    print(sconcat("M[",name,"]: LOOP "),  "variable:", v, ", immediate:", immediate, ", ignore:", ignore, ", distances:", D)))$

heuristics_lookahead_distances(r, distances, projections, satprob) :=
 block([nd : length(distances), np : length(projections)],
  buildq([r, distances, projections, satprob, nd, np], lambda([FF],
   block(
    [F : FF[2], best_var, branch_lit, best_proj : [inf], immediate : false, Fbest],
    for v in FF[1] unless immediate do 
     block([E, F0,F1, D : [], P : [], ignore : false],
      F1 : r(apply_pa({v},F)), F0 : r(apply_pa({-v},F)),
      for i : 1 thru nd do (
        E : evaluating_branching_variable(distances[i]),
        if length(E) = 0 then (ignore : true, return(false)),
        if length(E) = 1 then (
          branch_lit : E[1], immediate : true, return(false)
        ),
        D : endcons(E,D)
      ),
      monitorcheck_hld_v("heuristics_lookahead_distances"),
      if ignore or immediate then return(false),
      for i : 1 thru nd do block([p : projections[min(np,i)]],
        P : endcons(p(D[i][1], D[i][2]), P)),
      if lexicographical_orderp(P, best_proj) then (
        best_proj : P, best_var : v, Fbest : [F1,F0]
      )
    ),
    monitorcheck_hld("heuristics_lookahead_distances"),
    if immediate then return(branch_lit),
    if best_proj = [inf] then
      error("heuristics_lookahead_distances: all variables disabled!"),
    if satprob(Fbest[1]) >= satprob(Fbest[2]) then return(best_var)
    else return(-best_var)
   ))))$

/* The amended variation, returning the list of associated distances;
   additionally a list of monitoring distances can be specified.
   For the list of distances returned at a node, the number of "deciding"
   distances can vary if inf-values occur, however there are always
   length(mon_distances) many monitoring-distances. */
amended_heuristics_lookahead_distances(r, distances, projections, satprob, mon_distances) :=
 block([nd : length(distances), np : length(projections), nm : length(mon_distances)],
  buildq([r, distances, projections, satprob, mon_distances, nd, np, nm], lambda([FF],
   block(
    [F : FF[2], best_var, branch_lit, best_proj : [inf], immediate : false, Fbest, best_dist],
    for v in FF[1] unless immediate do 
     block([E, F0,F1, D : [], P : [], ignore : false],
      F1 : r(apply_pa({v},F)), F0 : r(apply_pa({-v},F)),
      for i : 1 thru nd do (
        E : evaluating_branching_variable(distances[i]),
        if length(E) = 0 then (ignore : true, return(false)),
        if length(E) = 1 then (
          branch_lit : E[1], immediate : true,
          if branch_lit > 0 then E : [inf,0] else E : [0,inf],
          best_dist : endcons(E,D),
          Fbest : [F1,F0],
          return(false)
        ),
        D : endcons(E,D)
      ),
      monitorcheck_hld_v("amended_heuristics_lookahead_distances"),
      if ignore or immediate then return(false),
      for i : 1 thru nd do block([p : projections[min(np,i)]],
        P : endcons(p(D[i][1], D[i][2]), P)),
      if lexicographical_orderp(P, best_proj) then (
        best_proj : P, best_var : v, Fbest : [F1,F0], best_dist : D
      )
    ),
    monitorcheck_hld("amended_heuristics_lookahead_distances"),
    for i : 1 thru nm do block([md : mon_distances[i]],
      best_dist : endcons([md(F,Fbest[1]),md(F,Fbest[2])], best_dist)),
    if not immediate then (
      if best_proj = [inf] then
        error("heuristics_lookahead_distances: all variables disabled!"),
      if satprob(Fbest[1]) >= satprob(Fbest[2]) then 
        branch_lit : best_var 
      else
        branch_lit : -best_var
    ),
    if branch_lit < 0 then best_dist : map(reverse, best_dist),
    return([branch_lit, best_dist])
   ))))$


/* For an amended splitting tree T ("ast"), extract the tree labelled
   with distances (pairs of real numbers, at inner nodes; formally a
   tree with branching tuples, that is, "tbt") given by the 
   ith distance function:
*/
ast2tbt(T,i) :=
  if length(T)=1 then T else
  cons(T[1][2][i], map(lambda([t],ast2tbt(t,i)), rest(T)))$

/* Check that inf-branches of an ast T are trivial, using the number m of 
   monitoring distances (which are to be ignored); returns the empty list
   if for every inner node with some pair of distances containing inf
   the corresponding branches lead directly to a leaf, while otherwise for the
   first offending nodes from the root the appended lists containing the
   (amended) node-label, the list of branch-indices (either 1 or 2) where
   at least one of the two branches is inf, and the number of nodes in these
   inf-subtrees is returned. If there are two relevant pairs containing a
   distance inf, then false is returned.
   The motivation is as follows: The m distance-pairs at the end of the
   list of distance-pairs are just computed for monitoring, and otherwise
   ignored. Now a distance inf must mean, that following the corresponding
   branch will lead to an immediate decision --- it is assumed that
   the DLL-solver chooses immediately this "shortcut", without further
   investigating the other distances.
*/
check_inf_branches_ast(T,m) := block([l : length(T), rel_distances, inf_ind],
  if l = 1 then return([]),
  rel_distances : rest(T[1][2],-m),
  inf_ind : sublist_indices(rel_distances, lambda([d], member(inf,d))),
  if not emptyp(inf_ind) then (
    if length(inf_ind) # 1 then return(false),
    inf_ind : sublist_indices(rel_distances[inf_ind[1]], lambda([x],is(x=inf))),
    if not every_s(lambda([i], is(nnds_lrt(T[1+i]) = 1)), inf_ind) then
      return(append([T[1], inf_ind], create_list(nnds_lrt(T[1+i]),i,inf_ind)))
  ),
  return(lappend(map(lambda([T2],check_inf_branches_ast(T2,m)), rest(T)))))$

/* Counts nodes containing some inf-distance-value */
count_inf_branches(T,m) := block([l : length(T), flag : 0],
  if l = 1 then return(0),
  if not emptyp(sublist_indices(rest(T[1][2],-m), lambda([d], member(inf,d))))
    then flag : 1,
  return(flag + sum(count_inf_branches(T[i],m),i,2,l)))$

/* Collapses nodes where all branches except of one are inf-branches
   (such nodes are hidden reductions); m is the number of monitoring
   distances (to be ignored, as with check_inf_branches_ast; it is assumed 
   that not both branches are inf-branches): */
/* RENAME: collapse_inf_branches_ast */
collapse_inf_branches(T,m) := block(
  [l : length(T), rel_distances, inf_ind, other],
  if l = 1 then return(T),
  rel_distances : rest(T[1][2],-m),
  inf_ind : sublist_indices(rel_distances, lambda([d], member(inf,d))),
  if not emptyp(inf_ind) then (
    inf_ind : sublist_indices(rel_distances[inf_ind[1]],lambda([x],is(x=inf))),
    if length(inf_ind) = l-2 then (
      other : listify(setdifference(setmn(1,l-1),setify(inf_ind)))[1],
      T : T[1+other],
      return(collapse_inf_branches(T,m)))
  ),
  return(cons(T[1], map(lambda([T2],collapse_inf_branches(T2,m)), rest(T)))))$
collapse_inf_branches_ast(T,m) := collapse_inf_branches(T,m)$


/* *************
   * Distances *    
   *************
*/

/* Distances have as input two clause-sets Ffrom, Fto,
   and return a real number or inf.
*/

/* The trivial distance */
trivial_distance(Ffrom,Fto) := 1$

/* The difference in the number of variables */
delta_n(Ffrom,Fto) := nvar_cs(Ffrom) - nvar_cs(Fto)$

/* The difference in the number of clauses */
delta_c(Ffrom,Fto) := ncl_cs(Ffrom) - ncl_cs(Fto)$

/* The difference in the number of literal occurrences */
delta_l(Ffrom,Fto) := nlitocc_cs(Ffrom) - nlitocc_cs(Fto)$

/* The scheme for the weighted number of new clauses (wf, the
   weight function, takes natural numbers >= 2 as inputs (the clause-lengths),
   and returns positive real numbers). */
wn_newclauses(wf) := buildq([wf], lambda([Ffrom,Fto],
  block([nC : listify(setdifference(Fto, Ffrom))],
    return(sum(wf(length(nC[i])),i,1,length(nC))))))$
/* The variation of wn_newclauses where instances of 2-CLS are detected: */
wn_newclauses_2(wf)  := buildq([wf], lambda([Ffrom,Fto],
  if max_rank_cs(Fto) <= 2 then inf else
   block([nC : listify(setdifference(Fto, Ffrom))],
    return(sum(wf(length(nC[i])),i,1,length(nC))))))$

/* Just the number of new clauses of length k */
n_newclauses(k) := buildq([k], lambda([Ffrom,Fto],
  length(setdifference(scls_k(Fto,k), scls_k(Ffrom,k)))))$


/* ***************
   * Projections *
   ***************
*/

/* For binary clauses: */

/* We have tau2. */

prod_proj(x,y) := 1/(x*y)$


/* *********************************
   * Satisfiability approximations *
   *********************************
*/

/* These "approximations" are just real numbers, and the greater the
   higher the probability of satisfiability.
   The value inf says the formula is surely satisfiable, the value
   minf says the forrmula is surely unsatisfiable.
*/

/* The trivial approximation of satprob(F) ("approximation of order 0") */
trivial_sat_approx(F) := 1$

/* The first-order approximation of satprob(F) (a lower bound on the true
   probability), increased to inf if sat is established */
firstorder_sat_approx(F) := block([a : satprob_hitting(F)],
 if a > 0 then return(inf) else return(a))$

/* The logarithm of the probability that a random assignment over the 
   variables in the given clause-set satisfies a random clause-set 
   drawn with the same number of clauses of the same lengths as the
   given clause-set. */
/* With the exception that log(1) = 0 is translated to inf. */
/* See probsatrand in
ComputerAlgebra/Satisfiability/Lisp/Counting/RandomClauseSets.mac. */
logprobrand(F) := if F = {} then inf else 
 block([L : ncl_list_cs(F)],
  if L[1][1] = 0 then return(minf) else
  return(sum(L[i][2] * float(log(1-2^(-L[i][1]))), i, 1, length(L))))$

/* The reciprocal maximum over all clauses C of the sums of 2^(-|D|) over 
   neighbours D of C in the common-variable graph, as motivated by
   the asymetric local lemma of Lovasz. */
/* Compare with locallemma_sattest_asymmetric in
   ComputerAlgebra/Satisfiability/Lisp/Counting/Degrees.mac. */
locallemma_satapprox(F) := if F = {} then inf else 
  if empty_element_p(F) then minf else 
   block([G : g2mg(cvg_cs(F)), m : 0, c],
    c : graph_order(G),
    for i : 1 thru c do block([N : neighbors(i, G), s : 0],
      for j in N do
        s : s + 2^(-length(get_vertex_label(j,G))),
      m : max(m,s)),
    if m = 0 then return(inf)
    elseif m <= 1/4 then return(inf)
    else return(1/m))$

/* As in [Hooker, Vinai, 1995], the variation of locallemma_satapprox
   using the sum instead of the max. */
locallemmasum_satapprox(F) := if F = {} then inf else 
  if empty_element_p(F) then minf else 
   block([G : g2mg(cvg_cs(F)), S : 0, c],
    c : graph_order(G),
    for i : 1 thru c do block([N : neighbors(i, G), s : 0],
      for j in N do
        s : s + 2^(-length(get_vertex_label(j,G))),
      S : S + s),
    if S = 0 then return(inf)
    else return(1/S))$


/*!
\endhtmlonly
*/
