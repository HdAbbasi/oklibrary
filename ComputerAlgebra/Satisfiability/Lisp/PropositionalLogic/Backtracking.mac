/* Oliver Kullmann, 10.2.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/PropositionalLogic/Backtracking.mac
  \brief Functions for SAT decision for propositional formulas

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/PropositionalLogic/Backtracking.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/PropositionalLogic/Formulas.mac");

/* SAT-decision for formula trees by backtracking; the heuristics
  h has as input a formula tree and returns a literal (first set to true). */
sat_backtracking_ft(F,h) := block([FS : basic_simplification_ft(F),x],
  if truefalse_ft(FS) then return(FS[1]),
  x : h(FS),
  return(sat_backtracking_ft(apply_pa_ft({x},FS),h) 
         or sat_backtracking_ft(apply_pa_ft({neg(x)},FS),h)))$

trivial_heuristics_bft(F) := first(listify(var_ft(F)))$

sat_backtracking_trivh_bft(F) := sat_backtracking_ft(F,trivial_heuristics_bft)$

firstliteralheuristics_bft(F) := if length(F) = 1 then F[1]
 else firstliteralheuristics_bfl(F[2])$

sat_backtracking_firstlh_bft(F) := sat_backtracking_ft(F,firstliteralheuristics_bft)$

/*!
\endhtmlonly
*/

