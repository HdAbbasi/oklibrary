/* Oliver Kullmann, 12.1.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/PropositionalLogic/Formulas.mac
  \brief Functions for basic representations of and operations with formulas

Use by

oklib_load("Transitional/ComputerAlgebra/Satisfiability/Lisp/PropositionalLogic/Formulas.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("Transitional/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$

/* ***********************************
   * Representation of formulas      *
   ***********************************
*/

/* A "propositional variable" is any term. */
/* A "propositional literal" is either a variable "v" or "neg(v)" 
   or "true" or "false". */

/* A "propositional formula" is a labelled tree, where the labels are either
   literals at the leaves or operation-labels at inner nodes, which are 
   strings "and", "not", "xor", "equiv" representing n-ary operations, 
   "impl" (binary) and "not" (unary).
*/
/*
   The deMorgan-base is "and", "or", "not".
   The empty "and" is true, the empty "or" is false, the empty "xor" is false, the
   empty "equiv" is true.
*/

/* Remark: Consider [op, x1, ..., xn] where op is "equiv" or "xor":
   If n is even then "equiv" is the negation of xor, while for odd n
   "equiv" and "xor" or identical.
   If op is "equiv", then the evaluation is true iff an even number of the x_i
    are false, while if op is "xor" then the evaluation is true iff an odd
    number of the x_i are true.
*/

kill(neg)$
tellsimp(neg(false), true)$
tellsimp(neg(true), false)$
matchdeclare(negexpr,true)$
tellsimp(neg(neg(negexpr)),negexpr);

/* The set of variables of a propositional literal */
var_prpl(x) := if not atom(x) and op(x) = neg then {first(x)} 
 elseif x = true or x = false then {}
 else {x}$
/* The set of variables of a propositional formula (tree) without empty operations */
var_ft(F) := block([l : length(F)],
  if l = 1 then var_prpl(F[1]) else
  family_sets_union(setmn(2,l), lambda([i],var_ft(F[i]))))$

/* Tests whether literal x is "true" or "false" */
truefalse_literalp(x) := is(x = true) or is(x = false)$
/* tests whether formula F is "true" or "false" (as is) */
truefalse_ft(F) := is(length(F) = 1) and truefalse_literalp(F[1])$


/* ******************************************
   * Basic transformations of formula trees *
   ******************************************
*/

/* Replace equivalences by xor's */
equivalences2xors(F) := block([l : length(F)],
  if F[1] = "equiv" then
    if l = 1 then return([true])
    elseif l = 2 then return(equivalences2xors(F[2]))
    elseif evenp(l) then 
      return(cons("xor", makelist(equivalences2xors(F[i]),i,2,l)))
    else return(["not", cons("xor", makelist(equivalences2xors(F[i]),i,2,l))])
  else return(cons(F[1], makelist(equivalences2xors(F[i]),i,2,l))))$

/* Eliminate implications */
eliminate_implications_ft(F) := block([l : length(F)],
  if l = 3 and F[1] = "impl" then
    return(["or", ["not", eliminate_implications_ft(F[2])], eliminate_implications_ft(F[3])])
  else return(cons(F[1], map(eliminate_implications_ft, makelist(F[i],i,2,l)))))$

/* Evaluating empty n-ary operations */
evaluate_empty_ft(F) := block([l : length(F)],
  if l >= 2 then return(cons(F[1], makelist(evaluate_empty_ft(F[i]),i,2,l)))
  elseif F[1] = "and" then return([true])
  elseif F[1] = "or" then return([false])
  elseif F[1] = "xor" then return([false])
  elseif F[1] = "equiv" then return([true])
  else return(F))$

/* Elimination of constants from a formula tree without implications, equivalences
   or empty operations (creating possibly unary operations and negations) */
elimination_constants_ft(F) := block([l : length(F)],
  if l = 1 then return(F)
  else block([R : makelist(elimination_constants_ft(F[i]),i,2,l), C, nc, r],
    [C,R] : partition_list(R, truefalse_ft),
    if emptyp(C) then return(cons(F[1], R)),
    if F[1] = "not" then return([not R[1]]),
    nc : length(C),
    C : makelist(C[i][1],i,1,nc),
    if F[1] = "and" then (
      r : every(identity, C),
      if not r or nc = l-1 then return([r])
      else return(cons("and", R)))
    elseif F[1] = "or" then (
      r : some(identity, C),
      if r or nc = l-1 then return([r])
      else return(cons("or", R)))
    else /* now F[1] = "xor" */ (
      r : oddp(length(sublist_indices(C, identity))),
      if nc = l-1 then return ([r])
      elseif not r then return(cons("xor", R))
      else return(["not", (cons("xor", R))]))))$

/* Eliminating superfluous unary operations */
eliminate_unary_ft(F) := block([l : length(F)],
  if l = 1 then F 
  elseif l = 2 and F[1] # "not" then eliminate_unary_ft(F[2])
  else cons(F[1], makelist(eliminate_unary_ft(F[i]),i,2,l)))$

/* Move the negations down a formula tree without equivalences or empty operations, 
   using literals at the leaves, eliminating double negations. */
/* deMorgan-formulas where negations appear only in literals are in 
   "negation normal form". */
move_negations_down(F) := move_negations_down_rel(F, false)$
move_negations_down_rel(F, negated) := block([l : length(F)],
  if l = 1 then if negated then return([neg(F[1])]) else return(F)
  elseif F[1] = "not" then return(move_negations_down_rel(F[2], not negated))
  elseif negated then
    if F[1] = "or" then
      return(cons("and", makelist(move_negations_down_rel(F[i], true),i,2,l)))
    elseif F[1] = "and" then
      return(cons("or", makelist(move_negations_down_rel(F[i], true),i,2,l)))
    else /* now F[1] = "xor" */
      return(append(["xor", move_negations_down_rel(F[2], true)], 
                    makelist(move_negations_down_rel(F[i], false),i,3,l)))
  else return(cons(F[1], makelist(move_negations_down_rel(F[i], false),i,2,l))))$


/* Basic simplification of a formula-tree */
basic_simplification_ft(F) := move_negations_down(eliminate_unary_ft(elimination_constants_ft(evaluate_empty_ft(eliminate_implications_ft(equivalences2xors(F))))))$


/* ***********************
   * Partial assignments *
   ***********************
*/

/* A "partial assignment" for propositional logic is a set of propositional 
   literals (to be set to true)
*/

/* Apply a partial assignment to a literal */
apply_pa_prpl(phi,x) := block([vs : var_prpl(x)],
  if vs = {} then return(x),
  if elementp(x, phi) then return(true)
  elseif elementp(neg(x), phi) then return(false)
  else return(x))$

/* Apply a partial assignment to a formula tree (without simplification) */
apply_pa_ft(phi, F) := block([l : length(F)],
  if l = 1 then return([apply_pa_prpl(phi,F[1])])
  else return(cons(F[1], makelist(apply_pa_ft(phi,F[i]),i,2,l))))$


/* ******************
   * Measures       *
   ******************
*/

/* number of variables in a formula tree */
nvar_ft(F) := length(var_ft(F))$

/* number of literal occurrences in a formula tree */
nlitocc_ft(F) := nlvs_l(F)$

/* number of binary "and" (interpreted as binary) in formula trees 
   (typically this makes only sense if F is in negation normal form) */
nands_ft(F) := block([l : length(F)],
  if l = 1 then 0 else
  block([s : sum(nands_ft(F[i]),i,2,l)],
    if F[1] = "and" then return(l - 2 + s)
    else return(s)
  ))$

/* cohesion (generalisation of the deficiency) */
cohesion_ft(F) := 1 + nands_ft(F) - nvar_ft(F)$


/* ******************
   * Translations   *
   ******************
*/

/* For a boolean variable v, prp(v) is the corresponding propositional
   variable. */
kill(prp)$
declare(prp,noun)$
prp_var(v) := nounify(prp)(v)$

/* translating a boolean literal into a propositional literal */
boollit_proplit(x) := if x > 0 then prp(x) else not prp(var_l(x))$

/* a clause-set as a CNF */
cls_cnf(F) := cons("and", makelist(
 cons("or", map(lambda([x],[boollit_proplit(x)]),listify(C))), C, listify(F)))$
/* a clause-set as a DNF */
cls_dnf(F) := cons("or", makelist(
 cons("and", map(lambda([x],[boollit_proplit(x)]),listify(C))), C, listify(F)))$


/* ****************************
   * Tseitin translation      *
   ****************************
*/

/* A "path" P for a rooted tree T is a list of natural numbers (>= 1), denoting
   the list of branches starting with the root (so the root itself is
   represented by the empty list).
*/

/* The variables for the Tseitin translation: tstr(P) is the variable
   corresponding to the node reached by path P in the formula tree
*/
kill(tstr)$
declare(tstr,noun)$
tstr_var(P) := nounify(tstr)(P)$

/* Given a formula tree F, compute the
   list of equivalences for the Tseitin translation */
tseitin_trans_list_rel(F,prefix) := block(
  [l : length(F), v : tstr_var(prefix)],
  if l = 1 then [["equiv", [v], [F[1]]]]
  else block(
    [E : ["equiv", [v], cons(F[1],makelist([tstr_var(endcons(i-1,prefix))],i,2,l))]],
    return(
     cons(E, apply(append, 
      makelist(tseitin_trans_list_rel(F[i], endcons(i-1,prefix)),i,2,l))))))$
tseitin_trans_list(F) := tseitin_trans_list_rel(F,[])$

/* Compute the conjunction which represents the original formula */
tseitin_trans_basic(F) := append(["and", [tstr_var([])]], tseitin_trans_list(F))$


/* **********
   * Output *
   **********
*/

/* Translate operation-labels into latex-symbols */
trans_op_latex(string) :=
 if string="not" then "\\neg"
 elseif string="impl" then "\\rightarrow"
 elseif string="equiv" then "\\leftrightarrow"
 elseif string="xor" then "\\oplus"
 elseif string="or" then "\\vee"
 elseif string="or" then "\\wedge"
 else string$

/* Output a formula tree st as latex-ps-tree to stream s */
tex_ft(s,F) := 
  if length(F) = 1 then 
    if not(atom(F[1])) and op(F[1]) = "not" then printf(s, "~a~a~a", "\\TR{$\\neg ", first(F[1]), "$}")
    else printf(s, "~a~a~a", "\\TR{$", F[1], "$}")
  else (
     printf(s, "~a~a~a", "\\pstree{\\TR{$", trans_op_latex(F[1]), "$}}"),
     printf(s, "{"),
     for i : 2 thru length(F) do tex_ft(s,F[i]),
     printf(s, "}")
  )$

/* Output a formula tree st as latex-ps-tree to file with name n */
tex_ft_f(n, F) := (block[s : openw(n)], tex_ft(s, F), close(s))$


/*!
\endhtmlonly
*/
