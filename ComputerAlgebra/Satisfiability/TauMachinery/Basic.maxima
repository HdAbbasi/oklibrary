/* Oliver Kullmann, 29.7.2007 (Swansea) */

/* 
Use by

load("$OKPLATFORM/OKsystem/Transitional/ComputerAlgebra/Satisfiability/TauMachinery/Basic.maxima")

where $OKPLATFORM has to be replaced by the path to the OKplatform directory.
*/

load (descriptive)$

chi(t,x) := apply("+", x^(-t));

/* The tau-function: */
tau(t) :=
  block( [ lb : float(length(t)^(1/mean(t))), ub : float(length(t)^(1/lmin(t))) ],
    if (signum(chi(t,lb)-1) * signum(chi(t,ub)-1) >= 0) then
      return(ub)
    else
      return(find_root(chi(t,x)=1, x, lb, ub))
  );
taun([t]) := tau(t);
tau2(x,y) := taun(x,y);
tau3(x,y,z) := taun(x,y,z);
/* tau([1,2]) = taun(1,2) = tau2(1,2) = 1.618... */

/* The probability distribution derived from a branching tuple: */
tprob(t) := tau(t)^(-t);
tprobn([t]) := tprob(t);
tprob2(x,y) := tprobn(x,y);
tprob3(x,y,z) := tprobn(x,y,z);
/* tprob([5,5,5]) = tprobn(5,5,5) = tprob3(5,5,5) = [1/3, 1/3, 1/3] */

/* The total differential for the tau-function */
Dtau(t) := block( [ tv : tau(t)], block( [pv : tv^(-t) ] ,
  return((- tv * log(tv) / apply("+", t * pv)) * pv)
));
Dtaun([t]) := Dtau(t);
Dtau2(x,y) := Dtaun(x,y);
Dtau3(x,y,z) := Dtaun(x,y,z);

/* Symbolic differentiation of tau2 */
Dtau2s(x,y) := block( [ tv : tau2s(x,y)], block( [pv : tv^(-[x,y]) ] ,
  return((- tv * log(tv) / apply("+", [x,y] * pv)) * pv)
));
gradef(tau2s(x,y), Dtau2s(x,y)[1], Dtau2s(x,y)[2]);

