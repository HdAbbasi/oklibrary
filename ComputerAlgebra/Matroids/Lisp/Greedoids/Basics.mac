/* Oliver Kullmann, 26.5.2012 (Swansea) */
/* Copyright 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Matroids/Lisp/Greedoids/Basics.mac
  \brief Basic functionality related to greedoids

Use by

oklib_load("OKlib/ComputerAlgebra/Matroids/Lisp/Greedoids/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Matroids/Lisp/Basics.mac")$


/* ***********************
   * Fundamental notions *
   ***********************
*/

/* Checking whether M is a greedoid given by the feasible sets: */
grdfs_p(M) := hg_p(M) and not emptyp(second(M)) and
 accessible_ss_p(second(M)) and augmentation_ss_p(second(M))$


/* Computing the rank of a greedoid G: */
rank_grdfs(G) := lmax(map(length,G[2]))$

/* Computing the set of bases of a greedoid G: */
bases_grdfs(G) := block([r : rank_grdfs(G)],
 subset(G[2], lambda([H], is(length(H)=r))))$

/* For a greedoid G and a set A, the greedoid given by all the feasible sets
   contained in A:
*/
restriction_grdfs(G,A) := [A, subset(G[2], lambda([B], subsetp(B,A)))]$


/* ******************************
   * Special forms of greedoids *
   ******************************
*/

/* Whether G is an antimatroid given by the feasible sets: */
antimtrfs_p(G) := hg_p(G) and elementp({},second(G)) and
 accessible_ss_p(second(G)) and bunion_closed_p(second(G))$


/* Whether the greedoid G is an interval greedoid: */
intervalgrdfs_p(G) := block([B : bases_grdfs(G)],
 every_s(lambda([A], antimtrfs_p(restriction_grdfs(G,A))), B))$
/* Remark: Here the characterisation is used, that a greedoid G is an interval
   greedoid iff every restriction to a feasible set is an antimatroid.
   Are there more efficient tests?
*/

/* A greedoid G is Gaussian iff G[2] fulfils the following Gaussian
   property:
*/
gaussian_ss_p(S) := block(
[A : sort_length_part_ary(listify(disjoin({},S))), l, j, found : true],
 l : A[0],
 for i : 1 thru l-1 while found do (
  j : i+1,
  if length(first(A[i]))+1 = length(first(A[j])) then
   for a in A[i] while found do
    for b in A[j] while
     (found : some_s(lambda([x],
                       elementp(adjoin(x,a),S) and elementp(disjoin(x,b),S)),
                     setdifference(b,a)))
      do 0),
 found)$

/*!
\endhtmlonly
*/
