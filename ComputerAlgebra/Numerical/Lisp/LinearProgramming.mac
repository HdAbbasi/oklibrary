/* Oliver Kullmann, 18.7.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Numerical/Lisp/LinearProgramming.mac
  \brief Functions regarding linear programming

Use by

oklib_load("Transitional/ComputerAlgebra/Numerical/Lisp/LinearProgramming.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TermSystems/Lisp/Conversions.mac")$
oklib_include("Transitional/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$


/* ******************************************
   * Solving systems of linear inequalities *
   ******************************************
*/

load(simplex);

/* Find some solution for A * x >= 0, where x_i >= 1 for i in pv,
   x_i <= -1 for i in nv, and x_i = 0 for i in zv.
   Returns "false" if system in unsolvable, and otherwise a
   solution vector x.
 */
solve_lineq(A,pv,nv,zv) := block(
 [S, h : sm2hm({}), n : matrix_size(A)[2]],
  if n = 0 then return([]),
  S : minimize_lp(0,append(translate_matrix_ineq(A),
        map(interprete_poscond,pv), 
        map(interprete_negcond,nv), 
        map(interprete_zerocond,zv))), 
  if S = "Problem not feasible!" then return(false),
  S : second(S),
  for eq in S do set_hm(h,sconcat(lhs(eq)),rhs(eq)),
  return(
    map(lambda([x],if x=false then 0 else x),
        create_list(ev_hm(h,sconcat(special_symbol,i)),i,1,n))))$


/*!
\endhtmlonly
*/

