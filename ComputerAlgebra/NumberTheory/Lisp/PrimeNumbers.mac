/* Oliver Kullmann, 20.9.2008 (Swansea) */
/* Copyright 2008, 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/NumberTheory/Lisp/PrimeNumbers.mac
  \brief Functions related to prime numbers

Use by

oklib_load("OKlib/ComputerAlgebra/NumberTheory/Lisp/PrimeNumbers.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/Generators.mac")$


/* **********************************
   * Finding and enumerating primes *
   **********************************
*/

/* Maxima has: next_prime, prev_prime, primep (controlled by
   primep_number_of_tests )
*/

/* The memoised version of primep: */
mprimep[n] := primep(n)$

/* The list of primes in the closed interval from a to b: */
primes_interval(a,b) := block([L : [], p : if a <= 1 then 1 else a-1],
  p : next_prime(p),
  while p <= b do (
    L : cons(p,L),
    p : next_prime(p)
  ),
  reverse(L))$

/* The list of the first n prime numbers (n an integer): */
primes_first(n) := if n <= 0 then [] else
  block([p : 2, L : [2]],
    n : n - 1,
    while n > 0 do (
      p : next_prime(p),
      L : cons(p,L),
      n : n - 1
    ),
    reverse(L))$

/* Computing the i-th prime number (i a natural number >= 1): */
unrank_primes(i) := block([p : 2],
  while i > 1 do (
    p : next_prime(p),
    i : i - 1
  ),
  p)$

/* For a natural number p >= 1 compute the smallest index i >= 1
   such that unrank_primes(i) >= p:
*/
rank_primes(p) := block([i : 1],
  while p > 2 do (
    p : prev_prime(p),
    i : i + 1
  ),
  i)$
/* For a natural number n >= 0 compute the numbers of primes p
   with p <= n:
*/
count_primes(n) := if n <= 1 then 0
 elseif primep(n) then rank_primes(n)
 else rank_primes(prev_prime(n))$


/* The product of the prime numbers less than or equal to n >= 0: */
product_primes(n) := block([pr : 1, p : 2],
 while p <= n do (pr : pr * p, p : next_prime(p)),
 return(pr))$


/* **************************
   * Additive number theory *
   **************************
*/

/* In ComputerAlgebra/Hypergraphs/Lisp/Generators/Generators.mac we have
   arithprog_primes_finish[k,n].
*/

/* The number of arithmetic progressions of length k in the set of
   prime numbers with the n-th prime number as last element ("nc"
   for "non-cumulative").
*/
/* Prerequisite: n, k natural numbers, n >= 1, k >= 0. */
n_arithprog_primes_nc[k,n] := 
 block([prp : product_primes(k), prk : primep(k), p : unrank_primes(n)],
  n_arithprog_primes_nc_[k,n])$

/* Implementation functions (better not to be called directly, since wrong
   usage can introduce false results).
*/
/* Inheriting prp, prk and p: */
n_arithprog_primes_nc_[k,n] := n_arithprog_primes_nc_nm(k,n)$
/* Inheriting again prp, prk and p: */
n_arithprog_primes_nc_nm(k,n) :=
 if k=0 then 0 elseif k=1 then 1 elseif k=2 then n-1
 elseif n <= k then 0 else
  length(arithprog_primes_finish_nm(k,p))$

/* The number of arithmetic progressions of length k in the set of
   prime numbers ("c" for "cumulative"):
*/
n_arithprog_primes_c(k,n) :=
 if k <= 2 then binomial(n,k) else
 block([prp : product_primes(k), prk : primep(k), p : 1, sum : 0, count],
   for i : 1 thru n do (
     p : next_prime(p),
     count : if p <= k then 0 else n_arithprog_primes_nc_[k,i],
     sum : sum + count
   ),
   sum)$

/* The list of the numbers of arithmetic progressions of length k in 
   the set of the first i prime numbers for i from 1 to n ("c" for
   "cumulative"):
*/
ln_arithprog_primes_c(k,n) :=
 if k <= 2 then create_list(binomial(i,k),i,1,n) else
 block([prp : product_primes(k), prk : primep(k), p : 1, res : [], sum : 0, count],
   for i : 1 thru n do (
     p : next_prime(p),
     count : if p <= k then 0 else n_arithprog_primes_nc_[k,i],
     sum : sum + count, res : cons(sum,res)
   ),
   reverse(res))$

/* The smallest natural number n >= 0 such that amongst the first n
   prime numbers there exists an arithmetic progression of size k:
*/
first_arithprog_primes(k) :=
 if k <= 2 then k else
  block([prp : product_primes(k), prk : primep(k), 
   n : rank_primes(k), p : if primep(k) then k else next_prime(k), 
   found : false],
   while not found do (
     p : next_prime(p), n : n + 1,
     found : not emptyp(arithprog_primes_finish[k,p])
   ),
   n)$

/*!
\endhtmlonly
*/

