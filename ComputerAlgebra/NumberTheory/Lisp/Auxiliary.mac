/* Oliver Kullmann, 7.6.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac
  \brief Functions for number theory functions which more or less augment/correct Maxima functions

Use by

oklib_load("Transitional/ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac");

*/

/*!
\htmlonly
*/

/* **************
   * Logarithms *
   **************
*/

/* The binary logarithm. */
ld(x) := log(x) / log(2)$

/* The integer binary logarithm for natural numbers n (minf for n=0). */
/* Given a precise floor, this is just floor(ld(n)) (for n <> 0). */
fld(n) := if n = 0 then minf else 
 block([l : 0, b : 1], while b < n do (l : l + 1, b : b * 2),
  if b > n then return(l-1) else return(l))$

/* Returns the floor of the logarithm of n base b, correcting
   for issues in precision causing round off. Cannot handle large
   numbers. */
floorlog(n,b) := block([l : floor(float(log(n)/log(b)))], 
  if b^(l+1) <= n then (l+1) else
  if b^(l) > n then (l-1) else l)$ /* handles issues with precision */


/* ******************************
   * Representations of numbers *
   ******************************
*/

/* Converts a string to a list of characters: */
str2chrl(str) := create_list(charat(str, i), i,1,slength(str))$

/* Converts a digit of the form "0", "1", ..., "9", "A", ..., "Z" to an
   integer from 0 to 35: */
digit2int(d) := 
  if cgreaterp("A",d) then cint(d) - cint("0")
  else 10 + (cint(d) - cint("A"))$
/* The inverse, converting an integer from 0 to 35 to a digit: */
int2digit(m) :=
    if m < 10 then ascii(cint("0") + m)
    else ascii(cint("A") + (m-10))$

/* Converts a string representing a number in base b to an integer. */
/* Prerequisite: b a natural number, 1 <= b <= 36; "digits" might be equal to b
   or even be greater (but must be characters from 0-9 and A-Z). */
base_n2int(str,b) := 
  lreduce(lambda([x,y], x * b + digit2int(y)),str2chrl(str),0)$

/* Converts a given positive integer m to its base b representation as a
   string, where 2 <= b <= 36 is a natural number. */
int2base_n(m,b) := 
  if m = 0 then "0" 
  else block([result : []],
    while m > 0 do block([d : divide(m,b)],
      result : cons(int2digit(d[2]), result),
      m : d[1]),
    return(simplode(result)))$



/* Extending integer_partitions from NN to ZZ. */
ext_integer_partitions(n) :=
 if n < 0 then {}
 elseif n = 0 then {[]}
 else integer_partitions(n)$

/* The corrected power-function: */
pow(b,e) := block([ze : is(equal(e,0))],
 if ze=true then return(1)
 elseif ze=false then return(b^e)
 else block([zb : is(equal(b,0))],
   if zb=true then return(if equal(e,0) then 1 else 0)
   elseif zb=false then return(b^e)
   else return(ev(pow(b,e),noeval))))$


/*!
\endhtmlonly
*/

