/* Oliver Kullmann, 22.10.2011 (Swansea) */
/* Copyright 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/NumberTheory/Lisp/tests/ModularArithmetic.mac
  \brief Tests for auxiliary number theory functions

Use by

oklib_load("OKlib/ComputerAlgebra/NumberTheory/Lisp/tests/ModularArithmetic.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/ModularArithmetic.mac")$


kill(f)$


/* ***********************
   * Discrete logarithms *
   ***********************
*/

okltest_modular_log(f) := block(
  assert(f(0,0,1) = 0),
  assert(f(0,0,2) = 1),
  assert(f(1,2,2) = 0),
  assert(f(0,2,2) = 1),
  assert(f(5,2,7) = inf),
  assert(f(5,3,7) = 5),
  assert(f(2,3,5) = 3),
  for a : 0 thru if oklib_test_level=0 then 5 else 8 do
    for b : 0 thru if oklib_test_level=0 then 5 else 8 do
      for m : 0 thru if oklib_test_level=0 then 5 else 10 do
       block([l : f(a,b,m)],
        for e : 0 thru m-1 while e < l do
          assert(power_mod(b,e,m) # mod(a,m)),
        if l#inf then
          assert(power_mod_corr(b,l,m) = mod(a,m))
      ),
  assert(f(383814208, 2, 777777777) = 3690),
  if oklib_test_level = 0 then return(true),
  assert(f(3,2,777777777) = inf),
  assert(f(3, 10,1111111181) = 898664729),

  true)$


/* *******************
   * Primitive roots *
   *******************
*/

okltest_primitive_modular_root_p(f) := (
  assert(f(0,1) = true),
  assert(f(1,1) = true),
  assert(f(-1,1) = true),
  assert(f(0,2) = false),
  assert(f(1,2) = true),
  assert(f(2,2) = false),
  assert(f(3,2) = true),
  assert(f(-1,2) = true),
  assert(f(0,3) = false),
  assert(f(1,3) = false),
  assert(f(2,3) = true),
  assert(f(3,3) = false),
  assert(f(4,3) = false),
  assert(f(5,3) = true),
  assert(f(-1,3) = true),
  assert(f(0,4) = false),
  assert(f(1,4) = false),
  assert(f(2,4) = false),
  assert(f(3,4) = true),
  assert(f(0,5) = false),
  assert(f(1,5) = false),
  assert(f(2,5) = true),
  assert(f(3,5) = true),
  assert(f(4,5) = false),
  assert(f(2,6) = false),
  assert(f(3,6) = false),
  assert(f(4,6) = false),
  assert(f(5,6) = true),
  assert(f(2,7) = false),
  assert(f(3,7) = true),
  assert(f(4,7) = false),
  assert(f(5,7) = true),
  assert(f(6,7) = false),
  assert(f(3,31) = true),
  assert(f(4,31) = false),
  assert(f(17,31) = true),
  assert(f(18,31) = false),
  assert(f(10,97) = true),
  true)$

okltest_has_primite_modular_root_p(f) := (
  for n : 1 thru 27 do
    assert(f(n) = (not elementp(n, {8,12,15,16,20,21,24}))),
  true)$

okltest_smallest_primitive_modular_root(f) := block(
  assert(f(1) = 0),
  assert(f(2) = 1),
  assert(f(3) = 2),
  assert(f(4) = 3),
  assert(f(5) = 2),
  assert(f(6) = 5),
  assert(f(7) = 3),
  assert(f(9) = 2),
  assert(f(10) = 3),
  if oklib_test_level=0 then return(true),
  assert(f(1000000000000000000000000000000000000000000000000000000000007) = 5),
  true)$

/*!
\endhtmlonly
*/
