/* Oliver Kullmann, 7.6.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/NumberTheory/Lisp/tests/Auxiliary.mac
  \brief Tests for auxiliary number theory functions

Use by

oklib_load("Transitional/ComputerAlgebra/NumberTheory/Lisp/tests/Auxiliary.mac");

*/

/*!
\htmlonly
*/

oklib_include("Transitional/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$

kill(f)$

/* **************
   * Logarithms *
   **************
*/

okltest_fld(f) := block(
  assert(f(0) = minf),
  assert(f(1) = 0),
  assert(f(2) = 1),
  assert(f(3) = 1),
  assert(f(4) = 2),
  assert(f(5) = 2),
  assert(f(2^10) = 10),
  assert(f(2^10-1) = 9),
  assert(f(2^10+1) = 10),
  true)$

okltest_floorlog(f) := (
  assert(okltest_fld(buildq([f],
    lambda([x], if x=0 then minf else f(x,2))))),
  for b : 3 thru 7 do
    for e : 0 thru 5 do
      assert(f(b^e,b) = e),
  /* XXX */
  true)$


/* ******************************
   * Representations of numbers *
   ******************************
*/

okltest_str2chrl(f) := block(
  assert(f("") = []),
  assert(f("1") = ["1"]),
  assert(f("a") = ["a"]),
  assert(f("10") = ["1","0"]),
  assert(f("abcd") = ["a","b","c","d"]),
  true)$

okltest_digit2int(f) := block(
  for n : 0 thru 9 do
    assert(f(string(n)) = n),
  assert(f("A") = 10),
  assert(f("F") = 15),
  assert(f("Z") = 35),
  true)$

okltest_base_n2int(f) := block(
  for n : 0 thru 3 do
    assert(f("",n) = 0),
  for n : 0 thru 3 do
    assert(f("0",n) = 0),
  for n : 0 thru 3 do
    assert(f("00000",n) = 0),
  for n : 0 thru 3 do
    assert(f("10",n) = n),
  /*for n : -3 thru 3 do
    assert(f(string(n),abs(n)+1) = n),*/
  /* assert(f("FGDD",0) = 0), */
  assert(f("EE8C04",16) = 15633412),
  /*assert(f("-EE8C04",16) = -15633412),*/
  assert(f("MK014LZDF",36) = 63631769456211), 
  /*assert(f("-MK014LZDF",36) = -63631769456211),*/
  true)$

okltest_int2digit(f) := block(
  for n : 0 thru 9 do
    assert(f(n) = string(n)),
  assert(f(10) = "A"),
  assert(f(15) = "F"),
  assert(f(35) = "Z"),
  true)$

okltest_int2base_n(f) := block(
  for n : 0 thru 3 do
    assert(f(0,n) = "0"),
  for n : 2 thru 12 do
    assert(f(n,n) = "10"),
  /*for n : -12 thru 12 do
    assert(f(n,abs(n)+1) = string(n)),*/
  assert(f(15633412,16) = "EE8C04"),
  /*assert(f(-15633412,16) = "-EE8C04"),*/
  assert(f(63631769456211,36) = "MK014LZDF"), 
  /*assert(f(-63631769456211,36) = "-MK014LZDF"),*/
  true)$


okltest_ext_integer_partitions(f) := (
  assert(f(-1) = {}),
  assert(f(0) = {[]}),
  assert(f(1) = {[1]}),
  assert(f(2) = {[1,1],[2]}),
  assert(f(3) = {[1,1,1],[2,1],[3]}),
  assert(f(4) = {[1,1,1,1],[2,1,1],[3,1],[2,2],[4]}),
  true)$

okltest_pow(f) := block([x,y,a],
  assert(pow(0,0) = 1),
  assert(pow(0,1) = 0),
  assert(pow(1,0) = 1),
  assert(pow(1,1) = 1),
  assert(pow(2,2) = 4),
  assert(pow(2,-2) = 1/4),
  assert(pow(x,0) = 1),
  assert(pow(0,x) = if equal(x,0) then 1 else 0),
  assert(pow(x,1) = x),
  assert(pow(1,x) = 1),
  assert(pow(x,y) = ev(pow(x,y),uneval)),
  a : pow(x,y),
  assert(a = ev(pow(x,y),uneval)),
  y : 1,
  assert(ev(a) = x),
  y : 0,
  assert(ev(a) = 1),
  kill(y), 
  assert(a = ev(pow(x,y),uneval)),
  x : 0,
  assert(ev(a) = if equal(y,0) then 1 else 0),
  y : 0,
  assert(ev(a) = 1),
  true)$

/*!
\endhtmlonly
*/
