/* Oliver Kullmann, 20.9.2008 (Swansea) */
/* Copyright 2008, 2009, 2010 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/NumberTheory/Lisp/tests/PrimeNumbers.mac
  \brief Tests for auxiliary number theory functions

Use by

oklib_load("OKlib/ComputerAlgebra/NumberTheory/Lisp/tests/PrimeNumbers.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/PrimeNumbers.mac")$

kill(f)$

/* **********************************
   * Finding and enumerating primes *
   **********************************
*/

okltest_primes_interval(f) := (
  assert(f(0,0) = []),
  assert(f(0,1) = []),
  assert(f(3,2) = []),
  assert(f(2,-1) = []),
  assert(f(-10,2) = [2]),
  assert(f(2,2) = [2]),
  assert(f(2,10) = [2,3,5,7]),
  assert(length(f(1,1000)) = 168),
  true)$

okltest_primes_first(f) := (
  assert(f(0) = []),
  assert(f(-1) = []),
  assert(f(1) = [2]),
  assert(f(2) = [2,3]),
  assert(f(5) = [2,3,5,7,11]),
  assert(length(f(66)) = 66),
  true)$

okltest_unrank_primes(f) := (
  assert(f(1) = 2),
  assert(create_list(f(i),i,1,20) = primes_first(20)),
  true)$

okltest_rank_primes(f) := (
  assert(f(2) = 1),
  for n : 1 thru 20 do
    assert(f(unrank_primes(n)) = n),
  true)$

okltest_count_primes(f) := (
  assert(f(0) = 0),
  assert(f(inf) = inf),
  assert(f(1) = 0),
  assert(f(2) = 1),
  assert(f(3) = 2),
  assert(f(4) = 2),
  assert(f(5) = 3),
  assert(f(6) = 3),
  assert(f(7) = 4),
  assert(f(8) = 4),
  assert(f(9) = 4),
  assert(f(10) = 4),
  assert(f(11) = 5),
  true)$

okltest_product_primes(f) := (
  assert(f(0) = 1),
  assert(f(1) = 1),
  assert(f(2) = 2),
  assert(f(3) = 6),
  assert(f(4) = 6),
  assert(f(5) = 30),
  assert(f(6) = 30),
  assert(f(7) = 210),
  assert(f(8) = 210),
  assert(f(9) = 210),
  true)$


/* **********************************
   * The Prime Number Theorem (PNT) *
   **********************************
*/

okltest_Li(f) := (
  assert(f(0) = 0),
  /* XXX */
  true)$


/* **************************
   * Additive number theory *
   **************************
*/

okltest_n_arithprog_primes_nc(f) := (
  assert(f[0,1] = 0),
  assert(f[0,2] = 0),
  assert(f[1,1] = 1),
  assert(f[1,2] = 1),
  assert(f[1,3] = 1),
  assert(f[2,1] = 0),
  assert(f[2,2] = 1),
  assert(f[2,3] = 2),
  assert(f[3,1] = 0),
  assert(f[3,2] = 0),
  assert(f[3,3] = 0),
  assert(f[3,4] = 1),
  assert(f[3,5] = 1),
  assert(f[3,6] = 0),
  assert(f[3,7] = 1),
  assert(f[3,20] = 4),
  for n : 1 thru 8 do
    assert(f[4,n] = 0),
  assert(f[4,9] = 1),
  /* XXX */
  true)$

okltest_n_arithprog_primes_c(f) := (
  assert(f(3,1) = 0),
  assert(f(3,2) = 0),
  assert(f(3,3) = 0),
  assert(f(3,4) = 1),
  assert(f(3,5) = 2),
  /* XXX */
  true)$

okltest_ln_arithprog_primes_c(f) := (
  for p : 0 thru 2 do
    for n : 0 thru 10 do
      assert(f(p,n) = create_list(binomial(i,p),i,1,n)),
  assert(f(3,20) = [0,0,0,1,2,2,3,5,7,9,11,11,13,16,17,20,23,24,26,30]),
  true)$

okltest_first_arithprog_primes(f) := (
  assert(f(0) = 0),
  assert(f(1) = 1),
  assert(f(2) = 2),
  assert(f(3) = 4),
  assert(f(4) = 9),
  assert(f(5) = 10),
  true)$

/*!
\endhtmlonly
*/
