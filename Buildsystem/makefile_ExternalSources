# ToDo
# 0. Adding explanations about the directory structure.
# 1. make boost (generates all versions of boost)
# 2. make boost_gcc

SHELL = /bin/sh
.SUFFIXES :

doxygen_targets := doxygen-1.4.3 
gcc_targets := gcc-3.4.3 gcc-3.4.4 gcc-4.0.0
boost_targets := boost_1_32_0
postgresql_targets := postgresql-8.0.3

# Usage

# Install Doxygen (? is the version number)
# make doxygen-?

# Install all versions of gcc
# make gcc

# Install a version of gcc (? is the version number)
# make gcc-? 

# Install Boost locally (? is version number) with system gcc
# make boost_?

# Install Boost locally (? is version number) with a version of gcc (% is the version number) 
# make gcc-version=% boost_?

# Install PostgreSQL (? is version number)
# make postgresql-?

# Initialise a database and start the server (? is version number of postgresql)
# Use the default location (postgresql-base-directory/?/data)
# 	make pgsql-version=? initialise-database
# Use a different location (% is the absolute path of the location to place the database)
# 	make pgsql-version=? pgdata=% initialise-database

prefix := $(shell pwd)
gcc-version := system
pgsql-version :=
pgdata :=
# languages to build compiler for. Defaults to c, c++. Other languages are f77,objc,java,ada
enable-languages := c,c++

doxygen-base-directory := $(addprefix $(prefix)/,Doxygen)
gcc-base-directory := $(addprefix $(prefix)/,Gcc)
boost-base-directory := $(addprefix $(prefix)/,Boost)
postgresql-base-directory := $(addprefix $(prefix)/,Postgresql)

gcc_build_directory_name := $(addsuffix _Build, $(gcc_targets))

gcc_build_directory_path := $(addprefix $(gcc-base-directory)/, $(gcc_build_directory_name))

gcc_installation_directory_name := $(patsubst gcc-%, %, $(gcc_targets))

gcc_installation_directory_path := $(addprefix $(gcc-base-directory)/, $(gcc_installation_directory_name))

boost_build_directory_name := $(foreach gccversion, $(gcc_installation_directory_name), $(addsuffix +$(gccversion)_Build, $(patsubst boost_%, %, $(boost_targets))))

boost_build_directory_name += $(addsuffix _Build, $(patsubst boost_%, %, $(boost_targets)))

boost_build_directory_path := $(addprefix $(boost-base-directory)/, $(boost_build_directory_name))

boost_installation_directory_name := $(foreach gccversion, $(gcc_installation_directory_name), $(addsuffix +$(gccversion), $(patsubst boost_%, %, $(boost_targets))))

boost_installation_directory_name += $(patsubst boost_%, %, $(boost_targets))

boost_installation_directory_path := $(addprefix $(boost-base-directory)/, $(boost_installation_directory_name))

bjam_directory_path := $(addprefix $(boost-base-directory)/, bjam)

doxygen-directories := $(doxygen-base-directory)
gcc-directories := $(gcc-base-directory) $(gcc_build_directory_path) $(gcc_installation_directory_path)
boost-directories := $(boost-base-directory) $(boost_build_directory_path) $(boost_installation_directory_path) $(bjam_directory_path)
postgresql-directories := $(postgresql-base-directory)

define postcondition 
if [ $$? != 0 ]; then exit 1; fi;
endef

.PHONY : all gcc clean cleanall create_doxygen_dirs create_gcc_dirs create_boost_dirs create_postgresql_dirs $(doxygen_targets) $(gcc_targets) $(boost_targets) $(postgresql_targets) initialise-database

all :

$(doxygen-directories) : % : 
	mkdir $@

create_doxygen_dirs : $(doxygen-directories)

$(doxygen_targets) : create_doxygen_dirs
	tar --extract --directory=$(doxygen-base-directory) --file=$@.src.tar.gz --ungzip
	cd $(doxygen-base-directory)/$@; $(postcondition) \
	sh ./configure; $(postcondition) \
	make; $(postcondition) \
	make docs; $(postcondition) \
	make pdf; $(postcondition) \
	sudo make install; $(postcondition) \
	sudo make install_docs

$(gcc-directories) : % : 
	mkdir $@

create_gcc_dirs : $(gcc-directories)

$(gcc_targets) : create_gcc_dirs
	tar --extract --directory=$(gcc-base-directory) --file=$@.tar.gz --ungzip
	cd $(gcc-base-directory)/$@_Build; $(postcondition) \
	../$@/configure --prefix=$(addprefix $(gcc-base-directory)/, $(patsubst gcc-%, %, $@)) --with-gxx-include-dir=$(addprefix $(gcc-base-directory)/, $(patsubst gcc-%, %, $@))/include/g++ --enable-languages=$(enable-languages) --enable-threads=posix  --enable-shared; $(postcondition) \
	make bootstrap; $(postcondition) \
	make install; 

gcc : $(gcc_targets)

$(boost-directories) : % : 
	mkdir $@

create_boost_dirs : $(boost-directories)

ifeq ($(gcc-version),system)
define install-boost 
	$(addprefix $(bjam_directory_path)/, bjam) "-sTOOLS=gcc" --prefix=$(addprefix $(boost-base-directory)/,$(patsubst boost_%, %, $@)) --builddir=$(addprefix $(boost-base-directory)/,$(patsubst boost_%, %, $@)_Build) install
endef
else 
define install-boost
	$(addprefix $(bjam_directory_path)/, bjam) "-sTOOLS=gcc" "-sGCC_ROOT_DIRECTORY=$(addprefix $(gcc-base-directory)/,$(gcc-version))" --stagedir=$(addprefix $(boost-base-directory)/,$(patsubst boost_%, %, $@)+$(gcc-version)) --builddir=$(addprefix $(boost-base-directory)/,$(patsubst boost_%, %, $@)+$(gcc-version)_Build) stage
	if [ -d $(addprefix $(gcc-base-directory)/,$(gcc-version))/lib/$@ ]; then echo; else mkdir $(addprefix $(gcc-base-directory)/,$(gcc-version))/lib/$@; fi;
	cp $(addprefix $(boost-base-directory)/,$(patsubst boost_%, %, $@)+$(gcc-version))/lib/* $(addprefix $(gcc-base-directory)/,$(gcc-version))/lib/$@
	if [ -d $(addprefix $(gcc-base-directory)/,$(gcc-version))/include/$@ ]; then echo; else mkdir $(addprefix $(gcc-base-directory)/,$(gcc-version))/include/$@; fi;
	cp -r $(boost-base-directory)/$@/boost/ $(addprefix $(gcc-base-directory)/,$(gcc-version))/include/$@
endef
endif

# Other configure options are GCC_BIN_DIRECTORY, GCC_INCLUDE_DIRECTORY, GCC_STDLIB_DIRECTORY, GXX (g++ command plus any options), GCC. 
$(boost_targets) : create_boost_dirs
	tar --extract --directory=$(boost-base-directory) --file=$@.tar.gz --ungzip
	cd $(boost-base-directory)/$@; $(postcondition) \
	cd tools/build/jam_src/; $(postcondition) \
	./build.sh; $(postcondition) \
	cp bin.*/bjam $(bjam_directory_path); $(postcondition) \
	cd $(boost-base-directory)/$@; $(postcondition) \
	$(install-boost)

$(postgresql-directories) : % : 
	mkdir $@

create_postgresql_dirs : $(postgresql-directories)

ifeq ($(pgdata), )
pgdata := $(addprefix $(postgresql-base-directory)/, $(pgsql-version))/data
endif

$(postgresql_targets) : create_postgresql_dirs
	tar --extract --directory=$(postgresql-base-directory) --file=$@.tar.gz --ungzip
	cd $(postgresql-base-directory)/$@; $(postcondition) \
	./configure CFLAGS='-Wl,-rpath,$(addprefix $(postgresql-base-directory)/, $(patsubst postgresql-%, %, $@))/lib' --prefix=$(addprefix $(postgresql-base-directory)/, $(patsubst postgresql-%, %, $@)); $(postcondition) \
	make; $(postcondition) \
	make install; $(postcondition) \

initialise-database :
	$(addprefix $(postgresql-base-directory)/, $(pgsql-version))/bin/initdb -D $(pgdata)
	$(postcondition)
	$(addprefix $(postgresql-base-directory)/, $(pgsql-version))/bin/pg_ctl -D $(pgdata) -l logfile start

clean :
	-rm -rf $(gcc_build_directory_path)
	-rm -rf $(boost_build_directory_path)

cleanall :
	-rm -rf $(doxygen-directories)
	-rm -rf $(gcc-directories)
	-rm -rf $(boost-directories)
	-rm -rf $(postgresql-directories)
