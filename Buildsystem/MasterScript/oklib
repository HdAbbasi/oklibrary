#!/bin/bash
# Oliver Kullmann, 25.8.2007 (Swansea)
# Copyright 2007 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute 
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the 
# License, or any later version.

if [[ $# == 0 ]]; then
  echo "oklib: no arguments given."
  exit 0
fi

version=0.1.0.8

if [[ $1 == "--version" ]]; then
  echo "oklib version ${version}"
  exit 0
fi


current_dir=$(pwd)

top_dir=${current_dir}
while [[ ! (-d ${top_dir}/.oklib) ]]; do
  if [[ ${top_dir} == "/" ]]; then
    echo "ERROR[oklib]: Not in an OKlibrary-directory (i.e., no directory containing a directory \".oklib\" on the path)."
    exit 1
  fi
  top_dir=$(dirname ${top_dir})
done
anchor_dir=${top_dir}/.oklib

buildsystem_dir=${anchor_dir}/Configuration/..


if [[ $1 == "--setup" ]]; then
  shift
  command="make --makefile=${buildsystem_dir}/SetUp.mak OKplatform=${top_dir} $*"
  echo ${command}
  ${command}
  exit
fi

if [[ $1 == "--prebuild" ]]; then
  if [ $# -eq 1 ]; then
    command="make --makefile=${buildsystem_dir}/Makefile OKplatform=${top_dir} prebuild"
  else
    shift
    command="make --makefile=${buildsystem_dir}/Makefile OKplatform=${top_dir} $*"
  fi
  echo ${command}
  ${command}
  exit
fi

if [[ $1 == "--create-package" ]]; then
  shift
  command="make --makefile=${buildsystem_dir}/ReleaseProcess/Makefile OKplatform=${top_dir} $*"
  echo ${command}
  ${command}
  exit
fi

if [[ $1 == "--maxima" ]]; then
  shift
  make --makefile=${buildsystem_dir}/MasterScript/SpecialProcessing/call_maxima.mak OKplatform=${top_dir} argument_okl="$*"
  exit $?
fi

if [[ $1 == "--R" ]]; then
  shift
  command="make --makefile=${buildsystem_dir}/MasterScript/SpecialProcessing/call_R.mak OKplatform=${top_dir} $*"
  ${command}
  exit
fi

if [[ $1 == "--push-developer" ]]; then
  shift
  if [[ $# == 0 ]]; then
    echo -e "ERROR[oklib]: the username of the developer on the server is needed as parameter!\n"
    exit 1
  fi
  developer=$1
  shift
  if [[ $# == 0 ]]; then
    git_arguments=""
  else
    git_arguments="$*"
  fi
  command="make --makefile=${buildsystem_dir}/SourceControl/Makefile OKplatform=${top_dir} developer_okl=${developer} git_arguments_okl=${git_arguments} push_developers"
  echo ${command}
  ${command}
  exit
fi
if [[ $1 == "--pull-developer" ]]; then
  shift
  if [[ $# == 0 ]]; then
    echo -e "ERROR[oklib]: the username of the developer on the server is needed as parameter!\n"
    exit 1
  fi
  developer=$1
  shift
  if [[ $# == 0 ]]; then
    git_arguments=""
  else
    git_arguments="$*"
  fi
  command="make --makefile=${buildsystem_dir}/SourceControl/Makefile OKplatform=${top_dir} developer_okl=${developer} git_arguments_okl=${git_arguments} pull_developers"
  echo ${command}
  ${command}
  exit
fi
if [[ $1 == "--pull-public" ]]; then
  shift
  if [[ $# == 0 ]]; then
    git_arguments=""
  else
    git_arguments="$*"
  fi
  command="make --makefile=${buildsystem_dir}/SourceControl/Makefile OKplatform=${top_dir} git_arguments_okl=${git_arguments} pull_public"
  echo ${command}
  ${command}
  exit
fi
if [[ $1 == "--push-ssh" ]]; then
  shift
  if [[ $# == 0 ]]; then
    echo -e "ERROR[oklib]: the remote machine (inclusive user-name if different) is needed as parameter!\n"
    exit 1
  fi
  remote_machine=$1
  shift
  if [[ $# == 0 ]]; then
    echo -e "ERROR[oklib]: the remote OKplatform-directory is needed as parameter!\n"
    exit 1
  fi
  repository=$1
  shift
  if [[ $# == 0 ]]; then
    git_arguments=""
  else
    git_arguments="$*"
  fi
  command="make --makefile=${buildsystem_dir}/SourceControl/Makefile OKplatform=${top_dir} remote_machine_okl=${remote_machine} remote_repository_okl=${repository} git_arguments_okl=${git_arguments} push_ssh"
  echo ${command}
  ${command}
  exit
fi
if [[ $1 == "--pull-ssh" ]]; then
  shift
  if [[ $# == 0 ]]; then
    echo -e "ERROR[oklib]: the remote machine (inclusive user-name if different) is needed as parameter!\n"
    exit 1
  fi
  remote_machine=$1
  shift
  if [[ $# == 0 ]]; then
    echo -e "ERROR[oklib]: the remote OKplatform-directory is needed as parameter!\n"
    exit 1
  fi
  repository=$1
  shift
  if [[ $# == 0 ]]; then
    git_arguments=""
  else
    git_arguments="$*"
  fi
  command="make --makefile=${buildsystem_dir}/SourceControl/Makefile OKplatform=${top_dir} remote_machine_okl=${remote_machine} remote_repository_okl=${repository} git_arguments_okl=${git_arguments} pull_ssh"
  echo ${command}
  ${command}
  exit
fi



oklib_building_log=${anchor_dir}/log/OKlibBuilding
external_sources_log=${anchor_dir}/log/ExternalSources

defining_dir=${current_dir}
until [[ ${defining_dir} == ${top_dir} ]]; do
  defining_base=$(basename ${defining_dir})

  if [[ ${defining_base} == ExternalSources ]]; then
    command="make --makefile=${buildsystem_dir}/ExternalSources/Makefile --directory=${top_dir}/ExternalSources OKplatform=${top_dir} $@"
    echo ${command}
    echo -e "oklib: ${external_sources_log} contains all output of the build.\n"
    ${command} 2>&1 | tee ${external_sources_log}
    return_value_build=$?
    if [[ ${return_value_build} != 0 ]]; then
      echo -e "ERROR[oklib]: The build process returned a value different from zero: ${return_value_build}\n"
      exit 1
    fi
    exit 0
  elif [[ -f ${defining_dir}/definitions.mak ]]; then
    command="make --makefile=${buildsystem_dir}/OKlibBuilding/Makefile --directory=${current_dir} srcdir=${current_dir} OKplatform=${top_dir} $@"
    echo ${command}
    ${command} 2>&1 | tee ${oklib_building_log}
    exit
  elif [[ ${defining_base} == Transitional ]]; then
    command="make OKplatform=${top_dir} $@"
    echo ${command}
    ${command} 2>&1 | tee ${oklib_building_log}
    exit
  elif [[ ${defining_base} == OKsystem ]]; then
    command="make OKplatform=${top_dir} $@"
    echo ${command}
    ${command} 2>&1 | tee ${oklib_building_log}
    exit
  else
    defining_dir=$(dirname ${defining_dir})
    continue
  fi

done

echo "oklib: no actions."

