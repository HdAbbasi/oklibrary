/* Oliver Kullmann, 4.1.2008 (Swansea) */
/* Copyright 2008 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

define_variable(
  OKplatform,
  "m4_SHELL(OKplatform)",
  any);
define_variable(
  OKsystem,
  "m4_SHELL(OKsystem)",
  any);
define_variable(
  oklib_session_name,
  sconcat("Maxima_session_","m4_SHELL(build_identification_okl)"),
  any);

showtime : true;
linel : 100;
stringdisp : true;
stardisp : true;
display2d : false;
set_plot_option([gnuplot_term, x11]);

define_variable(
  oklib_monitor,
  false,
  boolean);
define_variable(
  oklib_monitor_level,
  0,
  any); /* may take value inf */

define_variable(
  oklib_test_level,
  0,
  any); /* may take value inf */
define_variable(
  oklib_test_demos,
  false,
  boolean);
define_variable(
  oklib_test_demos_level,
  0,
  any); /* may take value inf */


/* Functions for loading files */

define_variable(
  oklib_load_round,
  0,
  fixnum);
oklib_loaded_files["maxima-init.mac"] : 0;

define_variable(
  oklib_load_annotation,
  false,
  boolean);
/* Whether or not oklib_load and oklib_include create functions 
   which annotate lists.
   oklib_batch, oklib_demo always lead to annotation of lists
   (that is, directly --- the invoked oklib_includes
   then are governed by oklib_load_annotation).
*/

loadfile(sconcat(OKsystem,"/Transitional/ComputerAlgebra/MaximaInternals/optload.lisp"));

oklib_load(name) := block([full_name : sconcat(OKsystem,"/",name)],
 oklib_load_round : oklib_load_round+1,
 oklib_loaded_files[full_name] : oklib_load_round,
 load(full_name, oklib_load_annotation));

oklib_include(name) := block([full_name : sconcat(OKsystem,"/",name)],
 if oklib_loaded_files[full_name] # oklib_load_round then (
  oklib_loaded_files[full_name] : oklib_load_round, 
  load(full_name, oklib_load_annotation))
);

oklib_load_all() := oklib_load("Transitional/ComputerAlgebra/include.mac");

oklib_batch(name) := block([full_name : sconcat(OKsystem,"/",name)],
 oklib_load_round : oklib_load_round+1,
 oklib_loaded_files[full_name] : oklib_load_round,
 batch(full_name));
oklib_demo(name) := block([full_name : sconcat(OKsystem,"/",name)],
 oklib_load_round : oklib_load_round+1,
 oklib_loaded_files[full_name] : oklib_load_round,
 demo(full_name));

define_variable(
  oklib_automatic_test,
  false,
  boolean);



/* Storing all variables in fixed time intervals: */

define_variable(
  oklib_store,
  false,
  boolean);
define_variable(
  oklib_old_storing_time,
  0.0,
  number);
define_variable(
  oklib_storage_interval,
  10, /* every 10 minutes */
  number);

/* Returns true if storage action did happen: */
/* If no arguments are given, then everything is saved,
   otherwise the arguments are passed to the save-function;
   so if they represent names of variables, then they need
   to be quoted. */
oklib_save([L]) := if oklib_store then block(
 [ert : elapsed_run_time()],
  if ert - oklib_old_storing_time >= oklib_storage_interval * 60 then block(
   [file_output_append : false],
    if emptyp(L) then
      save(oklib_session_name,all)
    else
      apply(save, cons(oklib_session_name,L)),
    oklib_old_storing_time : ert,
    return(true)
  )
  else return(false))
 else false$

