/* Oliver Kullmann, 4.1.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

define_variable(
  OKplatform,
  "m4_SHELL(OKplatform)",
  any);
define_variable(
  OKsystem,
  "m4_SHELL(OKsystem)",
  any);
define_variable(
  oklib_session_name,
  sconcat("Maxima_session_","m4_SHELL(build_identification_okl)"),
  any);
define_variable(
  maxima_lisp_name_okl,
  "m4_SHELL(maxima_lisp_name_okl)",
  any);
define_variable(
  maximal_argument_length,
  if maxima_lisp_name_okl = "ecl" then 2^16 
    elseif maxima_lisp_name_okl = "clisp" then 2^12 - 1
    else unknown,
  any); /* may take value inf or unknown */
define_variable(
  environment_machine_bits,
  m4_SHELL(machine_bits_okl),
  fixnum);

define_variable(
  eis_directory_okl,
  "m4_SHELL(maxima_eis_installation_dir_okl)",
  any);

scalarmatrixp : false; /* now matrix([0]) . matrix([0]) = matrix([0]) */
showtime : true; /* show how much run-time was needed */
linel : 100; /* width for displaying expressions */
stringdisp : true; /* show strings with quotation marks */
stardisp : true; /* show multiplications via "*" */
display2d : false; /* show output as strings (which can be copied!) */
disp2d(x) := block([display2d:true], disp(x)); /* outputs x in 2d-format */
set_plot_option([gnuplot_term, x11]);
ratprint : false; /* no messages informing about conversion of floating point
numbers to rational numbers */
float2bf : true; /* no messages informing about conversion from float to 
bfloat */
bftorat : true; /* full precision when converting big floats to rational numbers */

define_variable(
  oklib_monitor,
  false,
  boolean);
define_variable(
  oklib_monitor_level,
  0,
  any); /* may take value inf */

define_variable(
  oklib_test_level,
  0,
  any); /* may take value inf */
define_variable(
  oklib_test_demos,
  false,
  boolean);
define_variable(
  oklib_test_demos_level,
  0,
  any); /* may take value inf */


/* Functions for loading files */

define_variable(
  oklib_load_round,
  0,
  fixnum);
oklib_loaded_files["maxima-init.mac"] : 0;

define_variable(
  oklib_load_annotation,
  false,
  boolean);
/* Whether or not oklib_load and oklib_include create functions 
   which annotate lists.
   oklib_batch, oklib_demo always lead to annotation of lists
   (that is, directly --- the invoked oklib_includes
   then are governed by oklib_load_annotation).
*/

loadfile(sconcat(OKsystem,"/OKlib/ComputerAlgebra/MaximaInternals/optload.lisp"));
loadfile(sconcat(eis_directory_okl,"/eis.lisp"));

oklib_load(name) := oklib_plain_load(sconcat(OKsystem,"/",name));
oklib_plain_load(name) := (
 oklib_load_round : oklib_load_round+1,
 oklib_loaded_files[name] : oklib_load_round,
 load(name, oklib_load_annotation));

oklib_include(name) := oklib_plain_include(sconcat(OKsystem,"/",name));
oklib_plain_include(name) := (
 if oklib_loaded_files[name] # oklib_load_round then (
  oklib_loaded_files[name] : oklib_load_round,
  load(name, oklib_load_annotation))
);

oklib_load_all() := oklib_load("OKlib/ComputerAlgebra/include.mac");

oklib_batch(name) := oklib_plain_batch(sconcat(OKsystem,"/",name));
oklib_plain_batch(name) := (
 oklib_load_round : oklib_load_round+1,
 oklib_loaded_files[name] : oklib_load_round,
 batch(name));

oklib_demo(name) := oklib_plain_demo(sconcat(OKsystem,"/",name));
oklib_plain_demo(name) := (
 oklib_load_round : oklib_load_round+1,
 oklib_loaded_files[name] : oklib_load_round,
 demo(name));

define_variable(
  oklib_automatic_test,
  false,
  boolean);



/* Storing all variables in fixed time intervals: */

define_variable(
  oklib_store,
  false,
  boolean);
define_variable(
  oklib_old_storing_time,
  0.0,
  number);
define_variable(
  oklib_storage_interval,
  10, /* every 10 minutes */
  number);

/* Returns true if storage action did happen: */
/* If no arguments are given, then everything is saved,
   otherwise the arguments are passed to the save-function;
   so if they represent names of variables, then they need
   to be quoted. */
oklib_save([L]) := if oklib_store then block(
 [ert : elapsed_run_time()],
  if ert - oklib_old_storing_time >= oklib_storage_interval * 60 then block(
   [file_output_append : false],
    if emptyp(L) then
      save(oklib_session_name,all)
    else
      apply(save, cons(oklib_session_name,L)),
    oklib_old_storing_time : ert,
    return(true)
  )
  else return(false))
 else false$


/* Constants for asserts handling floating-point numbers */

define_variable(
  oklib_float_comparison_factor,
  1,
  rational);

define_variable(
  oklib_float_comparison_exponent,
  15,
  fixnum);

/* Constants for Ecl memory-management */

define_variable(
  frame_stack_ecl,
  m4_SHELL(frame_stack_ecl_okl),
  fixnum);
define_variable(
  binding_stack_ecl,
  m4_SHELL(binding_stack_ecl_okl),
  fixnum);
define_variable(
  c_stack_ecl,
  m4_SHELL(c_stack_ecl_okl),
  fixnum);
define_variable(
  heap_size_ecl,
  m4_SHELL(heap_size_ecl_okl),
  fixnum);
define_variable(
  lisp_stack_ecl,
  m4_SHELL(lisp_stack_ecl_okl),
  fixnum);

if environment_machine_bits=32 then
  heap_size_ecl_okl : heap_size_ecl_okl/2;
