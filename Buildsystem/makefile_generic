# Oliver Kullmann, 6.3.2002 (Swansea)

# Generic makefile, to be used in a general environment for C++
# compilation

# Usage:

# make all
# = make unoptimsed + make optimised

# make unoptimised
# creates all dependencies files, object files, and program files;

# make optimised
# creates the same (names of object and program files modified), but using optimisation options;

# make prebuild
# creates all directories and header files

# make check
# = make test + make testop

# make test
# recompiles the test program if necessary, and runs the test if necessary.

# make testop
# recompiles the test program with optimisation if necessary, and runs the test if necessary.

# make clean
# = make cleanobj cleandep
# make cleanall
# = make clean cleanhead cleanprograms

# Programs are compiled with $(CXX), while objectfiles are compiled with $(CXX) resp. $(CC)
# in case the suffix is .cpp resp. .c .

# make alternative_gcc=? alternative_boost=% 
# where ? is the locally installed GCC version number (for example 3.4.3) and % is the locally installed boost version number (for example 1_33).
# If one doesn't specify alternative_boost=, then the system boost will be used, while setting alternative_gcc will override $(CXX) and $(CC) respectively, and a locally installed boost will be used (either given by alternative_boost, or, if not defined, then the tail of $(Boost) is used as the generic name for the current boost version).

# The compile-command is prefixed with $(Compile_tool), the link-command with $(Link_tool),
#  and the test execution with $(Test_tool); the default in all 3 cases is "time -p" (measuring
# the wall clock time, the process time and the system time used in total for the execution).
# Setting Test_tool="valgrind --quiet" runs all tests with memory check.
# The default of Warning_options is "-Wall".

# #############################################################

SHELL = /bin/sh
.SUFFIXES :

define last-element
$(word $(words $1),$1)
endef

ifndef srcdir

this-makefile := $(call last-element,$(MAKEFILE_LIST))
other-makefiles := $(filter-out $(this-makefile),$(MAKEFILE_LIST))
parent-makefile := $(call last-element,$(other-makefiles))
srcdir := $(shell cd $(dir $(parent-makefile)); pwd)

endif

ifndef OKSystem
  ifdef OKSYSTEM
    OKSystem := $(OKSYSTEM)
  else
    $(error Either OKSystem or OKSYSTEM must be defined!)
  endif
endif

OKBuildsystem := $(OKSYSTEM)/Transitional/Buildsystem

ifndef Boost
  ifdef BOOST
    Boost = -I$(BOOST)
  endif
endif

export

include $(OKBuildsystem)/makefile_standardgoals

export

include $(srcdir)/makefile.definitions.mak

# Definitions required from makefile.definitions:
# General_options
# Optimisation_options
# test_program
# programs
# source_libraries
# link_libraries
# Root



prefix := $(shell cd $(srcdir); cd $(Root); pwd)

exec_prefix := $(prefix)
bindir := $(exec_prefix)/bin
libdir := $(exec_prefix)/lib

#includedir := $(prefix)/include

aux_dir := $(prefix)/aux

doc_dir := $(prefix)/doc
html_dir := $(doc_dir)/html

Directories := $(bindir) $(libdir) $(aux_dir) $(doc_dir) $(html_dir)

Doxygen_modifier := 2> $(aux_dir)/DoxygenErrorMessages

# -----------------------------------------------------------------------------------

test_program := $(addprefix $(bindir)/, $(test_program))

programs := $(addprefix $(bindir)/, $(programs))
programs := $(programs) $(test_program)

# ---------------------------------------------------

name_addition := $(shell echo $(Optimisation_options) | tr --delete " ")
All_options := $(General_options) $(Optimisation_options)

programs_optimised := $(programs:=$(name_addition))

header_files_cpp := $(wildcard $(srcdir)/*.hpp)
header_files_cpp := $(notdir $(header_files_cpp))
#header_files_cpp :=  $(addprefix $(includedir)/, $(header_files_cpp))
header_files_c := $(wildcard $(srcdir)/*.h)
header_files_c := $(notdir $(header_files_c))
#header_files_c :=  $(addprefix $(includedir)/, $(header_files_c))
header_files := $(header_files_cpp) $(header_files_c)

compilation_units_cpp := $(wildcard $(srcdir)/*.cpp)
compilation_units_cpp := $(notdir $(compilation_units_cpp))
compilation_units_c := $(wildcard $(srcdir)/*.c)
compilation_units_c := $(notdir $(compilation_units_c))

dependency_files_cpp := $(compilation_units_cpp:.cpp=.d)
dependency_files_cpp := $(addprefix $(aux_dir)/, $(dependency_files_cpp))
dependency_files_c := $(compilation_units_c:.c=.d) 
dependency_files_c := $(addprefix $(aux_dir)/, $(dependency_files_c))
dependency_files := $(dependency_files_cpp) $(dependency_files_c)

object_files_cpp := $(compilation_units_cpp:.cpp=.o) 
object_files_cpp := $(addprefix $(libdir)/, $(object_files_cpp))
object_files_c := $(compilation_units_c:.c=.o)
object_files_c := $(addprefix $(libdir)/, $(object_files_c))
object_files := $(object_files_cpp) $(object_files_c)
object_files_cpp_optimised := $(compilation_units_cpp:.cpp=$(name_addition).o)
object_files_cpp_optimised := $(addprefix $(libdir)/, $(object_files_cpp_optimised))
object_files_c_optimised := $(compilation_units_c:.c=$(name_addition).o)
object_files_c_optimised := $(addprefix $(libdir)/, $(object_files_c_optimised))
object_files_optimised := $(object_files_cpp_optimised) $(object_files_c_optimised)

test_file := $(srcdir)/test
testop_file := $(srcdir)/testop

doxy_file := $(OKBuildsystem)/Doxyfile

CXX := g++
CC := gcc
Standard_options := -ansi -pedantic
Warning_options := -Wall
Compile_tool := time -p
Link_tool := time -p
Test_tool := time -p


alternative_gcc:=
alternative_boost:=
alternative_library_path:=

ifneq ($(alternative_gcc),) # alternative gcc specified
  CXX := $(prefix)/ExternalSources/Gcc/$(alternative_gcc)/bin/g++
  CC := $(prefix)/ExternalSources/Gcc/$(alternative_gcc)/bin/gcc
  alternative_library_path:= -L$(prefix)/ExternalSources/Gcc/$(alternative_gcc)/lib64 -Wl,-rpath,$(prefix)/ExternalSources/Gcc/$(alternative_gcc)/lib64 -L$(prefix)/ExternalSources/Gcc/$(alternative_gcc)/lib -Wl,-rpath,$(prefix)/ExternalSources/Gcc/$(alternative_gcc)/lib
  ifeq ($(alternative_boost),)
    ifndef Boost
      $(error Variable Boost must be defined!)
    endif
    alternative_boost := $(patsubst -I%,%,$(Boost))
    alternative_boost := $(patsubst %/,%,$(alternative_boost))
    alternative_boost := $(notdir $(alternative_boost))
    alternative_boost := $(patsubst boost-%,%,$(alternative_boost))
  endif
  alternative_library_path := $(alternative_library_path) -L$(prefix)/ExternalSources/Boost/$(alternative_boost)+$(alternative_gcc)/lib -Wl,-rpath,$(prefix)/ExternalSources/Boost/$(alternative_boost)+$(alternative_gcc)/lib
  Boost = -I$(prefix)/ExternalSources/Boost/$(alternative_boost)+$(alternative_gcc)/include/boost-$(alternative_boost)
else # no alternative gcc specified
  ifneq ($(alternative_boost),) # alternative boost specified
  alternative_library_path := $(alternative_library_path) -L$(prefix)/ExternalSources/Boost/$(alternative_boost)/lib -Wl,-rpath,$(prefix)/ExternalSources/Boost/$(alternative_boost)/lib
  Boost = -I$(prefix)/ExternalSources/Boost/$(alternative_boost)/include/boost-$(alternative_boost)
  endif
endif

# Explanation: With "-Wl,-rpath,Path" we tell the compiler to pass the option "-rpath Path" to the linker, which will add Path to the places searched for this program for run-time-libraries.

# ----------------------------------------------------------------

all : unoptimised optimised

prebuild : createdirs update

createdirs : $(Directories)

update : $(header_files)

html :
	rm -r $(html_dir)/*; cd $(srcdir); cd $(Root); doxygen $(doxy_file) $(Doxygen_modifier)

unoptimised : $(object_files) $(programs)

optimised : $(object_files_optimised) $(programs_optimised)

check : test testop

test : $(test_file)
testop : $(testop_file)

$(test_file) : $(test_program)
	$(Test_tool) $(test_program)
	touch $(test_file)
$(testop_file) : $(test_program)$(name_addition)
	$(Test_tool) $(test_program)$(name_addition)
	touch $(testop_file)

force :

# ---------------------------------------------------------------

ifeq ($(firstword $(filter $(special_goals) $(cleaning_goals) $(forced_goals), $(MAKECMDGOALS))),)
include $(dependency_files)
endif

$(Directories) : % :
	mkdir $@

#$(header_files_cpp) : $(includedir)/%.hpp : $(srcdir)/%.hpp
#	cp $< $@
#$(header_files_c) : $(includedir)/%.h : $(srcdir)/%.h
#	cp $< $@


$(dependency_files_cpp) : $(aux_dir)/%.d : $(srcdir)/%.cpp
	$(CXX) -MM -MF $@ -MT $(libdir)/$*.o -MT $(libdir)/$*$(name_addition).o -MT $@ $(source_libraries) $<
$(dependency_files_c) : $(aux_dir)/%.d : $(srcdir)/%.c
	$(CC) -MM -MF $@ -MT $(libdir)/$*.o -MT $(libdir)/$*$(name_addition).o -MT $@ $(source_libraries) $<

$(object_files_cpp_optimised) : $(libdir)/%$(name_addition).o : $(srcdir)/%.cpp
	$(Compile_tool) $(CXX) -c -o $@ $(Standard_options) $(Warning_options) $(CPPFLAGS) $(CXXFLAGS) $(Optimisation_options) $(source_libraries) $<
$(object_files_cpp) : $(libdir)/%.o : $(srcdir)/%.cpp
	$(Compile_tool) $(CXX) -c -o $@ $(Standard_options) $(Warning_options) $(CPPFLAGS) $(CXXFLAGS) $(General_options) $(source_libraries) $<

$(object_files_c_optimised) : $(libdir)/%$(name_addition).o : $(srcdir)/%.c
	$(Compile_tool) $(CC) -c -o $@ $(Standard_options) $(Warning_options) $(CPPFLAGS) $(CFLAGS) $(Optimisation_options) $(source_libraries) $<
$(object_files_c) : $(libdir)/%.o : $(srcdir)/%.c
	$(Compile_tool) $(CC) -c -o $@ $(Standard_options) $(Warning_options) $(CPPFLAGS) $(CFLAGS) $(General_options) $(source_libraries) $<


define get-link_libraries
$$(if [[ -e $(srcdir)/$*.link_libraries ]]; then $(srcdir)/$*.link_libraries; else echo $(link_libraries); fi)
endef
define get-link_libraries_optimised
$$(if [[ -e $(srcdir)/$*.link_libraries_optimised ]]; then $(srcdir)/$*.link_libraries_optimised; else if [[ -e $(srcdir)/$*.link_libraries ]]; then $(srcdir)/$*.link_libraries; else echo $(link_libraries); fi; fi)
endef

export

$(programs) : $(bindir)/% : $(libdir)/%.o
	$(Link_tool) $(CXX) -o $@ $(Standard_options) $(Warning_options) $(General_options) $< $(alternative_library_path) $(get-link_libraries)
$(programs_optimised) : $(bindir)/%$(name_addition) : $(libdir)/%$(name_addition).o
	$(Link_tool) $(CXX) -o $@ $(Standard_options) $(Warning_options) $(Optimisation_options) $< $(alternative_library_path) $(get-link_libraries_optimised)


# --------------------------------

cleanobj :
	- rm $(object_files) $(object_files_optimised)

cleandep :
	- rm $(dependency_files)

clean : cleanobj cleandep
	- rm $(test_file) $(testop_file)

cleanhead :
	- rm $(header_files)

cleanprograms :
	- rm $(programs) $(programs_optimised)

cleanall : clean cleanhead cleanprograms

