#!/bin/bash
# Oliver Kullmann, 23.4.2011 (Guangzhou)
# Copyright 2011 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute 
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the 
# License, or any later version.

# Split a SAT-problem into sub-problems, using the OKsolver

# Usage:
#   SplittingViaOKsolver parameters File
# where File is the CNF in DIMACS format, and parameters are for
# the OKsolver-2002.

# Creates a directory "SplitViaOKsolver_parameters_timestamp" (in the current
# directory), containing the following files:
# - Log : some general logging information
# - Parameters : the parameters passed over to the OKsolver
# - Version : information on this script and the OKsolver
# - Environment : information on the computer environment
# - File : a copy of the instance
# - F : containing the value of File (note that File is a string-variable)
# - Result : output of the OKsolver, after creating the instances
# - N : the number of sub-instances
# - Data : for indices 1 <= i <= N the number n of variables in the partial
#          assignment for the i-th sub-instance, sorted by descending n
# - Statistics : basic evaluation of Data
# - Md5sum : a combined md5sum-hash-value of all files in Instances
# And in the directory Instances we have files with names 1, ..., N,
# each containing a partial assignment in DIMACS format (one line, starting
# with v, followed by literals set to true, concluded by "0") yielding the
# corresponding sub-instance.

set -o errexit
set -o nounset

script_name="SplittingViaOKsolver"
version_number=0.1.9

timestamp=$(date +"%Y-%m-%d-%H%M%S")

directory=SplitViaOKsolver_$(echo $* | tr -d " -./")_${timestamp}

solver=OKsolver_2002_NTP-O3-DNDEBUG
data_preprocessing=PreprocessSplitting-O3-DNDEBUG

mkdir ${directory}
echo "Created directory ${directory}."
cd ${directory}

echo -n "Begin: " > Log
date >> Log

echo "${script_name} ${version_number}" > Version
echo >> Version
${solver} --version >> Version

uname -a > Environment
echo >> Environment
cat /proc/cpuinfo >> Environment
echo >> Environment
free -m >> Environment

parameters="$*"
filename="${!#}"
length=$(($#-1))
other_param=${@:1:$length}
new_param="${other_param} -S=${directory}/Instances ${filename}"
echo ${new_param} > Parameters

cp ../${filename} .
echo $(basename ${filename}) > F

mkdir Instances

echo -e "$(date): Running ${solver}, creating partial assignments\n in subdirectory \"Instances\"."
echo "$(date): Started ${solver}." >> Log
cd ..
set +e
${solver} ${new_param} >${directory}/Result 2>&1
estatus=$?
set -e
cd ${directory}
echo "$(date): Completed run of ${solver}." | tee -a Log

if [[ $estatus != 0 && $estatus != 10 && $estatus != 20 ]]; then
  echo -n "ERROR: " >> Log
  date >> Log
  echo -e "UNEXPECTED RETURN VALUE ${estatus}.\n" | tee -a Log
  exit 1
else
  echo "Return value of OKsolver: ${estatus}" >> Log
fi
echo "Splitting successfully completed. " >> Log

N=$(awk '/splitting_cases/ {print $3}' Result)
echo $N > N

cd Instances
echo "Extracting data from partial assignments."
echo " i n" > ../Data
${data_preprocessing} $N >> ../Data
cd ..

echo "Extracting statistics."
echo -e "E=read.table(\"Data\")\nsummary(E\$n)\ntable(E\$n)" | oklib --R --quiet --vanilla | tail -n +3 > Statistics

echo "$(date): Started computing md5sum." | tee -a Log
cd Instances
current_md5sum=0
for F in *; do
  current_md5sum=$(echo ${current_md5sum} | cat ${F} - | md5sum | awk '{print $1}')
done
cd ..
echo ${current_md5sum} > Md5sum
echo "$(date): Completed computation of md5sum." | tee -a Log

echo -n "Completed: " >> Log
date >> Log

exit 0
