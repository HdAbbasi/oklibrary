#!/bin/bash
# Oliver Kullmann, 4.4.2009 (Swansea)
# Copyright 2009, 2010 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute 
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the 
# License, or any later version.

# "GTTransversals k n b" computes the clause-set expressing the existence of
# a transversal of size exactly b of the hypergraph of arithmetic progressions
# of size k for the vertex set {p_1, ..., p_n}, where p_i is the i-th
# prime number.
# The clauses are the hyperedges (positively) plus clauses expressing the
# cardinality constraint v_1 + ... + v_n = b.

script_name="GTTransversals"

if [[ $# != 3 ]]; then
  echo "ERROR[${script_name}]: Exactly three parameters k, n, b are needed:
  The progression-length k, the number n of prime numbers, and the precise 
  length b of the envisaged transversal size."
  exit 1
fi

K=$1
N=$2
B=$3

maxima_call="oklib --maxima"
lin_equal_progr="LinInequal-O3-DNDEBUG"
oksolver="OKsolver_2002-O3-DNDEBUG"
dimacs_translation="ExtendedToStrictDimacs-O3-DNDEBUG"

auxfile1="gt_$$"
auxfile2="gt_b_$$"
resultfile="gt_trans_${K}_${N}_${B}.cnf"

# Creating the Dimacs-file representing the hypergraph as positive clause-set:
${maxima_call} --batch-string="\"oklib_load(\\\"OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac\\\"); oklib_load(\\\"OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/Generators.mac\\\"); oklib_load(\\\"OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Substitutions.mac\\\"); output_fcs(\\\"Hypergraph of arithmetic progressions in the prime numbers, k=${K}, n=${N}, bound=${B}\\\",standardise_fcs(arithprog_primes_hg(${K},${N}))[1],\\\"${auxfile1}\\\");\""

# Adding the linear inequalities:
${lin_equal_progr} "${N}" "${B}" "==" "" >> ${auxfile1}

# Updating the Dimacs parameter line to the real values:
output="$(${oksolver} -P ${auxfile1})"
n=$(echo "${output}" | awk '$2 == "initial_number_of_variables" {print $3}')
c=$(echo "${output}" | awk '$2 == "initial_number_of_clauses" {print $3}')
param="p cnf ${n} ${c}"
cat ${auxfile1} | awk '$1 == "p" {print '"\"${param}\""'}; $1 != "p" {print}' > ${auxfile2}
# Creating a strict Dimacs-file (with only natural numbers as variable-names):
cat ${auxfile2} | ${dimacs_translation} > ${resultfile}

# Removing the auxiliary files:
rm ${auxfile1} ${auxfile2}

exit 0
