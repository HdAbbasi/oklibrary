#!/bin/bash
# Oliver Kullmann, 13.8.2011 (Swansea)
# Copyright 2011, 2012 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute 
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the 
# License, or any later version.

# Processing of a directory produced by SplitViaOKsolver.
# Two modes of usage:

# ProcessSplitViaOKsolver SplitViaOKsolver_dir

# creates the experiment-directory "Process_splitviaoksolver-dirname_timestamp"
# (in the current directory) containing the files
#  - Log: general logging information
#  - Parameter: the version of this script, the splitviaoksolver-directory,
#     the created experiment-directory, and the solver used
#  - Environment: information on the computer environment
#  - current_subinstance: starting with 1, the index of the next sub-instance
#    to be solved
#  - SubinstanceStatistics: in R-format the collected data, as produced by
#    ExtractMinisat, with a running number and i, npa and d added at the
#    front, the index of the sub-problem, the (total) number of variables in
#    the partial assignment, and the number of decisions in it.
#  - If a satisfiable sub-instance was found, then in file
#    SatisfyingAssignments for each satisfiable sub-instance one has a line
#    "index original-index" with the index for this processing and the index
#    w.r.t. the original creation by OKsolver.
#  - Upon completion, the file Result is created which contains whether
#    the instance was determined satisfiable or unsatisfiable, and the total
#    running time (the sum of process times for all processes involved).
# Furthermore Temp.cnf contains the instance (after application of the
# partial assignment) currently solved, and Temp.out contains the solver
# output of the last solved instance.

# ProcessSplitViaOKsolver SplitViaOKsolver_dir Process_dir

# uses the already created Process_dir (created by a previous invocation
# of that script) to continue an interrupted processing.
# For the final running time, as stored in Result, currently only the last
# run is used.

# Currently usage of minisat-2.2.0 is hardcoded.
# Evaluation of the file SubinstanceStatistics (in R) via
# read_processsplit_minisat.
# To run the solver with additional parameters, for example a time-limit,
# use e.g. (here a time-limit of 20s is set)
#   solver="minisat-2.2.0 -cpu-lim=20" ProcessSplitViaOKsolver XXX [YYY]
# These environment variables need also to be set for continuation.
# Expected return-values of the solver are 0 (return without a result),
# 10 (sat) and 20 (unsat).

# After abortion via SIGINT, for further continuation potentially files
# SubinstanceStatistics and current_subinstance should be manipulated,
# typically undoing the result of the last subinstance.


set -o errexit
set -o nounset

script_name="ProcessSplitViaOKsolver"
version_number=0.1.3

timestamp=$(date +"%Y-%m-%d-%H%M%S")

if [[ $# -eq 0 ]]; then
  echo "ERROR[${script_name}]: At least one parameter is needed, the directory to be processed."
  exit 1
fi
if [[ $# -ge 3 ]]; then
  echo -e "ERROR[${script_name}]: At most two parameters are allowed:\n - the directory to be processed\n - the already existing processing-directory."
  exit 1
fi

solver=${solver:=minisat-2.2.0}
extraction_tool=${extraction_tool:=ExtractMinisat}

directory1=$1

echo "${script_name} in version ${version_number} started."
echo -e "Using solver \"${solver}\"."

trap '' INT

if [[ $# -eq 2 ]]; then
  directory2=$2
  echo "Using existing processing-directory ${directory2}."
  echo -n "Continuation: " >> ${directory2}/Log
  date >> ${directory2}/Log
  echo "Version = ${version_number}" >> ${directory2}/Log
  echo "Process id = $$" >> ${directory2}/Log
  start=$(cat ${directory2}/current_subinstance)
else
  directory2="Process_$(basename ${directory1})_${timestamp}"
  mkdir ${directory2}
  echo "Created new processing-directory ${directory2}."
  echo -n "Begin: " > ${directory2}/Log
  date >> ${directory2}/Log
  echo "Version = ${version_number}" >> ${directory2}/Log
  echo "Process id = $$" >> ${directory2}/Log
  echo "${script_name} version ${version_number}" > ${directory2}/Parameter
  echo ${directory1} >> ${directory2}/Parameter
  echo ${directory2} >> ${directory2}/Parameter
  echo "Solver: ${solver}" >> ${directory2}/Parameter
  uname -a > ${directory2}/Environment
  echo >> ${directory2}/Environment
  cat /proc/cpuinfo >> ${directory2}/Environment
  echo >> ${directory2}/Environment
  free -m >> ${directory2}/Environment
  start=1
  echo "${start}" >> ${directory2}/current_subinstance
  echo -n " i npa d " > ${directory2}/SubinstanceStatistics
  ${extraction_tool} header-only >> ${directory2}/SubinstanceStatistics
fi

instance_path="${directory1}/$(cat ${directory1}/F)"

tail -n +$((start+1)) ${directory1}/Data | while read count F npa ndec; do

  echo -n "$count "
  cat ${instance_path} | ApplyPass-O3-DNDEBUG ${directory1}/Instances/$F ${directory2}/Temp.cnf
  set +e
  trap - INT
  ${solver} ${directory2}/Temp.cnf >${directory2}/Temp.out 2>&1
  estatus=$?
  trap '' INT
  set -e
  if  [[ $estatus == 0 ]]; then
    echo -n "I "
  elif [[ $estatus != 10 && $estatus != 20 ]]; then
    echo -n "ERROR: " >> ${directory2}/Log
    date >> ${directory2}/Log
    echo "Count=${count}" >> ${directory2}/Log
    echo
    echo -e "UNEXPECTED RETURN VALUE ${estatus}.\n" | tee -a ${directory2}/Log
    exit 1
  fi

  echo -n "${count} ${F} ${npa} ${ndec} " >> ${directory2}/SubinstanceStatistics
  cat ${directory2}/Temp.out | ${extraction_tool} data-only >> ${directory2}/SubinstanceStatistics
  if [[ $estatus == 10 ]]; then
    echo -e "\nFound a SATISFYING ASSIGNMENT."
    echo "${count} ${F}" >> ${directory2}/SatisfyingAssignments
  fi
  echo $((count+1)) > ${directory2}/current_subinstance

done

echo -e "\nCOMPLETED; see\n ${directory2}/Result\n ${directory2}/SubinstanceStatistics"

if [[ -e ${directory2}/SatisfyingAssignments ]]; then
  echo "Instance SATISFIABLE."
  echo "SATISFIABLE" > ${directory2}/Result
  echo "Found $(cat ${directory2}/SatisfyingAssignments | wc -l) satisfiable sub-instances." >> ${directory2}/Result
else
  echo "Instance UNSATISFIABLE."
  echo "UNSATISFIABLE" > ${directory2}/Result
fi
ps p $$ k time S >> ${directory2}/Result

echo -n "Completed: " >> ${directory2}/Log
date >> ${directory2}/Log

exit 0
