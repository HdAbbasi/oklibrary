#!/bin/bash
# Oliver Kullmann, 13.8.2011 (Swansea)
# Copyright 2011 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute 
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the 
# License, or any later version.

# Processing of a directory produced by SplitViaOKsolver.
# Two modes of usage:

# ProcessSplitViaOKsolver SplitViaOKsolver_dir

# creates the experiment-directory "Process_splitviaoksolver-dirname_timestamp"
# containing the files
#  - current_subinstance: starting with 1, the index of the next sub-instance
#    to be solved
#  - Parameter: the version of this script, the splitviaoksolver-directory,
#     and the created experiment-directory
#  - SubinstanceStatistics: in R-format the collected data
# If a satisfiable sub-instance was found, then in SatisfyingAssignments
# for each satisfiable sub-instance one has a line "index original-index"
# with the index for this processing and the index w.r.t. the original
# creation by OKsolver.
# Furthermore Temp.cnf contains the instance (after application of the
# partial assignment) currently solved, and Temp.out contains the solver
# output of the last solved instance.

# ProcessSplitViaOKsolver SplitViaOKsolver_dir Process_dir

# uses the already created Process_dir (created by a previous invocation
# of that script) to continue an interrupted processing.
# (Currently no un-interruptible parts are declared, but it seems practically
# save to interrupt and restart a process.)

# Currently usage of minisat-2.2.0 is hardcoded.
# Evaluation of the file SubinstanceStatistics (in R) via
#> E=read.table("SubinstanceStatistics",header=TRUE,colClasses=c(rep("integer",5),"numeric","integer",rep("numeric",8))); plot(E$t); cat(sprintf("%d: %.2fh, sum-cfs=%e, mean-t=%.3fs, mean-cfs=%.0f",length(E$t),sum(E$t)/60/60,sum(E$cfs),mean(E$t),mean(E$cfs)),"\n")


set -o errexit
set -o nounset

script_name="ProcessSplitViaOKsolver"
version_number=0.0.9

timestamp=$(date +"%Y-%m-%d-%H%M%S")

if [[ $# -eq 0 ]]; then
  echo "ERROR[${script_name}]: At least one parameter is needed, the directory to be processed."
  exit 1
fi
if [[ $# -ge 3 ]]; then
  echo -e "ERROR[${script_name}]: At most two parameters are allowed:\n - the directory to be processed\n - the already existing processing-directory."
  exit 1
fi

solver=minisat-2.2.0
extraction_tool=ExtractMinisat

directory1=$1

if [[ $# -eq 2 ]]; then
  directory2=$2
  echo "Using existing processing-directory ${directory2}."
  start=$(cat ${directory2}/current_subinstance)
else
  directory2="Process_$(basename ${directory1})_${timestamp}"
  mkdir ${directory2}
  echo "Created new processing-directory ${directory2}."
  echo "${script_name} version ${version_number}" > ${directory2}/Parameter
  echo ${directory1} >> ${directory2}/Parameter
  echo ${directory2} >> ${directory2}/Parameter
  start=1
  echo "${start}" >> ${directory2}/current_subinstance
  echo -n " i npa " > ${directory2}/SubinstanceStatistics
  ${extraction_tool} header-only >> ${directory2}/SubinstanceStatistics
fi

instance_path="${directory1}/$(cat ${directory1}/F)"

tail -n +$((start+1)) ${directory1}/Data | while read count F npa; do

  echo -n "$count "
  cat ${instance_path} | ApplyPass-O3-DNDEBUG ${directory1}/Instances/$F ${directory2}/Temp.cnf
  set +e
  ${solver} ${directory2}/Temp.cnf >${directory2}/Temp.out 2>&1
  estatus=$?
  set -e
  if [[ $estatus != 10 && $estatus != 20 ]]; then
    echo -e "\nUNEXPECTED RETURN VALUE ${estatus}."
    exit 1
  fi

  echo -n "${count} ${F} ${npa} " >> ${directory2}/SubinstanceStatistics
  cat ${directory2}/Temp.out | ${extraction_tool} data-only >> ${directory2}/SubinstanceStatistics
  if [[ $estatus == 10 ]]; then
    echo -e "\nFound a SATISFYING ASSIGNMENT."
    echo "${count} ${F}" >> ${directory2}/SatisfyingAssignments
  fi
  echo $((count+1)) > ${directory2}/current_subinstance

done

if [[ -e ${directory2}/SatisfyingAssignments ]]; then
  echo -e "\nCOMPLETED: instance SATISFIABLE; found $(cat ${directory2}/SatisfyingAssignments | wc -l) satisfiable sub-instances."
else
  echo -e "\nCOMPLETED: instance UNSATISFIABLE."
fi

exit 0
