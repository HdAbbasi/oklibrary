#!/bin/bash
# Oliver Kullmann, 26.8.2011 (Swansea)
# Copyright 2011 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the
# License, or any later version.

# Processing of a directory produced by SplitViaOKsolver.
# Two modes of usage:

# ProcessiCNF iCNF-file

# creates the experiment-directory "Process_filename_timestamp"
# (in the current directory) containing the files
#  - Log: general logging information
#  - Parameter: the version of this script, the splitviaoksolver-directory,
#    the created experiment-directory, and the solver used
#  - Environment: information on the computer environment
#  - current_subinstance: starting with 1, the index of the next sub-instance
#    to be solved
#  - F.cnf: the cnf-file for the base instance
#  - F.splitting: per line the partial assignments, in Dimacs format
#  - SubinstanceStatistics: in R-format the collected data, as produced by
#    ExtractMinisat, with a running number and npa added at the
#    front, the number of variables in the partial assignment.
#  - If a satisfiable sub-instance was found, then in file
#    SatisfyingAssignments for each satisfiable sub-instance one has a line
#    "index original-index" with the index for this processing and the index
#    w.r.t. the original creation by OKsolver.
#  - Upon completion, the file Result is created which contains whether
#    the instance was determined satisfiable or unsatisfiable, and the total
#    running time (the sum of process times for all processes involved).
# Furthermore Temp.cnf contains the instance (after application of the
# partial assignment) currently solved, Temp.out contains the solver
# output of the last solved instance, and Temp.pass contains the partial
# assignment yielding Temp.cnf.

# ProcessiCNF Process_dir

# uses the already created Process_dir (created by a previous invocation
# of that script) to continue an interrupted processing.
# For the final running time, as stored in Result, currently only the last run
# is used.

# Some general remarks:
# Currently usage of minisat-2.2.0 is hardcoded.
# Evaluation of the file SubinstanceStatistics (in R) via
# read_processsplit_minisat.
# From a directory D obtained via SplittingViaOKsolver we obtain the
# two related iCNF-files via "ExtractiCNF D" (for the complete partial
# assignments) and "ExtractDecisionsiCNF D" (now the partial assignments
# contain only the decision assignments).


set -o errexit
set -o nounset

script_name="ProcessiCNF"
version_number=0.1.1

timestamp=$(date +"%Y-%m-%d-%H%M%S")

if [[ $# -ne 1 ]]; then
  echo -e "ERROR[${script_name}]: Exactly one parameter is needed, which is:\n - either the file to be processed\n - or the already existing processing-directory."
  exit 1
fi

solver=minisat-2.2.0
extraction_tool=ExtractMinisat

trap '' INT

if [ -d $1 ]; then
  directory=$1
  echo "Using existing processing-directory ${directory}."
  cd ${directory}
  echo -n "Continuation: " >> Log
  date >> Log
  echo "Process id = $$" >> Log
  start=$(cat current_subinstance)
else
  icnf="$1"
  if [ ! -f ${icnf} ]; then
    echo "ERROR[${script_name}]: the first argument must be a file (or a directory)."
    exit 1
  fi
  directory="Process_$(basename ${icnf})_${timestamp}"
  mkdir ${directory}
  echo "Created new processing-directory ${directory}."
  cd ${directory}
  echo -n "Begin: " > Log
  date >> Log
  echo "Process id = $$" >> Log
  echo "${script_name} version ${version_number}" > Parameter
  echo ${icnf} >> Parameter
  echo "Solver: ${solver}" >> Parameter
  uname -a > Environment
  echo >> Environment
  cat /proc/cpuinfo >> Environment
  echo >> Environment
  free -m >> Environment
  start=1
  echo "${start}" >> current_subinstance
  echo -n " npa " > SubinstanceStatistics
  ${extraction_tool} header-only >> SubinstanceStatistics

  csplit --quiet ../${icnf} "/^a/"
  mv xx00 F.cnf
  tempout="$(cat F.cnf | ExtendedDimacsStatistics-O3-DNDEBUG ip | tail -n +2)"
  nmi=$(echo ${tempout} | cut -d " " -f 4)
  c=$(echo ${tempout} | cut -d " " -f 5)
  sed -e "/^p inccnf/cc ${script_name}: version ${version_number}; $(date)\\np cnf ${nmi} ${c}" -i F.cnf
  mv xx01 F.splitting
  sed -e 's/^a \(.*\)/v \1 0/' -i F.splitting
fi

count=${start}

tail -n +${start} F.splitting | while read line; do
  echo -n "$count "
  nvar=$(echo ${line} | wc -w)
  let nvar-=2
  echo ${line} > Temp.pass
  cat F.cnf | ApplyPass-O3-DNDEBUG Temp.pass Temp.cnf

  set +e
  trap - INT
  ${solver} Temp.cnf >Temp.out 2>&1
  estatus=$?
  trap '' INT
  set -e
  if [[ $estatus != 10 && $estatus != 20 ]]; then
    echo -n "ERROR: " >> Log
    date >> Log
    echo "Count=${count}" >> Log
    echo
    echo -e "UNEXPECTED RETURN VALUE ${estatus}.\n" | tee -a Log
    exit 1
  fi

  echo -n "${count} ${nvar} " >> SubinstanceStatistics
  cat Temp.out | ${extraction_tool} data-only >> SubinstanceStatistics
  if [[ $estatus == 10 ]]; then
    echo -e "\nFound a SATISFYING ASSIGNMENT."
    echo "${count} ${F}" >> SatisfyingAssignments
  fi
  let ++count
  echo ${count} > current_subinstance

done

echo -e "\nCOMPLETED; see\n ${directory}/Result\n ${directory}/SubinstanceStatistics"

if [[ -e SatisfyingAssignments ]]; then
  echo "Instance SATISFIABLE."
  echo "SATISFIABLE" > Result
  echo "Found $(cat SatisfyingAssignments | wc -l) satisfiable sub-instances." >> Result
else
  echo "Instance UNSATISFIABLE."
  echo "UNSATISFIABLE" > Result
fi
ps p $$ k time S >> Result

echo -n "Completed: " >> Log
date >> Log

exit 0
